
MPU6050_AUTOCALIBRATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  0800be48  0800be48  0001be48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cff8  0800cff8  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800cff8  0800cff8  0001cff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d000  0800d000  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800d008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000218  0800d220  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800d220  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118be  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2d  00000000  00000000  00031b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  000356f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac5c  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001515b  00000000  00000000  00051414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098d5f  00000000  00000000  0006656f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff2ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  000ff320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be30 	.word	0x0800be30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800be30 	.word	0x0800be30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <IIC_Init>:
GPIO_TypeDef * GPIO_SDA;
uint32_t GPIO_PIN_SCL;
uint32_t GPIO_PIN_SDA;

void IIC_Init(I2C_HandleTypeDef i2cHandle)
{			
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
 8001002:	f107 0c08 	add.w	ip, r7, #8
 8001006:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_handle = i2cHandle;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <IIC_Init+0x2c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2254      	movs	r2, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	f007 fa5d 	bl	80084d4 <memcpy>
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000234 	.word	0x20000234

0800102c <IIC_InitLockupRecover>:

void IIC_InitLockupRecover(GPIO_TypeDef * _GPIO_SLC, uint32_t _GPIO_PIN_SCL, GPIO_TypeDef * _GPIO_SDA, uint32_t _GPIO_PIN_SDA)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
	GPIO_SDA = _GPIO_SDA;
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <IIC_InitLockupRecover+0x34>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]
	GPIO_SCL = _GPIO_SLC;
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <IIC_InitLockupRecover+0x38>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6013      	str	r3, [r2, #0]
	GPIO_PIN_SCL = _GPIO_PIN_SCL;
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <IIC_InitLockupRecover+0x3c>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	6013      	str	r3, [r2, #0]
	GPIO_PIN_SDA = _GPIO_PIN_SDA;
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <IIC_InitLockupRecover+0x40>)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000028c 	.word	0x2000028c
 8001064:	20000288 	.word	0x20000288
 8001068:	20000290 	.word	0x20000290
 800106c:	20000294 	.word	0x20000294

08001070 <IIC_LockupRecover>:

void IIC_LockupRecover()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIO_SDA, GPIO_PIN_SDA))
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <IIC_LockupRecover+0xfc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <IIC_LockupRecover+0x100>)
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	b292      	uxth	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fada 	bl	800663c <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d169      	bne.n	8001162 <IIC_LockupRecover+0xf2>
	{
		// Lockup Recovery process
		for(int i = 0; i < IIC_GPIO_NUMBER; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e063      	b.n	800115c <IIC_LockupRecover+0xec>
		{
			if((1 << i) & GPIO_PIN_SCL)
 8001094:	2201      	movs	r2, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	461a      	mov	r2, r3
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <IIC_LockupRecover+0x104>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d056      	beq.n	8001156 <IIC_LockupRecover+0xe6>
			{
				// put the pin into output mode
				GPIO_SCL-> MODER &= ~(0b11 << 2*i);
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <IIC_LockupRecover+0x108>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <IIC_LockupRecover+0x108>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
				GPIO_SCL-> MODER |= (0b1 << 2*i);
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <IIC_LockupRecover+0x108>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <IIC_LockupRecover+0x108>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

				// inject 9 pulses to SCL
				for(int j = 0; j < 9; j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	e01a      	b.n	800111a <IIC_LockupRecover+0xaa>
				{
					HAL_GPIO_WritePin(GPIO_SCL, GPIO_PIN_SCL, RESET);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <IIC_LockupRecover+0x108>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <IIC_LockupRecover+0x104>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	b291      	uxth	r1, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fabb 	bl	800666c <HAL_GPIO_WritePin>
					delay_ms(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f004 ffe6 	bl	80060c8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIO_SCL, GPIO_PIN_SCL, SET);
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <IIC_LockupRecover+0x108>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <IIC_LockupRecover+0x104>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	b291      	uxth	r1, r2
 8001106:	2201      	movs	r2, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f005 faaf 	bl	800666c <HAL_GPIO_WritePin>
					delay_ms(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f004 ffda 	bl	80060c8 <HAL_Delay>
				for(int j = 0; j < 9; j++)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b08      	cmp	r3, #8
 800111e:	dde1      	ble.n	80010e4 <IIC_LockupRecover+0x74>
				}

				// put the pin back into AF mode
				GPIO_SCL-> MODER &= ~(0b11 << 2*i);
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <IIC_LockupRecover+0x108>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2103      	movs	r1, #3
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <IIC_LockupRecover+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
				GPIO_SCL-> MODER |= (0b10 << 2*i);
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <IIC_LockupRecover+0x108>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2102      	movs	r1, #2
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4619      	mov	r1, r3
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <IIC_LockupRecover+0x108>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < IIC_GPIO_NUMBER; i++)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3301      	adds	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	dd98      	ble.n	8001094 <IIC_LockupRecover+0x24>
			}
		}


	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000028c 	.word	0x2000028c
 8001170:	20000294 	.word	0x20000294
 8001174:	20000290 	.word	0x20000290
 8001178:	20000288 	.word	0x20000288

0800117c <i2cWrite>:
  
int i2cWrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	460b      	mov	r3, r1
 800118a:	71bb      	strb	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
    return (int)HAL_I2C_Mem_Write(&i2c_handle, addr << 1, reg, 1, data, len, I2C_TIMEOUT);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	b29b      	uxth	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b299      	uxth	r1, r3
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29a      	uxth	r2, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	9002      	str	r0, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <i2cWrite+0x44>)
 80011b0:	f005 fbba 	bl	8006928 <HAL_I2C_Mem_Write>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000234 	.word	0x20000234

080011c4 <i2cRead>:

int i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	return (int)HAL_I2C_Mem_Read(&i2c_handle, addr << 1, reg, 1, buf, len, I2C_TIMEOUT);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	9002      	str	r0, [sp, #8]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <i2cRead+0x44>)
 80011f8:	f005 fc90 	bl	8006b1c <HAL_I2C_Mem_Read>
 80011fc:	4603      	mov	r3, r0
//    return 0;
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000234 	.word	0x20000234

0800120c <I2C_ReadOneByte>:

unsigned char I2C_ReadOneByte(unsigned char I2C_Addr,unsigned char addr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
	unsigned char data;
	HAL_I2C_Mem_Read(&i2c_handle, I2C_Addr, addr, 1, &data, 1, I2C_TIMEOUT);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b299      	uxth	r1, r3
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f107 030f 	add.w	r3, r7, #15
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <I2C_ReadOneByte+0x3c>)
 8001238:	f005 fc70 	bl	8006b1c <HAL_I2C_Mem_Read>

	return data;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000234 	.word	0x20000234

0800124c <IICreadBytes>:

void IICreadBytes(u8 dev, u8 reg, u8 length, u8 *data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af04      	add	r7, sp, #16
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	b299      	uxth	r1, r3
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	797b      	ldrb	r3, [r7, #5]
 800126a:	b29b      	uxth	r3, r3
 800126c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001270:	9002      	str	r0, [sp, #8]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <IICreadBytes+0x3c>)
 800127c:	f005 fc4e 	bl	8006b1c <HAL_I2C_Mem_Read>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000234 	.word	0x20000234

0800128c <IICwriteBytes>:


u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af04      	add	r7, sp, #16
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	460b      	mov	r3, r1
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	4613      	mov	r3, r2
 800129e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	b299      	uxth	r1, r3
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	9002      	str	r0, [sp, #8]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <IICwriteBytes+0x40>)
 80012bc:	f005 fb34 	bl	8006928 <HAL_I2C_Mem_Write>
    return 1; //status == 0;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000234 	.word	0x20000234

080012d0 <IICreadByte>:

u8 IICreadByte(u8 dev, u8 reg, u8 *data){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	603a      	str	r2, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	460b      	mov	r3, r1
 80012de:	71bb      	strb	r3, [r7, #6]
	*data=I2C_ReadOneByte(dev, reg);
 80012e0:	79ba      	ldrb	r2, [r7, #6]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff90 	bl	800120c <I2C_ReadOneByte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
    return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <IICwriteByte>:

unsigned char IICwriteByte(unsigned char dev, unsigned char reg, unsigned char data){
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	460b      	mov	r3, r1
 800130a:	71bb      	strb	r3, [r7, #6]
 800130c:	4613      	mov	r3, r2
 800130e:	717b      	strb	r3, [r7, #5]
	return IICwriteBytes(dev, reg, 1, &data);
 8001310:	1d7b      	adds	r3, r7, #5
 8001312:	79b9      	ldrb	r1, [r7, #6]
 8001314:	79f8      	ldrb	r0, [r7, #7]
 8001316:	2201      	movs	r2, #1
 8001318:	f7ff ffb8 	bl	800128c <IICwriteBytes>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <IICwriteBits>:

u8 IICwriteBits(u8 dev,u8 reg,u8 bitStart,u8 length,u8 data)
{
 8001326:	b590      	push	{r4, r7, lr}
 8001328:	b085      	sub	sp, #20
 800132a:	af00      	add	r7, sp, #0
 800132c:	4604      	mov	r4, r0
 800132e:	4608      	mov	r0, r1
 8001330:	4611      	mov	r1, r2
 8001332:	461a      	mov	r2, r3
 8001334:	4623      	mov	r3, r4
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4603      	mov	r3, r0
 800133a:	71bb      	strb	r3, [r7, #6]
 800133c:	460b      	mov	r3, r1
 800133e:	717b      	strb	r3, [r7, #5]
 8001340:	4613      	mov	r3, r2
 8001342:	713b      	strb	r3, [r7, #4]
    u8 b;
    if (IICreadByte(dev, reg, &b) != 0) {
 8001344:	f107 020e 	add.w	r2, r7, #14
 8001348:	79b9      	ldrb	r1, [r7, #6]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ffbf 	bl	80012d0 <IICreadByte>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d03b      	beq.n	80013d0 <IICwriteBits+0xaa>
        u8 mask = (0xFF >> (8-length)) << (bitStart-(length-1));
 8001358:	793b      	ldrb	r3, [r7, #4]
 800135a:	f1c3 0308 	rsb	r3, r3, #8
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	411a      	asrs	r2, r3
 8001362:	7979      	ldrb	r1, [r7, #5]
 8001364:	793b      	ldrb	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	1acb      	subs	r3, r1, r3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	73fb      	strb	r3, [r7, #15]
        data &= (mask >> (bitStart-(length-1)));
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	7979      	ldrb	r1, [r7, #5]
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	1acb      	subs	r3, r1, r3
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	b25a      	sxtb	r2, r3
 8001380:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001384:	4013      	ands	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	f887 3020 	strb.w	r3, [r7, #32]
        data <<= (bitStart-(length-1));
 800138c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001390:	7979      	ldrb	r1, [r7, #5]
 8001392:	793b      	ldrb	r3, [r7, #4]
 8001394:	3b01      	subs	r3, #1
 8001396:	1acb      	subs	r3, r1, r3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~mask;
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73bb      	strb	r3, [r7, #14]
        b |= data;
 80013b4:	7bba      	ldrb	r2, [r7, #14]
 80013b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	73bb      	strb	r3, [r7, #14]
        return IICwriteByte(dev, reg, b);
 80013c0:	7bba      	ldrb	r2, [r7, #14]
 80013c2:	79b9      	ldrb	r1, [r7, #6]
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff99 	bl	80012fe <IICwriteByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	e000      	b.n	80013d2 <IICwriteBits+0xac>
    } else {
        return 0;
 80013d0:	2300      	movs	r3, #0
    }
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <IICwriteBit>:

u8 IICwriteBit(u8 dev, u8 reg, u8 bitNum, u8 data){
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4604      	mov	r4, r0
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4603      	mov	r3, r0
 80013ee:	71bb      	strb	r3, [r7, #6]
 80013f0:	460b      	mov	r3, r1
 80013f2:	717b      	strb	r3, [r7, #5]
 80013f4:	4613      	mov	r3, r2
 80013f6:	713b      	strb	r3, [r7, #4]
    u8 b;
    IICreadByte(dev, reg, &b);
 80013f8:	f107 020f 	add.w	r2, r7, #15
 80013fc:	79b9      	ldrb	r1, [r7, #6]
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff65 	bl	80012d0 <IICreadByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001406:	793b      	ldrb	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00a      	beq.n	8001422 <IICwriteBit+0x48>
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	2201      	movs	r2, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	b25a      	sxtb	r2, r3
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b25b      	sxtb	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	e00b      	b.n	800143a <IICwriteBit+0x60>
 8001422:	797b      	ldrb	r3, [r7, #5]
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	b25b      	sxtb	r3, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	b25a      	sxtb	r2, r3
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4013      	ands	r3, r2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73fb      	strb	r3, [r7, #15]
    return IICwriteByte(dev, reg, b);
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	79b9      	ldrb	r1, [r7, #6]
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff5b 	bl	80012fe <IICwriteByte>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
	...

08001454 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001458:	f3bf 8f4f 	dsb	sy
}
 800145c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <__NVIC_SystemReset+0x24>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001466:	4904      	ldr	r1, [pc, #16]	; (8001478 <__NVIC_SystemReset+0x24>)
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_SystemReset+0x28>)
 800146a:	4313      	orrs	r3, r2
 800146c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800146e:	f3bf 8f4f 	dsb	sy
}
 8001472:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <__NVIC_SystemReset+0x20>
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	05fa0004 	.word	0x05fa0004

08001480 <inv_row_2_scale>:

float MPU6050_gyroSensitivity;
float MPU6050_accSensitivity;

static  unsigned short inv_row_2_scale(const signed char *row)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f993 3000 	ldrsb.w	r3, [r3]
 800148e:	2b00      	cmp	r3, #0
 8001490:	dd02      	ble.n	8001498 <inv_row_2_scale+0x18>
        b = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	81fb      	strh	r3, [r7, #14]
 8001496:	e02d      	b.n	80014f4 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f993 3000 	ldrsb.w	r3, [r3]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da02      	bge.n	80014a8 <inv_row_2_scale+0x28>
        b = 4;
 80014a2:	2304      	movs	r3, #4
 80014a4:	81fb      	strh	r3, [r7, #14]
 80014a6:	e025      	b.n	80014f4 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	f993 3000 	ldrsb.w	r3, [r3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dd02      	ble.n	80014ba <inv_row_2_scale+0x3a>
        b = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	e01c      	b.n	80014f4 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3301      	adds	r3, #1
 80014be:	f993 3000 	ldrsb.w	r3, [r3]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da02      	bge.n	80014cc <inv_row_2_scale+0x4c>
        b = 5;
 80014c6:	2305      	movs	r3, #5
 80014c8:	81fb      	strh	r3, [r7, #14]
 80014ca:	e013      	b.n	80014f4 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3302      	adds	r3, #2
 80014d0:	f993 3000 	ldrsb.w	r3, [r3]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd02      	ble.n	80014de <inv_row_2_scale+0x5e>
        b = 2;
 80014d8:	2302      	movs	r3, #2
 80014da:	81fb      	strh	r3, [r7, #14]
 80014dc:	e00a      	b.n	80014f4 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3302      	adds	r3, #2
 80014e2:	f993 3000 	ldrsb.w	r3, [r3]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da02      	bge.n	80014f0 <inv_row_2_scale+0x70>
        b = 6;
 80014ea:	2306      	movs	r3, #6
 80014ec:	81fb      	strh	r3, [r7, #14]
 80014ee:	e001      	b.n	80014f4 <inv_row_2_scale+0x74>
    else
        b = 7;            // error
 80014f0:	2307      	movs	r3, #7
 80014f2:	81fb      	strh	r3, [r7, #14]
    return b;
 80014f4:	89fb      	ldrh	r3, [r7, #14]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffb8 	bl	8001480 <inv_row_2_scale>
 8001510:	4603      	mov	r3, r0
 8001512:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3303      	adds	r3, #3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ffb1 	bl	8001480 <inv_row_2_scale>
 800151e:	4603      	mov	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	b21a      	sxth	r2, r3
 8001524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001528:	4313      	orrs	r3, r2
 800152a:	b21b      	sxth	r3, r3
 800152c:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3306      	adds	r3, #6
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ffa4 	bl	8001480 <inv_row_2_scale>
 8001538:	4603      	mov	r3, r0
 800153a:	019b      	lsls	r3, r3, #6
 800153c:	b21a      	sxth	r2, r3
 800153e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]

    return scalar;
 8001548:	89fb      	ldrh	r3, [r7, #14]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <run_self_test>:

static void run_self_test(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b08a      	sub	sp, #40	; 0x28
 8001556:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 8001558:	f107 020c 	add.w	r2, r7, #12
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fe4a 	bl	80041fc <mpu_run_self_test>
 8001568:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0x03) {                   //����0x03ΪMPU6050
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	2b03      	cmp	r3, #3
 800156e:	d14b      	bne.n	8001608 <run_self_test+0xb6>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);			//��ȡ��ǰ�����ǵ�״̬
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fdc5 	bl	8003104 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	edd7 7a02 	vldr	s15, [r7, #8]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ac:	ee17 3a90 	vmov	r3, s15
 80015b0:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c8:	ee17 3a90 	vmov	r3, s15
 80015cc:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);			//���ݶ�ȡ��״̬����У׼
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 f970 	bl	80048b8 <dmp_set_gyro_bias>
		
        mpu_get_accel_sens(&accel_sens);	//��ȡ��ǰ���ٶȼƵ�״̬
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fdca 	bl	8003174 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	88fa      	ldrh	r2, [r7, #6]
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);			//���ݶ�ȡ��״̬����У׼
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fa62 	bl	8004acc <dmp_set_accel_bias>
		//printf("setting bias succesfully ......\r\n");
    }
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
*******************************************************************************/
void MPU6050_setClockSource(uint8_t source){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2303      	movs	r3, #3
 8001620:	2202      	movs	r2, #2
 8001622:	216b      	movs	r1, #107	; 0x6b
 8001624:	20d0      	movs	r0, #208	; 0xd0
 8001626:	f7ff fe7e 	bl	8001326 <IICwriteBits>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af02      	add	r7, sp, #8
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2302      	movs	r3, #2
 8001644:	2204      	movs	r2, #4
 8001646:	211b      	movs	r1, #27
 8001648:	20d0      	movs	r0, #208	; 0xd0
 800164a:	f7ff fe6c 	bl	8001326 <IICwriteBits>

    switch(range)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d81b      	bhi.n	800168c <MPU6050_setFullScaleGyroRange+0x58>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <MPU6050_setFullScaleGyroRange+0x28>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800166d 	.word	0x0800166d
 8001660:	08001675 	.word	0x08001675
 8001664:	0800167d 	.word	0x0800167d
 8001668:	08001685 	.word	0x08001685
    {
    	case MPU6050_GYRO_FS_250: MPU6050_gyroSensitivity = 131; break;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MPU6050_setFullScaleGyroRange+0x60>)
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <MPU6050_setFullScaleGyroRange+0x64>)
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e00b      	b.n	800168c <MPU6050_setFullScaleGyroRange+0x58>
    	case MPU6050_GYRO_FS_500: MPU6050_gyroSensitivity = 65.5; break;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MPU6050_setFullScaleGyroRange+0x60>)
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <MPU6050_setFullScaleGyroRange+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <MPU6050_setFullScaleGyroRange+0x58>
    	case MPU6050_GYRO_FS_1000: MPU6050_gyroSensitivity = 32.8; break;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <MPU6050_setFullScaleGyroRange+0x60>)
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <MPU6050_setFullScaleGyroRange+0x6c>)
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e003      	b.n	800168c <MPU6050_setFullScaleGyroRange+0x58>
    	case MPU6050_GYRO_FS_2000: MPU6050_gyroSensitivity = 16.4; break;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <MPU6050_setFullScaleGyroRange+0x60>)
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <MPU6050_setFullScaleGyroRange+0x70>)
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	bf00      	nop
    }
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002e4 	.word	0x200002e4
 8001698:	43030000 	.word	0x43030000
 800169c:	42830000 	.word	0x42830000
 80016a0:	42033333 	.word	0x42033333
 80016a4:	41833333 	.word	0x41833333

080016a8 <MPU6050_setFullScaleAccelRange>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setFullScaleAccelRange(uint8_t range)
*��������:	    ����  MPU6050 ���ٶȼƵ��������
*******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2302      	movs	r3, #2
 80016b8:	2204      	movs	r2, #4
 80016ba:	211c      	movs	r1, #28
 80016bc:	20d0      	movs	r0, #208	; 0xd0
 80016be:	f7ff fe32 	bl	8001326 <IICwriteBits>

    switch(range)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d81f      	bhi.n	8001708 <MPU6050_setFullScaleAccelRange+0x60>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <MPU6050_setFullScaleAccelRange+0x28>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	080016eb 	.word	0x080016eb
 80016d8:	080016f5 	.word	0x080016f5
 80016dc:	080016ff 	.word	0x080016ff
    {
    	case MPU6050_ACCEL_FS_2: MPU6050_accSensitivity = 16384; break;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MPU6050_setFullScaleAccelRange+0x68>)
 80016e2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e00e      	b.n	8001708 <MPU6050_setFullScaleAccelRange+0x60>
    	case MPU6050_ACCEL_FS_4: MPU6050_accSensitivity = 8192; break;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MPU6050_setFullScaleAccelRange+0x68>)
 80016ec:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e009      	b.n	8001708 <MPU6050_setFullScaleAccelRange+0x60>
    	case MPU6050_ACCEL_FS_8: MPU6050_accSensitivity = 4096; break;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MPU6050_setFullScaleAccelRange+0x68>)
 80016f6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e004      	b.n	8001708 <MPU6050_setFullScaleAccelRange+0x60>
    	case MPU6050_ACCEL_FS_16: MPU6050_accSensitivity = 2048; break;
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <MPU6050_setFullScaleAccelRange+0x68>)
 8001700:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	bf00      	nop
    }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200002e8 	.word	0x200002e8

08001714 <MPU6050_setSleepEnabled>:
*����ԭ��:		void MPU6050_setSleepEnabled(uint8_t enabled)
*��������:	    ����  MPU6050 �Ƿ����˯��ģʽ
				enabled =1   ˯��
			    enabled =0   ����
*******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2206      	movs	r2, #6
 8001722:	216b      	movs	r1, #107	; 0x6b
 8001724:	20d0      	movs	r0, #208	; 0xd0
 8001726:	f7ff fe58 	bl	80013da <IICwriteBit>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <MPU6050_setI2CMasterModeEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2205      	movs	r2, #5
 8001740:	216a      	movs	r1, #106	; 0x6a
 8001742:	20d0      	movs	r0, #208	; 0xd0
 8001744:	f7ff fe49 	bl	80013da <IICwriteBit>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MPU6050_setI2CBypassEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2201      	movs	r2, #1
 800175e:	2137      	movs	r1, #55	; 0x37
 8001760:	20d0      	movs	r0, #208	; 0xd0
 8001762:	f7ff fe3a 	bl	80013da <IICwriteBit>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <MPU6050_initialize>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_initialize(void)
*��������:	    ��ʼ�� 	MPU6050 �Խ������״̬��
*******************************************************************************/
void MPU6050_initialize(void) {
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 8001774:	2300      	movs	r3, #0
 8001776:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2201      	movs	r2, #1
 8001780:	2175      	movs	r1, #117	; 0x75
 8001782:	2068      	movs	r0, #104	; 0x68
 8001784:	f7ff fd1e 	bl	80011c4 <i2cRead>
	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2201      	movs	r2, #1
 800178c:	2175      	movs	r1, #117	; 0x75
 800178e:	2068      	movs	r0, #104	; 0x68
 8001790:	f7ff fd18 	bl	80011c4 <i2cRead>
		retry++;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b64      	cmp	r3, #100	; 0x64
 800179e:	d901      	bls.n	80017a4 <MPU6050_initialize+0x36>
 80017a0:	f7ff fe58 	bl	8001454 <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 80017a4:	793b      	ldrb	r3, [r7, #4]
 80017a6:	2b68      	cmp	r3, #104	; 0x68
 80017a8:	d1ee      	bne.n	8001788 <MPU6050_initialize+0x1a>

	MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff ff30 	bl	8001610 <MPU6050_setClockSource>
	MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f7ff ff3f 	bl	8001634 <MPU6050_setFullScaleGyroRange>
	MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff ff76 	bl	80016a8 <MPU6050_setFullScaleAccelRange>
	MPU6050_setSleepEnabled(0);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ffa9 	bl	8001714 <MPU6050_setSleepEnabled>
	MPU6050_setI2CMasterModeEnabled(0);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff ffb5 	bl	8001732 <MPU6050_setI2CMasterModeEnabled>
	MPU6050_setI2CBypassEnabled(0);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff ffc1 	bl	8001750 <MPU6050_setI2CBypassEnabled>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <MPU6050_DMPInit>:
�������ܣ�MPU6050����DMP�ĳ�ʼ��
��ڲ�������
����  ֵ����
**************************************************************************/
void MPU6050_DMPInit(void)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 80017de:	2300      	movs	r3, #0
 80017e0:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	2175      	movs	r1, #117	; 0x75
 80017ec:	2068      	movs	r0, #104	; 0x68
 80017ee:	f7ff fce9 	bl	80011c4 <i2cRead>
//	printf("%d\n", temp[0]);

	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2201      	movs	r2, #1
 80017f6:	2175      	movs	r1, #117	; 0x75
 80017f8:	2068      	movs	r0, #104	; 0x68
 80017fa:	f7ff fce3 	bl	80011c4 <i2cRead>
		retry++;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	3301      	adds	r3, #1
 8001802:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <MPU6050_DMPInit+0x36>
 800180a:	f7ff fe23 	bl	8001454 <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	2b68      	cmp	r3, #104	; 0x68
 8001812:	d1ee      	bne.n	80017f2 <MPU6050_DMPInit+0x1a>

	delay_ms(100);
 8001814:	2064      	movs	r0, #100	; 0x64
 8001816:	f004 fc57 	bl	80060c8 <HAL_Delay>
//	if(temp[0]!=0x68)NVIC_SystemReset();
	if(!mpu_init())
 800181a:	f000 ffc1 	bl	80027a0 <mpu_init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11d      	bne.n	8001860 <MPU6050_DMPInit+0x88>
	{
//		printf("mpu_setting_sensor.....\r\n");
		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f001 fd47 	bl	80032b8 <mpu_set_sensors>
		{
//			printf("mpu_set_sensor complete ......\r\n");
		}
//		printf("mpu configure fifo........\r\n");
		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 800182a:	2078      	movs	r0, #120	; 0x78
 800182c:	f001 fcf2 	bl	8003214 <mpu_configure_fifo>
		{
//			printf("mpu_configure_fifo complete ......\r\n");
		}
//		printf("mpu setting sample rate......\r\n");
		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 8001830:	20c8      	movs	r0, #200	; 0xc8
 8001832:	f001 fc01 	bl	8003038 <mpu_set_sample_rate>
		{
//			printf("mpu_set_sample_rate complete ......\r\n");
		}
//		printf("loading firmware......\r\n");
		if(!dmp_load_motion_driver_firmware())
 8001836:	f002 ff43 	bl	80046c0 <dmp_load_motion_driver_firmware>
		{
//			printf("dmp_load_motion_driver_firmware complete ......\r\n");
		}
//		printf("setting orientation.....\r\n");
		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <MPU6050_DMPInit+0x9c>)
 800183c:	f7ff fe61 	bl	8001502 <inv_orientation_matrix_to_scalar>
 8001840:	4603      	mov	r3, r0
 8001842:	4618      	mov	r0, r3
 8001844:	f002 ff4c 	bl	80046e0 <dmp_set_orientation>
		{
//			printf("dmp set_orientation complete ......\r\n");
		}
//		printf("enabling dmp features ......\r\n");
		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 8001848:	f240 1073 	movw	r0, #371	; 0x173
 800184c:	f003 fcca 	bl	80051e4 <dmp_enable_feature>
		DMP_FEATURE_GYRO_CAL))
		{
//			printf("dmp_enable_feature complete ......\r\n");
		}
//		printf("dmp setting fifo rate ......\r\n");
		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 8001850:	20c8      	movs	r0, #200	; 0xc8
 8001852:	f003 fa3d 	bl	8004cd0 <dmp_set_fifo_rate>
		{
//			printf("dmp_set_fifo_rate complete ......\r\n");
		}
		run_self_test();
 8001856:	f7ff fe7c 	bl	8001552 <run_self_test>
//		printf("setting dmp state.....\r\n");
		if(!mpu_set_dmp_state(1))
 800185a:	2001      	movs	r0, #1
 800185c:	f002 fec4 	bl	80045e8 <mpu_set_dmp_state>
		{
//			printf("mpu_set_dmp_state complete ......\r\n");
		}
	}

	MPU6050_setZeroMotionDetectionThreshold(1); //set this value to make it very sensitive to movement
 8001860:	2001      	movs	r0, #1
 8001862:	f000 fb53 	bl	8001f0c <MPU6050_setZeroMotionDetectionThreshold>
	MPU6050_setZeroMotionDetectionDuration(50); //make it as fast as possible detect if the sensor has no movement
 8001866:	2032      	movs	r0, #50	; 0x32
 8001868:	f000 fb6e 	bl	8001f48 <MPU6050_setZeroMotionDetectionDuration>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000004 	.word	0x20000004

08001878 <MPU6050_readDMP>:
/**************************************************************************
The output of this function will return to MPU6050_Pitch, MPU6050_Roll, MPU6050_Yaw
**************************************************************************/
int MPU6050_readDMP(void)
{	
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af02      	add	r7, sp, #8
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	float pitch, roll, yaw;

	if(dmp_read_fifo(MPU6050_gyroRAW, MPU6050_accelRAW, quat, &sensor_timestamp, &sensors, &more))
 800187e:	f107 0118 	add.w	r1, r7, #24
 8001882:	1d3a      	adds	r2, r7, #4
 8001884:	f107 0317 	add.w	r3, r7, #23
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MPU6050_readDMP+0x2c>)
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	460b      	mov	r3, r1
 8001890:	4905      	ldr	r1, [pc, #20]	; (80018a8 <MPU6050_readDMP+0x30>)
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MPU6050_readDMP+0x34>)
 8001894:	f003 fe90 	bl	80055b8 <dmp_read_fifo>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <MPU6050_readDMP+0x38>
		return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a2:	e1df      	b.n	8001c64 <MPU6050_readDMP+0x3ec>
 80018a4:	200002a6 	.word	0x200002a6
 80018a8:	200002a0 	.word	0x200002a0
 80018ac:	20000298 	.word	0x20000298

	if (sensors & INV_WXYZ_QUAT )
 80018b0:	4bd9      	ldr	r3, [pc, #868]	; (8001c18 <MPU6050_readDMP+0x3a0>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 81d0 	beq.w	8001c62 <MPU6050_readDMP+0x3ea>
	{    
		 q0=quat[0] / q30;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	eddf 6ad3 	vldr	s13, [pc, #844]	; 8001c1c <MPU6050_readDMP+0x3a4>
 80018d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d4:	4bd2      	ldr	r3, [pc, #840]	; (8001c20 <MPU6050_readDMP+0x3a8>)
 80018d6:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e4:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001c1c <MPU6050_readDMP+0x3a4>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	4bcd      	ldr	r3, [pc, #820]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	eddf 6ac7 	vldr	s13, [pc, #796]	; 8001c1c <MPU6050_readDMP+0x3a4>
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	4bc8      	ldr	r3, [pc, #800]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 8001906:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001914:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8001c1c <MPU6050_readDMP+0x3a4>
 8001918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191c:	4bc3      	ldr	r3, [pc, #780]	; (8001c2c <MPU6050_readDMP+0x3b4>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
		 pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;
 8001922:	4bc0      	ldr	r3, [pc, #768]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800192c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001930:	4bbe      	ldr	r3, [pc, #760]	; (8001c2c <MPU6050_readDMP+0x3b4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193a:	4bb9      	ldr	r3, [pc, #740]	; (8001c20 <MPU6050_readDMP+0x3a8>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001944:	4bb8      	ldr	r3, [pc, #736]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001952:	ee17 0a90 	vmov	r0, s15
 8001956:	f7fe fdff 	bl	8000558 <__aeabi_f2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	ec43 2b10 	vmov	d0, r2, r3
 8001962:	f009 fba7 	bl	800b0b4 <asin>
 8001966:	ec51 0b10 	vmov	r0, r1, d0
 800196a:	a3a7      	add	r3, pc, #668	; (adr r3, 8001c08 <MPU6050_readDMP+0x390>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe4a 	bl	8000608 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f91c 	bl	8000bb8 <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
		 roll= atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;
 8001984:	4ba8      	ldr	r3, [pc, #672]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800198e:	4ba7      	ldr	r3, [pc, #668]	; (8001c2c <MPU6050_readDMP+0x3b4>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001998:	4ba1      	ldr	r3, [pc, #644]	; (8001c20 <MPU6050_readDMP+0x3a8>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019a2:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	ee17 0a90 	vmov	r0, s15
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	4b99      	ldr	r3, [pc, #612]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80019c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ca:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	4b94      	ldr	r3, [pc, #592]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019de:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019f4:	ee17 0a90 	vmov	r0, s15
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	ec43 2b11 	vmov	d1, r2, r3
 8001a04:	ec45 4b10 	vmov	d0, r4, r5
 8001a08:	f009 fb88 	bl	800b11c <atan2>
 8001a0c:	ec51 0b10 	vmov	r0, r1, d0
 8001a10:	a37d      	add	r3, pc, #500	; (adr r3, 8001c08 <MPU6050_readDMP+0x390>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fdf7 	bl	8000608 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff f8c9 	bl	8000bb8 <__aeabi_d2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	623b      	str	r3, [r7, #32]
		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 8001a2a:	4b7e      	ldr	r3, [pc, #504]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3a:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <MPU6050_readDMP+0x3a8>)
 8001a3c:	edd3 6a00 	vldr	s13, [r3]
 8001a40:	4b7a      	ldr	r3, [pc, #488]	; (8001c2c <MPU6050_readDMP+0x3b4>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a52:	ee17 0a90 	vmov	r0, s15
 8001a56:	f7fe fd7f 	bl	8000558 <__aeabi_f2d>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <MPU6050_readDMP+0x3a8>)
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	4b6e      	ldr	r3, [pc, #440]	; (8001c20 <MPU6050_readDMP+0x3a8>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 8001a70:	edd3 6a00 	vldr	s13, [r3]
 8001a74:	4b6b      	ldr	r3, [pc, #428]	; (8001c24 <MPU6050_readDMP+0x3ac>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a82:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 8001a84:	edd3 6a00 	vldr	s13, [r3]
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <MPU6050_readDMP+0x3b0>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a96:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <MPU6050_readDMP+0x3b4>)
 8001a98:	edd3 6a00 	vldr	s13, [r3]
 8001a9c:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <MPU6050_readDMP+0x3b4>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aaa:	ee17 0a90 	vmov	r0, s15
 8001aae:	f7fe fd53 	bl	8000558 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	ec43 2b11 	vmov	d1, r2, r3
 8001aba:	ec45 4b10 	vmov	d0, r4, r5
 8001abe:	f009 fb2d 	bl	800b11c <atan2>
 8001ac2:	ec51 0b10 	vmov	r0, r1, d0
 8001ac6:	a350      	add	r3, pc, #320	; (adr r3, 8001c08 <MPU6050_readDMP+0x390>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fd9c 	bl	8000608 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f86e 	bl	8000bb8 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	61fb      	str	r3, [r7, #28]

		 MPU6050_PitchUncorected = pitch;
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <MPU6050_readDMP+0x3b8>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	6013      	str	r3, [r2, #0]
		 MPU6050_RollUncorected = roll;
 8001ae6:	4a53      	ldr	r2, [pc, #332]	; (8001c34 <MPU6050_readDMP+0x3bc>)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	6013      	str	r3, [r2, #0]
		 MPU6050_YawUncorected = yaw;
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <MPU6050_readDMP+0x3c0>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	6013      	str	r3, [r2, #0]

		 pitch += MPU6050_PitchCorrector;
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <MPU6050_readDMP+0x3c4>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		 pitch = fmod(pitch, 360);
 8001b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b06:	f7fe fd27 	bl	8000558 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001c10 <MPU6050_readDMP+0x398>
 8001b12:	ec43 2b10 	vmov	d0, r2, r3
 8001b16:	f009 fb03 	bl	800b120 <fmod>
 8001b1a:	ec53 2b10 	vmov	r2, r3, d0
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f849 	bl	8000bb8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
		 if(pitch > 180) pitch -= 360;
 8001b2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b2e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001c40 <MPU6050_readDMP+0x3c8>
 8001b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	dd07      	ble.n	8001b4c <MPU6050_readDMP+0x2d4>
 8001b3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b40:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c44 <MPU6050_readDMP+0x3cc>
 8001b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		 roll += MPU6050_RollCorrector;
 8001b4c:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <MPU6050_readDMP+0x3d0>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	edc7 7a08 	vstr	s15, [r7, #32]
		 roll = fmod(roll, 360);
 8001b5e:	6a38      	ldr	r0, [r7, #32]
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001c10 <MPU6050_readDMP+0x398>
 8001b6c:	ec43 2b10 	vmov	d0, r2, r3
 8001b70:	f009 fad6 	bl	800b120 <fmod>
 8001b74:	ec53 2b10 	vmov	r2, r3, d0
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f81c 	bl	8000bb8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	623b      	str	r3, [r7, #32]
		 if(roll > 180) roll -= 360;
 8001b84:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b88:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001c40 <MPU6050_readDMP+0x3c8>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	dd07      	ble.n	8001ba6 <MPU6050_readDMP+0x32e>
 8001b96:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b9a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001c44 <MPU6050_readDMP+0x3cc>
 8001b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ba2:	edc7 7a08 	vstr	s15, [r7, #32]

		 yaw += MPU6050_YawCorrector;
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <MPU6050_readDMP+0x3d4>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	edc7 7a07 	vstr	s15, [r7, #28]
		 yaw = fmod(yaw,360);
 8001bb8:	69f8      	ldr	r0, [r7, #28]
 8001bba:	f7fe fccd 	bl	8000558 <__aeabi_f2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001c10 <MPU6050_readDMP+0x398>
 8001bc6:	ec43 2b10 	vmov	d0, r2, r3
 8001bca:	f009 faa9 	bl	800b120 <fmod>
 8001bce:	ec53 2b10 	vmov	r2, r3, d0
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ffef 	bl	8000bb8 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	61fb      	str	r3, [r7, #28]
		 if(yaw > 180) yaw -= 360;
 8001bde:	edd7 7a07 	vldr	s15, [r7, #28]
 8001be2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c40 <MPU6050_readDMP+0x3c8>
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	dd2f      	ble.n	8001c50 <MPU6050_readDMP+0x3d8>
 8001bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bf4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c44 <MPU6050_readDMP+0x3cc>
 8001bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bfc:	edc7 7a07 	vstr	s15, [r7, #28]
 8001c00:	e026      	b.n	8001c50 <MPU6050_readDMP+0x3d8>
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	66666666 	.word	0x66666666
 8001c0c:	404ca666 	.word	0x404ca666
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40768000 	.word	0x40768000
 8001c18:	200002a6 	.word	0x200002a6
 8001c1c:	4e800000 	.word	0x4e800000
 8001c20:	20000000 	.word	0x20000000
 8001c24:	200002d8 	.word	0x200002d8
 8001c28:	200002dc 	.word	0x200002dc
 8001c2c:	200002e0 	.word	0x200002e0
 8001c30:	200002b4 	.word	0x200002b4
 8001c34:	200002b8 	.word	0x200002b8
 8001c38:	200002bc 	.word	0x200002bc
 8001c3c:	200002cc 	.word	0x200002cc
 8001c40:	43340000 	.word	0x43340000
 8001c44:	43b40000 	.word	0x43b40000
 8001c48:	200002d0 	.word	0x200002d0
 8001c4c:	200002d4 	.word	0x200002d4

		 MPU6050_Pitch = pitch;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <MPU6050_readDMP+0x3f4>)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	6013      	str	r3, [r2, #0]
		 MPU6050_Roll = roll;
 8001c56:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <MPU6050_readDMP+0x3f8>)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	6013      	str	r3, [r2, #0]
		 MPU6050_Yaw = yaw;
 8001c5c:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <MPU6050_readDMP+0x3fc>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	6013      	str	r3, [r2, #0]
	}

	return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6c:	200002a8 	.word	0x200002a8
 8001c70:	200002ac 	.word	0x200002ac
 8001c74:	200002b0 	.word	0x200002b0

08001c78 <MPU6050_readDMPYaw>:

	return MPU6050_Roll;
}

float MPU6050_readDMPYaw()
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af02      	add	r7, sp, #8

//	do
//	{
//		dmp_read_fifo(MPU6050_gyroRAW, MPU6050_accelRAW, quat, &sensor_timestamp, &sensors, &more);
//	}while(more);
	dmp_read_fifo(MPU6050_gyroRAW, MPU6050_accelRAW, quat, &sensor_timestamp, &sensors, &more);
 8001c7e:	f107 0118 	add.w	r1, r7, #24
 8001c82:	1d3a      	adds	r2, r7, #4
 8001c84:	f107 0317 	add.w	r3, r7, #23
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <MPU6050_readDMPYaw+0x1d8>)
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4970      	ldr	r1, [pc, #448]	; (8001e54 <MPU6050_readDMPYaw+0x1dc>)
 8001c92:	4871      	ldr	r0, [pc, #452]	; (8001e58 <MPU6050_readDMPYaw+0x1e0>)
 8001c94:	f003 fc90 	bl	80055b8 <dmp_read_fifo>
	if (sensors & INV_WXYZ_QUAT )
 8001c98:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <MPU6050_readDMPYaw+0x1d8>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80bf 	beq.w	8001e28 <MPU6050_readDMPYaw+0x1b0>
	{
		 q0=quat[0] / q30;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb4:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001e5c <MPU6050_readDMPYaw+0x1e4>
 8001cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <MPU6050_readDMPYaw+0x1e8>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ccc:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001e5c <MPU6050_readDMPYaw+0x1e4>
 8001cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <MPU6050_readDMPYaw+0x1ec>)
 8001cd6:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001e5c <MPU6050_readDMPYaw+0x1e4>
 8001ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cec:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <MPU6050_readDMPYaw+0x1f0>)
 8001cee:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cfc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001e5c <MPU6050_readDMPYaw+0x1e4>
 8001d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <MPU6050_readDMPYaw+0x1f4>)
 8001d06:	edc3 7a00 	vstr	s15, [r3]

		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 8001d0a:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <MPU6050_readDMPYaw+0x1ec>)
 8001d0c:	ed93 7a00 	vldr	s14, [r3]
 8001d10:	4b55      	ldr	r3, [pc, #340]	; (8001e68 <MPU6050_readDMPYaw+0x1f0>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <MPU6050_readDMPYaw+0x1e8>)
 8001d1c:	edd3 6a00 	vldr	s13, [r3]
 8001d20:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <MPU6050_readDMPYaw+0x1f4>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d32:	ee17 0a90 	vmov	r0, s15
 8001d36:	f7fe fc0f 	bl	8000558 <__aeabi_f2d>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <MPU6050_readDMPYaw+0x1e8>)
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <MPU6050_readDMPYaw+0x1e8>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4e:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <MPU6050_readDMPYaw+0x1ec>)
 8001d50:	edd3 6a00 	vldr	s13, [r3]
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <MPU6050_readDMPYaw+0x1ec>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <MPU6050_readDMPYaw+0x1f0>)
 8001d64:	edd3 6a00 	vldr	s13, [r3]
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <MPU6050_readDMPYaw+0x1f0>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <MPU6050_readDMPYaw+0x1f4>)
 8001d78:	edd3 6a00 	vldr	s13, [r3]
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <MPU6050_readDMPYaw+0x1f4>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	ee17 0a90 	vmov	r0, s15
 8001d8e:	f7fe fbe3 	bl	8000558 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	ec43 2b11 	vmov	d1, r2, r3
 8001d9a:	ec45 4b10 	vmov	d0, r4, r5
 8001d9e:	f009 f9bd 	bl	800b11c <atan2>
 8001da2:	ec51 0b10 	vmov	r0, r1, d0
 8001da6:	a326      	add	r3, pc, #152	; (adr r3, 8001e40 <MPU6050_readDMPYaw+0x1c8>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fc2c 	bl	8000608 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fefe 	bl	8000bb8 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	61fb      	str	r3, [r7, #28]

		 MPU6050_YawUncorected = yaw;
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <MPU6050_readDMPYaw+0x1f8>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	6013      	str	r3, [r2, #0]

		 yaw += MPU6050_YawCorrector;
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <MPU6050_readDMPYaw+0x1fc>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd4:	edc7 7a07 	vstr	s15, [r7, #28]
		 yaw = fmod(yaw, 360);
 8001dd8:	69f8      	ldr	r0, [r7, #28]
 8001dda:	f7fe fbbd 	bl	8000558 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001e48 <MPU6050_readDMPYaw+0x1d0>
 8001de6:	ec43 2b10 	vmov	d0, r2, r3
 8001dea:	f009 f999 	bl	800b120 <fmod>
 8001dee:	ec53 2b10 	vmov	r2, r3, d0
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fedf 	bl	8000bb8 <__aeabi_d2f>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	61fb      	str	r3, [r7, #28]
		 if(yaw > 180) yaw -= 360;
 8001dfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e02:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001e78 <MPU6050_readDMPYaw+0x200>
 8001e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	dd07      	ble.n	8001e20 <MPU6050_readDMPYaw+0x1a8>
 8001e10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001e7c <MPU6050_readDMPYaw+0x204>
 8001e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e1c:	edc7 7a07 	vstr	s15, [r7, #28]
		 MPU6050_Yaw = yaw;
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <MPU6050_readDMPYaw+0x208>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e002      	b.n	8001e2e <MPU6050_readDMPYaw+0x1b6>
	}
	else printf("skip...\n");
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MPU6050_readDMPYaw+0x20c>)
 8001e2a:	f007 f859 	bl	8008ee0 <puts>

	return MPU6050_Yaw;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MPU6050_readDMPYaw+0x208>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	ee07 3a90 	vmov	s15, r3
}
 8001e36:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e40:	66666666 	.word	0x66666666
 8001e44:	404ca666 	.word	0x404ca666
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40768000 	.word	0x40768000
 8001e50:	200002a6 	.word	0x200002a6
 8001e54:	200002a0 	.word	0x200002a0
 8001e58:	20000298 	.word	0x20000298
 8001e5c:	4e800000 	.word	0x4e800000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	200002d8 	.word	0x200002d8
 8001e68:	200002dc 	.word	0x200002dc
 8001e6c:	200002e0 	.word	0x200002e0
 8001e70:	200002bc 	.word	0x200002bc
 8001e74:	200002d4 	.word	0x200002d4
 8001e78:	43340000 	.word	0x43340000
 8001e7c:	43b40000 	.word	0x43b40000
 8001e80:	200002b0 	.word	0x200002b0
 8001e84:	0800be48 	.word	0x0800be48

08001e88 <MPU6050_updateAngleCorrector>:
{
	MPU6050_YawCorrectorRate = yawCorrectorRate;
}

void MPU6050_updateAngleCorrector(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
	MPU6050_PitchCorrector += MPU6050_PitchCorrectorRate;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <MPU6050_updateAngleCorrector+0x50>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MPU6050_updateAngleCorrector+0x54>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MPU6050_updateAngleCorrector+0x50>)
 8001e9e:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_RollCorrector += MPU6050_RollCorrectorRate;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MPU6050_updateAngleCorrector+0x58>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MPU6050_updateAngleCorrector+0x5c>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MPU6050_updateAngleCorrector+0x58>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_YawCorrector += MPU6050_YawCorrectorRate;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MPU6050_updateAngleCorrector+0x60>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MPU6050_updateAngleCorrector+0x64>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MPU6050_updateAngleCorrector+0x60>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	200002cc 	.word	0x200002cc
 8001edc:	200002c0 	.word	0x200002c0
 8001ee0:	200002d0 	.word	0x200002d0
 8001ee4:	200002c4 	.word	0x200002c4
 8001ee8:	200002d4 	.word	0x200002d4
 8001eec:	200002c8 	.word	0x200002c8

08001ef0 <MPU6050_getZeroMotionDetectionThreshold>:
		acc[i] = (float)MPU6050_accelRAW[i] / MPU6050_accSensitivity;
	}
}

uint8_t MPU6050_getZeroMotionDetectionThreshold()
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	IICreadBytes(devAddr, MPU6050_RA_ZRMOT_THR, 1, buffer);
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <MPU6050_getZeroMotionDetectionThreshold+0x18>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2121      	movs	r1, #33	; 0x21
 8001efa:	20d0      	movs	r0, #208	; 0xd0
 8001efc:	f7ff f9a6 	bl	800124c <IICreadBytes>
	return buffer[0];
 8001f00:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <MPU6050_getZeroMotionDetectionThreshold+0x18>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200002ec 	.word	0x200002ec

08001f0c <MPU6050_setZeroMotionDetectionThreshold>:
void MPU6050_setZeroMotionDetectionThreshold(unsigned char threshold)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
	IICwriteByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2121      	movs	r1, #33	; 0x21
 8001f1c:	20d0      	movs	r0, #208	; 0xd0
 8001f1e:	f7ff f9ee 	bl	80012fe <IICwriteByte>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <MPU6050_getZeroMotionDetectionDuration>:
uint8_t MPU6050_getZeroMotionDetectionDuration()
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	IICreadBytes(devAddr, MPU6050_RA_ZRMOT_DUR, 1, buffer);
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <MPU6050_getZeroMotionDetectionDuration+0x18>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	2122      	movs	r1, #34	; 0x22
 8001f36:	20d0      	movs	r0, #208	; 0xd0
 8001f38:	f7ff f988 	bl	800124c <IICreadBytes>
	return buffer[0];
 8001f3c:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <MPU6050_getZeroMotionDetectionDuration+0x18>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200002ec 	.word	0x200002ec

08001f48 <MPU6050_setZeroMotionDetectionDuration>:
void MPU6050_setZeroMotionDetectionDuration(unsigned char duration)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	IICwriteByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2122      	movs	r1, #34	; 0x22
 8001f58:	20d0      	movs	r0, #208	; 0xd0
 8001f5a:	f7ff f9d0 	bl	80012fe <IICwriteByte>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <MPU6050_getMotionStatus>:
uint8_t MPU6050_getMotionStatus()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	IICreadBytes(devAddr, MPU6050_RA_MOT_DETECT_STATUS, 1, buffer);
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <MPU6050_getMotionStatus+0x18>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2161      	movs	r1, #97	; 0x61
 8001f72:	20d0      	movs	r0, #208	; 0xd0
 8001f74:	f7ff f96a 	bl	800124c <IICreadBytes>
	return buffer[0];
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <MPU6050_getMotionStatus+0x18>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200002ec 	.word	0x200002ec

08001f84 <MPU6050_getXGyroOffset>:

int16_t MPU6050_getXGyroOffset() {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    IICreadBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MPU6050_getXGyroOffset+0x28>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	2113      	movs	r1, #19
 8001f8e:	20d0      	movs	r0, #208	; 0xd0
 8001f90:	f7ff f95c 	bl	800124c <IICreadBytes>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <MPU6050_getXGyroOffset+0x28>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <MPU6050_getXGyroOffset+0x28>)
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002ec 	.word	0x200002ec

08001fb0 <MPU6050_setXGyroOffset>:
void MPU6050_setXGyroOffset(int16_t offset) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
	u8 buffer[] = {offset>>8 & 0xff, offset & 0xff};
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	121b      	asrs	r3, r3, #8
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	733b      	strb	r3, [r7, #12]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	737b      	strb	r3, [r7, #13]
    IICwriteBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	2113      	movs	r1, #19
 8001fd4:	20d0      	movs	r0, #208	; 0xd0
 8001fd6:	f7ff f959 	bl	800128c <IICwriteBytes>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <MPU6050_getYGyroOffset>:

// YG_OFFS_USR* register

int16_t MPU6050_getYGyroOffset() {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    IICreadBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <MPU6050_getYGyroOffset+0x28>)
 8001fea:	2202      	movs	r2, #2
 8001fec:	2115      	movs	r1, #21
 8001fee:	20d0      	movs	r0, #208	; 0xd0
 8001ff0:	f7ff f92c 	bl	800124c <IICreadBytes>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <MPU6050_getYGyroOffset+0x28>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <MPU6050_getYGyroOffset+0x28>)
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	b21b      	sxth	r3, r3
 8002002:	4313      	orrs	r3, r2
 8002004:	b21b      	sxth	r3, r3
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200002ec 	.word	0x200002ec

08002010 <MPU6050_setYGyroOffset>:
void MPU6050_setYGyroOffset(int16_t offset) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
	u8 buffer[] = {offset>>8 & 0xff, offset & 0xff};
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	121b      	asrs	r3, r3, #8
 8002020:	b21b      	sxth	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	737b      	strb	r3, [r7, #13]
    IICwriteBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2202      	movs	r2, #2
 8002032:	2115      	movs	r1, #21
 8002034:	20d0      	movs	r0, #208	; 0xd0
 8002036:	f7ff f929 	bl	800128c <IICwriteBytes>
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <MPU6050_getZGyroOffset>:

// ZG_OFFS_USR* register

int16_t MPU6050_getZGyroOffset() {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    IICreadBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <MPU6050_getZGyroOffset+0x28>)
 800204a:	2202      	movs	r2, #2
 800204c:	2117      	movs	r1, #23
 800204e:	20d0      	movs	r0, #208	; 0xd0
 8002050:	f7ff f8fc 	bl	800124c <IICreadBytes>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <MPU6050_getZGyroOffset+0x28>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <MPU6050_getZGyroOffset+0x28>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200002ec 	.word	0x200002ec

08002070 <MPU6050_setZGyroOffset>:
void MPU6050_setZGyroOffset(int16_t offset) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
	u8 buffer[] = {offset>>8 & 0xff, offset & 0xff};
 800207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207e:	121b      	asrs	r3, r3, #8
 8002080:	b21b      	sxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	733b      	strb	r3, [r7, #12]
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	737b      	strb	r3, [r7, #13]
    IICwriteBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2202      	movs	r2, #2
 8002092:	2117      	movs	r1, #23
 8002094:	20d0      	movs	r0, #208	; 0xd0
 8002096:	f7ff f8f9 	bl	800128c <IICwriteBytes>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <MPU6050_getAllGyroOffset>:

void MPU6050_getAllGyroOffset(int16_t* gyroOffset)
{
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	gyroOffset[0] = MPU6050_getXGyroOffset();
 80020aa:	f7ff ff6b 	bl	8001f84 <MPU6050_getXGyroOffset>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	801a      	strh	r2, [r3, #0]
	gyroOffset[1] = MPU6050_getYGyroOffset();
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	1c9c      	adds	r4, r3, #2
 80020ba:	f7ff ff93 	bl	8001fe4 <MPU6050_getYGyroOffset>
 80020be:	4603      	mov	r3, r0
 80020c0:	8023      	strh	r3, [r4, #0]
	gyroOffset[2] = MPU6050_getZGyroOffset();
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	1d1c      	adds	r4, r3, #4
 80020c6:	f7ff ffbd 	bl	8002044 <MPU6050_getZGyroOffset>
 80020ca:	4603      	mov	r3, r0
 80020cc:	8023      	strh	r3, [r4, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}

080020d6 <MPU6050_setAllGyroOffset>:

void MPU6050_setAllGyroOffset(int16_t* gyroOffset)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	MPU6050_setXGyroOffset(gyroOffset[0]);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff63 	bl	8001fb0 <MPU6050_setXGyroOffset>
	MPU6050_setYGyroOffset(gyroOffset[1]);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3302      	adds	r3, #2
 80020ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff8c 	bl	8002010 <MPU6050_setYGyroOffset>
	MPU6050_setZGyroOffset(gyroOffset[2]);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ffb5 	bl	8002070 <MPU6050_setZGyroOffset>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <MPU6050_GyroCalibration>:

void MPU6050_GyroCalibration(int loop)
{
 8002110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002114:	b0ac      	sub	sp, #176	; 0xb0
 8002116:	af0a      	add	r7, sp, #40	; 0x28
 8002118:	60f8      	str	r0, [r7, #12]
	short gyroOffset[3];
	float gyroOffsetF[3];
	float kp, ki, kd;
	float P[3]={0};
 800211a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
	float I[3]={0};
 8002126:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
	float D[3]={0};
 8002132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
	float error[3];
	float lastError[3];
	float maxI = 1.0;
 800213e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002142:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexMonitor = 2;
 8002144:	2302      	movs	r3, #2
 8002146:	677b      	str	r3, [r7, #116]	; 0x74

	kp = 0.1;
 8002148:	4bb1      	ldr	r3, [pc, #708]	; (8002410 <MPU6050_GyroCalibration+0x300>)
 800214a:	673b      	str	r3, [r7, #112]	; 0x70
	ki = 2;
 800214c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
	kd = 0.0001;
 8002152:	4bb0      	ldr	r3, [pc, #704]	; (8002414 <MPU6050_GyroCalibration+0x304>)
 8002154:	66bb      	str	r3, [r7, #104]	; 0x68
	/************** FIRST STEP CALIBRATION **********/
	MPU6050_getAllGyroOffset(gyroOffset);
 8002156:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ffa1 	bl	80020a2 <MPU6050_getAllGyroOffset>
	for(int i =0; i < 3; i++) gyroOffsetF[i] = gyroOffset[i];
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002166:	e01b      	b.n	80021a0 <MPU6050_GyroCalibration+0x90>
 8002168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	3380      	adds	r3, #128	; 0x80
 8002170:	f107 0208 	add.w	r2, r7, #8
 8002174:	4413      	add	r3, r2
 8002176:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3380      	adds	r3, #128	; 0x80
 800218a:	f107 0208 	add.w	r2, r7, #8
 800218e:	4413      	add	r3, r2
 8002190:	3b38      	subs	r3, #56	; 0x38
 8002192:	edc3 7a00 	vstr	s15, [r3]
 8002196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219a:	3301      	adds	r3, #1
 800219c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	dddf      	ble.n	8002168 <MPU6050_GyroCalibration+0x58>
	for(int i = 0;i < loop; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021ae:	e1da      	b.n	8002566 <MPU6050_GyroCalibration+0x456>
	{
		while(MPU6050_readDMP());
 80021b0:	bf00      	nop
 80021b2:	f7ff fb61 	bl	8001878 <MPU6050_readDMP>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1fa      	bne.n	80021b2 <MPU6050_GyroCalibration+0xa2>
		for(int j = 0; j < 3; j++)
 80021bc:	2300      	movs	r3, #0
 80021be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021c0:	e16b      	b.n	800249a <MPU6050_GyroCalibration+0x38a>
		{
			error[j] = -MPU6050_gyroRAW[j];
 80021c2:	4a95      	ldr	r2, [pc, #596]	; (8002418 <MPU6050_GyroCalibration+0x308>)
 80021c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021ca:	425b      	negs	r3, r3
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	3380      	adds	r3, #128	; 0x80
 80021da:	f107 0208 	add.w	r2, r7, #8
 80021de:	4413      	add	r3, r2
 80021e0:	3b68      	subs	r3, #104	; 0x68
 80021e2:	edc3 7a00 	vstr	s15, [r3]
			P[j] = kp * error[j];
 80021e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3380      	adds	r3, #128	; 0x80
 80021ec:	f107 0208 	add.w	r2, r7, #8
 80021f0:	4413      	add	r3, r2
 80021f2:	3b68      	subs	r3, #104	; 0x68
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80021fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3380      	adds	r3, #128	; 0x80
 8002206:	f107 0208 	add.w	r2, r7, #8
 800220a:	4413      	add	r3, r2
 800220c:	3b44      	subs	r3, #68	; 0x44
 800220e:	edc3 7a00 	vstr	s15, [r3]
			I[j] += ki * error[j] * 0.001;
 8002212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	3380      	adds	r3, #128	; 0x80
 8002218:	f107 0208 	add.w	r2, r7, #8
 800221c:	4413      	add	r3, r2
 800221e:	3b50      	subs	r3, #80	; 0x50
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f998 	bl	8000558 <__aeabi_f2d>
 8002228:	4604      	mov	r4, r0
 800222a:	460d      	mov	r5, r1
 800222c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	3380      	adds	r3, #128	; 0x80
 8002232:	f107 0208 	add.w	r2, r7, #8
 8002236:	4413      	add	r3, r2
 8002238:	3b68      	subs	r3, #104	; 0x68
 800223a:	ed93 7a00 	vldr	s14, [r3]
 800223e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	ee17 0a90 	vmov	r0, s15
 800224a:	f7fe f985 	bl	8000558 <__aeabi_f2d>
 800224e:	a36e      	add	r3, pc, #440	; (adr r3, 8002408 <MPU6050_GyroCalibration+0x2f8>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f9d8 	bl	8000608 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fe f81c 	bl	800029c <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fca4 	bl	8000bb8 <__aeabi_d2f>
 8002270:	4602      	mov	r2, r0
 8002272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	3380      	adds	r3, #128	; 0x80
 8002278:	f107 0108 	add.w	r1, r7, #8
 800227c:	440b      	add	r3, r1
 800227e:	3b50      	subs	r3, #80	; 0x50
 8002280:	601a      	str	r2, [r3, #0]
			D[j] = kd * (error[j] - lastError[j])/0.001;
 8002282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3380      	adds	r3, #128	; 0x80
 8002288:	f107 0208 	add.w	r2, r7, #8
 800228c:	4413      	add	r3, r2
 800228e:	3b68      	subs	r3, #104	; 0x68
 8002290:	ed93 7a00 	vldr	s14, [r3]
 8002294:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3380      	adds	r3, #128	; 0x80
 800229a:	f107 0208 	add.w	r2, r7, #8
 800229e:	4413      	add	r3, r2
 80022a0:	3b74      	subs	r3, #116	; 0x74
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	ee17 0a90 	vmov	r0, s15
 80022b6:	f7fe f94f 	bl	8000558 <__aeabi_f2d>
 80022ba:	a353      	add	r3, pc, #332	; (adr r3, 8002408 <MPU6050_GyroCalibration+0x2f8>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe facc 	bl	800085c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc74 	bl	8000bb8 <__aeabi_d2f>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	3380      	adds	r3, #128	; 0x80
 80022d8:	f107 0108 	add.w	r1, r7, #8
 80022dc:	440b      	add	r3, r1
 80022de:	3b5c      	subs	r3, #92	; 0x5c
 80022e0:	601a      	str	r2, [r3, #0]

			if(I[j]> maxI) I[j] = maxI;
 80022e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	3380      	adds	r3, #128	; 0x80
 80022e8:	f107 0208 	add.w	r2, r7, #8
 80022ec:	4413      	add	r3, r2
 80022ee:	3b50      	subs	r3, #80	; 0x50
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80022f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	d509      	bpl.n	8002316 <MPU6050_GyroCalibration+0x206>
 8002302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3380      	adds	r3, #128	; 0x80
 8002308:	f107 0208 	add.w	r2, r7, #8
 800230c:	4413      	add	r3, r2
 800230e:	3b50      	subs	r3, #80	; 0x50
 8002310:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e01e      	b.n	8002354 <MPU6050_GyroCalibration+0x244>
			else if(I[j] < -maxI) I[j] = -maxI;
 8002316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3380      	adds	r3, #128	; 0x80
 800231c:	f107 0208 	add.w	r2, r7, #8
 8002320:	4413      	add	r3, r2
 8002322:	3b50      	subs	r3, #80	; 0x50
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800232c:	eef1 7a67 	vneg.f32	s15, s15
 8002330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d50c      	bpl.n	8002354 <MPU6050_GyroCalibration+0x244>
 800233a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800233e:	eef1 7a67 	vneg.f32	s15, s15
 8002342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3380      	adds	r3, #128	; 0x80
 8002348:	f107 0208 	add.w	r2, r7, #8
 800234c:	4413      	add	r3, r2
 800234e:	3b50      	subs	r3, #80	; 0x50
 8002350:	edc3 7a00 	vstr	s15, [r3]

			if(fabs(error[j]) < 2) I[j] = 0;
 8002354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3380      	adds	r3, #128	; 0x80
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	4413      	add	r3, r2
 8002360:	3b68      	subs	r3, #104	; 0x68
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	eef0 7ae7 	vabs.f32	s15, s15
 800236a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800236e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d509      	bpl.n	800238c <MPU6050_GyroCalibration+0x27c>
 8002378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3380      	adds	r3, #128	; 0x80
 800237e:	f107 0208 	add.w	r2, r7, #8
 8002382:	4413      	add	r3, r2
 8002384:	3b50      	subs	r3, #80	; 0x50
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

			float adjustValue = P[j] + I[j] + D[j];
 800238c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	3380      	adds	r3, #128	; 0x80
 8002392:	f107 0208 	add.w	r2, r7, #8
 8002396:	4413      	add	r3, r2
 8002398:	3b44      	subs	r3, #68	; 0x44
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	3380      	adds	r3, #128	; 0x80
 80023a4:	f107 0208 	add.w	r2, r7, #8
 80023a8:	4413      	add	r3, r2
 80023aa:	3b50      	subs	r3, #80	; 0x50
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3380      	adds	r3, #128	; 0x80
 80023ba:	f107 0208 	add.w	r2, r7, #8
 80023be:	4413      	add	r3, r2
 80023c0:	3b5c      	subs	r3, #92	; 0x5c
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ca:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			if(j == 2) gyroOffsetF[j] += adjustValue;
 80023ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d123      	bne.n	800241c <MPU6050_GyroCalibration+0x30c>
 80023d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3380      	adds	r3, #128	; 0x80
 80023da:	f107 0208 	add.w	r2, r7, #8
 80023de:	4413      	add	r3, r2
 80023e0:	3b38      	subs	r3, #56	; 0x38
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3380      	adds	r3, #128	; 0x80
 80023f4:	f107 0208 	add.w	r2, r7, #8
 80023f8:	4413      	add	r3, r2
 80023fa:	3b38      	subs	r3, #56	; 0x38
 80023fc:	edc3 7a00 	vstr	s15, [r3]
 8002400:	e022      	b.n	8002448 <MPU6050_GyroCalibration+0x338>
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
 8002408:	d2f1a9fc 	.word	0xd2f1a9fc
 800240c:	3f50624d 	.word	0x3f50624d
 8002410:	3dcccccd 	.word	0x3dcccccd
 8002414:	38d1b717 	.word	0x38d1b717
 8002418:	20000298 	.word	0x20000298
			else gyroOffsetF[j] -= adjustValue;
 800241c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	3380      	adds	r3, #128	; 0x80
 8002422:	f107 0208 	add.w	r2, r7, #8
 8002426:	4413      	add	r3, r2
 8002428:	3b38      	subs	r3, #56	; 0x38
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3380      	adds	r3, #128	; 0x80
 800243c:	f107 0208 	add.w	r2, r7, #8
 8002440:	4413      	add	r3, r2
 8002442:	3b38      	subs	r3, #56	; 0x38
 8002444:	edc3 7a00 	vstr	s15, [r3]
			gyroOffset[j] = gyroOffsetF[j];
 8002448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	3380      	adds	r3, #128	; 0x80
 800244e:	f107 0208 	add.w	r2, r7, #8
 8002452:	4413      	add	r3, r2
 8002454:	3b38      	subs	r3, #56	; 0x38
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245e:	ee17 3a90 	vmov	r3, s15
 8002462:	b21a      	sxth	r2, r3
 8002464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	3380      	adds	r3, #128	; 0x80
 800246a:	f107 0108 	add.w	r1, r7, #8
 800246e:	440b      	add	r3, r1
 8002470:	f823 2c2c 	strh.w	r2, [r3, #-44]

			lastError[j] = error[j];
 8002474:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	3380      	adds	r3, #128	; 0x80
 800247a:	f107 0208 	add.w	r2, r7, #8
 800247e:	4413      	add	r3, r2
 8002480:	3b68      	subs	r3, #104	; 0x68
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	3380      	adds	r3, #128	; 0x80
 800248a:	f107 0108 	add.w	r1, r7, #8
 800248e:	440b      	add	r3, r1
 8002490:	3b74      	subs	r3, #116	; 0x74
 8002492:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 3; j++)
 8002494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002496:	3301      	adds	r3, #1
 8002498:	67fb      	str	r3, [r7, #124]	; 0x7c
 800249a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800249c:	2b02      	cmp	r3, #2
 800249e:	f77f ae90 	ble.w	80021c2 <MPU6050_GyroCalibration+0xb2>
		}
		MPU6050_setAllGyroOffset(gyroOffset);
 80024a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fe15 	bl	80020d6 <MPU6050_setAllGyroOffset>

		printf("P: %.1f I: %.1f D: %.1f e: %.1f oF: %.1f oS: %d\n", P[indexMonitor],
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	3380      	adds	r3, #128	; 0x80
 80024b2:	f107 0208 	add.w	r2, r7, #8
 80024b6:	4413      	add	r3, r2
 80024b8:	3b44      	subs	r3, #68	; 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f84b 	bl	8000558 <__aeabi_f2d>
 80024c2:	e9c7 0100 	strd	r0, r1, [r7]
													I[indexMonitor],
 80024c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	3380      	adds	r3, #128	; 0x80
 80024cc:	f107 0208 	add.w	r2, r7, #8
 80024d0:	4413      	add	r3, r2
 80024d2:	3b50      	subs	r3, #80	; 0x50
 80024d4:	681b      	ldr	r3, [r3, #0]
		printf("P: %.1f I: %.1f D: %.1f e: %.1f oF: %.1f oS: %d\n", P[indexMonitor],
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f83e 	bl	8000558 <__aeabi_f2d>
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
													D[indexMonitor],
 80024e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3380      	adds	r3, #128	; 0x80
 80024e6:	f107 0208 	add.w	r2, r7, #8
 80024ea:	4413      	add	r3, r2
 80024ec:	3b5c      	subs	r3, #92	; 0x5c
 80024ee:	681b      	ldr	r3, [r3, #0]
		printf("P: %.1f I: %.1f D: %.1f e: %.1f oF: %.1f oS: %d\n", P[indexMonitor],
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f831 	bl	8000558 <__aeabi_f2d>
 80024f6:	4680      	mov	r8, r0
 80024f8:	4689      	mov	r9, r1
													error[indexMonitor],
 80024fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	3380      	adds	r3, #128	; 0x80
 8002500:	f107 0208 	add.w	r2, r7, #8
 8002504:	4413      	add	r3, r2
 8002506:	3b68      	subs	r3, #104	; 0x68
 8002508:	681b      	ldr	r3, [r3, #0]
		printf("P: %.1f I: %.1f D: %.1f e: %.1f oF: %.1f oS: %d\n", P[indexMonitor],
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f824 	bl	8000558 <__aeabi_f2d>
 8002510:	4682      	mov	sl, r0
 8002512:	468b      	mov	fp, r1
													gyroOffsetF[indexMonitor],
 8002514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	3380      	adds	r3, #128	; 0x80
 800251a:	f107 0208 	add.w	r2, r7, #8
 800251e:	4413      	add	r3, r2
 8002520:	3b38      	subs	r3, #56	; 0x38
 8002522:	681b      	ldr	r3, [r3, #0]
		printf("P: %.1f I: %.1f D: %.1f e: %.1f oF: %.1f oS: %d\n", P[indexMonitor],
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f817 	bl	8000558 <__aeabi_f2d>
													gyroOffset[indexMonitor]);
 800252a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	3380      	adds	r3, #128	; 0x80
 8002530:	f107 0208 	add.w	r2, r7, #8
 8002534:	4413      	add	r3, r2
 8002536:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
		printf("P: %.1f I: %.1f D: %.1f e: %.1f oF: %.1f oS: %d\n", P[indexMonitor],
 800253a:	9308      	str	r3, [sp, #32]
 800253c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002540:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002544:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002548:	e9cd 4500 	strd	r4, r5, [sp]
 800254c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MPU6050_GyroCalibration+0x474>)
 8002552:	f006 fc3f 	bl	8008dd4 <iprintf>
		delay_ms(1);
 8002556:	2001      	movs	r0, #1
 8002558:	f003 fdb6 	bl	80060c8 <HAL_Delay>
	for(int i = 0;i < loop; i++)
 800255c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002560:	3301      	adds	r3, #1
 8002562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	f6ff ae1f 	blt.w	80021b0 <MPU6050_GyroCalibration+0xa0>
	}

	mpu_reset_fifo();
 8002572:	f000 fa93 	bl	8002a9c <mpu_reset_fifo>
	mpu_reset_dmp();
 8002576:	f002 f895 	bl	80046a4 <mpu_reset_dmp>
}
 800257a:	bf00      	nop
 800257c:	3788      	adds	r7, #136	; 0x88
 800257e:	46bd      	mov	sp, r7
 8002580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002584:	0800be50 	.word	0x0800be50

08002588 <MPU6050_GyroContinuosCalibration>:

int MPU6050_GyroContinuosCalibration(int observationTime, float threshold) //only Yaw
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	ed87 0a00 	vstr	s0, [r7]
	static float startYaw;
	static float gyroDriftRate = 0;
	int currentOffset;
	static int offset;
	int timeSpent;
	motionStatus = MPU6050_getMotionStatus(); // 0: moving, 1 : no movement
 8002594:	f7ff fce8 	bl	8001f68 <MPU6050_getMotionStatus>
 8002598:	4603      	mov	r3, r0
 800259a:	75fb      	strb	r3, [r7, #23]

	if(motionStatus && !previoustMotionStatus)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <MPU6050_GyroContinuosCalibration+0x3e>
 80025a2:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <MPU6050_GyroContinuosCalibration+0x148>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <MPU6050_GyroContinuosCalibration+0x3e>
	{
		startTime = getTick();
 80025aa:	f003 fd81 	bl	80060b0 <HAL_GetTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b48      	ldr	r3, [pc, #288]	; (80026d4 <MPU6050_GyroContinuosCalibration+0x14c>)
 80025b4:	601a      	str	r2, [r3, #0]
		startYaw = MPU6050_YawUncorected;
 80025b6:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <MPU6050_GyroContinuosCalibration+0x150>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a48      	ldr	r2, [pc, #288]	; (80026dc <MPU6050_GyroContinuosCalibration+0x154>)
 80025bc:	6013      	str	r3, [r2, #0]
		gyroDriftRate = 0;
 80025be:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <MPU6050_GyroContinuosCalibration+0x158>)
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
	}
	timeSpent = (getTick() - startTime);
 80025c6:	f003 fd73 	bl	80060b0 <HAL_GetTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <MPU6050_GyroContinuosCalibration+0x14c>)
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
	if(motionStatus && timeSpent > observationTime)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d055      	beq.n	8002686 <MPU6050_GyroContinuosCalibration+0xfe>
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dd51      	ble.n	8002686 <MPU6050_GyroContinuosCalibration+0xfe>
	{
		gyroDriftRate = (MPU6050_YawUncorected - startYaw)/timeSpent*1000;
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <MPU6050_GyroContinuosCalibration+0x150>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <MPU6050_GyroContinuosCalibration+0x154>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80026e4 <MPU6050_GyroContinuosCalibration+0x15c>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <MPU6050_GyroContinuosCalibration+0x158>)
 800260a:	edc3 7a00 	vstr	s15, [r3]
		currentOffset = MPU6050_getZGyroOffset();
 800260e:	f7ff fd19 	bl	8002044 <MPU6050_getZGyroOffset>
 8002612:	4603      	mov	r3, r0
 8002614:	60fb      	str	r3, [r7, #12]
		offset = currentOffset - round((float)gyroDriftRate*32.7675);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7fd ff8c 	bl	8000534 <__aeabi_i2d>
 800261c:	4604      	mov	r4, r0
 800261e:	460d      	mov	r5, r1
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <MPU6050_GyroContinuosCalibration+0x158>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff97 	bl	8000558 <__aeabi_f2d>
 800262a:	a327      	add	r3, pc, #156	; (adr r3, 80026c8 <MPU6050_GyroContinuosCalibration+0x140>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd ffea 	bl	8000608 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	ec43 2b17 	vmov	d7, r2, r3
 800263c:	eeb0 0a47 	vmov.f32	s0, s14
 8002640:	eef0 0a67 	vmov.f32	s1, s15
 8002644:	f008 fcf0 	bl	800b028 <round>
 8002648:	ec53 2b10 	vmov	r2, r3, d0
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd fe22 	bl	8000298 <__aeabi_dsub>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fa84 	bl	8000b68 <__aeabi_d2iz>
 8002660:	4603      	mov	r3, r0
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <MPU6050_GyroContinuosCalibration+0x160>)
 8002664:	6013      	str	r3, [r2, #0]
		MPU6050_setZGyroOffset(offset);
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <MPU6050_GyroContinuosCalibration+0x160>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b21b      	sxth	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fcff 	bl	8002070 <MPU6050_setZGyroOffset>
		startTime = getTick();
 8002672:	f003 fd1d 	bl	80060b0 <HAL_GetTick>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <MPU6050_GyroContinuosCalibration+0x14c>)
 800267c:	601a      	str	r2, [r3, #0]
		startYaw = MPU6050_YawUncorected;
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <MPU6050_GyroContinuosCalibration+0x150>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a16      	ldr	r2, [pc, #88]	; (80026dc <MPU6050_GyroContinuosCalibration+0x154>)
 8002684:	6013      	str	r3, [r2, #0]
	}

//	printf("yaw: %.2f ms:%d startTime:%li timeSpent:%d dr:%.4f offset:%d\n", MPU6050_Yaw, motionStatus, startTime, timeSpent, gyroDriftRate, offset);
	previoustMotionStatus = motionStatus;
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <MPU6050_GyroContinuosCalibration+0x148>)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	7013      	strb	r3, [r2, #0]

	if(gyroDriftRate != 0 && fabs(gyroDriftRate) < threshold) return 1;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MPU6050_GyroContinuosCalibration+0x158>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	d00d      	beq.n	80026b8 <MPU6050_GyroContinuosCalibration+0x130>
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <MPU6050_GyroContinuosCalibration+0x158>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	eef0 7ae7 	vabs.f32	s15, s15
 80026a6:	ed97 7a00 	vldr	s14, [r7]
 80026aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b2:	dd01      	ble.n	80026b8 <MPU6050_GyroContinuosCalibration+0x130>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <MPU6050_GyroContinuosCalibration+0x132>
	return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bdb0      	pop	{r4, r5, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	f3af 8000 	nop.w
 80026c8:	70a3d70a 	.word	0x70a3d70a
 80026cc:	4040623d 	.word	0x4040623d
 80026d0:	200002fa 	.word	0x200002fa
 80026d4:	200002fc 	.word	0x200002fc
 80026d8:	200002bc 	.word	0x200002bc
 80026dc:	20000300 	.word	0x20000300
 80026e0:	20000304 	.word	0x20000304
 80026e4:	447a0000 	.word	0x447a0000
 80026e8:	20000308 	.word	0x20000308

080026ec <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <set_int_enable+0xb0>)
 80026f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01c      	beq.n	800273a <set_int_enable+0x4e>
        if (enable)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8002706:	2302      	movs	r3, #2
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e001      	b.n	8002710 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <set_int_enable+0xb0>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	7818      	ldrb	r0, [r3, #0]
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <set_int_enable+0xb0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	7bd9      	ldrb	r1, [r3, #15]
 800271c:	f107 030f 	add.w	r3, r7, #15
 8002720:	2201      	movs	r2, #1
 8002722:	f7fe fd2b 	bl	800117c <i2cWrite>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <set_int_enable+0x46>
            return -1;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002730:	e030      	b.n	8002794 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <set_int_enable+0xb0>)
 8002736:	745a      	strb	r2, [r3, #17]
 8002738:	e02b      	b.n	8002792 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <set_int_enable+0xb0>)
 800273c:	7a9b      	ldrb	r3, [r3, #10]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <set_int_enable+0x5c>
            return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002746:	e025      	b.n	8002794 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <set_int_enable+0x6e>
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <set_int_enable+0xb0>)
 8002750:	7c5b      	ldrb	r3, [r3, #17]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <set_int_enable+0x6e>
            return 0;
 8002756:	2300      	movs	r3, #0
 8002758:	e01c      	b.n	8002794 <set_int_enable+0xa8>
        if (enable)
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <set_int_enable+0xb0>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	7818      	ldrb	r0, [r3, #0]
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <set_int_enable+0xb0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	7bd9      	ldrb	r1, [r3, #15]
 8002776:	f107 030f 	add.w	r3, r7, #15
 800277a:	2201      	movs	r2, #1
 800277c:	f7fe fcfe 	bl	800117c <i2cWrite>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <set_int_enable+0xa0>
            return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	e003      	b.n	8002794 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	4b03      	ldr	r3, [pc, #12]	; (800279c <set_int_enable+0xb0>)
 8002790:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000010 	.word	0x20000010

080027a0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <mpu_init+0x1fc>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	7818      	ldrb	r0, [r3, #0]
 80027b0:	4b7a      	ldr	r3, [pc, #488]	; (800299c <mpu_init+0x1fc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	7c99      	ldrb	r1, [r3, #18]
 80027b6:	463b      	mov	r3, r7
 80027b8:	2201      	movs	r2, #1
 80027ba:	f7fe fcdf 	bl	800117c <i2cWrite>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <mpu_init+0x2a>
        return -1;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c8:	e0e4      	b.n	8002994 <mpu_init+0x1f4>
    delay_ms(100);
 80027ca:	2064      	movs	r0, #100	; 0x64
 80027cc:	f003 fc7c 	bl	80060c8 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 80027d0:	2300      	movs	r3, #0
 80027d2:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 80027d4:	4b71      	ldr	r3, [pc, #452]	; (800299c <mpu_init+0x1fc>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	7818      	ldrb	r0, [r3, #0]
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <mpu_init+0x1fc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	7c99      	ldrb	r1, [r3, #18]
 80027e0:	463b      	mov	r3, r7
 80027e2:	2201      	movs	r2, #1
 80027e4:	f7fe fcca 	bl	800117c <i2cWrite>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <mpu_init+0x54>
        return -1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f2:	e0cf      	b.n	8002994 <mpu_init+0x1f4>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 80027f4:	4b69      	ldr	r3, [pc, #420]	; (800299c <mpu_init+0x1fc>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	7818      	ldrb	r0, [r3, #0]
 80027fa:	4b68      	ldr	r3, [pc, #416]	; (800299c <mpu_init+0x1fc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	7d99      	ldrb	r1, [r3, #22]
 8002800:	463b      	mov	r3, r7
 8002802:	2206      	movs	r2, #6
 8002804:	f7fe fcde 	bl	80011c4 <i2cRead>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <mpu_init+0x74>
        return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002812:	e0bf      	b.n	8002994 <mpu_init+0x1f4>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8002814:	797b      	ldrb	r3, [r7, #5]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	b25b      	sxtb	r3, r3
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	b25a      	sxtb	r2, r3
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	b25b      	sxtb	r3, r3
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	b25b      	sxtb	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800283a:	4313      	orrs	r3, r2
 800283c:	b25b      	sxtb	r3, r3
 800283e:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <mpu_init+0xc8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d103      	bne.n	8002854 <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <mpu_init+0x1fc>)
 800284e:	2201      	movs	r2, #1
 8002850:	74da      	strb	r2, [r3, #19]
 8002852:	e02d      	b.n	80028b0 <mpu_init+0x110>
        else if (rev == 2)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d103      	bne.n	8002862 <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <mpu_init+0x1fc>)
 800285c:	2200      	movs	r2, #0
 800285e:	74da      	strb	r2, [r3, #19]
 8002860:	e026      	b.n	80028b0 <mpu_init+0x110>
        else {
            //log_e("Unsupported software product rev %d.\n",rev);
            return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002866:	e095      	b.n	8002994 <mpu_init+0x1f4>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 8002868:	4b4c      	ldr	r3, [pc, #304]	; (800299c <mpu_init+0x1fc>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	7818      	ldrb	r0, [r3, #0]
 800286e:	4b4b      	ldr	r3, [pc, #300]	; (800299c <mpu_init+0x1fc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	78d9      	ldrb	r1, [r3, #3]
 8002874:	463b      	mov	r3, r7
 8002876:	2201      	movs	r2, #1
 8002878:	f7fe fca4 	bl	80011c4 <i2cRead>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <mpu_init+0xe8>
            return -1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	e085      	b.n	8002994 <mpu_init+0x1f4>
        rev = data[0] & 0x0F;
 8002888:	783b      	ldrb	r3, [r7, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <mpu_init+0xfc>
            //log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
            return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800289a:	e07b      	b.n	8002994 <mpu_init+0x1f4>
        } else if (rev == 4) {
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d103      	bne.n	80028aa <mpu_init+0x10a>
            //log_i("Half sensitivity part found.\r\n");
            st.chip_cfg.accel_half = 1;
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <mpu_init+0x1fc>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	74da      	strb	r2, [r3, #19]
 80028a8:	e002      	b.n	80028b0 <mpu_init+0x110>
        } else
            st.chip_cfg.accel_half = 0;
 80028aa:	4b3c      	ldr	r3, [pc, #240]	; (800299c <mpu_init+0x1fc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <mpu_init+0x1fc>)
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <mpu_init+0x1fc>)
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <mpu_init+0x1fc>)
 80028be:	22ff      	movs	r2, #255	; 0xff
 80028c0:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <mpu_init+0x1fc>)
 80028c4:	22ff      	movs	r2, #255	; 0xff
 80028c6:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <mpu_init+0x1fc>)
 80028ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ce:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <mpu_init+0x1fc>)
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <mpu_init+0x1fc>)
 80028d8:	22ff      	movs	r2, #255	; 0xff
 80028da:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <mpu_init+0x1fc>)
 80028de:	2201      	movs	r2, #1
 80028e0:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <mpu_init+0x1fc>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <mpu_init+0x1fc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <mpu_init+0x1fc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <mpu_init+0x1fc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80028fe:	220c      	movs	r2, #12
 8002900:	2100      	movs	r1, #0
 8002902:	4827      	ldr	r0, [pc, #156]	; (80029a0 <mpu_init+0x200>)
 8002904:	f005 fdf4 	bl	80084f0 <memset>
    st.chip_cfg.dmp_on = 0;
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <mpu_init+0x1fc>)
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <mpu_init+0x1fc>)
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <mpu_init+0x1fc>)
 800291a:	2200      	movs	r2, #0
 800291c:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 800291e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002922:	f000 f9ed 	bl	8002d00 <mpu_set_gyro_fsr>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <mpu_init+0x192>
        return -1;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002930:	e030      	b.n	8002994 <mpu_init+0x1f4>
    if (mpu_set_accel_fsr(2))
 8002932:	2002      	movs	r0, #2
 8002934:	f000 fa72 	bl	8002e1c <mpu_set_accel_fsr>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <mpu_init+0x1a4>
        return -1;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002942:	e027      	b.n	8002994 <mpu_init+0x1f4>
    if (mpu_set_lpf(42))
 8002944:	202a      	movs	r0, #42	; 0x2a
 8002946:	f000 fb0f 	bl	8002f68 <mpu_set_lpf>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <mpu_init+0x1b6>
        return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002954:	e01e      	b.n	8002994 <mpu_init+0x1f4>
    if (mpu_set_sample_rate(50))
 8002956:	2032      	movs	r0, #50	; 0x32
 8002958:	f000 fb6e 	bl	8003038 <mpu_set_sample_rate>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <mpu_init+0x1c8>
        return -1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002966:	e015      	b.n	8002994 <mpu_init+0x1f4>
    if (mpu_configure_fifo(0))
 8002968:	2000      	movs	r0, #0
 800296a:	f000 fc53 	bl	8003214 <mpu_configure_fifo>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <mpu_init+0x1da>
        return -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002978:	e00c      	b.n	8002994 <mpu_init+0x1f4>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800297a:	2000      	movs	r0, #0
 800297c:	f000 fdee 	bl	800355c <mpu_set_bypass>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <mpu_init+0x1ec>
        return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800298a:	e003      	b.n	8002994 <mpu_init+0x1f4>
#endif

    mpu_set_sensors(0);
 800298c:	2000      	movs	r0, #0
 800298e:	f000 fc93 	bl	80032b8 <mpu_set_sensors>
    return 0;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000010 	.word	0x20000010
 80029a0:	20000026 	.word	0x20000026

080029a4 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	2b28      	cmp	r3, #40	; 0x28
 80029b2:	d902      	bls.n	80029ba <mpu_lp_accel_mode+0x16>
        return -1;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b8:	e06a      	b.n	8002a90 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11c      	bne.n	80029fa <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f000 fe91 	bl	80036e8 <mpu_set_int_latched>
        tmp[0] = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80029ca:	2307      	movs	r3, #7
 80029cc:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	7818      	ldrb	r0, [r3, #0]
 80029d4:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	7c99      	ldrb	r1, [r3, #18]
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	2202      	movs	r2, #2
 80029e0:	f7fe fbcc 	bl	800117c <i2cWrite>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <mpu_lp_accel_mode+0x4c>
            return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ee:	e04f      	b.n	8002a90 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	751a      	strb	r2, [r3, #20]
        return 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e04a      	b.n	8002a90 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 fe74 	bl	80036e8 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8002a00:	2320      	movs	r3, #32
 8002a02:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002a0e:	2005      	movs	r0, #5
 8002a10:	f000 faaa 	bl	8002f68 <mpu_set_lpf>
 8002a14:	e016      	b.n	8002a44 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d805      	bhi.n	8002a28 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002a20:	2005      	movs	r0, #5
 8002a22:	f000 faa1 	bl	8002f68 <mpu_set_lpf>
 8002a26:	e00d      	b.n	8002a44 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2b14      	cmp	r3, #20
 8002a2c:	d805      	bhi.n	8002a3a <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8002a32:	200a      	movs	r0, #10
 8002a34:	f000 fa98 	bl	8002f68 <mpu_set_lpf>
 8002a38:	e004      	b.n	8002a44 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8002a3e:	2014      	movs	r0, #20
 8002a40:	f000 fa92 	bl	8002f68 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
 8002a46:	019b      	lsls	r3, r3, #6
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	f043 0307 	orr.w	r3, r3, #7
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	7818      	ldrb	r0, [r3, #0]
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	7c99      	ldrb	r1, [r3, #18]
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	2202      	movs	r2, #2
 8002a66:	f7fe fb89 	bl	800117c <i2cWrite>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <mpu_lp_accel_mode+0xd2>
        return -1;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a74:	e00c      	b.n	8002a90 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 8002a78:	2208      	movs	r2, #8
 8002a7a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <mpu_lp_accel_mode+0xf4>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f000 fbc3 	bl	8003214 <mpu_configure_fifo>

    return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000010 	.word	0x20000010

08002a9c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002aa4:	7a9b      	ldrb	r3, [r3, #10]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <mpu_reset_fifo+0x14>
        return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aae:	e0eb      	b.n	8002c88 <mpu_reset_fifo+0x1ec>

    data = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002ab4:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	7818      	ldrb	r0, [r3, #0]
 8002aba:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	7bd9      	ldrb	r1, [r3, #15]
 8002ac0:	1dfb      	adds	r3, r7, #7
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f7fe fb5a 	bl	800117c <i2cWrite>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <mpu_reset_fifo+0x38>
        return -1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad2:	e0d9      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002ad4:	4b6e      	ldr	r3, [pc, #440]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	7818      	ldrb	r0, [r3, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	7959      	ldrb	r1, [r3, #5]
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f7fe fb4a 	bl	800117c <i2cWrite>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <mpu_reset_fifo+0x58>
        return -1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af2:	e0c9      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	7818      	ldrb	r0, [r3, #0]
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	7919      	ldrb	r1, [r3, #4]
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	2201      	movs	r2, #1
 8002b04:	f7fe fb3a 	bl	800117c <i2cWrite>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <mpu_reset_fifo+0x78>
        return -1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b12:	e0b9      	b.n	8002c88 <mpu_reset_fifo+0x1ec>

    if (st.chip_cfg.dmp_on) {
 8002b14:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d059      	beq.n	8002bd2 <mpu_reset_fifo+0x136>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8002b1e:	230c      	movs	r3, #12
 8002b20:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	7818      	ldrb	r0, [r3, #0]
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	7919      	ldrb	r1, [r3, #4]
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	2201      	movs	r2, #1
 8002b32:	f7fe fb23 	bl	800117c <i2cWrite>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <mpu_reset_fifo+0xa6>
            return -1;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b40:	e0a2      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002b46:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b48:	7a9b      	ldrb	r3, [r3, #10]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <mpu_reset_fifo+0xc0>
            data |= BIT_AUX_IF_EN;
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f043 0320 	orr.w	r3, r3, #32
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	7818      	ldrb	r0, [r3, #0]
 8002b62:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	7919      	ldrb	r1, [r3, #4]
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f7fe fb06 	bl	800117c <i2cWrite>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <mpu_reset_fifo+0xe0>
            return -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b7a:	e085      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.int_enable)
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b7e:	7c5b      	ldrb	r3, [r3, #17]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <mpu_reset_fifo+0xee>
            data = BIT_DMP_INT_EN;
 8002b84:	2302      	movs	r3, #2
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	e001      	b.n	8002b8e <mpu_reset_fifo+0xf2>
        else
            data = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	7818      	ldrb	r0, [r3, #0]
 8002b94:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	7bd9      	ldrb	r1, [r3, #15]
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f7fe faed 	bl	800117c <i2cWrite>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <mpu_reset_fifo+0x112>
            return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bac:	e06c      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
        data = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002bb2:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	7818      	ldrb	r0, [r3, #0]
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	7959      	ldrb	r1, [r3, #5]
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f7fe fadb 	bl	800117c <i2cWrite>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d05c      	beq.n	8002c86 <mpu_reset_fifo+0x1ea>
            return -1;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd0:	e05a      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
    } else {
        data = BIT_FIFO_RST;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	7818      	ldrb	r0, [r3, #0]
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	7919      	ldrb	r1, [r3, #4]
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	2201      	movs	r2, #1
 8002be6:	f7fe fac9 	bl	800117c <i2cWrite>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <mpu_reset_fifo+0x15a>
            return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf4:	e048      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002bf8:	7c9b      	ldrb	r3, [r3, #18]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <mpu_reset_fifo+0x16e>
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c00:	7a9b      	ldrb	r3, [r3, #10]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <mpu_reset_fifo+0x174>
            data = BIT_FIFO_EN;
 8002c0a:	2340      	movs	r3, #64	; 0x40
 8002c0c:	71fb      	strb	r3, [r7, #7]
 8002c0e:	e001      	b.n	8002c14 <mpu_reset_fifo+0x178>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8002c10:	2360      	movs	r3, #96	; 0x60
 8002c12:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	7818      	ldrb	r0, [r3, #0]
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	7919      	ldrb	r1, [r3, #4]
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	2201      	movs	r2, #1
 8002c24:	f7fe faaa 	bl	800117c <i2cWrite>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <mpu_reset_fifo+0x198>
            return -1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c32:	e029      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
    
        if (st.chip_cfg.int_enable)
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c36:	7c5b      	ldrb	r3, [r3, #17]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <mpu_reset_fifo+0x1a6>
            data = BIT_DATA_RDY_EN;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	e001      	b.n	8002c46 <mpu_reset_fifo+0x1aa>
        else
            data = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002c46:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	7818      	ldrb	r0, [r3, #0]
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	7bd9      	ldrb	r1, [r3, #15]
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	2201      	movs	r2, #1
 8002c56:	f7fe fa91 	bl	800117c <i2cWrite>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <mpu_reset_fifo+0x1ca>
            return -1;
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c64:	e010      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	7818      	ldrb	r0, [r3, #0]
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <mpu_reset_fifo+0x1f4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	7959      	ldrb	r1, [r3, #5]
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <mpu_reset_fifo+0x1f8>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	f7fe fa81 	bl	800117c <i2cWrite>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <mpu_reset_fifo+0x1ea>
            return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c84:	e000      	b.n	8002c88 <mpu_reset_fifo+0x1ec>
    }
    return 0;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000010 	.word	0x20000010
 8002c94:	20000020 	.word	0x20000020

08002c98 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <mpu_get_gyro_fsr+0x64>)
 8002ca2:	7a1b      	ldrb	r3, [r3, #8]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d81e      	bhi.n	8002ce6 <mpu_get_gyro_fsr+0x4e>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <mpu_get_gyro_fsr+0x18>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc9 	.word	0x08002cc9
 8002cb8:	08002cd3 	.word	0x08002cd3
 8002cbc:	08002cdd 	.word	0x08002cdd
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	22fa      	movs	r2, #250	; 0xfa
 8002cc4:	801a      	strh	r2, [r3, #0]
        break;
 8002cc6:	e012      	b.n	8002cee <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cce:	801a      	strh	r2, [r3, #0]
        break;
 8002cd0:	e00d      	b.n	8002cee <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cd8:	801a      	strh	r2, [r3, #0]
        break;
 8002cda:	e008      	b.n	8002cee <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ce2:	801a      	strh	r2, [r3, #0]
        break;
 8002ce4:	e003      	b.n	8002cee <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
        break;
 8002cec:	bf00      	nop
    }
    return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	20000010 	.word	0x20000010

08002d00 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <mpu_set_gyro_fsr+0xa4>)
 8002d0c:	7a9b      	ldrb	r3, [r3, #10]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <mpu_set_gyro_fsr+0x18>
        return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d16:	e041      	b.n	8002d9c <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d1e:	d017      	beq.n	8002d50 <mpu_set_gyro_fsr+0x50>
 8002d20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d24:	dc17      	bgt.n	8002d56 <mpu_set_gyro_fsr+0x56>
 8002d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2a:	d00e      	beq.n	8002d4a <mpu_set_gyro_fsr+0x4a>
 8002d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d30:	dc11      	bgt.n	8002d56 <mpu_set_gyro_fsr+0x56>
 8002d32:	2bfa      	cmp	r3, #250	; 0xfa
 8002d34:	d003      	beq.n	8002d3e <mpu_set_gyro_fsr+0x3e>
 8002d36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d3a:	d003      	beq.n	8002d44 <mpu_set_gyro_fsr+0x44>
 8002d3c:	e00b      	b.n	8002d56 <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
        break;
 8002d42:	e00b      	b.n	8002d5c <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8002d44:	2308      	movs	r3, #8
 8002d46:	73fb      	strb	r3, [r7, #15]
        break;
 8002d48:	e008      	b.n	8002d5c <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d4e:	e005      	b.n	8002d5c <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002d50:	2318      	movs	r3, #24
 8002d52:	73fb      	strb	r3, [r7, #15]
        break;
 8002d54:	e002      	b.n	8002d5c <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d5a:	e01f      	b.n	8002d9c <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <mpu_set_gyro_fsr+0xa4>)
 8002d5e:	7a1a      	ldrb	r2, [r3, #8]
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d101      	bne.n	8002d6e <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e016      	b.n	8002d9c <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <mpu_set_gyro_fsr+0xa4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	7818      	ldrb	r0, [r3, #0]
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <mpu_set_gyro_fsr+0xa4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	7999      	ldrb	r1, [r3, #6]
 8002d7a:	f107 030f 	add.w	r3, r7, #15
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f7fe f9fc 	bl	800117c <i2cWrite>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <mpu_set_gyro_fsr+0x90>
        return -1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d8e:	e005      	b.n	8002d9c <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <mpu_set_gyro_fsr+0xa4>)
 8002d98:	721a      	strb	r2, [r3, #8]
    return 0;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000010 	.word	0x20000010

08002da8 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <mpu_get_accel_fsr+0x70>)
 8002db2:	7a5b      	ldrb	r3, [r3, #9]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d81b      	bhi.n	8002df0 <mpu_get_accel_fsr+0x48>
 8002db8:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <mpu_get_accel_fsr+0x18>)
 8002dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbe:	bf00      	nop
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002dd9 	.word	0x08002dd9
 8002dc8:	08002de1 	.word	0x08002de1
 8002dcc:	08002de9 	.word	0x08002de9
    case INV_FSR_2G:
        fsr[0] = 2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
        break;
 8002dd6:	e00e      	b.n	8002df6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	701a      	strb	r2, [r3, #0]
        break;
 8002dde:	e00a      	b.n	8002df6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2208      	movs	r2, #8
 8002de4:	701a      	strb	r2, [r3, #0]
        break;
 8002de6:	e006      	b.n	8002df6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2210      	movs	r2, #16
 8002dec:	701a      	strb	r2, [r3, #0]
        break;
 8002dee:	e002      	b.n	8002df6 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df4:	e00a      	b.n	8002e0c <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <mpu_get_accel_fsr+0x70>)
 8002df8:	7cdb      	ldrb	r3, [r3, #19]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	701a      	strb	r2, [r3, #0]
    return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	20000010 	.word	0x20000010

08002e1c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002e26:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <mpu_set_accel_fsr+0xcc>)
 8002e28:	7a9b      	ldrb	r3, [r3, #10]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <mpu_set_accel_fsr+0x18>
        return -1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e32:	e054      	b.n	8002ede <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	3b02      	subs	r3, #2
 8002e38:	2b0e      	cmp	r3, #14
 8002e3a:	d82d      	bhi.n	8002e98 <mpu_set_accel_fsr+0x7c>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <mpu_set_accel_fsr+0x28>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e81 	.word	0x08002e81
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002e87 	.word	0x08002e87
 8002e50:	08002e99 	.word	0x08002e99
 8002e54:	08002e99 	.word	0x08002e99
 8002e58:	08002e99 	.word	0x08002e99
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002e99 	.word	0x08002e99
 8002e6c:	08002e99 	.word	0x08002e99
 8002e70:	08002e99 	.word	0x08002e99
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08002e99 	.word	0x08002e99
 8002e7c:	08002e93 	.word	0x08002e93
    case 2:
        data = INV_FSR_2G << 3;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
        break;
 8002e84:	e00b      	b.n	8002e9e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002e86:	2308      	movs	r3, #8
 8002e88:	73fb      	strb	r3, [r7, #15]
        break;
 8002e8a:	e008      	b.n	8002e9e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e90:	e005      	b.n	8002e9e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8002e92:	2318      	movs	r3, #24
 8002e94:	73fb      	strb	r3, [r7, #15]
        break;
 8002e96:	e002      	b.n	8002e9e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e9c:	e01f      	b.n	8002ede <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <mpu_set_accel_fsr+0xcc>)
 8002ea0:	7a5a      	ldrb	r2, [r3, #9]
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d101      	bne.n	8002eb0 <mpu_set_accel_fsr+0x94>
        return 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e016      	b.n	8002ede <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <mpu_set_accel_fsr+0xcc>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	7818      	ldrb	r0, [r3, #0]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <mpu_set_accel_fsr+0xcc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	79d9      	ldrb	r1, [r3, #7]
 8002ebc:	f107 030f 	add.w	r3, r7, #15
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f7fe f95b 	bl	800117c <i2cWrite>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <mpu_set_accel_fsr+0xb6>
        return -1;
 8002ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed0:	e005      	b.n	8002ede <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <mpu_set_accel_fsr+0xcc>)
 8002eda:	725a      	strb	r2, [r3, #9]
    return 0;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000010 	.word	0x20000010

08002eec <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <mpu_get_lpf+0x78>)
 8002ef6:	7adb      	ldrb	r3, [r3, #11]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d826      	bhi.n	8002f4c <mpu_get_lpf+0x60>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <mpu_get_lpf+0x18>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f25 	.word	0x08002f25
 8002f0c:	08002f2d 	.word	0x08002f2d
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	08002f45 	.word	0x08002f45
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	22bc      	movs	r2, #188	; 0xbc
 8002f20:	801a      	strh	r2, [r3, #0]
        break;
 8002f22:	e017      	b.n	8002f54 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2262      	movs	r2, #98	; 0x62
 8002f28:	801a      	strh	r2, [r3, #0]
        break;
 8002f2a:	e013      	b.n	8002f54 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	222a      	movs	r2, #42	; 0x2a
 8002f30:	801a      	strh	r2, [r3, #0]
        break;
 8002f32:	e00f      	b.n	8002f54 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2214      	movs	r2, #20
 8002f38:	801a      	strh	r2, [r3, #0]
        break;
 8002f3a:	e00b      	b.n	8002f54 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	220a      	movs	r2, #10
 8002f40:	801a      	strh	r2, [r3, #0]
        break;
 8002f42:	e007      	b.n	8002f54 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2205      	movs	r2, #5
 8002f48:	801a      	strh	r2, [r3, #0]
        break;
 8002f4a:	e003      	b.n	8002f54 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	801a      	strh	r2, [r3, #0]
        break;
 8002f52:	bf00      	nop
    }
    return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000010 	.word	0x20000010

08002f68 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <mpu_set_lpf+0x98>)
 8002f74:	7a9b      	ldrb	r3, [r3, #10]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <mpu_set_lpf+0x18>
        return -1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7e:	e03b      	b.n	8002ff8 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2bbb      	cmp	r3, #187	; 0xbb
 8002f84:	d902      	bls.n	8002f8c <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e019      	b.n	8002fc0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	2b61      	cmp	r3, #97	; 0x61
 8002f90:	d902      	bls.n	8002f98 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8002f92:	2302      	movs	r3, #2
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e013      	b.n	8002fc0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b29      	cmp	r3, #41	; 0x29
 8002f9c:	d902      	bls.n	8002fa4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e00d      	b.n	8002fc0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b13      	cmp	r3, #19
 8002fa8:	d902      	bls.n	8002fb0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002faa:	2304      	movs	r3, #4
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e007      	b.n	8002fc0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d902      	bls.n	8002fbc <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	e001      	b.n	8002fc0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8002fbc:	2306      	movs	r3, #6
 8002fbe:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <mpu_set_lpf+0x98>)
 8002fc2:	7ada      	ldrb	r2, [r3, #11]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d101      	bne.n	8002fce <mpu_set_lpf+0x66>
        return 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e014      	b.n	8002ff8 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <mpu_set_lpf+0x98>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	7818      	ldrb	r0, [r3, #0]
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <mpu_set_lpf+0x98>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	7899      	ldrb	r1, [r3, #2]
 8002fda:	f107 030f 	add.w	r3, r7, #15
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f7fe f8cc 	bl	800117c <i2cWrite>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <mpu_set_lpf+0x88>
        return -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fee:	e003      	b.n	8002ff8 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	4b03      	ldr	r3, [pc, #12]	; (8003000 <mpu_set_lpf+0x98>)
 8002ff4:	72da      	strb	r2, [r3, #11]
    return 0;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000010 	.word	0x20000010

08003004 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <mpu_get_sample_rate+0x30>)
 800300e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <mpu_get_sample_rate+0x18>
        return -1;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800301a:	e004      	b.n	8003026 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <mpu_get_sample_rate+0x30>)
 800301e:	89da      	ldrh	r2, [r3, #14]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	801a      	strh	r2, [r3, #0]
    return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000010 	.word	0x20000010

08003038 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <mpu_set_sample_rate+0xc8>)
 8003044:	7a9b      	ldrb	r3, [r3, #10]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <mpu_set_sample_rate+0x18>
        return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800304e:	e053      	b.n	80030f8 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <mpu_set_sample_rate+0xc8>)
 8003052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <mpu_set_sample_rate+0x28>
        return -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305e:	e04b      	b.n	80030f8 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <mpu_set_sample_rate+0xc8>)
 8003062:	7d1b      	ldrb	r3, [r3, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00f      	beq.n	8003088 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <mpu_set_sample_rate+0x4a>
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b28      	cmp	r3, #40	; 0x28
 8003072:	d806      	bhi.n	8003082 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fc93 	bl	80029a4 <mpu_lp_accel_mode>
                return 0;
 800307e:	2300      	movs	r3, #0
 8003080:	e03a      	b.n	80030f8 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8003082:	2000      	movs	r0, #0
 8003084:	f7ff fc8e 	bl	80029a4 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d802      	bhi.n	8003094 <mpu_set_sample_rate+0x5c>
            rate = 4;
 800308e:	2304      	movs	r3, #4
 8003090:	80fb      	strh	r3, [r7, #6]
 8003092:	e006      	b.n	80030a2 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309a:	d902      	bls.n	80030a2 <mpu_set_sample_rate+0x6a>
            rate = 1000;
 800309c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a0:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <mpu_set_sample_rate+0xc8>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	7818      	ldrb	r0, [r3, #0]
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <mpu_set_sample_rate+0xc8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	7859      	ldrb	r1, [r3, #1]
 80030c0:	f107 030f 	add.w	r3, r7, #15
 80030c4:	2201      	movs	r2, #1
 80030c6:	f7fe f859 	bl	800117c <i2cWrite>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <mpu_set_sample_rate+0x9e>
            return -1;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d4:	e010      	b.n	80030f8 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	3301      	adds	r3, #1
 80030da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030de:	fb92 f3f3 	sdiv	r3, r2, r3
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <mpu_set_sample_rate+0xc8>)
 80030e6:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <mpu_set_sample_rate+0xc8>)
 80030ea:	89db      	ldrh	r3, [r3, #14]
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff39 	bl	8002f68 <mpu_set_lpf>
        return 0;
 80030f6:	2300      	movs	r3, #0
    }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000010 	.word	0x20000010

08003104 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <mpu_get_gyro_sens+0x5c>)
 800310e:	7a1b      	ldrb	r3, [r3, #8]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d81b      	bhi.n	800314c <mpu_get_gyro_sens+0x48>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <mpu_get_gyro_sens+0x18>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003135 	.word	0x08003135
 8003124:	0800313d 	.word	0x0800313d
 8003128:	08003145 	.word	0x08003145
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <mpu_get_gyro_sens+0x60>)
 8003130:	601a      	str	r2, [r3, #0]
        break;
 8003132:	e00e      	b.n	8003152 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <mpu_get_gyro_sens+0x64>)
 8003138:	601a      	str	r2, [r3, #0]
        break;
 800313a:	e00a      	b.n	8003152 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <mpu_get_gyro_sens+0x68>)
 8003140:	601a      	str	r2, [r3, #0]
        break;
 8003142:	e006      	b.n	8003152 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <mpu_get_gyro_sens+0x6c>)
 8003148:	601a      	str	r2, [r3, #0]
        break;
 800314a:	e002      	b.n	8003152 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 800314c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003150:	e000      	b.n	8003154 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20000010 	.word	0x20000010
 8003164:	43030000 	.word	0x43030000
 8003168:	42830000 	.word	0x42830000
 800316c:	42033333 	.word	0x42033333
 8003170:	41833333 	.word	0x41833333

08003174 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <mpu_get_accel_sens+0x78>)
 800317e:	7a5b      	ldrb	r3, [r3, #9]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d81f      	bhi.n	80031c4 <mpu_get_accel_sens+0x50>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <mpu_get_accel_sens+0x18>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	0800319d 	.word	0x0800319d
 8003190:	080031a7 	.word	0x080031a7
 8003194:	080031b1 	.word	0x080031b1
 8003198:	080031bb 	.word	0x080031bb
    case INV_FSR_2G:
        sens[0] = 16384;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031a2:	801a      	strh	r2, [r3, #0]
        break;
 80031a4:	e011      	b.n	80031ca <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f641 729c 	movw	r2, #8092	; 0x1f9c
 80031ac:	801a      	strh	r2, [r3, #0]
        break;
 80031ae:	e00c      	b.n	80031ca <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b6:	801a      	strh	r2, [r3, #0]
        break;
 80031b8:	e007      	b.n	80031ca <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c0:	801a      	strh	r2, [r3, #0]
        break;
 80031c2:	e002      	b.n	80031ca <mpu_get_accel_sens+0x56>
    default:
        return -1;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031c8:	e00a      	b.n	80031e0 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <mpu_get_accel_sens+0x78>)
 80031cc:	7cdb      	ldrb	r3, [r3, #19]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	801a      	strh	r2, [r3, #0]
    return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000010 	.word	0x20000010

080031f0 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <mpu_get_fifo_config+0x20>)
 80031fa:	7c1a      	ldrb	r2, [r3, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	701a      	strb	r2, [r3, #0]
    return 0;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000010 	.word	0x20000010

08003214 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <mpu_configure_fifo+0xa0>)
 800322c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <mpu_configure_fifo+0x24>
        return 0;
 8003234:	2300      	movs	r3, #0
 8003236:	e038      	b.n	80032aa <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8003238:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <mpu_configure_fifo+0xa0>)
 800323a:	7a9b      	ldrb	r3, [r3, #10]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <mpu_configure_fifo+0x32>
            return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003244:	e031      	b.n	80032aa <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <mpu_configure_fifo+0xa0>)
 8003248:	7c1b      	ldrb	r3, [r3, #16]
 800324a:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <mpu_configure_fifo+0xa0>)
 800324e:	7a9a      	ldrb	r2, [r3, #10]
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	4013      	ands	r3, r2
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <mpu_configure_fifo+0xa0>)
 8003258:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <mpu_configure_fifo+0xa0>)
 800325c:	7c1b      	ldrb	r3, [r3, #16]
 800325e:	79fa      	ldrb	r2, [r7, #7]
 8003260:	429a      	cmp	r2, r3
 8003262:	d003      	beq.n	800326c <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e001      	b.n	8003270 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <mpu_configure_fifo+0x6a>
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <mpu_configure_fifo+0xa0>)
 8003278:	7d1b      	ldrb	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800327e:	2001      	movs	r0, #1
 8003280:	f7ff fa34 	bl	80026ec <set_int_enable>
 8003284:	e002      	b.n	800328c <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8003286:	2000      	movs	r0, #0
 8003288:	f7ff fa30 	bl	80026ec <set_int_enable>
        if (sensors) {
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8003292:	f7ff fc03 	bl	8002a9c <mpu_reset_fifo>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 800329c:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <mpu_configure_fifo+0xa0>)
 800329e:	7afb      	ldrb	r3, [r7, #11]
 80032a0:	7413      	strb	r3, [r2, #16]
                return -1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a6:	e000      	b.n	80032aa <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 80032a8:	68fb      	ldr	r3, [r7, #12]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000010 	.word	0x20000010

080032b8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e007      	b.n	80032e2 <mpu_set_sensors+0x2a>
    else if (sensors)
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <mpu_set_sensors+0x26>
        data = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	e001      	b.n	80032e2 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <mpu_set_sensors+0x108>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	7818      	ldrb	r0, [r3, #0]
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <mpu_set_sensors+0x108>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	7c99      	ldrb	r1, [r3, #18]
 80032ee:	f107 030f 	add.w	r3, r7, #15
 80032f2:	2201      	movs	r2, #1
 80032f4:	f7fd ff42 	bl	800117c <i2cWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <mpu_set_sensors+0x108>)
 8003300:	2200      	movs	r2, #0
 8003302:	729a      	strb	r2, [r3, #10]
        return -1;
 8003304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003308:	e056      	b.n	80033b8 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <mpu_set_sensors+0x108>)
 8003314:	731a      	strb	r2, [r3, #12]

    data = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	b2db      	uxtb	r3, r3
 800332c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003366:	b2db      	uxtb	r3, r3
 8003368:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <mpu_set_sensors+0x108>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	7818      	ldrb	r0, [r3, #0]
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <mpu_set_sensors+0x108>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	7cd9      	ldrb	r1, [r3, #19]
 8003376:	f107 030f 	add.w	r3, r7, #15
 800337a:	2201      	movs	r2, #1
 800337c:	f7fd fefe 	bl	800117c <i2cWrite>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <mpu_set_sensors+0x108>)
 8003388:	2200      	movs	r2, #0
 800338a:	729a      	strb	r2, [r3, #10]
        return -1;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003390:	e012      	b.n	80033b8 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <mpu_set_sensors+0xec>
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d002      	beq.n	80033a4 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800339e:	2000      	movs	r0, #0
 80033a0:	f000 f9a2 	bl	80036e8 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <mpu_set_sensors+0x108>)
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <mpu_set_sensors+0x108>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80033b0:	2032      	movs	r0, #50	; 0x32
 80033b2:	f002 fe89 	bl	80060c8 <HAL_Delay>
    return 0;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000010 	.word	0x20000010

080033c4 <mpu_get_fifo_cnt>:

    return 0;
}

int mpu_get_fifo_cnt()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
	unsigned char tmp[2];
	i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <mpu_get_fifo_cnt+0x2c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	7818      	ldrb	r0, [r3, #0]
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <mpu_get_fifo_cnt+0x2c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	7a99      	ldrb	r1, [r3, #10]
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2202      	movs	r2, #2
 80033da:	f7fd fef3 	bl	80011c4 <i2cRead>
	return (tmp[0] << 8) | tmp[1];
 80033de:	793b      	ldrb	r3, [r7, #4]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	797a      	ldrb	r2, [r7, #5]
 80033e4:	4313      	orrs	r3, r2
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000010 	.word	0x20000010

080033f4 <mpu_get_fifo_bytes>:

int mpu_get_fifo_bytes(uint8_t *data, uint8_t length)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	70fb      	strb	r3, [r7, #3]
	//when success will return 0
	return i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data);
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <mpu_get_fifo_bytes+0x2c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	7818      	ldrb	r0, [r3, #0]
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <mpu_get_fifo_bytes+0x2c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	7ad9      	ldrb	r1, [r3, #11]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f7fd fed8 	bl	80011c4 <i2cRead>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000010 	.word	0x20000010

08003424 <mpu_read_fifo_stream_last_packet>:
    more[0] = fifo_count / length - 1;
    return 0;
}

int mpu_read_fifo_stream_last_packet(unsigned short length, unsigned char *data)
{
 8003424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003428:	b089      	sub	sp, #36	; 0x24
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	6039      	str	r1, [r7, #0]
 8003430:	80fb      	strh	r3, [r7, #6]
	uint8_t packetReceived;
	uint8_t BUFFER_LENGTH = 32;
 8003432:	2320      	movs	r3, #32
 8003434:	76fb      	strb	r3, [r7, #27]
    int fifo_count;
    if (!st.chip_cfg.dmp_on)
 8003436:	4b48      	ldr	r3, [pc, #288]	; (8003558 <mpu_read_fifo_stream_last_packet+0x134>)
 8003438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <mpu_read_fifo_stream_last_packet+0x22>
        return -1;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003444:	e082      	b.n	800354c <mpu_read_fifo_stream_last_packet+0x128>
    if (!st.chip_cfg.sensors)
 8003446:	4b44      	ldr	r3, [pc, #272]	; (8003558 <mpu_read_fifo_stream_last_packet+0x134>)
 8003448:	7a9b      	ldrb	r3, [r3, #10]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <mpu_read_fifo_stream_last_packet+0x30>
        return -1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003452:	e07b      	b.n	800354c <mpu_read_fifo_stream_last_packet+0x128>

    do
    {
    	if((fifo_count = mpu_get_fifo_cnt())>length)
 8003454:	f7ff ffb6 	bl	80033c4 <mpu_get_fifo_cnt>
 8003458:	61f8      	str	r0, [r7, #28]
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	429a      	cmp	r2, r3
 8003460:	dd58      	ble.n	8003514 <mpu_read_fifo_stream_last_packet+0xf0>
    	{
    		if(fifo_count > 200)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2bc8      	cmp	r3, #200	; 0xc8
 8003466:	dd0b      	ble.n	8003480 <mpu_read_fifo_stream_last_packet+0x5c>
			{
				mpu_reset_fifo();
 8003468:	f7ff fb18 	bl	8002a9c <mpu_reset_fifo>
				fifo_count = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
				while(!(fifo_count = mpu_get_fifo_cnt()));
 8003470:	bf00      	nop
 8003472:	f7ff ffa7 	bl	80033c4 <mpu_get_fifo_cnt>
 8003476:	61f8      	str	r0, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f9      	beq.n	8003472 <mpu_read_fifo_stream_last_packet+0x4e>
 800347e:	e049      	b.n	8003514 <mpu_read_fifo_stream_last_packet+0xf0>
			}
			else
			{
 8003480:	466b      	mov	r3, sp
 8003482:	461e      	mov	r6, r3
				uint8_t trash[BUFFER_LENGTH];
 8003484:	7ef9      	ldrb	r1, [r7, #27]
 8003486:	460b      	mov	r3, r1
 8003488:	3b01      	subs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	b2cb      	uxtb	r3, r1
 800348e:	2200      	movs	r2, #0
 8003490:	461c      	mov	r4, r3
 8003492:	4615      	mov	r5, r2
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	00eb      	lsls	r3, r5, #3
 800349e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a2:	00e2      	lsls	r2, r4, #3
 80034a4:	b2cb      	uxtb	r3, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	4698      	mov	r8, r3
 80034aa:	4691      	mov	r9, r2
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c0:	460b      	mov	r3, r1
 80034c2:	3307      	adds	r3, #7
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	ebad 0d03 	sub.w	sp, sp, r3
 80034cc:	466b      	mov	r3, sp
 80034ce:	3300      	adds	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
				while((fifo_count = mpu_get_fifo_cnt()) > length)
 80034d2:	e017      	b.n	8003504 <mpu_read_fifo_stream_last_packet+0xe0>
				{
					fifo_count -= length; // save the last packet
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	61fb      	str	r3, [r7, #28]
					uint16_t removeBytes;
					while(fifo_count)
 80034dc:	e00f      	b.n	80034fe <mpu_read_fifo_stream_last_packet+0xda>
					{
						removeBytes = (fifo_count > BUFFER_LENGTH)?BUFFER_LENGTH:fifo_count;
 80034de:	7efa      	ldrb	r2, [r7, #27]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4293      	cmp	r3, r2
 80034e4:	bfa8      	it	ge
 80034e6:	4613      	movge	r3, r2
 80034e8:	81fb      	strh	r3, [r7, #14]
						mpu_get_fifo_bytes(trash, removeBytes);
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6938      	ldr	r0, [r7, #16]
 80034f2:	f7ff ff7f 	bl	80033f4 <mpu_get_fifo_bytes>
						fifo_count -= removeBytes;
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	61fb      	str	r3, [r7, #28]
					while(fifo_count)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ec      	bne.n	80034de <mpu_read_fifo_stream_last_packet+0xba>
				while((fifo_count = mpu_get_fifo_cnt()) > length)
 8003504:	f7ff ff5e 	bl	80033c4 <mpu_get_fifo_cnt>
 8003508:	61f8      	str	r0, [r7, #28]
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	429a      	cmp	r2, r3
 8003510:	dce0      	bgt.n	80034d4 <mpu_read_fifo_stream_last_packet+0xb0>
 8003512:	46b5      	mov	sp, r6
					}
				}
			}
    	}
    	if(!fifo_count)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <mpu_read_fifo_stream_last_packet+0x104>
    	{
    		while(!(fifo_count = mpu_get_fifo_cnt()));
 800351a:	bf00      	nop
 800351c:	f7ff ff52 	bl	80033c4 <mpu_get_fifo_cnt>
 8003520:	61f8      	str	r0, [r7, #28]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f9      	beq.n	800351c <mpu_read_fifo_stream_last_packet+0xf8>
    	}
    	packetReceived = fifo_count == length;
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	737b      	strb	r3, [r7, #13]
    }while(!packetReceived);
 8003538:	7b7b      	ldrb	r3, [r7, #13]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d08a      	beq.n	8003454 <mpu_read_fifo_stream_last_packet+0x30>

    mpu_get_fifo_bytes(data, length);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4619      	mov	r1, r3
 8003544:	6838      	ldr	r0, [r7, #0]
 8003546:	f7ff ff55 	bl	80033f4 <mpu_get_fifo_bytes>
    return 0;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3724      	adds	r7, #36	; 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003556:	bf00      	nop
 8003558:	20000010 	.word	0x20000010

0800355c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <mpu_set_bypass+0x188>)
 8003568:	7c9b      	ldrb	r3, [r3, #18]
 800356a:	79fa      	ldrb	r2, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d101      	bne.n	8003574 <mpu_set_bypass+0x18>
        return 0;
 8003570:	2300      	movs	r3, #0
 8003572:	e0b2      	b.n	80036da <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d050      	beq.n	800361c <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <mpu_set_bypass+0x188>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	7818      	ldrb	r0, [r3, #0]
 8003580:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <mpu_set_bypass+0x188>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	7919      	ldrb	r1, [r3, #4]
 8003586:	f107 030f 	add.w	r3, r7, #15
 800358a:	2201      	movs	r2, #1
 800358c:	f7fd fe1a 	bl	80011c4 <i2cRead>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <mpu_set_bypass+0x40>
            return -1;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359a:	e09e      	b.n	80036da <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	f023 0320 	bic.w	r3, r3, #32
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80035a6:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <mpu_set_bypass+0x188>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	7818      	ldrb	r0, [r3, #0]
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <mpu_set_bypass+0x188>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	7919      	ldrb	r1, [r3, #4]
 80035b2:	f107 030f 	add.w	r3, r7, #15
 80035b6:	2201      	movs	r2, #1
 80035b8:	f7fd fde0 	bl	800117c <i2cWrite>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <mpu_set_bypass+0x6c>
            return -1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c6:	e088      	b.n	80036da <mpu_set_bypass+0x17e>
        delay_ms(3);
 80035c8:	2003      	movs	r0, #3
 80035ca:	f002 fd7d 	bl	80060c8 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 80035ce:	2302      	movs	r3, #2
 80035d0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 80035d2:	4b44      	ldr	r3, [pc, #272]	; (80036e4 <mpu_set_bypass+0x188>)
 80035d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <mpu_set_bypass+0x188>)
 80035e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <mpu_set_bypass+0x188>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	7818      	ldrb	r0, [r3, #0]
 8003600:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <mpu_set_bypass+0x188>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	7d19      	ldrb	r1, [r3, #20]
 8003606:	f107 030f 	add.w	r3, r7, #15
 800360a:	2201      	movs	r2, #1
 800360c:	f7fd fdb6 	bl	800117c <i2cWrite>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d05d      	beq.n	80036d2 <mpu_set_bypass+0x176>
            return -1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800361a:	e05e      	b.n	80036da <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800361c:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <mpu_set_bypass+0x188>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	7818      	ldrb	r0, [r3, #0]
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <mpu_set_bypass+0x188>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	7919      	ldrb	r1, [r3, #4]
 8003628:	f107 030f 	add.w	r3, r7, #15
 800362c:	2201      	movs	r2, #1
 800362e:	f7fd fdc9 	bl	80011c4 <i2cRead>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <mpu_set_bypass+0xe2>
            return -1;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800363c:	e04d      	b.n	80036da <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <mpu_set_bypass+0x188>)
 8003640:	7a9b      	ldrb	r3, [r3, #10]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	f043 0320 	orr.w	r3, r3, #32
 8003650:	b2db      	uxtb	r3, r3
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e004      	b.n	8003660 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	f023 0320 	bic.w	r3, r3, #32
 800365c:	b2db      	uxtb	r3, r3
 800365e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <mpu_set_bypass+0x188>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	7818      	ldrb	r0, [r3, #0]
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <mpu_set_bypass+0x188>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	7919      	ldrb	r1, [r3, #4]
 800366c:	f107 030f 	add.w	r3, r7, #15
 8003670:	2201      	movs	r2, #1
 8003672:	f7fd fd83 	bl	800117c <i2cWrite>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <mpu_set_bypass+0x126>
            return -1;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003680:	e02b      	b.n	80036da <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003682:	2003      	movs	r0, #3
 8003684:	f002 fd20 	bl	80060c8 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <mpu_set_bypass+0x188>)
 800368a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e001      	b.n	800369c <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <mpu_set_bypass+0x188>)
 800369e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <mpu_set_bypass+0x188>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	7818      	ldrb	r0, [r3, #0]
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <mpu_set_bypass+0x188>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	7d19      	ldrb	r1, [r3, #20]
 80036bc:	f107 030f 	add.w	r3, r7, #15
 80036c0:	2201      	movs	r2, #1
 80036c2:	f7fd fd5b 	bl	800117c <i2cWrite>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <mpu_set_bypass+0x176>
            return -1;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d0:	e003      	b.n	80036da <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 80036d2:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <mpu_set_bypass+0x188>)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	7493      	strb	r3, [r2, #18]
    return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000010 	.word	0x20000010

080036e8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <mpu_set_int_latched+0x84>)
 80036f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80036f8:	79fa      	ldrb	r2, [r7, #7]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d101      	bne.n	8003702 <mpu_set_int_latched+0x1a>
        return 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	e030      	b.n	8003764 <mpu_set_int_latched+0x7c>

    if (enable)
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003708:	2330      	movs	r3, #48	; 0x30
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e001      	b.n	8003712 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <mpu_set_int_latched+0x84>)
 8003714:	7c9b      	ldrb	r3, [r3, #18]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	b2db      	uxtb	r3, r3
 8003722:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <mpu_set_int_latched+0x84>)
 8003726:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003734:	b2db      	uxtb	r3, r3
 8003736:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <mpu_set_int_latched+0x84>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	7818      	ldrb	r0, [r3, #0]
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <mpu_set_int_latched+0x84>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	7d19      	ldrb	r1, [r3, #20]
 8003744:	f107 030f 	add.w	r3, r7, #15
 8003748:	2201      	movs	r2, #1
 800374a:	f7fd fd17 	bl	800117c <i2cWrite>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <mpu_set_int_latched+0x72>
        return -1;
 8003754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003758:	e004      	b.n	8003764 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <mpu_set_int_latched+0x84>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000010 	.word	0x20000010

08003770 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8003778:	4b41      	ldr	r3, [pc, #260]	; (8003880 <get_accel_prod_shift+0x110>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	7818      	ldrb	r0, [r3, #0]
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	2204      	movs	r2, #4
 8003784:	210d      	movs	r1, #13
 8003786:	f7fd fd1d 	bl	80011c4 <i2cRead>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <get_accel_prod_shift+0x24>
        return 0x07;
 8003790:	2307      	movs	r3, #7
 8003792:	e071      	b.n	8003878 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8003794:	7c3b      	ldrb	r3, [r7, #16]
 8003796:	10db      	asrs	r3, r3, #3
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f003 031c 	and.w	r3, r3, #28
 800379e:	b25a      	sxtb	r2, r3
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	111b      	asrs	r3, r3, #4
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	b25b      	sxtb	r3, r3
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 80037b4:	7c7b      	ldrb	r3, [r7, #17]
 80037b6:	10db      	asrs	r3, r3, #3
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	f003 031c 	and.w	r3, r3, #28
 80037be:	b25a      	sxtb	r2, r3
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	109b      	asrs	r3, r3, #2
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 80037d4:	7cbb      	ldrb	r3, [r7, #18]
 80037d6:	10db      	asrs	r3, r3, #3
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	f003 031c 	and.w	r3, r3, #28
 80037de:	b25a      	sxtb	r2, r3
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	b25b      	sxtb	r3, r3
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
 80037f6:	e03b      	b.n	8003870 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	3318      	adds	r3, #24
 80037fc:	443b      	add	r3, r7
 80037fe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
            continue;
 8003814:	e029      	b.n	800386a <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	4a19      	ldr	r2, [pc, #100]	; (8003884 <get_accel_prod_shift+0x114>)
 8003820:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8003822:	e00f      	b.n	8003844 <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003888 <get_accel_prod_shift+0x118>
 800383c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003840:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	f103 0218 	add.w	r2, r3, #24
 800384a:	443a      	add	r2, r7
 800384c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003850:	3a01      	subs	r2, #1
 8003852:	b2d1      	uxtb	r1, r2
 8003854:	f103 0218 	add.w	r2, r3, #24
 8003858:	443a      	add	r2, r7
 800385a:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800385e:	3318      	adds	r3, #24
 8003860:	443b      	add	r3, r7
 8003862:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1dc      	bne.n	8003824 <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	3301      	adds	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d9c0      	bls.n	80037f8 <get_accel_prod_shift+0x88>
    }
    return 0;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20000010 	.word	0x20000010
 8003884:	3eae147b 	.word	0x3eae147b
 8003888:	3f845a1d 	.word	0x3f845a1d

0800388c <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ff66 	bl	8003770 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	e063      	b.n	8003972 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	440b      	add	r3, r1
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bfb8      	it	lt
 80038c4:	425b      	neglt	r3, r3
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ce:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003984 <accel_self_test+0xf8>
 80038d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3328      	adds	r3, #40	; 0x28
 80038e0:	443b      	add	r3, r7
 80038e2:	3b1c      	subs	r3, #28
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d023      	beq.n	800393a <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3328      	adds	r3, #40	; 0x28
 80038f8:	443b      	add	r3, r7
 80038fa:	3b1c      	subs	r3, #28
 80038fc:	ed93 7a00 	vldr	s14, [r3]
 8003900:	edd7 6a07 	vldr	s13, [r7, #28]
 8003904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800390c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003910:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8003914:	edd7 7a06 	vldr	s15, [r7, #24]
 8003918:	eef0 7ae7 	vabs.f32	s15, s15
 800391c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003988 <accel_self_test+0xfc>
 8003920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	dd20      	ble.n	800396c <accel_self_test+0xe0>
                result |= 1 << jj;
 800392a:	2201      	movs	r2, #1
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	4313      	orrs	r3, r2
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	e018      	b.n	800396c <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 800393a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800398c <accel_self_test+0x100>
 800393e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	d408      	bmi.n	800395e <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 800394c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003990 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8003950:	edd7 7a07 	vldr	s15, [r7, #28]
 8003954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	dd06      	ble.n	800396c <accel_self_test+0xe0>
            result |= 1 << jj;
 800395e:	2201      	movs	r2, #1
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	4313      	orrs	r3, r2
 800396a:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	3301      	adds	r3, #1
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	2b02      	cmp	r3, #2
 8003976:	dd98      	ble.n	80038aa <accel_self_test+0x1e>
    }

    return result;
 8003978:	6a3b      	ldr	r3, [r7, #32]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	47800000 	.word	0x47800000
 8003988:	3e0f5c29 	.word	0x3e0f5c29
 800398c:	3e99999a 	.word	0x3e99999a
 8003990:	3f733333 	.word	0x3f733333

08003994 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 80039a2:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <gyro_self_test+0x164>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	7818      	ldrb	r0, [r3, #0]
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	2203      	movs	r2, #3
 80039ae:	210d      	movs	r1, #13
 80039b0:	f7fd fc08 	bl	80011c4 <i2cRead>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <gyro_self_test+0x2a>
        return 0x07;
 80039ba:	2307      	movs	r3, #7
 80039bc:	e097      	b.n	8003aee <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 80039be:	7a3b      	ldrb	r3, [r7, #8]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 80039c8:	7a7b      	ldrb	r3, [r7, #9]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80039d2:	7abb      	ldrb	r3, [r7, #10]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e080      	b.n	8003ae4 <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	440b      	add	r3, r1
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bfb8      	it	lt
 80039fc:	425b      	neglt	r3, r3
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003afc <gyro_self_test+0x168>
 8003a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a0e:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8003a12:	f107 0208 	add.w	r2, r7, #8
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d045      	beq.n	8003aac <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 8003a20:	eddf 7a37 	vldr	s15, [pc, #220]	; 8003b00 <gyro_self_test+0x16c>
 8003a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a28:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003b04 <gyro_self_test+0x170>
 8003a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a30:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8003a34:	e007      	b.n	8003a46 <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8003a36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a3a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003b08 <gyro_self_test+0x174>
 8003a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a42:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8003a46:	f107 0208 	add.w	r2, r7, #8
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b2d9      	uxtb	r1, r3
 8003a54:	f107 0208 	add.w	r2, r7, #8
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	f107 0208 	add.w	r2, r7, #8
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8003a6e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003a72:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a82:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8003a86:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a8a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a8e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003b0c <gyro_self_test+0x178>
 8003a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	dd20      	ble.n	8003ade <gyro_self_test+0x14a>
                result |= 1 << jj;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	e018      	b.n	8003ade <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8003aac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ab0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	d408      	bmi.n	8003ad0 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 8003abe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003b10 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 8003ac2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	dd06      	ble.n	8003ade <gyro_self_test+0x14a>
            result |= 1 << jj;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f77f af7b 	ble.w	80039e2 <gyro_self_test+0x4e>
    }
    return result;
 8003aec:	69bb      	ldr	r3, [r7, #24]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000010 	.word	0x20000010
 8003afc:	47800000 	.word	0x47800000
 8003b00:	00000083 	.word	0x00000083
 8003b04:	454cb000 	.word	0x454cb000
 8003b08:	3f85e354 	.word	0x3f85e354
 8003b0c:	3e0f5c29 	.word	0x3e0f5c29
 8003b10:	42d20000 	.word	0x42d20000

08003b14 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b0b8      	sub	sp, #224	; 0xe0
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8003b20:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003b24:	4613      	mov	r3, r2
 8003b26:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8003b36:	4ba5      	ldr	r3, [pc, #660]	; (8003dcc <get_st_biases+0x2b8>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	7818      	ldrb	r0, [r3, #0]
 8003b3c:	4ba3      	ldr	r3, [pc, #652]	; (8003dcc <get_st_biases+0x2b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	7c99      	ldrb	r1, [r3, #18]
 8003b42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b46:	2202      	movs	r2, #2
 8003b48:	f7fd fb18 	bl	800117c <i2cWrite>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <get_st_biases+0x44>
        return -1;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b56:	e34b      	b.n	80041f0 <get_st_biases+0x6dc>
    delay_ms(200);
 8003b58:	20c8      	movs	r0, #200	; 0xc8
 8003b5a:	f002 fab5 	bl	80060c8 <HAL_Delay>
    data[0] = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8003b64:	4b99      	ldr	r3, [pc, #612]	; (8003dcc <get_st_biases+0x2b8>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	7818      	ldrb	r0, [r3, #0]
 8003b6a:	4b98      	ldr	r3, [pc, #608]	; (8003dcc <get_st_biases+0x2b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	7bd9      	ldrb	r1, [r3, #15]
 8003b70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b74:	2201      	movs	r2, #1
 8003b76:	f7fd fb01 	bl	800117c <i2cWrite>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <get_st_biases+0x72>
        return -1;
 8003b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b84:	e334      	b.n	80041f0 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003b86:	4b91      	ldr	r3, [pc, #580]	; (8003dcc <get_st_biases+0x2b8>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	7818      	ldrb	r0, [r3, #0]
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <get_st_biases+0x2b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	7959      	ldrb	r1, [r3, #5]
 8003b92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b96:	2201      	movs	r2, #1
 8003b98:	f7fd faf0 	bl	800117c <i2cWrite>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <get_st_biases+0x94>
        return -1;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba6:	e323      	b.n	80041f0 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003ba8:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <get_st_biases+0x2b8>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	7818      	ldrb	r0, [r3, #0]
 8003bae:	4b87      	ldr	r3, [pc, #540]	; (8003dcc <get_st_biases+0x2b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	7c99      	ldrb	r1, [r3, #18]
 8003bb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f7fd fadf 	bl	800117c <i2cWrite>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <get_st_biases+0xb6>
        return -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc8:	e312      	b.n	80041f0 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003bca:	4b80      	ldr	r3, [pc, #512]	; (8003dcc <get_st_biases+0x2b8>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	7818      	ldrb	r0, [r3, #0]
 8003bd0:	4b7e      	ldr	r3, [pc, #504]	; (8003dcc <get_st_biases+0x2b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	7dd9      	ldrb	r1, [r3, #23]
 8003bd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f7fd face 	bl	800117c <i2cWrite>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <get_st_biases+0xd8>
        return -1;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bea:	e301      	b.n	80041f0 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003bec:	4b77      	ldr	r3, [pc, #476]	; (8003dcc <get_st_biases+0x2b8>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	7818      	ldrb	r0, [r3, #0]
 8003bf2:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <get_st_biases+0x2b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	7919      	ldrb	r1, [r3, #4]
 8003bf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f7fd fabd 	bl	800117c <i2cWrite>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <get_st_biases+0xfa>
        return -1;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0c:	e2f0      	b.n	80041f0 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8003c0e:	230c      	movs	r3, #12
 8003c10:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003c14:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <get_st_biases+0x2b8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	7818      	ldrb	r0, [r3, #0]
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <get_st_biases+0x2b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	7919      	ldrb	r1, [r3, #4]
 8003c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c24:	2201      	movs	r2, #1
 8003c26:	f7fd faa9 	bl	800117c <i2cWrite>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <get_st_biases+0x122>
        return -1;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c34:	e2dc      	b.n	80041f0 <get_st_biases+0x6dc>
    delay_ms(15);
 8003c36:	200f      	movs	r0, #15
 8003c38:	f002 fa46 	bl	80060c8 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8003c3c:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <get_st_biases+0x2b8>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	7a5b      	ldrb	r3, [r3, #9]
 8003c42:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8003c46:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <get_st_biases+0x2b8>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	7818      	ldrb	r0, [r3, #0]
 8003c4c:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <get_st_biases+0x2b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	7899      	ldrb	r1, [r3, #2]
 8003c52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c56:	2201      	movs	r2, #1
 8003c58:	f7fd fa90 	bl	800117c <i2cWrite>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <get_st_biases+0x154>
        return -1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c66:	e2c3      	b.n	80041f0 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <get_st_biases+0x2b8>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	7a1b      	ldrb	r3, [r3, #8]
 8003c6e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8003c72:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <get_st_biases+0x2b8>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	7818      	ldrb	r0, [r3, #0]
 8003c78:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <get_st_biases+0x2b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	7859      	ldrb	r1, [r3, #1]
 8003c7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c82:	2201      	movs	r2, #1
 8003c84:	f7fd fa7a 	bl	800117c <i2cWrite>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <get_st_biases+0x180>
        return -1;
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c92:	e2ad      	b.n	80041f0 <get_st_biases+0x6dc>
    if (hw_test)
 8003c94:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <get_st_biases+0x2b8>)
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	7a9b      	ldrb	r3, [r3, #10]
 8003ca2:	f063 031f 	orn	r3, r3, #31
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8003cac:	e004      	b.n	8003cb8 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <get_st_biases+0x2b8>)
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	7a9b      	ldrb	r3, [r3, #10]
 8003cb4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003cb8:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <get_st_biases+0x2b8>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	7818      	ldrb	r0, [r3, #0]
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <get_st_biases+0x2b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	7999      	ldrb	r1, [r3, #6]
 8003cc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f7fd fa57 	bl	800117c <i2cWrite>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <get_st_biases+0x1c6>
        return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd8:	e28a      	b.n	80041f0 <get_st_biases+0x6dc>

    if (hw_test)
 8003cda:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8003ce2:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <get_st_biases+0x2b8>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	7adb      	ldrb	r3, [r3, #11]
 8003ce8:	f063 031f 	orn	r3, r3, #31
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8003cf2:	e002      	b.n	8003cfa <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 8003cf4:	2318      	movs	r3, #24
 8003cf6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <get_st_biases+0x2b8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	7818      	ldrb	r0, [r3, #0]
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <get_st_biases+0x2b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	79d9      	ldrb	r1, [r3, #7]
 8003d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f7fd fa36 	bl	800117c <i2cWrite>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <get_st_biases+0x208>
        return -1;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d1a:	e269      	b.n	80041f0 <get_st_biases+0x6dc>
    if (hw_test)
 8003d1c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <get_st_biases+0x216>
        delay_ms(200);
 8003d24:	20c8      	movs	r0, #200	; 0xc8
 8003d26:	f002 f9cf 	bl	80060c8 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8003d2a:	2340      	movs	r3, #64	; 0x40
 8003d2c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <get_st_biases+0x2b8>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	7818      	ldrb	r0, [r3, #0]
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <get_st_biases+0x2b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	7919      	ldrb	r1, [r3, #4]
 8003d3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d40:	2201      	movs	r2, #1
 8003d42:	f7fd fa1b 	bl	800117c <i2cWrite>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <get_st_biases+0x23e>
        return -1;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d50:	e24e      	b.n	80041f0 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8003d52:	2378      	movs	r3, #120	; 0x78
 8003d54:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <get_st_biases+0x2b8>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	7818      	ldrb	r0, [r3, #0]
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <get_st_biases+0x2b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	7959      	ldrb	r1, [r3, #5]
 8003d64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f7fd fa07 	bl	800117c <i2cWrite>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <get_st_biases+0x266>
        return -1;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d78:	e23a      	b.n	80041f0 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8003d7a:	2332      	movs	r3, #50	; 0x32
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 f9a3 	bl	80060c8 <HAL_Delay>
    data[0] = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <get_st_biases+0x2b8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	7818      	ldrb	r0, [r3, #0]
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <get_st_biases+0x2b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	7959      	ldrb	r1, [r3, #5]
 8003d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f7fd f9ef 	bl	800117c <i2cWrite>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <get_st_biases+0x296>
        return -1;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003da8:	e222      	b.n	80041f0 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <get_st_biases+0x2b8>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	7818      	ldrb	r0, [r3, #0]
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <get_st_biases+0x2b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	7a99      	ldrb	r1, [r3, #10]
 8003db6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f7fd fa02 	bl	80011c4 <i2cRead>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <get_st_biases+0x2bc>
        return -1;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dca:	e211      	b.n	80041f0 <get_st_biases+0x6dc>
 8003dcc:	20000010 	.word	0x20000010

    fifo_count = (data[0] << 8) | data[1];
 8003dd0:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	b21a      	sxth	r2, r3
 8003dd8:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8003de6:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <get_st_biases+0x34c>)
 8003dec:	fba3 2302 	umull	r2, r3, r3, r2
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8003df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dfc:	f103 0108 	add.w	r1, r3, #8
 8003e00:	2300      	movs	r3, #0
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	680b      	ldr	r3, [r1, #0]
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e14:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8003e16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e1a:	f103 0108 	add.w	r1, r3, #8
 8003e1e:	2300      	movs	r3, #0
 8003e20:	600b      	str	r3, [r1, #0]
 8003e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	680b      	ldr	r3, [r1, #0]
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e32:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003e3a:	e0a0      	b.n	8003f7e <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <get_st_biases+0x350>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	7818      	ldrb	r0, [r3, #0]
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <get_st_biases+0x350>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	7ad9      	ldrb	r1, [r3, #11]
 8003e48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e4c:	220c      	movs	r2, #12
 8003e4e:	f7fd f9b9 	bl	80011c4 <i2cRead>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <get_st_biases+0x354>
            return -1;
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e5c:	e1c8      	b.n	80041f0 <get_st_biases+0x6dc>
 8003e5e:	bf00      	nop
 8003e60:	aaaaaaab 	.word	0xaaaaaaab
 8003e64:	20000010 	.word	0x20000010
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8003e68:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003e74:	b21b      	sxth	r3, r3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8003e7e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	b21a      	sxth	r2, r3
 8003e86:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8003e94:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b21b      	sxth	r3, r3
 8003ea6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 8003eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8003eb4:	441a      	add	r2, r3
 8003eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eba:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8003ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	180b      	adds	r3, r1, r0
 8003ed2:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8003ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ed8:	3308      	adds	r3, #8
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ee6:	f103 0208 	add.w	r2, r3, #8
 8003eea:	180b      	adds	r3, r1, r0
 8003eec:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8003eee:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	b21a      	sxth	r2, r3
 8003ef6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8003f04:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8003f1a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	b21a      	sxth	r2, r3
 8003f22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 8003f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8003f3a:	441a      	add	r2, r3
 8003f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f40:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8003f42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f46:	3304      	adds	r3, #4
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f54:	1d1a      	adds	r2, r3, #4
 8003f56:	180b      	adds	r3, r1, r0
 8003f58:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8003f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f5e:	3308      	adds	r3, #8
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f6c:	f103 0208 	add.w	r2, r3, #8
 8003f70:	180b      	adds	r3, r1, r0
 8003f72:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8003f74:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003f7e:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003f82:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f86:	429a      	cmp	r2, r3
 8003f88:	f4ff af58 	bcc.w	8003e3c <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8003f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	17da      	asrs	r2, r3, #31
 8003f94:	461c      	mov	r4, r3
 8003f96:	4615      	mov	r5, r2
 8003f98:	1423      	asrs	r3, r4, #16
 8003f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f9e:	0423      	lsls	r3, r4, #16
 8003fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fa4:	2283      	movs	r2, #131	; 0x83
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fb0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003fb4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003fb8:	f7fc fe4e 	bl	8000c58 <__aeabi_ldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fd2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003fd6:	f7fc fe3f 	bl	8000c58 <__aeabi_ldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fe2:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8003fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fe8:	3304      	adds	r3, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	17da      	asrs	r2, r3, #31
 8003fee:	4698      	mov	r8, r3
 8003ff0:	4691      	mov	r9, r2
 8003ff2:	ea4f 4328 	mov.w	r3, r8, asr #16
 8003ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ffa:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8003ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004002:	2283      	movs	r2, #131	; 0x83
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800400e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004012:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004016:	f7fc fe1f 	bl	8000c58 <__aeabi_ldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004026:	2200      	movs	r2, #0
 8004028:	67bb      	str	r3, [r7, #120]	; 0x78
 800402a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800402c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004030:	f7fc fe12 	bl	8000c58 <__aeabi_ldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004040:	1d1a      	adds	r2, r3, #4
 8004042:	4603      	mov	r3, r0
 8004044:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8004046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800404a:	3308      	adds	r3, #8
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	17da      	asrs	r2, r3, #31
 8004050:	469a      	mov	sl, r3
 8004052:	4693      	mov	fp, r2
 8004054:	ea4f 432a 	mov.w	r3, sl, asr #16
 8004058:	677b      	str	r3, [r7, #116]	; 0x74
 800405a:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800405e:	673b      	str	r3, [r7, #112]	; 0x70
 8004060:	2283      	movs	r2, #131	; 0x83
 8004062:	2300      	movs	r3, #0
 8004064:	66ba      	str	r2, [r7, #104]	; 0x68
 8004066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004068:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800406c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004070:	f7fc fdf2 	bl	8000c58 <__aeabi_ldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004080:	2200      	movs	r2, #0
 8004082:	663b      	str	r3, [r7, #96]	; 0x60
 8004084:	667a      	str	r2, [r7, #100]	; 0x64
 8004086:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800408a:	f7fc fde5 	bl	8000c58 <__aeabi_ldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800409a:	f103 0208 	add.w	r2, r3, #8
 800409e:	4603      	mov	r3, r0
 80040a0:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 80040a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	17da      	asrs	r2, r3, #31
 80040aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ac:	65fa      	str	r2, [r7, #92]	; 0x5c
 80040ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80040b2:	460b      	mov	r3, r1
 80040b4:	141b      	asrs	r3, r3, #16
 80040b6:	657b      	str	r3, [r7, #84]	; 0x54
 80040b8:	460b      	mov	r3, r1
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	653b      	str	r3, [r7, #80]	; 0x50
 80040be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c2:	2300      	movs	r3, #0
 80040c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040d0:	f7fc fdc2 	bl	8000c58 <__aeabi_ldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80040e0:	2200      	movs	r2, #0
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
 80040e4:	647a      	str	r2, [r7, #68]	; 0x44
 80040e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ea:	f7fc fdb5 	bl	8000c58 <__aeabi_ldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040f6:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80040f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040fc:	3304      	adds	r3, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	17da      	asrs	r2, r3, #31
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38
 8004104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004106:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800410a:	460b      	mov	r3, r1
 800410c:	141b      	asrs	r3, r3, #16
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
 8004110:	460b      	mov	r3, r1
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
 8004116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800411a:	2300      	movs	r3, #0
 800411c:	62ba      	str	r2, [r7, #40]	; 0x28
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004124:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004128:	f7fc fd96 	bl	8000c58 <__aeabi_ldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004138:	2200      	movs	r2, #0
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	627a      	str	r2, [r7, #36]	; 0x24
 800413e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004142:	f7fc fd89 	bl	8000c58 <__aeabi_ldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004152:	3304      	adds	r3, #4
 8004154:	4602      	mov	r2, r0
 8004156:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8004158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800415c:	3308      	adds	r3, #8
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	17da      	asrs	r2, r3, #31
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	61fa      	str	r2, [r7, #28]
 8004166:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800416a:	460b      	mov	r3, r1
 800416c:	141b      	asrs	r3, r3, #16
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	460b      	mov	r3, r1
 8004172:	041b      	lsls	r3, r3, #16
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800417a:	2300      	movs	r3, #0
 800417c:	60ba      	str	r2, [r7, #8]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004188:	f7fc fd66 	bl	8000c58 <__aeabi_ldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004198:	2200      	movs	r2, #0
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a2:	f7fc fd59 	bl	8000c58 <__aeabi_ldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041b2:	3308      	adds	r3, #8
 80041b4:	4602      	mov	r2, r0
 80041b6:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 80041b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041bc:	3308      	adds	r3, #8
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dd0a      	ble.n	80041da <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 80041c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041c8:	3308      	adds	r3, #8
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041d0:	3308      	adds	r3, #8
 80041d2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e009      	b.n	80041ee <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 80041da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041de:	3308      	adds	r3, #8
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041e6:	3308      	adds	r3, #8
 80041e8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80041ec:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	37e0      	adds	r7, #224	; 0xe0
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop

080041fc <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08e      	sub	sp, #56	; 0x38
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8004206:	2302      	movs	r3, #2
 8004208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <mpu_run_self_test+0x1a4>)
 800420e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8004216:	2000      	movs	r0, #0
 8004218:	f000 f9e6 	bl	80045e8 <mpu_set_dmp_state>
        dmp_was_on = 1;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004222:	e002      	b.n	800422a <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fd32 	bl	8002c98 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8004234:	f107 030f 	add.w	r3, r7, #15
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fdb5 	bl	8002da8 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fe52 	bl	8002eec <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8004248:	f107 030a 	add.w	r3, r7, #10
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fed9 	bl	8003004 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8004252:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <mpu_run_self_test+0x1a4>)
 8004254:	7a9b      	ldrb	r3, [r3, #10]
 8004256:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 800425a:	f107 030e 	add.w	r3, r7, #14
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe ffc6 	bl	80031f0 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8004264:	2300      	movs	r3, #0
 8004266:	637b      	str	r3, [r7, #52]	; 0x34
 8004268:	e00a      	b.n	8004280 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 800426a:	2200      	movs	r2, #0
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fc50 	bl	8003b14 <get_st_biases>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 800427a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427c:	3301      	adds	r3, #1
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004286:	429a      	cmp	r2, r3
 8004288:	dbef      	blt.n	800426a <mpu_run_self_test+0x6e>
 800428a:	e000      	b.n	800428e <mpu_run_self_test+0x92>
            break;
 800428c:	bf00      	nop
    if (ii == tries) {
 800428e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004294:	429a      	cmp	r2, r3
 8004296:	d102      	bne.n	800429e <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800429c:	e045      	b.n	800432a <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800429e:	2300      	movs	r3, #0
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
 80042a2:	e00d      	b.n	80042c0 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 80042a4:	f107 0110 	add.w	r1, r7, #16
 80042a8:	f107 031c 	add.w	r3, r7, #28
 80042ac:	2201      	movs	r2, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fc30 	bl	8003b14 <get_st_biases>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	3301      	adds	r3, #1
 80042be:	637b      	str	r3, [r7, #52]	; 0x34
 80042c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c6:	429a      	cmp	r2, r3
 80042c8:	dbec      	blt.n	80042a4 <mpu_run_self_test+0xa8>
 80042ca:	e000      	b.n	80042ce <mpu_run_self_test+0xd2>
            break;
 80042cc:	bf00      	nop
    if (ii == tries) {
 80042ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d102      	bne.n	80042de <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 80042dc:	e025      	b.n	800432a <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 80042de:	f107 0310 	add.w	r3, r7, #16
 80042e2:	4619      	mov	r1, r3
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f7ff fad1 	bl	800388c <accel_self_test>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 80042f0:	f107 031c 	add.w	r3, r7, #28
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fb4c 	bl	8003994 <gyro_self_test>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 8004306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <mpu_run_self_test+0x11a>
        result |= 0x01;
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 8004316:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
 8004326:	e000      	b.n	800432a <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8004328:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <mpu_run_self_test+0x1a4>)
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <mpu_run_self_test+0x1a4>)
 8004332:	22ff      	movs	r2, #255	; 0xff
 8004334:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <mpu_run_self_test+0x1a4>)
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <mpu_run_self_test+0x1a4>)
 800433e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004342:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <mpu_run_self_test+0x1a4>)
 8004346:	22ff      	movs	r2, #255	; 0xff
 8004348:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <mpu_run_self_test+0x1a4>)
 800434c:	22ff      	movs	r2, #255	; 0xff
 800434e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <mpu_run_self_test+0x1a4>)
 8004352:	2201      	movs	r2, #1
 8004354:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8004356:	89bb      	ldrh	r3, [r7, #12]
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe fcd1 	bl	8002d00 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fd5b 	bl	8002e1c <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe fdfd 	bl	8002f68 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fe61 	bl	8003038 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8004376:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe ff9c 	bl	80032b8 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8004380:	7bbb      	ldrb	r3, [r7, #14]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe ff46 	bl	8003214 <mpu_configure_fifo>

    if (dmp_was_on)
 8004388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 8004390:	2001      	movs	r0, #1
 8004392:	f000 f929 	bl	80045e8 <mpu_set_dmp_state>

    return result;
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004398:	4618      	mov	r0, r3
 800439a:	3738      	adds	r7, #56	; 0x38
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000010 	.word	0x20000010

080043a4 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	603a      	str	r2, [r7, #0]
 80043ae:	80fb      	strh	r3, [r7, #6]
 80043b0:	460b      	mov	r3, r1
 80043b2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <mpu_write_mem+0x1c>
        return -1;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043be:	e03d      	b.n	800443c <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <mpu_write_mem+0xa0>)
 80043c2:	7a9b      	ldrb	r3, [r3, #10]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <mpu_write_mem+0x2a>
        return -1;
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043cc:	e036      	b.n	800443c <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80043de:	7b7b      	ldrb	r3, [r7, #13]
 80043e0:	461a      	mov	r2, r3
 80043e2:	88bb      	ldrh	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <mpu_write_mem+0xa0>)
 80043e8:	6852      	ldr	r2, [r2, #4]
 80043ea:	8952      	ldrh	r2, [r2, #10]
 80043ec:	4293      	cmp	r3, r2
 80043ee:	dd02      	ble.n	80043f6 <mpu_write_mem+0x52>
        return -1;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f4:	e022      	b.n	800443c <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <mpu_write_mem+0xa0>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	7818      	ldrb	r0, [r3, #0]
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <mpu_write_mem+0xa0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	7e19      	ldrb	r1, [r3, #24]
 8004402:	f107 030c 	add.w	r3, r7, #12
 8004406:	2202      	movs	r2, #2
 8004408:	f7fc feb8 	bl	800117c <i2cWrite>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <mpu_write_mem+0x74>
        return -1;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004416:	e011      	b.n	800443c <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <mpu_write_mem+0xa0>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	7818      	ldrb	r0, [r3, #0]
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <mpu_write_mem+0xa0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	7d59      	ldrb	r1, [r3, #21]
 8004424:	88bb      	ldrh	r3, [r7, #4]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f7fc fea7 	bl	800117c <i2cWrite>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <mpu_write_mem+0x96>
        return -1;
 8004434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004438:	e000      	b.n	800443c <mpu_write_mem+0x98>
    return 0;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000010 	.word	0x20000010

08004448 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	603a      	str	r2, [r7, #0]
 8004452:	80fb      	strh	r3, [r7, #6]
 8004454:	460b      	mov	r3, r1
 8004456:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <mpu_read_mem+0x1c>
        return -1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004462:	e03d      	b.n	80044e0 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004464:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <mpu_read_mem+0xa0>)
 8004466:	7a9b      	ldrb	r3, [r3, #10]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <mpu_read_mem+0x2a>
        return -1;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004470:	e036      	b.n	80044e0 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	b29b      	uxth	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8004482:	7b7b      	ldrb	r3, [r7, #13]
 8004484:	461a      	mov	r2, r3
 8004486:	88bb      	ldrh	r3, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <mpu_read_mem+0xa0>)
 800448c:	6852      	ldr	r2, [r2, #4]
 800448e:	8952      	ldrh	r2, [r2, #10]
 8004490:	4293      	cmp	r3, r2
 8004492:	dd02      	ble.n	800449a <mpu_read_mem+0x52>
        return -1;
 8004494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004498:	e022      	b.n	80044e0 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <mpu_read_mem+0xa0>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	7818      	ldrb	r0, [r3, #0]
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <mpu_read_mem+0xa0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	7e19      	ldrb	r1, [r3, #24]
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	2202      	movs	r2, #2
 80044ac:	f7fc fe66 	bl	800117c <i2cWrite>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <mpu_read_mem+0x74>
        return -1;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ba:	e011      	b.n	80044e0 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <mpu_read_mem+0xa0>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	7818      	ldrb	r0, [r3, #0]
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <mpu_read_mem+0xa0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	7d59      	ldrb	r1, [r3, #21]
 80044c8:	88bb      	ldrh	r3, [r7, #4]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f7fc fe79 	bl	80011c4 <i2cRead>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <mpu_read_mem+0x96>
        return -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044dc:	e000      	b.n	80044e0 <mpu_read_mem+0x98>
    return 0;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000010 	.word	0x20000010

080044ec <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	4611      	mov	r1, r2
 80044f6:	461a      	mov	r2, r3
 80044f8:	4603      	mov	r3, r0
 80044fa:	81fb      	strh	r3, [r7, #14]
 80044fc:	460b      	mov	r3, r1
 80044fe:	81bb      	strh	r3, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8004504:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <mpu_load_firmware+0xf8>)
 8004506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004512:	e062      	b.n	80045da <mpu_load_firmware+0xee>

    if (!firmware)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <mpu_load_firmware+0x34>
        return -1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451e:	e05c      	b.n	80045da <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004520:	2300      	movs	r3, #0
 8004522:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004524:	e034      	b.n	8004590 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8004526:	89fa      	ldrh	r2, [r7, #14]
 8004528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b10      	cmp	r3, #16
 800452e:	bfa8      	it	ge
 8004530:	2310      	movge	r3, #16
 8004532:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8004534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	441a      	add	r2, r3
 800453a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800453c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff30 	bl	80043a4 <mpu_write_mem>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <mpu_load_firmware+0x64>
            return -1;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800454e:	e044      	b.n	80045da <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8004550:	f107 0214 	add.w	r2, r7, #20
 8004554:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff75 	bl	8004448 <mpu_read_mem>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <mpu_load_firmware+0x7e>
            return -1;
 8004564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004568:	e037      	b.n	80045da <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 800456a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	4413      	add	r3, r2
 8004570:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004572:	f107 0114 	add.w	r1, r7, #20
 8004576:	4618      	mov	r0, r3
 8004578:	f003 ff9c 	bl	80084b4 <memcmp>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <mpu_load_firmware+0x9c>
            return -2;
 8004582:	f06f 0301 	mvn.w	r3, #1
 8004586:	e028      	b.n	80045da <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004588:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800458a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800458c:	4413      	add	r3, r2
 800458e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004590:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004592:	89fb      	ldrh	r3, [r7, #14]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3c6      	bcc.n	8004526 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8004598:	89bb      	ldrh	r3, [r7, #12]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	b29b      	uxth	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80045a2:	89bb      	ldrh	r3, [r7, #12]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <mpu_load_firmware+0xf8>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	7818      	ldrb	r0, [r3, #0]
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <mpu_load_firmware+0xf8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	7e99      	ldrb	r1, [r3, #26]
 80045b4:	f107 0310 	add.w	r3, r7, #16
 80045b8:	2202      	movs	r2, #2
 80045ba:	f7fc fddf 	bl	800117c <i2cWrite>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <mpu_load_firmware+0xde>
        return -1;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c8:	e007      	b.n	80045da <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <mpu_load_firmware+0xf8>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <mpu_load_firmware+0xf8>)
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000010 	.word	0x20000010

080045e8 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <mpu_set_dmp_state+0xa4>)
 80045f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045f8:	79fa      	ldrb	r2, [r7, #7]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d101      	bne.n	8004602 <mpu_set_dmp_state+0x1a>
        return 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	e040      	b.n	8004684 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d027      	beq.n	8004658 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <mpu_set_dmp_state+0xa4>)
 800460a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <mpu_set_dmp_state+0x30>
            return -1;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004616:	e035      	b.n	8004684 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8004618:	2000      	movs	r0, #0
 800461a:	f7fe f867 	bl	80026ec <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800461e:	2000      	movs	r0, #0
 8004620:	f7fe ff9c 	bl	800355c <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <mpu_set_dmp_state+0xa4>)
 8004626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fd05 	bl	8003038 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004632:	4b16      	ldr	r3, [pc, #88]	; (800468c <mpu_set_dmp_state+0xa4>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	7818      	ldrb	r0, [r3, #0]
 8004638:	f107 030f 	add.w	r3, r7, #15
 800463c:	2201      	movs	r2, #1
 800463e:	2123      	movs	r1, #35	; 0x23
 8004640:	f7fc fd9c 	bl	800117c <i2cWrite>
        st.chip_cfg.dmp_on = 1;
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <mpu_set_dmp_state+0xa4>)
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800464c:	2001      	movs	r0, #1
 800464e:	f7fe f84d 	bl	80026ec <set_int_enable>
        mpu_reset_fifo();
 8004652:	f7fe fa23 	bl	8002a9c <mpu_reset_fifo>
 8004656:	e014      	b.n	8004682 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fe f847 	bl	80026ec <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <mpu_set_dmp_state+0xa4>)
 8004660:	7c1b      	ldrb	r3, [r3, #16]
 8004662:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <mpu_set_dmp_state+0xa4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	7818      	ldrb	r0, [r3, #0]
 800466a:	f107 030f 	add.w	r3, r7, #15
 800466e:	2201      	movs	r2, #1
 8004670:	2123      	movs	r1, #35	; 0x23
 8004672:	f7fc fd83 	bl	800117c <i2cWrite>
        st.chip_cfg.dmp_on = 0;
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <mpu_set_dmp_state+0xa4>)
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 800467e:	f7fe fa0d 	bl	8002a9c <mpu_reset_fifo>
    }
    return 0;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000010 	.word	0x20000010

08004690 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <mpu_reset_dmp>:

void mpu_reset_dmp()
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af02      	add	r7, sp, #8
//    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true, wireObj);
    IICwriteBits(0xD0, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT,1,1);
 80046aa:	2301      	movs	r3, #1
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2301      	movs	r3, #1
 80046b0:	2203      	movs	r2, #3
 80046b2:	216a      	movs	r1, #106	; 0x6a
 80046b4:	20d0      	movs	r0, #208	; 0xd0
 80046b6:	f7fc fe36 	bl	8001326 <IICwriteBits>
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80046c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c8:	23c8      	movs	r3, #200	; 0xc8
 80046ca:	4904      	ldr	r1, [pc, #16]	; (80046dc <dmp_load_motion_driver_firmware+0x1c>)
 80046cc:	f640 30f6 	movw	r0, #3062	; 0xbf6
 80046d0:	f7ff ff0c 	bl	80044ec <mpu_load_firmware>
 80046d4:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	0800bf8c 	.word	0x0800bf8c

080046e0 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 80046ea:	4a6e      	ldr	r2, [pc, #440]	; (80048a4 <dmp_set_orientation+0x1c4>)
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	4611      	mov	r1, r2
 80046f4:	8019      	strh	r1, [r3, #0]
 80046f6:	3302      	adds	r3, #2
 80046f8:	0c12      	lsrs	r2, r2, #16
 80046fa:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80046fc:	4a6a      	ldr	r2, [pc, #424]	; (80048a8 <dmp_set_orientation+0x1c8>)
 80046fe:	f107 0310 	add.w	r3, r7, #16
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	8019      	strh	r1, [r3, #0]
 8004708:	3302      	adds	r3, #2
 800470a:	0c12      	lsrs	r2, r2, #16
 800470c:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800470e:	4a67      	ldr	r2, [pc, #412]	; (80048ac <dmp_set_orientation+0x1cc>)
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4611      	mov	r1, r2
 8004718:	8019      	strh	r1, [r3, #0]
 800471a:	3302      	adds	r3, #2
 800471c:	0c12      	lsrs	r2, r2, #16
 800471e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8004720:	4a63      	ldr	r2, [pc, #396]	; (80048b0 <dmp_set_orientation+0x1d0>)
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	4611      	mov	r1, r2
 800472a:	8019      	strh	r1, [r3, #0]
 800472c:	3302      	adds	r3, #2
 800472e:	0c12      	lsrs	r2, r2, #16
 8004730:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	3320      	adds	r3, #32
 800473a:	443b      	add	r3, r7
 800473c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004740:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	08db      	lsrs	r3, r3, #3
 8004746:	b29b      	uxth	r3, r3
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	3320      	adds	r3, #32
 800474e:	443b      	add	r3, r7
 8004750:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004754:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	b29b      	uxth	r3, r3
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	3320      	adds	r3, #32
 8004762:	443b      	add	r3, r7
 8004764:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004768:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	3320      	adds	r3, #32
 8004772:	443b      	add	r3, r7
 8004774:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004778:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	b29b      	uxth	r3, r3
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	3320      	adds	r3, #32
 8004786:	443b      	add	r3, r7
 8004788:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800478c:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	b29b      	uxth	r3, r3
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	3320      	adds	r3, #32
 800479a:	443b      	add	r3, r7
 800479c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047a0:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80047a2:	f107 031c 	add.w	r3, r7, #28
 80047a6:	461a      	mov	r2, r3
 80047a8:	2103      	movs	r1, #3
 80047aa:	f240 4026 	movw	r0, #1062	; 0x426
 80047ae:	f7ff fdf9 	bl	80043a4 <mpu_write_mem>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <dmp_set_orientation+0xde>
        return -1;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047bc:	e06e      	b.n	800489c <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 80047be:	f107 0318 	add.w	r3, r7, #24
 80047c2:	461a      	mov	r2, r3
 80047c4:	2103      	movs	r1, #3
 80047c6:	f240 402a 	movw	r0, #1066	; 0x42a
 80047ca:	f7ff fdeb 	bl	80043a4 <mpu_write_mem>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <dmp_set_orientation+0xfa>
        return -1;
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d8:	e060      	b.n	800489c <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 80047da:	f107 031c 	add.w	r3, r7, #28
 80047de:	f107 020c 	add.w	r2, r7, #12
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	4611      	mov	r1, r2
 80047e6:	8019      	strh	r1, [r3, #0]
 80047e8:	3302      	adds	r3, #2
 80047ea:	0c12      	lsrs	r2, r2, #16
 80047ec:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 80047ee:	f107 0318 	add.w	r3, r7, #24
 80047f2:	f107 0208 	add.w	r2, r7, #8
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	4611      	mov	r1, r2
 80047fa:	8019      	strh	r1, [r3, #0]
 80047fc:	3302      	adds	r3, #2
 80047fe:	0c12      	lsrs	r2, r2, #16
 8004800:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 800480c:	7f3b      	ldrb	r3, [r7, #28]
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8004816:	7e3b      	ldrb	r3, [r7, #24]
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800482a:	7f7b      	ldrb	r3, [r7, #29]
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8004834:	7e7b      	ldrb	r3, [r7, #25]
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8004848:	7fbb      	ldrb	r3, [r7, #30]
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8004852:	7ebb      	ldrb	r3, [r7, #26]
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800485c:	f107 031c 	add.w	r3, r7, #28
 8004860:	461a      	mov	r2, r3
 8004862:	2103      	movs	r1, #3
 8004864:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8004868:	f7ff fd9c 	bl	80043a4 <mpu_write_mem>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <dmp_set_orientation+0x198>
        return -1;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004876:	e011      	b.n	800489c <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8004878:	f107 0318 	add.w	r3, r7, #24
 800487c:	461a      	mov	r2, r3
 800487e:	2103      	movs	r1, #3
 8004880:	f240 4031 	movw	r0, #1073	; 0x431
 8004884:	f7ff fd8e 	bl	80043a4 <mpu_write_mem>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <dmp_set_orientation+0x1b4>
        return -1;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004892:	e003      	b.n	800489c <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8004894:	4a07      	ldr	r2, [pc, #28]	; (80048b4 <dmp_set_orientation+0x1d4>)
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	8113      	strh	r3, [r2, #8]
    return 0;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0800be84 	.word	0x0800be84
 80048a8:	0800be88 	.word	0x0800be88
 80048ac:	0800be8c 	.word	0x0800be8c
 80048b0:	0800be90 	.word	0x0800be90
 80048b4:	2000030c 	.word	0x2000030c

080048b8 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b08c      	sub	sp, #48	; 0x30
 80048be:	af00      	add	r7, sp, #0
 80048c0:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 80048c2:	4b80      	ldr	r3, [pc, #512]	; (8004ac4 <dmp_set_gyro_bias+0x20c>)
 80048c4:	891b      	ldrh	r3, [r3, #8]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 80048d4:	4b7b      	ldr	r3, [pc, #492]	; (8004ac4 <dmp_set_gyro_bias+0x20c>)
 80048d6:	891b      	ldrh	r3, [r3, #8]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	425b      	negs	r3, r3
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80048e6:	4b77      	ldr	r3, [pc, #476]	; (8004ac4 <dmp_set_gyro_bias+0x20c>)
 80048e8:	891b      	ldrh	r3, [r3, #8]
 80048ea:	08db      	lsrs	r3, r3, #3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 80048fc:	4b71      	ldr	r3, [pc, #452]	; (8004ac4 <dmp_set_gyro_bias+0x20c>)
 80048fe:	891b      	ldrh	r3, [r3, #8]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	425b      	negs	r3, r3
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800490e:	4b6d      	ldr	r3, [pc, #436]	; (8004ac4 <dmp_set_gyro_bias+0x20c>)
 8004910:	891b      	ldrh	r3, [r3, #8]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	b29b      	uxth	r3, r3
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 8004924:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <dmp_set_gyro_bias+0x20c>)
 8004926:	891b      	ldrh	r3, [r3, #8]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	425b      	negs	r3, r3
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	17da      	asrs	r2, r3, #31
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	617a      	str	r2, [r7, #20]
 800493e:	4b62      	ldr	r3, [pc, #392]	; (8004ac8 <dmp_set_gyro_bias+0x210>)
 8004940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004944:	460a      	mov	r2, r1
 8004946:	fb03 f202 	mul.w	r2, r3, r2
 800494a:	2300      	movs	r3, #0
 800494c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004950:	4601      	mov	r1, r0
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	4a5b      	ldr	r2, [pc, #364]	; (8004ac8 <dmp_set_gyro_bias+0x210>)
 800495a:	6939      	ldr	r1, [r7, #16]
 800495c:	fba1 ab02 	umull	sl, fp, r1, r2
 8004960:	445b      	add	r3, fp
 8004962:	469b      	mov	fp, r3
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8004970:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8004974:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8004978:	4613      	mov	r3, r2
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	17da      	asrs	r2, r3, #31
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	60fa      	str	r2, [r7, #12]
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <dmp_set_gyro_bias+0x210>)
 8004986:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800498a:	465a      	mov	r2, fp
 800498c:	fb03 f202 	mul.w	r2, r3, r2
 8004990:	2300      	movs	r3, #0
 8004992:	4651      	mov	r1, sl
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	4a4b      	ldr	r2, [pc, #300]	; (8004ac8 <dmp_set_gyro_bias+0x210>)
 800499c:	4651      	mov	r1, sl
 800499e:	fba1 8902 	umull	r8, r9, r1, r2
 80049a2:	444b      	add	r3, r9
 80049a4:	4699      	mov	r9, r3
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80049b2:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 80049b6:	ea4f 73a9 	mov.w	r3, r9, asr #30
 80049ba:	4613      	mov	r3, r2
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	17da      	asrs	r2, r3, #31
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <dmp_set_gyro_bias+0x210>)
 80049c8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80049cc:	464a      	mov	r2, r9
 80049ce:	fb03 f202 	mul.w	r2, r3, r2
 80049d2:	2300      	movs	r3, #0
 80049d4:	4641      	mov	r1, r8
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	4a3a      	ldr	r2, [pc, #232]	; (8004ac8 <dmp_set_gyro_bias+0x210>)
 80049de:	4641      	mov	r1, r8
 80049e0:	fba1 4502 	umull	r4, r5, r1, r2
 80049e4:	442b      	add	r3, r5
 80049e6:	461d      	mov	r5, r3
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	0fa2      	lsrs	r2, r4, #30
 80049f2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80049f6:	17ab      	asrs	r3, r5, #30
 80049f8:	4613      	mov	r3, r2
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	161b      	asrs	r3, r3, #24
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	141b      	asrs	r3, r3, #16
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	121b      	asrs	r3, r3, #8
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8004a22:	f107 0320 	add.w	r3, r7, #32
 8004a26:	461a      	mov	r2, r3
 8004a28:	2104      	movs	r1, #4
 8004a2a:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 8004a2e:	f7ff fcb9 	bl	80043a4 <mpu_write_mem>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <dmp_set_gyro_bias+0x186>
        return -1;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a3c:	e03c      	b.n	8004ab8 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	161b      	asrs	r3, r3, #24
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	141b      	asrs	r3, r3, #16
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	121b      	asrs	r3, r3, #8
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8004a64:	f107 0320 	add.w	r3, r7, #32
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 8004a70:	f7ff fc98 	bl	80043a4 <mpu_write_mem>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <dmp_set_gyro_bias+0x1c8>
        return -1;
 8004a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a7e:	e01b      	b.n	8004ab8 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a82:	161b      	asrs	r3, r3, #24
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	141b      	asrs	r3, r3, #16
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	121b      	asrs	r3, r3, #8
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8004aa6:	f107 0320 	add.w	r3, r7, #32
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2104      	movs	r1, #4
 8004aae:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 8004ab2:	f7ff fc77 	bl	80043a4 <mpu_write_mem>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3730      	adds	r7, #48	; 0x30
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000030c 	.word	0x2000030c
 8004ac8:	02cae309 	.word	0x02cae309

08004acc <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b094      	sub	sp, #80	; 0x50
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8004ad6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fb4a 	bl	8003174 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8004ae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	61fa      	str	r2, [r7, #28]
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	69f9      	ldr	r1, [r7, #28]
 8004af4:	03cb      	lsls	r3, r1, #15
 8004af6:	69b9      	ldr	r1, [r7, #24]
 8004af8:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	03ca      	lsls	r2, r1, #15
 8004b00:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 8004b04:	4b71      	ldr	r3, [pc, #452]	; (8004ccc <dmp_set_accel_bias+0x200>)
 8004b06:	891b      	ldrh	r3, [r3, #8]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	4413      	add	r3, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 8004b16:	4b6d      	ldr	r3, [pc, #436]	; (8004ccc <dmp_set_accel_bias+0x200>)
 8004b18:	891b      	ldrh	r3, [r3, #8]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 8004b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b24:	425b      	negs	r3, r3
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <dmp_set_accel_bias+0x200>)
 8004b2a:	891b      	ldrh	r3, [r3, #8]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	4413      	add	r3, r2
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <dmp_set_accel_bias+0x200>)
 8004b40:	891b      	ldrh	r3, [r3, #8]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 8004b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8004b50:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <dmp_set_accel_bias+0x200>)
 8004b52:	891b      	ldrh	r3, [r3, #8]
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	4413      	add	r3, r2
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 8004b66:	4b59      	ldr	r3, [pc, #356]	; (8004ccc <dmp_set_accel_bias+0x200>)
 8004b68:	891b      	ldrh	r3, [r3, #8]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 8004b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b74:	425b      	negs	r3, r3
 8004b76:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8004b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7a:	17da      	asrs	r2, r3, #31
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	617a      	str	r2, [r7, #20]
 8004b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b86:	460a      	mov	r2, r1
 8004b88:	fb02 f203 	mul.w	r2, r2, r3
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004b92:	4601      	mov	r1, r0
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9c:	6939      	ldr	r1, [r7, #16]
 8004b9e:	fba2 ab01 	umull	sl, fp, r2, r1
 8004ba2:	445b      	add	r3, fp
 8004ba4:	469b      	mov	fp, r3
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8004bb2:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8004bb6:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8004bba:	4613      	mov	r3, r2
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc0:	17da      	asrs	r2, r3, #31
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	60fa      	str	r2, [r7, #12]
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004bcc:	465a      	mov	r2, fp
 8004bce:	fb02 f203 	mul.w	r2, r2, r3
 8004bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bde:	4651      	mov	r1, sl
 8004be0:	fba2 8901 	umull	r8, r9, r2, r1
 8004be4:	444b      	add	r3, r9
 8004be6:	4699      	mov	r9, r3
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8004bf4:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8004bf8:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8004c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c02:	17da      	asrs	r2, r3, #31
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0a:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004c0e:	464a      	mov	r2, r9
 8004c10:	fb02 f203 	mul.w	r2, r2, r3
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	4641      	mov	r1, r8
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c20:	4641      	mov	r1, r8
 8004c22:	fba2 4501 	umull	r4, r5, r2, r1
 8004c26:	442b      	add	r3, r5
 8004c28:	461d      	mov	r5, r3
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	0fa2      	lsrs	r2, r4, #30
 8004c34:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004c38:	17ab      	asrs	r3, r5, #30
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	161b      	asrs	r3, r3, #24
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	141b      	asrs	r3, r3, #16
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 8004c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c54:	121b      	asrs	r3, r3, #8
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8004c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	161b      	asrs	r3, r3, #24
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	141b      	asrs	r3, r3, #16
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8004c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7a:	121b      	asrs	r3, r3, #8
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 8004c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8004c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8c:	161b      	asrs	r3, r3, #24
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	141b      	asrs	r3, r3, #16
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8004c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca0:	121b      	asrs	r3, r3, #8
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8004ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8004cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	210c      	movs	r1, #12
 8004cb8:	f44f 7025 	mov.w	r0, #660	; 0x294
 8004cbc:	f7ff fb72 	bl	80043a4 <mpu_write_mem>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3750      	adds	r7, #80	; 0x50
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ccc:	2000030c 	.word	0x2000030c

08004cd0 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8004cda:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <dmp_set_fifo_rate+0x88>)
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ce2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2bc8      	cmp	r3, #200	; 0xc8
 8004cea:	d902      	bls.n	8004cf2 <dmp_set_fifo_rate+0x22>
        return -1;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf0:	e02e      	b.n	8004d50 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	22c8      	movs	r2, #200	; 0xc8
 8004cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8004d00:	8bfb      	ldrh	r3, [r7, #30]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8004d0a:	8bfb      	ldrh	r3, [r7, #30]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	461a      	mov	r2, r3
 8004d16:	2102      	movs	r1, #2
 8004d18:	f240 2016 	movw	r0, #534	; 0x216
 8004d1c:	f7ff fb42 	bl	80043a4 <mpu_write_mem>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <dmp_set_fifo_rate+0x5c>
        return -1;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d2a:	e011      	b.n	8004d50 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8004d2c:	f107 0310 	add.w	r3, r7, #16
 8004d30:	461a      	mov	r2, r3
 8004d32:	210c      	movs	r1, #12
 8004d34:	f640 20c1 	movw	r0, #2753	; 0xac1
 8004d38:	f7ff fb34 	bl	80043a4 <mpu_write_mem>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <dmp_set_fifo_rate+0x78>
        return -1;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d46:	e003      	b.n	8004d50 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8004d48:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <dmp_set_fifo_rate+0x8c>)
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	8193      	strh	r3, [r2, #12]
    return 0;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	0800be94 	.word	0x0800be94
 8004d5c:	2000030c 	.word	0x2000030c

08004d60 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	460a      	mov	r2, r1
 8004d6a:	71fb      	strb	r3, [r7, #7]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <dmp_set_tap_thresh+0x22>
 8004d7a:	88bb      	ldrh	r3, [r7, #4]
 8004d7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d80:	d902      	bls.n	8004d88 <dmp_set_tap_thresh+0x28>
        return -1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d86:	e10b      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8004d88:	88bb      	ldrh	r3, [r7, #4]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d92:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004fa8 <dmp_set_tap_thresh+0x248>
 8004d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9a:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8004d9e:	f107 030b 	add.w	r3, r7, #11
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe f800 	bl	8002da8 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8004da8:	7afb      	ldrb	r3, [r7, #11]
 8004daa:	3b02      	subs	r3, #2
 8004dac:	2b0e      	cmp	r3, #14
 8004dae:	d87d      	bhi.n	8004eac <dmp_set_tap_thresh+0x14c>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <dmp_set_tap_thresh+0x58>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004df5 	.word	0x08004df5
 8004dbc:	08004ead 	.word	0x08004ead
 8004dc0:	08004e23 	.word	0x08004e23
 8004dc4:	08004ead 	.word	0x08004ead
 8004dc8:	08004ead 	.word	0x08004ead
 8004dcc:	08004ead 	.word	0x08004ead
 8004dd0:	08004e51 	.word	0x08004e51
 8004dd4:	08004ead 	.word	0x08004ead
 8004dd8:	08004ead 	.word	0x08004ead
 8004ddc:	08004ead 	.word	0x08004ead
 8004de0:	08004ead 	.word	0x08004ead
 8004de4:	08004ead 	.word	0x08004ead
 8004de8:	08004ead 	.word	0x08004ead
 8004dec:	08004ead 	.word	0x08004ead
 8004df0:	08004e7f 	.word	0x08004e7f
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8004df4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004df8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004fac <dmp_set_tap_thresh+0x24c>
 8004dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e04:	ee17 3a90 	vmov	r3, s15
 8004e08:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8004e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e0e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004fb0 <dmp_set_tap_thresh+0x250>
 8004e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1a:	ee17 3a90 	vmov	r3, s15
 8004e1e:	82bb      	strh	r3, [r7, #20]
        break;
 8004e20:	e047      	b.n	8004eb2 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004e22:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e26:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004fb4 <dmp_set_tap_thresh+0x254>
 8004e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e32:	ee17 3a90 	vmov	r3, s15
 8004e36:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e3c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004fb8 <dmp_set_tap_thresh+0x258>
 8004e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e48:	ee17 3a90 	vmov	r3, s15
 8004e4c:	82bb      	strh	r3, [r7, #20]
        break;
 8004e4e:	e030      	b.n	8004eb2 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8004e50:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e54:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004fbc <dmp_set_tap_thresh+0x25c>
 8004e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e60:	ee17 3a90 	vmov	r3, s15
 8004e64:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8004e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e6a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004fc0 <dmp_set_tap_thresh+0x260>
 8004e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e76:	ee17 3a90 	vmov	r3, s15
 8004e7a:	82bb      	strh	r3, [r7, #20]
        break;
 8004e7c:	e019      	b.n	8004eb2 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8004e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e82:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004fc4 <dmp_set_tap_thresh+0x264>
 8004e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8e:	ee17 3a90 	vmov	r3, s15
 8004e92:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e98:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004fc8 <dmp_set_tap_thresh+0x268>
 8004e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea4:	ee17 3a90 	vmov	r3, s15
 8004ea8:	82bb      	strh	r3, [r7, #20]
        break;
 8004eaa:	e002      	b.n	8004eb2 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb0:	e076      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8004ebc:	8afb      	ldrh	r3, [r7, #22]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8004ec2:	8abb      	ldrh	r3, [r7, #20]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8004ecc:	8abb      	ldrh	r3, [r7, #20]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01c      	beq.n	8004f16 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8004edc:	f107 030c 	add.w	r3, r7, #12
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8004ee8:	f7ff fa5c 	bl	80043a4 <mpu_write_mem>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <dmp_set_tap_thresh+0x198>
            return -1;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef6:	e053      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	3302      	adds	r3, #2
 8004efe:	461a      	mov	r2, r3
 8004f00:	2102      	movs	r1, #2
 8004f02:	f44f 7092 	mov.w	r0, #292	; 0x124
 8004f06:	f7ff fa4d 	bl	80043a4 <mpu_write_mem>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <dmp_set_tap_thresh+0x1b6>
            return -1;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f14:	e044      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01c      	beq.n	8004f5a <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	461a      	mov	r2, r3
 8004f26:	2102      	movs	r1, #2
 8004f28:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004f2c:	f7ff fa3a 	bl	80043a4 <mpu_write_mem>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <dmp_set_tap_thresh+0x1dc>
            return -1;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f3a:	e031      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	3302      	adds	r3, #2
 8004f42:	461a      	mov	r2, r3
 8004f44:	2102      	movs	r1, #2
 8004f46:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004f4a:	f7ff fa2b 	bl	80043a4 <mpu_write_mem>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <dmp_set_tap_thresh+0x1fa>
            return -1;
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f58:	e022      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01c      	beq.n	8004f9e <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8004f70:	f7ff fa18 	bl	80043a4 <mpu_write_mem>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <dmp_set_tap_thresh+0x220>
            return -1;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f7e:	e00f      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8004f80:	f107 030c 	add.w	r3, r7, #12
 8004f84:	3302      	adds	r3, #2
 8004f86:	461a      	mov	r2, r3
 8004f88:	2102      	movs	r1, #2
 8004f8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f8e:	f7ff fa09 	bl	80043a4 <mpu_write_mem>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <dmp_set_tap_thresh+0x23e>
            return -1;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f9c:	e000      	b.n	8004fa0 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	43480000 	.word	0x43480000
 8004fac:	46800000 	.word	0x46800000
 8004fb0:	46400000 	.word	0x46400000
 8004fb4:	46000000 	.word	0x46000000
 8004fb8:	45c00000 	.word	0x45c00000
 8004fbc:	45800000 	.word	0x45800000
 8004fc0:	45400000 	.word	0x45400000
 8004fc4:	45000000 	.word	0x45000000
 8004fc8:	44c00000 	.word	0x44c00000

08004fcc <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	f043 030c 	orr.w	r3, r3, #12
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	f043 0303 	orr.w	r3, r3, #3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8005016:	f107 030f 	add.w	r3, r7, #15
 800501a:	461a      	mov	r2, r3
 800501c:	2101      	movs	r1, #1
 800501e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8005022:	f7ff f9bf 	bl	80043a4 <mpu_write_mem>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <dmp_set_tap_count+0x16>
        min_taps = 1;
 8005040:	2301      	movs	r3, #1
 8005042:	71fb      	strb	r3, [r7, #7]
 8005044:	e004      	b.n	8005050 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d901      	bls.n	8005050 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800504c:	2304      	movs	r3, #4
 800504e:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	3b01      	subs	r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8005058:	f107 030f 	add.w	r3, r7, #15
 800505c:	461a      	mov	r2, r3
 800505e:	2101      	movs	r1, #1
 8005060:	f240 104f 	movw	r0, #335	; 0x14f
 8005064:	f7ff f99e 	bl	80043a4 <mpu_write_mem>
 8005068:	4603      	mov	r3, r0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <dmp_set_tap_time+0x40>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	b29b      	uxth	r3, r3
 8005090:	b2db      	uxtb	r3, r3
 8005092:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8005094:	89fb      	ldrh	r3, [r7, #14]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	461a      	mov	r2, r3
 80050a0:	2102      	movs	r1, #2
 80050a2:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 80050a6:	f7ff f97d 	bl	80043a4 <mpu_write_mem>
 80050aa:	4603      	mov	r3, r0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	cccccccd 	.word	0xcccccccd

080050b8 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <dmp_set_tap_time_multi+0x40>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80050ce:	89fb      	ldrh	r3, [r7, #14]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80050d8:	89fb      	ldrh	r3, [r7, #14]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	461a      	mov	r2, r3
 80050e4:	2102      	movs	r1, #2
 80050e6:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80050ea:	f7ff f95b 	bl	80043a4 <mpu_write_mem>
 80050ee:	4603      	mov	r3, r0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	cccccccd 	.word	0xcccccccd

080050fc <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <dmp_set_shake_reject_thresh+0x5c>)
 800510c:	fb82 1203 	smull	r1, r2, r2, r3
 8005110:	1192      	asrs	r2, r2, #6
 8005112:	17db      	asrs	r3, r3, #31
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	161b      	asrs	r3, r3, #24
 8005122:	b2db      	uxtb	r3, r3
 8005124:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	141b      	asrs	r3, r3, #16
 800512a:	b2db      	uxtb	r3, r3
 800512c:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	121b      	asrs	r3, r3, #8
 8005132:	b2db      	uxtb	r3, r3
 8005134:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	461a      	mov	r2, r3
 8005142:	2104      	movs	r1, #4
 8005144:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8005148:	f7ff f92c 	bl	80043a4 <mpu_write_mem>
 800514c:	4603      	mov	r3, r0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	10624dd3 	.word	0x10624dd3

0800515c <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	4a0c      	ldr	r2, [pc, #48]	; (800519c <dmp_set_shake_reject_time+0x40>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	b29b      	uxth	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8005182:	f107 030c 	add.w	r3, r7, #12
 8005186:	461a      	mov	r2, r3
 8005188:	2102      	movs	r1, #2
 800518a:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800518e:	f7ff f909 	bl	80043a4 <mpu_write_mem>
 8005192:	4603      	mov	r3, r0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	cccccccd 	.word	0xcccccccd

080051a0 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <dmp_set_shake_reject_timeout+0x40>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 80051c6:	f107 030c 	add.w	r3, r7, #12
 80051ca:	461a      	mov	r2, r3
 80051cc:	2102      	movs	r1, #2
 80051ce:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80051d2:	f7ff f8e7 	bl	80043a4 <mpu_write_mem>
 80051d6:	4603      	mov	r3, r0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	cccccccd 	.word	0xcccccccd

080051e4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80051ee:	2302      	movs	r3, #2
 80051f0:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80051f2:	23ca      	movs	r3, #202	; 0xca
 80051f4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80051f6:	23e3      	movs	r3, #227	; 0xe3
 80051f8:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80051fa:	2309      	movs	r3, #9
 80051fc:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	461a      	mov	r2, r3
 8005204:	2104      	movs	r1, #4
 8005206:	2068      	movs	r0, #104	; 0x68
 8005208:	f7ff f8cc 	bl	80043a4 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800520c:	23a3      	movs	r3, #163	; 0xa3
 800520e:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800521a:	23c0      	movs	r3, #192	; 0xc0
 800521c:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800521e:	23c8      	movs	r3, #200	; 0xc8
 8005220:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8005222:	23c2      	movs	r3, #194	; 0xc2
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e005      	b.n	8005234 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8005228:	23a3      	movs	r3, #163	; 0xa3
 800522a:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800522c:	23a3      	movs	r3, #163	; 0xa3
 800522e:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8005230:	23a3      	movs	r3, #163	; 0xa3
 8005232:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800523e:	23c4      	movs	r3, #196	; 0xc4
 8005240:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8005242:	23cc      	movs	r3, #204	; 0xcc
 8005244:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8005246:	23c6      	movs	r3, #198	; 0xc6
 8005248:	74bb      	strb	r3, [r7, #18]
 800524a:	e005      	b.n	8005258 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800524c:	23a3      	movs	r3, #163	; 0xa3
 800524e:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8005250:	23a3      	movs	r3, #163	; 0xa3
 8005252:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8005254:	23a3      	movs	r3, #163	; 0xa3
 8005256:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8005258:	23a3      	movs	r3, #163	; 0xa3
 800525a:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800525c:	23a3      	movs	r3, #163	; 0xa3
 800525e:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8005260:	23a3      	movs	r3, #163	; 0xa3
 8005262:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	461a      	mov	r2, r3
 800526a:	210a      	movs	r1, #10
 800526c:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8005270:	f7ff f898 	bl	80043a4 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800527e:	2320      	movs	r3, #32
 8005280:	733b      	strb	r3, [r7, #12]
 8005282:	e001      	b.n	8005288 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8005284:	23d8      	movs	r3, #216	; 0xd8
 8005286:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8005288:	f107 030c 	add.w	r3, r7, #12
 800528c:	461a      	mov	r2, r3
 800528e:	2101      	movs	r1, #1
 8005290:	f640 20b6 	movw	r0, #2742	; 0xab6
 8005294:	f7ff f886 	bl	80043a4 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f000 f8c6 	bl	8005434 <dmp_enable_gyro_cal>
 80052a8:	e002      	b.n	80052b0 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 80052aa:	2000      	movs	r0, #0
 80052ac:	f000 f8c2 	bl	8005434 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01d      	beq.n	80052f6 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 80052c4:	23b2      	movs	r3, #178	; 0xb2
 80052c6:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 80052c8:	238b      	movs	r3, #139	; 0x8b
 80052ca:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 80052cc:	23b6      	movs	r3, #182	; 0xb6
 80052ce:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 80052d0:	239b      	movs	r3, #155	; 0x9b
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	e007      	b.n	80052e6 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 80052d6:	23b0      	movs	r3, #176	; 0xb0
 80052d8:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80052de:	23b4      	movs	r3, #180	; 0xb4
 80052e0:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80052e2:	2390      	movs	r3, #144	; 0x90
 80052e4:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80052e6:	f107 030c 	add.w	r3, r7, #12
 80052ea:	461a      	mov	r2, r3
 80052ec:	2104      	movs	r1, #4
 80052ee:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80052f2:	f7ff f857 	bl	80043a4 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d025      	beq.n	800534c <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8005300:	23f8      	movs	r3, #248	; 0xf8
 8005302:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	461a      	mov	r2, r3
 800530a:	2101      	movs	r1, #1
 800530c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8005310:	f7ff f848 	bl	80043a4 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8005314:	21fa      	movs	r1, #250	; 0xfa
 8005316:	2007      	movs	r0, #7
 8005318:	f7ff fd22 	bl	8004d60 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800531c:	2007      	movs	r0, #7
 800531e:	f7ff fe55 	bl	8004fcc <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8005322:	2001      	movs	r0, #1
 8005324:	f7ff fe84 	bl	8005030 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8005328:	2064      	movs	r0, #100	; 0x64
 800532a:	f7ff fea3 	bl	8005074 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800532e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005332:	f7ff fec1 	bl	80050b8 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8005336:	21c8      	movs	r1, #200	; 0xc8
 8005338:	483c      	ldr	r0, [pc, #240]	; (800542c <dmp_enable_feature+0x248>)
 800533a:	f7ff fedf 	bl	80050fc <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800533e:	2028      	movs	r0, #40	; 0x28
 8005340:	f7ff ff0c 	bl	800515c <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8005344:	200a      	movs	r0, #10
 8005346:	f7ff ff2b 	bl	80051a0 <dmp_set_shake_reject_timeout>
 800534a:	e009      	b.n	8005360 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800534c:	23d8      	movs	r3, #216	; 0xd8
 800534e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005350:	f107 030c 	add.w	r3, r7, #12
 8005354:	461a      	mov	r2, r3
 8005356:	2101      	movs	r1, #1
 8005358:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800535c:	f7ff f822 	bl	80043a4 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 800536a:	23d9      	movs	r3, #217	; 0xd9
 800536c:	733b      	strb	r3, [r7, #12]
 800536e:	e001      	b.n	8005374 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8005370:	23d8      	movs	r3, #216	; 0xd8
 8005372:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	461a      	mov	r2, r3
 800537a:	2101      	movs	r1, #1
 800537c:	f240 703d 	movw	r0, #1853	; 0x73d
 8005380:	f7ff f810 	bl	80043a4 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800538e:	2001      	movs	r0, #1
 8005390:	f000 f880 	bl	8005494 <dmp_enable_lp_quat>
 8005394:	e002      	b.n	800539c <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8005396:	2000      	movs	r0, #0
 8005398:	f000 f87c 	bl	8005494 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 80053a6:	2001      	movs	r0, #1
 80053a8:	f000 f89b 	bl	80054e2 <dmp_enable_6x_lp_quat>
 80053ac:	e002      	b.n	80053b4 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 80053ae:	2000      	movs	r0, #0
 80053b0:	f000 f897 	bl	80054e2 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	f043 0308 	orr.w	r3, r3, #8
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <dmp_enable_feature+0x24c>)
 80053be:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 80053c0:	f7fd fb6c 	bl	8002a9c <mpu_reset_fifo>

    dmp.packet_length = 0;
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <dmp_enable_feature+0x24c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 80053d4:	4b16      	ldr	r3, [pc, #88]	; (8005430 <dmp_enable_feature+0x24c>)
 80053d6:	7b9b      	ldrb	r3, [r3, #14]
 80053d8:	3306      	adds	r3, #6
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	4b14      	ldr	r3, [pc, #80]	; (8005430 <dmp_enable_feature+0x24c>)
 80053de:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <dmp_enable_feature+0x24c>)
 80053ec:	7b9b      	ldrb	r3, [r3, #14]
 80053ee:	3306      	adds	r3, #6
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <dmp_enable_feature+0x24c>)
 80053f4:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f003 0314 	and.w	r3, r3, #20
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <dmp_enable_feature+0x24c>)
 8005402:	7b9b      	ldrb	r3, [r3, #14]
 8005404:	3310      	adds	r3, #16
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <dmp_enable_feature+0x24c>)
 800540a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <dmp_enable_feature+0x24c>)
 8005418:	7b9b      	ldrb	r3, [r3, #14]
 800541a:	3304      	adds	r3, #4
 800541c:	b2da      	uxtb	r2, r3
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <dmp_enable_feature+0x24c>)
 8005420:	739a      	strb	r2, [r3, #14]

    return 0;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	02cae309 	.word	0x02cae309
 8005430:	2000030c 	.word	0x2000030c

08005434 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00f      	beq.n	8005464 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8005444:	4a11      	ldr	r2, [pc, #68]	; (800548c <dmp_enable_gyro_cal+0x58>)
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	ca07      	ldmia	r2, {r0, r1, r2}
 800544c:	c303      	stmia	r3!, {r0, r1}
 800544e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	461a      	mov	r2, r3
 8005456:	2109      	movs	r1, #9
 8005458:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800545c:	f7fe ffa2 	bl	80043a4 <mpu_write_mem>
 8005460:	4603      	mov	r3, r0
 8005462:	e00e      	b.n	8005482 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <dmp_enable_gyro_cal+0x5c>)
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	ca07      	ldmia	r2, {r0, r1, r2}
 800546c:	c303      	stmia	r3!, {r0, r1}
 800546e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005470:	f107 0308 	add.w	r3, r7, #8
 8005474:	461a      	mov	r2, r3
 8005476:	2109      	movs	r1, #9
 8005478:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800547c:	f7fe ff92 	bl	80043a4 <mpu_write_mem>
 8005480:	4603      	mov	r3, r0
    }
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	0800bea0 	.word	0x0800bea0
 8005490:	0800beac 	.word	0x0800beac

08005494 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 80054a4:	23c0      	movs	r3, #192	; 0xc0
 80054a6:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 80054a8:	23c2      	movs	r3, #194	; 0xc2
 80054aa:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 80054ac:	23c4      	movs	r3, #196	; 0xc4
 80054ae:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 80054b0:	23c6      	movs	r3, #198	; 0xc6
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	e006      	b.n	80054c4 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	2204      	movs	r2, #4
 80054bc:	218b      	movs	r1, #139	; 0x8b
 80054be:	4618      	mov	r0, r3
 80054c0:	f003 f816 	bl	80084f0 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	461a      	mov	r2, r3
 80054ca:	2104      	movs	r1, #4
 80054cc:	f640 2098 	movw	r0, #2712	; 0xa98
 80054d0:	f7fe ff68 	bl	80043a4 <mpu_write_mem>

    return mpu_reset_fifo();
 80054d4:	f7fd fae2 	bl	8002a9c <mpu_reset_fifo>
 80054d8:	4603      	mov	r3, r0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	4603      	mov	r3, r0
 80054ea:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 80054f2:	2320      	movs	r3, #32
 80054f4:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 80054f6:	2328      	movs	r3, #40	; 0x28
 80054f8:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 80054fa:	2330      	movs	r3, #48	; 0x30
 80054fc:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 80054fe:	2338      	movs	r3, #56	; 0x38
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	e006      	b.n	8005512 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	2204      	movs	r2, #4
 800550a:	21a3      	movs	r1, #163	; 0xa3
 800550c:	4618      	mov	r0, r3
 800550e:	f002 ffef 	bl	80084f0 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	461a      	mov	r2, r3
 8005518:	2104      	movs	r1, #4
 800551a:	f640 209e 	movw	r0, #2718	; 0xa9e
 800551e:	f7fe ff41 	bl	80043a4 <mpu_write_mem>

    return mpu_reset_fifo();
 8005522:	f7fd fabb 	bl	8002a9c <mpu_reset_fifo>
 8005526:	4603      	mov	r3, r0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3303      	adds	r3, #3
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005542:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3303      	adds	r3, #3
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554e:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3301      	adds	r3, #1
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d012      	beq.n	8005584 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	08db      	lsrs	r3, r3, #3
 8005562:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	b2db      	uxtb	r3, r3
 800556c:	3301      	adds	r3, #1
 800556e:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <decode_gesture+0x84>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <decode_gesture+0x84>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	7b39      	ldrb	r1, [r7, #12]
 800557e:	7b7a      	ldrb	r2, [r7, #13]
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3301      	adds	r3, #1
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <decode_gesture+0x84>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <decode_gesture+0x84>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	7bfa      	ldrb	r2, [r7, #15]
 80055a0:	0992      	lsrs	r2, r2, #6
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
    }

    return 0;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	2000030c 	.word	0x2000030c

080055b8 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b092      	sub	sp, #72	; 0x48
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    sensors[0] = 0;
 80055cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ce:	2200      	movs	r2, #0
 80055d0:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
//    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
//        return -1;
    mpu_read_fifo_stream_last_packet(dmp.packet_length, fifo_data);
 80055d2:	4bab      	ldr	r3, [pc, #684]	; (8005880 <dmp_read_fifo+0x2c8>)
 80055d4:	7b9b      	ldrb	r3, [r3, #14]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f107 0220 	add.w	r2, r7, #32
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd ff20 	bl	8003424 <mpu_read_fifo_stream_last_packet>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 80055e4:	4ba6      	ldr	r3, [pc, #664]	; (8005880 <dmp_read_fifo+0x2c8>)
 80055e6:	895b      	ldrh	r3, [r3, #10]
 80055e8:	f003 0314 	and.w	r3, r3, #20
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 808a 	beq.w	8005706 <dmp_read_fifo+0x14e>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80055f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055f6:	061a      	lsls	r2, r3, #24
 80055f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8005600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005604:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8005606:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8005608:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800560c:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005612:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005616:	061a      	lsls	r2, r3, #24
 8005618:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005624:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005626:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800562c:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005632:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005634:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800563a:	061a      	lsls	r2, r3, #24
 800563c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8005644:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005648:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800564a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800564c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005650:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8005656:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005658:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800565a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800565e:	061a      	lsls	r2, r3, #24
 8005660:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005668:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800566c:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800566e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005674:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800567a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800567c:	601a      	str	r2, [r3, #0]
        ii += 16;
 800567e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005682:	3310      	adds	r3, #16
 8005684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	141b      	asrs	r3, r3, #16
 800568e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	141b      	asrs	r3, r3, #16
 8005698:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3308      	adds	r3, #8
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	141b      	asrs	r3, r3, #16
 80056a2:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	330c      	adds	r3, #12
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	141b      	asrs	r3, r3, #16
 80056ac:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	fb03 f202 	mul.w	r2, r3, r2
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6979      	ldr	r1, [r7, #20]
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	69b9      	ldr	r1, [r7, #24]
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80056c8:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	69f9      	ldr	r1, [r7, #28]
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80056d2:	4413      	add	r3, r2
 80056d4:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80056d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056dc:	db03      	blt.n	80056e6 <dmp_read_fifo+0x12e>
 80056de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e0:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 80056e4:	dd07      	ble.n	80056f6 <dmp_read_fifo+0x13e>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 80056e6:	f7fd f9d9 	bl	8002a9c <mpu_reset_fifo>
            sensors[0] = 0;
 80056ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ec:	2200      	movs	r2, #0
 80056ee:	801a      	strh	r2, [r3, #0]
            return -1;
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f4:	e0bf      	b.n	8005876 <dmp_read_fifo+0x2be>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 80056f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005700:	b21a      	sxth	r2, r3
 8005702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005704:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8005706:	4b5e      	ldr	r3, [pc, #376]	; (8005880 <dmp_read_fifo+0x2c8>)
 8005708:	895b      	ldrh	r3, [r3, #10]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04c      	beq.n	80057ac <dmp_read_fifo+0x1f4>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8005712:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005716:	3348      	adds	r3, #72	; 0x48
 8005718:	443b      	add	r3, r7
 800571a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	b21a      	sxth	r2, r3
 8005722:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005726:	3301      	adds	r3, #1
 8005728:	3348      	adds	r3, #72	; 0x48
 800572a:	443b      	add	r3, r7
 800572c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005730:	b21b      	sxth	r3, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	b21a      	sxth	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800573a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800573e:	3302      	adds	r3, #2
 8005740:	3348      	adds	r3, #72	; 0x48
 8005742:	443b      	add	r3, r7
 8005744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	b219      	sxth	r1, r3
 800574c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005750:	3303      	adds	r3, #3
 8005752:	3348      	adds	r3, #72	; 0x48
 8005754:	443b      	add	r3, r7
 8005756:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800575a:	b21a      	sxth	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	3302      	adds	r3, #2
 8005760:	430a      	orrs	r2, r1
 8005762:	b212      	sxth	r2, r2
 8005764:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005766:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800576a:	3304      	adds	r3, #4
 800576c:	3348      	adds	r3, #72	; 0x48
 800576e:	443b      	add	r3, r7
 8005770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	b219      	sxth	r1, r3
 8005778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800577c:	3305      	adds	r3, #5
 800577e:	3348      	adds	r3, #72	; 0x48
 8005780:	443b      	add	r3, r7
 8005782:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005786:	b21a      	sxth	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	3304      	adds	r3, #4
 800578c:	430a      	orrs	r2, r1
 800578e:	b212      	sxth	r2, r2
 8005790:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8005792:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005796:	3306      	adds	r3, #6
 8005798:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800579c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057a2:	f043 0308 	orr.w	r3, r3, #8
 80057a6:	b21a      	sxth	r2, r3
 80057a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057aa:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80057ac:	4b34      	ldr	r3, [pc, #208]	; (8005880 <dmp_read_fifo+0x2c8>)
 80057ae:	895b      	ldrh	r3, [r3, #10]
 80057b0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d04c      	beq.n	8005852 <dmp_read_fifo+0x29a>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80057b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057bc:	3348      	adds	r3, #72	; 0x48
 80057be:	443b      	add	r3, r7
 80057c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b21a      	sxth	r2, r3
 80057c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057cc:	3301      	adds	r3, #1
 80057ce:	3348      	adds	r3, #72	; 0x48
 80057d0:	443b      	add	r3, r7
 80057d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057d6:	b21b      	sxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b21a      	sxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80057e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057e4:	3302      	adds	r3, #2
 80057e6:	3348      	adds	r3, #72	; 0x48
 80057e8:	443b      	add	r3, r7
 80057ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	b219      	sxth	r1, r3
 80057f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057f6:	3303      	adds	r3, #3
 80057f8:	3348      	adds	r3, #72	; 0x48
 80057fa:	443b      	add	r3, r7
 80057fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005800:	b21a      	sxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3302      	adds	r3, #2
 8005806:	430a      	orrs	r2, r1
 8005808:	b212      	sxth	r2, r2
 800580a:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800580c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005810:	3304      	adds	r3, #4
 8005812:	3348      	adds	r3, #72	; 0x48
 8005814:	443b      	add	r3, r7
 8005816:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	b219      	sxth	r1, r3
 800581e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005822:	3305      	adds	r3, #5
 8005824:	3348      	adds	r3, #72	; 0x48
 8005826:	443b      	add	r3, r7
 8005828:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800582c:	b21a      	sxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3304      	adds	r3, #4
 8005832:	430a      	orrs	r2, r1
 8005834:	b212      	sxth	r2, r2
 8005836:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8005838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800583c:	3306      	adds	r3, #6
 800583e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8005842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005848:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800584c:	b21a      	sxth	r2, r3
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <dmp_read_fifo+0x2c8>)
 8005854:	895b      	ldrh	r3, [r3, #10]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d007      	beq.n	800586e <dmp_read_fifo+0x2b6>
        decode_gesture(fifo_data + ii);
 800585e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005862:	f107 0220 	add.w	r2, r7, #32
 8005866:	4413      	add	r3, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fe61 	bl	8005530 <decode_gesture>

    myget_ms(timestamp);
 800586e:	6838      	ldr	r0, [r7, #0]
 8005870:	f7fe ff0e 	bl	8004690 <myget_ms>
    return 0;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3748      	adds	r7, #72	; 0x48
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	2000030c 	.word	0x2000030c

08005884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	609a      	str	r2, [r3, #8]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a8:	6313      	str	r3, [r2, #48]	; 0x30
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	4b19      	ldr	r3, [pc, #100]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058c0:	f043 0308 	orr.w	r3, r3, #8
 80058c4:	6313      	str	r3, [r2, #48]	; 0x30
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	4a11      	ldr	r2, [pc, #68]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6313      	str	r3, [r2, #48]	; 0x30
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <MX_GPIO_Init+0x9c>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80058ee:	2200      	movs	r2, #0
 80058f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80058f4:	480b      	ldr	r0, [pc, #44]	; (8005924 <MX_GPIO_Init+0xa0>)
 80058f6:	f000 feb9 	bl	800666c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80058fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80058fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005900:	2301      	movs	r3, #1
 8005902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005908:	2300      	movs	r3, #0
 800590a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800590c:	f107 030c 	add.w	r3, r7, #12
 8005910:	4619      	mov	r1, r3
 8005912:	4804      	ldr	r0, [pc, #16]	; (8005924 <MX_GPIO_Init+0xa0>)
 8005914:	f000 fd0e 	bl	8006334 <HAL_GPIO_Init>

}
 8005918:	bf00      	nop
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40023800 	.word	0x40023800
 8005924:	40020c00 	.word	0x40020c00

08005928 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800592c:	4b12      	ldr	r3, [pc, #72]	; (8005978 <MX_I2C1_Init+0x50>)
 800592e:	4a13      	ldr	r2, [pc, #76]	; (800597c <MX_I2C1_Init+0x54>)
 8005930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <MX_I2C1_Init+0x50>)
 8005934:	4a12      	ldr	r2, [pc, #72]	; (8005980 <MX_I2C1_Init+0x58>)
 8005936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <MX_I2C1_Init+0x50>)
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800593e:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <MX_I2C1_Init+0x50>)
 8005940:	2200      	movs	r2, #0
 8005942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <MX_I2C1_Init+0x50>)
 8005946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800594a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <MX_I2C1_Init+0x50>)
 800594e:	2200      	movs	r2, #0
 8005950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <MX_I2C1_Init+0x50>)
 8005954:	2200      	movs	r2, #0
 8005956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005958:	4b07      	ldr	r3, [pc, #28]	; (8005978 <MX_I2C1_Init+0x50>)
 800595a:	2200      	movs	r2, #0
 800595c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <MX_I2C1_Init+0x50>)
 8005960:	2200      	movs	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005964:	4804      	ldr	r0, [pc, #16]	; (8005978 <MX_I2C1_Init+0x50>)
 8005966:	f000 fe9b 	bl	80066a0 <HAL_I2C_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005970:	f000 f9a2 	bl	8005cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005974:	bf00      	nop
 8005976:	bd80      	pop	{r7, pc}
 8005978:	2000031c 	.word	0x2000031c
 800597c:	40005400 	.word	0x40005400
 8005980:	00061a80 	.word	0x00061a80

08005984 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_I2C_MspInit+0x84>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d12b      	bne.n	80059fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <HAL_I2C_MspInit+0x88>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_I2C_MspInit+0x88>)
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	6313      	str	r3, [r2, #48]	; 0x30
 80059b6:	4b15      	ldr	r3, [pc, #84]	; (8005a0c <HAL_I2C_MspInit+0x88>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059c2:	23c0      	movs	r3, #192	; 0xc0
 80059c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059c6:	2312      	movs	r3, #18
 80059c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ce:	2303      	movs	r3, #3
 80059d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059d2:	2304      	movs	r3, #4
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d6:	f107 0314 	add.w	r3, r7, #20
 80059da:	4619      	mov	r1, r3
 80059dc:	480c      	ldr	r0, [pc, #48]	; (8005a10 <HAL_I2C_MspInit+0x8c>)
 80059de:	f000 fca9 	bl	8006334 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_I2C_MspInit+0x88>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <HAL_I2C_MspInit+0x88>)
 80059ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059f0:	6413      	str	r3, [r2, #64]	; 0x40
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_I2C_MspInit+0x88>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80059fe:	bf00      	nop
 8005a00:	3728      	adds	r7, #40	; 0x28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40005400 	.word	0x40005400
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40020400 	.word	0x40020400

08005a14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005a1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005a2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005a34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005a3c:	e000      	b.n	8005a40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005a3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005a40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f9      	beq.n	8005a3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005a4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005a54:	687b      	ldr	r3, [r7, #4]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b095      	sub	sp, #84	; 0x54
 8005a68:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a6a:	f000 fabb 	bl	8005fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a6e:	f000 f875 	bl	8005b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a72:	f7ff ff07 	bl	8005884 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005a76:	f7ff ff57 	bl	8005928 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005a7a:	f000 fa3d 	bl	8005ef8 <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  IIC_Init(hi2c1);
 8005a7e:	4c2b      	ldr	r4, [pc, #172]	; (8005b2c <main+0xc8>)
 8005a80:	4668      	mov	r0, sp
 8005a82:	f104 0310 	add.w	r3, r4, #16
 8005a86:	2244      	movs	r2, #68	; 0x44
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f002 fd23 	bl	80084d4 <memcpy>
 8005a8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a92:	f7fb fab3 	bl	8000ffc <IIC_Init>
  IIC_InitLockupRecover(GPIOB, 		//scl
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <main+0xcc>)
 8005a9a:	2140      	movs	r1, #64	; 0x40
 8005a9c:	4824      	ldr	r0, [pc, #144]	; (8005b30 <main+0xcc>)
 8005a9e:	f7fb fac5 	bl	800102c <IIC_InitLockupRecover>
		  	  	  	  	GPIO_PIN_6, //scl
						GPIOB, 		//sda
						GPIO_PIN_7);//sda
  IIC_LockupRecover();
 8005aa2:	f7fb fae5 	bl	8001070 <IIC_LockupRecover>

  printf("\n\rMPU6050 is initializing....\n\r");
 8005aa6:	4823      	ldr	r0, [pc, #140]	; (8005b34 <main+0xd0>)
 8005aa8:	f003 f994 	bl	8008dd4 <iprintf>
  MPU6050_initialize();
 8005aac:	f7fb fe5f 	bl	800176e <MPU6050_initialize>
  printf("\n\rMPU6050 has been initialized....\n\r");
 8005ab0:	4821      	ldr	r0, [pc, #132]	; (8005b38 <main+0xd4>)
 8005ab2:	f003 f98f 	bl	8008dd4 <iprintf>
  MPU6050_DMPInit();
 8005ab6:	f7fb fe8f 	bl	80017d8 <MPU6050_DMPInit>
  dmp_enable_gyro_cal(0);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7ff fcba 	bl	8005434 <dmp_enable_gyro_cal>
//  MPU6050_setZGyroOffset(-32);
  MPU6050_GyroCalibration(200);
 8005ac0:	20c8      	movs	r0, #200	; 0xc8
 8005ac2:	f7fc fb25 	bl	8002110 <MPU6050_GyroCalibration>

  printf("Gyro Has Been Calibrated!!!!!!!!!!\n");
 8005ac6:	481d      	ldr	r0, [pc, #116]	; (8005b3c <main+0xd8>)
 8005ac8:	f003 fa0a 	bl	8008ee0 <puts>

  ZDur = MPU6050_getZeroMotionDetectionDuration();
 8005acc:	f7fc fa2e 	bl	8001f2c <MPU6050_getZeroMotionDetectionDuration>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <main+0xdc>)
 8005ad6:	601a      	str	r2, [r3, #0]
  ZTh = MPU6050_getZeroMotionDetectionThreshold();
 8005ad8:	f7fc fa0a 	bl	8001ef0 <MPU6050_getZeroMotionDetectionThreshold>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4b18      	ldr	r3, [pc, #96]	; (8005b44 <main+0xe0>)
 8005ae2:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim11);
 8005ae4:	4818      	ldr	r0, [pc, #96]	; (8005b48 <main+0xe4>)
 8005ae6:	f002 fa95 	bl	8008014 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  MPU6050_getAllGyroOffset(gyroOffset);
 8005aea:	4818      	ldr	r0, [pc, #96]	; (8005b4c <main+0xe8>)
 8005aec:	f7fc fad9 	bl	80020a2 <MPU6050_getAllGyroOffset>
	  long lastTime = HAL_GetTick();
 8005af0:	f000 fade 	bl	80060b0 <HAL_GetTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	607b      	str	r3, [r7, #4]
	  yaw = MPU6050_readDMPYaw();
 8005af8:	f7fc f8be 	bl	8001c78 <MPU6050_readDMPYaw>
 8005afc:	eef0 7a40 	vmov.f32	s15, s0
 8005b00:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <main+0xec>)
 8005b02:	edc3 7a00 	vstr	s15, [r3]
	  time = HAL_GetTick() - lastTime;
 8005b06:	f000 fad3 	bl	80060b0 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <main+0xf0>)
 8005b14:	601a      	str	r2, [r3, #0]

	  MPU6050_GyroContinuosCalibration(5000, 0);
 8005b16:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005b58 <main+0xf4>
 8005b1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8005b1e:	f7fc fd33 	bl	8002588 <MPU6050_GyroContinuosCalibration>
	  HAL_Delay(100);
 8005b22:	2064      	movs	r0, #100	; 0x64
 8005b24:	f000 fad0 	bl	80060c8 <HAL_Delay>
  {
 8005b28:	e7df      	b.n	8005aea <main+0x86>
 8005b2a:	bf00      	nop
 8005b2c:	2000031c 	.word	0x2000031c
 8005b30:	40020400 	.word	0x40020400
 8005b34:	0800bed0 	.word	0x0800bed0
 8005b38:	0800bef0 	.word	0x0800bef0
 8005b3c:	0800bf18 	.word	0x0800bf18
 8005b40:	20000378 	.word	0x20000378
 8005b44:	20000374 	.word	0x20000374
 8005b48:	20000390 	.word	0x20000390
 8005b4c:	20000380 	.word	0x20000380
 8005b50:	2000037c 	.word	0x2000037c
 8005b54:	20000388 	.word	0x20000388
 8005b58:	00000000 	.word	0x00000000

08005b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b094      	sub	sp, #80	; 0x50
 8005b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b62:	f107 0320 	add.w	r3, r7, #32
 8005b66:	2230      	movs	r2, #48	; 0x30
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f002 fcc0 	bl	80084f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b70:	f107 030c 	add.w	r3, r7, #12
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	4b28      	ldr	r3, [pc, #160]	; (8005c28 <SystemClock_Config+0xcc>)
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <SystemClock_Config+0xcc>)
 8005b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <SystemClock_Config+0xcc>)
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	4b22      	ldr	r3, [pc, #136]	; (8005c2c <SystemClock_Config+0xd0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	; (8005c2c <SystemClock_Config+0xd0>)
 8005ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b1f      	ldr	r3, [pc, #124]	; (8005c2c <SystemClock_Config+0xd0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005bcc:	2304      	movs	r3, #4
 8005bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005bd0:	2364      	movs	r3, #100	; 0x64
 8005bd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005bd8:	2304      	movs	r3, #4
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bdc:	f107 0320 	add.w	r3, r7, #32
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 fd1d 	bl	8007620 <HAL_RCC_OscConfig>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005bec:	f000 f864 	bl	8005cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bf0:	230f      	movs	r3, #15
 8005bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005c06:	f107 030c 	add.w	r3, r7, #12
 8005c0a:	2103      	movs	r1, #3
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 ff7f 	bl	8007b10 <HAL_RCC_ClockConfig>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005c18:	f000 f84e 	bl	8005cb8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005c1c:	f002 f85e 	bl	8007cdc <HAL_RCC_EnableCSS>
}
 8005c20:	bf00      	nop
 8005c22:	3750      	adds	r7, #80	; 0x50
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40007000 	.word	0x40007000

08005c30 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e009      	b.n	8005c56 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	60ba      	str	r2, [r7, #8]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fee2 	bl	8005a14 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3301      	adds	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	dbf1      	blt.n	8005c42 <_write+0x12>
	}
	return len;
 8005c5e:	687b      	ldr	r3, [r7, #4]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d115      	bne.n	8005ca4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		cnt11++;
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005c80:	6013      	str	r3, [r2, #0]

		if(cnt11%1000 == 0)
 8005c82:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005c88:	fb83 1302 	smull	r1, r3, r3, r2
 8005c8c:	1199      	asrs	r1, r3, #6
 8005c8e:	17d3      	asrs	r3, r2, #31
 8005c90:	1acb      	subs	r3, r1, r3
 8005c92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
//			MPU6050_getDriftingRate(&pr, &rr, &yr);		// it uses to check drifting rate
			MPU6050_updateAngleCorrector();
 8005ca0:	f7fc f8f2 	bl	8001e88 <MPU6050_updateAngleCorrector>
		}
	}
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000390 	.word	0x20000390
 8005cb0:	20000370 	.word	0x20000370
 8005cb4:	10624dd3 	.word	0x10624dd3

08005cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005cbc:	b672      	cpsid	i
}
 8005cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cc0:	e7fe      	b.n	8005cc0 <Error_Handler+0x8>
	...

08005cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40023800 	.word	0x40023800

08005d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005d18:	f002 f912 	bl	8007f40 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d1c:	e7fe      	b.n	8005d1c <NMI_Handler+0x8>

08005d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d22:	e7fe      	b.n	8005d22 <HardFault_Handler+0x4>

08005d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d28:	e7fe      	b.n	8005d28 <MemManage_Handler+0x4>

08005d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d2e:	e7fe      	b.n	8005d2e <BusFault_Handler+0x4>

08005d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d34:	e7fe      	b.n	8005d34 <UsageFault_Handler+0x4>

08005d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d52:	b480      	push	{r7}
 8005d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d64:	f000 f990 	bl	8006088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d68:	bf00      	nop
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005d70:	4802      	ldr	r0, [pc, #8]	; (8005d7c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005d72:	f002 f9b1 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000390 	.word	0x20000390

08005d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
	return 1;
 8005d84:	2301      	movs	r3, #1
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <_kill>:

int _kill(int pid, int sig)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005d9a:	f002 fb61 	bl	8008460 <__errno>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2216      	movs	r2, #22
 8005da2:	601a      	str	r2, [r3, #0]
	return -1;
 8005da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <_exit>:

void _exit (int status)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ffe7 	bl	8005d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005dc2:	e7fe      	b.n	8005dc2 <_exit+0x12>

08005dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e00a      	b.n	8005dec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005dd6:	f3af 8000 	nop.w
 8005dda:	4601      	mov	r1, r0
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	60ba      	str	r2, [r7, #8]
 8005de2:	b2ca      	uxtb	r2, r1
 8005de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	3301      	adds	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	dbf0      	blt.n	8005dd6 <_read+0x12>
	}

return len;
 8005df4:	687b      	ldr	r3, [r7, #4]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
	return -1;
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e26:	605a      	str	r2, [r3, #4]
	return 0;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <_isatty>:

int _isatty(int file)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8005e3e:	2301      	movs	r3, #1
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
	return 0;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e70:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <_sbrk+0x5c>)
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <_sbrk+0x60>)
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e7c:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <_sbrk+0x64>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <_sbrk+0x64>)
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <_sbrk+0x68>)
 8005e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <_sbrk+0x64>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4413      	add	r3, r2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d207      	bcs.n	8005ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e98:	f002 fae2 	bl	8008460 <__errno>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	220c      	movs	r2, #12
 8005ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ea6:	e009      	b.n	8005ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <_sbrk+0x64>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <_sbrk+0x64>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <_sbrk+0x64>)
 8005eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005eba:	68fb      	ldr	r3, [r7, #12]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20020000 	.word	0x20020000
 8005ec8:	00000400 	.word	0x00000400
 8005ecc:	2000038c 	.word	0x2000038c
 8005ed0:	200003f0 	.word	0x200003f0

08005ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <SystemInit+0x20>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <SystemInit+0x20>)
 8005ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	e000ed00 	.word	0xe000ed00

08005ef8 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005efe:	4a0f      	ldr	r2, [pc, #60]	; (8005f3c <MX_TIM11_Init+0x44>)
 8005f00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005f04:	2263      	movs	r2, #99	; 0x63
 8005f06:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f14:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005f22:	4805      	ldr	r0, [pc, #20]	; (8005f38 <MX_TIM11_Init+0x40>)
 8005f24:	f002 f827 	bl	8007f76 <HAL_TIM_Base_Init>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005f2e:	f7ff fec3 	bl	8005cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000390 	.word	0x20000390
 8005f3c:	40014800 	.word	0x40014800

08005f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0e      	ldr	r2, [pc, #56]	; (8005f88 <HAL_TIM_Base_MspInit+0x48>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d115      	bne.n	8005f7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <HAL_TIM_Base_MspInit+0x4c>)
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	4a0c      	ldr	r2, [pc, #48]	; (8005f8c <HAL_TIM_Base_MspInit+0x4c>)
 8005f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f60:	6453      	str	r3, [r2, #68]	; 0x44
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <HAL_TIM_Base_MspInit+0x4c>)
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2100      	movs	r1, #0
 8005f72:	201a      	movs	r0, #26
 8005f74:	f000 f9a7 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005f78:	201a      	movs	r0, #26
 8005f7a:	f000 f9c0 	bl	80062fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40014800 	.word	0x40014800
 8005f8c:	40023800 	.word	0x40023800

08005f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f94:	480d      	ldr	r0, [pc, #52]	; (8005fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f96:	490e      	ldr	r1, [pc, #56]	; (8005fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f98:	4a0e      	ldr	r2, [pc, #56]	; (8005fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f9c:	e002      	b.n	8005fa4 <LoopCopyDataInit>

08005f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fa2:	3304      	adds	r3, #4

08005fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fa8:	d3f9      	bcc.n	8005f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005faa:	4a0b      	ldr	r2, [pc, #44]	; (8005fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005fac:	4c0b      	ldr	r4, [pc, #44]	; (8005fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8005fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fb0:	e001      	b.n	8005fb6 <LoopFillZerobss>

08005fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fb4:	3204      	adds	r2, #4

08005fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fb8:	d3fb      	bcc.n	8005fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005fba:	f7ff ff8b 	bl	8005ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fbe:	f002 fa55 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fc2:	f7ff fd4f 	bl	8005a64 <main>
  bx  lr    
 8005fc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fd0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005fd4:	0800d008 	.word	0x0800d008
  ldr r2, =_sbss
 8005fd8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005fdc:	200003ec 	.word	0x200003ec

08005fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fe0:	e7fe      	b.n	8005fe0 <ADC_IRQHandler>
	...

08005fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <HAL_Init+0x40>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <HAL_Init+0x40>)
 8005fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_Init+0x40>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <HAL_Init+0x40>)
 8005ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <HAL_Init+0x40>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a07      	ldr	r2, [pc, #28]	; (8006024 <HAL_Init+0x40>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800600c:	2003      	movs	r0, #3
 800600e:	f000 f94f 	bl	80062b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006012:	200f      	movs	r0, #15
 8006014:	f000 f808 	bl	8006028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006018:	f7ff fe54 	bl	8005cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40023c00 	.word	0x40023c00

08006028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006030:	4b12      	ldr	r3, [pc, #72]	; (800607c <HAL_InitTick+0x54>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <HAL_InitTick+0x58>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800603e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006042:	fbb2 f3f3 	udiv	r3, r2, r3
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f967 	bl	800631a <HAL_SYSTICK_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e00e      	b.n	8006074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b0f      	cmp	r3, #15
 800605a:	d80a      	bhi.n	8006072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800605c:	2200      	movs	r2, #0
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006064:	f000 f92f 	bl	80062c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006068:	4a06      	ldr	r2, [pc, #24]	; (8006084 <HAL_InitTick+0x5c>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2000003c 	.word	0x2000003c
 8006080:	20000044 	.word	0x20000044
 8006084:	20000040 	.word	0x20000040

08006088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <HAL_IncTick+0x20>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_IncTick+0x24>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4413      	add	r3, r2
 8006098:	4a04      	ldr	r2, [pc, #16]	; (80060ac <HAL_IncTick+0x24>)
 800609a:	6013      	str	r3, [r2, #0]
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000044 	.word	0x20000044
 80060ac:	200003d8 	.word	0x200003d8

080060b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return uwTick;
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <HAL_GetTick+0x14>)
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	200003d8 	.word	0x200003d8

080060c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060d0:	f7ff ffee 	bl	80060b0 <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e0:	d005      	beq.n	80060ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <HAL_Delay+0x44>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060ee:	bf00      	nop
 80060f0:	f7ff ffde 	bl	80060b0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d8f7      	bhi.n	80060f0 <HAL_Delay+0x28>
  {
  }
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000044 	.word	0x20000044

08006110 <__NVIC_SetPriorityGrouping>:
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <__NVIC_SetPriorityGrouping+0x44>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800612c:	4013      	ands	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800613c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006142:	4a04      	ldr	r2, [pc, #16]	; (8006154 <__NVIC_SetPriorityGrouping+0x44>)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	60d3      	str	r3, [r2, #12]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	e000ed00 	.word	0xe000ed00

08006158 <__NVIC_GetPriorityGrouping>:
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <__NVIC_GetPriorityGrouping+0x18>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f003 0307 	and.w	r3, r3, #7
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000ed00 	.word	0xe000ed00

08006174 <__NVIC_EnableIRQ>:
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	db0b      	blt.n	800619e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	4907      	ldr	r1, [pc, #28]	; (80061ac <__NVIC_EnableIRQ+0x38>)
 800618e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2001      	movs	r0, #1
 8006196:	fa00 f202 	lsl.w	r2, r0, r2
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000e100 	.word	0xe000e100

080061b0 <__NVIC_SetPriority>:
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db0a      	blt.n	80061da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	490c      	ldr	r1, [pc, #48]	; (80061fc <__NVIC_SetPriority+0x4c>)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	0112      	lsls	r2, r2, #4
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	440b      	add	r3, r1
 80061d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061d8:	e00a      	b.n	80061f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <__NVIC_SetPriority+0x50>)
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	3b04      	subs	r3, #4
 80061e8:	0112      	lsls	r2, r2, #4
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	440b      	add	r3, r1
 80061ee:	761a      	strb	r2, [r3, #24]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000e100 	.word	0xe000e100
 8006200:	e000ed00 	.word	0xe000ed00

08006204 <NVIC_EncodePriority>:
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	bf28      	it	cs
 8006222:	2304      	movcs	r3, #4
 8006224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3304      	adds	r3, #4
 800622a:	2b06      	cmp	r3, #6
 800622c:	d902      	bls.n	8006234 <NVIC_EncodePriority+0x30>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3b03      	subs	r3, #3
 8006232:	e000      	b.n	8006236 <NVIC_EncodePriority+0x32>
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43da      	mvns	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	401a      	ands	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800624c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	43d9      	mvns	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800625c:	4313      	orrs	r3, r2
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <SysTick_Config>:
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800627c:	d301      	bcc.n	8006282 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800627e:	2301      	movs	r3, #1
 8006280:	e00f      	b.n	80062a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006282:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <SysTick_Config+0x40>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800628a:	210f      	movs	r1, #15
 800628c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006290:	f7ff ff8e 	bl	80061b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <SysTick_Config+0x40>)
 8006296:	2200      	movs	r2, #0
 8006298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800629a:	4b04      	ldr	r3, [pc, #16]	; (80062ac <SysTick_Config+0x40>)
 800629c:	2207      	movs	r2, #7
 800629e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	e000e010 	.word	0xe000e010

080062b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff29 	bl	8006110 <__NVIC_SetPriorityGrouping>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	4603      	mov	r3, r0
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062d8:	f7ff ff3e 	bl	8006158 <__NVIC_GetPriorityGrouping>
 80062dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f7ff ff8e 	bl	8006204 <NVIC_EncodePriority>
 80062e8:	4602      	mov	r2, r0
 80062ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ff5d 	bl	80061b0 <__NVIC_SetPriority>
}
 80062f6:	bf00      	nop
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	4603      	mov	r3, r0
 8006306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff31 	bl	8006174 <__NVIC_EnableIRQ>
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ffa2 	bl	800626c <SysTick_Config>
 8006328:	4603      	mov	r3, r0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e159      	b.n	8006604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006350:	2201      	movs	r2, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4013      	ands	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	429a      	cmp	r2, r3
 800636a:	f040 8148 	bne.w	80065fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d005      	beq.n	8006386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006382:	2b02      	cmp	r3, #2
 8006384:	d130      	bne.n	80063e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	2203      	movs	r2, #3
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063bc:	2201      	movs	r2, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f003 0201 	and.w	r2, r3, #1
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d017      	beq.n	8006424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	2203      	movs	r2, #3
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d123      	bne.n	8006478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	08da      	lsrs	r2, r3, #3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3208      	adds	r2, #8
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	220f      	movs	r2, #15
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4313      	orrs	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	08da      	lsrs	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3208      	adds	r2, #8
 8006472:	69b9      	ldr	r1, [r7, #24]
 8006474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	2203      	movs	r2, #3
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 0203 	and.w	r2, r3, #3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80a2 	beq.w	80065fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	4b57      	ldr	r3, [pc, #348]	; (800661c <HAL_GPIO_Init+0x2e8>)
 80064c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c2:	4a56      	ldr	r2, [pc, #344]	; (800661c <HAL_GPIO_Init+0x2e8>)
 80064c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c8:	6453      	str	r3, [r2, #68]	; 0x44
 80064ca:	4b54      	ldr	r3, [pc, #336]	; (800661c <HAL_GPIO_Init+0x2e8>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064d6:	4a52      	ldr	r2, [pc, #328]	; (8006620 <HAL_GPIO_Init+0x2ec>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	3302      	adds	r3, #2
 80064de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a49      	ldr	r2, [pc, #292]	; (8006624 <HAL_GPIO_Init+0x2f0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d019      	beq.n	8006536 <HAL_GPIO_Init+0x202>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a48      	ldr	r2, [pc, #288]	; (8006628 <HAL_GPIO_Init+0x2f4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_GPIO_Init+0x1fe>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a47      	ldr	r2, [pc, #284]	; (800662c <HAL_GPIO_Init+0x2f8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00d      	beq.n	800652e <HAL_GPIO_Init+0x1fa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a46      	ldr	r2, [pc, #280]	; (8006630 <HAL_GPIO_Init+0x2fc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <HAL_GPIO_Init+0x1f6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a45      	ldr	r2, [pc, #276]	; (8006634 <HAL_GPIO_Init+0x300>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_GPIO_Init+0x1f2>
 8006522:	2304      	movs	r3, #4
 8006524:	e008      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006526:	2307      	movs	r3, #7
 8006528:	e006      	b.n	8006538 <HAL_GPIO_Init+0x204>
 800652a:	2303      	movs	r3, #3
 800652c:	e004      	b.n	8006538 <HAL_GPIO_Init+0x204>
 800652e:	2302      	movs	r3, #2
 8006530:	e002      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006536:	2300      	movs	r3, #0
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	f002 0203 	and.w	r2, r2, #3
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	4093      	lsls	r3, r2
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006548:	4935      	ldr	r1, [pc, #212]	; (8006620 <HAL_GPIO_Init+0x2ec>)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	3302      	adds	r3, #2
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006556:	4b38      	ldr	r3, [pc, #224]	; (8006638 <HAL_GPIO_Init+0x304>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800657a:	4a2f      	ldr	r2, [pc, #188]	; (8006638 <HAL_GPIO_Init+0x304>)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006580:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <HAL_GPIO_Init+0x304>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065a4:	4a24      	ldr	r2, [pc, #144]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065ce:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065d4:	4b18      	ldr	r3, [pc, #96]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065f8:	4a0f      	ldr	r2, [pc, #60]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3301      	adds	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	f67f aea2 	bls.w	8006350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	40013800 	.word	0x40013800
 8006624:	40020000 	.word	0x40020000
 8006628:	40020400 	.word	0x40020400
 800662c:	40020800 	.word	0x40020800
 8006630:	40020c00 	.word	0x40020c00
 8006634:	40021000 	.word	0x40021000
 8006638:	40013c00 	.word	0x40013c00

0800663c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	887b      	ldrh	r3, [r7, #2]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006654:	2301      	movs	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	e001      	b.n	800665e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	807b      	strh	r3, [r7, #2]
 8006678:	4613      	mov	r3, r2
 800667a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800667c:	787b      	ldrb	r3, [r7, #1]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006688:	e003      	b.n	8006692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800668a:	887b      	ldrh	r3, [r7, #2]
 800668c:	041a      	lsls	r2, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	619a      	str	r2, [r3, #24]
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e12b      	b.n	800690a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff f95c 	bl	8005984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006704:	f001 fc08 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 8006708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4a81      	ldr	r2, [pc, #516]	; (8006914 <HAL_I2C_Init+0x274>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d807      	bhi.n	8006724 <HAL_I2C_Init+0x84>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a80      	ldr	r2, [pc, #512]	; (8006918 <HAL_I2C_Init+0x278>)
 8006718:	4293      	cmp	r3, r2
 800671a:	bf94      	ite	ls
 800671c:	2301      	movls	r3, #1
 800671e:	2300      	movhi	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	e006      	b.n	8006732 <HAL_I2C_Init+0x92>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a7d      	ldr	r2, [pc, #500]	; (800691c <HAL_I2C_Init+0x27c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	bf94      	ite	ls
 800672c:	2301      	movls	r3, #1
 800672e:	2300      	movhi	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0e7      	b.n	800690a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a78      	ldr	r2, [pc, #480]	; (8006920 <HAL_I2C_Init+0x280>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	0c9b      	lsrs	r3, r3, #18
 8006744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a6a      	ldr	r2, [pc, #424]	; (8006914 <HAL_I2C_Init+0x274>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d802      	bhi.n	8006774 <HAL_I2C_Init+0xd4>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	3301      	adds	r3, #1
 8006772:	e009      	b.n	8006788 <HAL_I2C_Init+0xe8>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	4a69      	ldr	r2, [pc, #420]	; (8006924 <HAL_I2C_Init+0x284>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	099b      	lsrs	r3, r3, #6
 8006786:	3301      	adds	r3, #1
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	430b      	orrs	r3, r1
 800678e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800679a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	495c      	ldr	r1, [pc, #368]	; (8006914 <HAL_I2C_Init+0x274>)
 80067a4:	428b      	cmp	r3, r1
 80067a6:	d819      	bhi.n	80067dc <HAL_I2C_Init+0x13c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1e59      	subs	r1, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067bc:	400b      	ands	r3, r1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_I2C_Init+0x138>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1e59      	subs	r1, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80067d0:	3301      	adds	r3, #1
 80067d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d6:	e051      	b.n	800687c <HAL_I2C_Init+0x1dc>
 80067d8:	2304      	movs	r3, #4
 80067da:	e04f      	b.n	800687c <HAL_I2C_Init+0x1dc>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d111      	bne.n	8006808 <HAL_I2C_Init+0x168>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1e58      	subs	r0, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6859      	ldr	r1, [r3, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	440b      	add	r3, r1
 80067f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067f6:	3301      	adds	r3, #1
 80067f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e012      	b.n	800682e <HAL_I2C_Init+0x18e>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1e58      	subs	r0, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6859      	ldr	r1, [r3, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	0099      	lsls	r1, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	fbb0 f3f3 	udiv	r3, r0, r3
 800681e:	3301      	adds	r3, #1
 8006820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_I2C_Init+0x196>
 8006832:	2301      	movs	r3, #1
 8006834:	e022      	b.n	800687c <HAL_I2C_Init+0x1dc>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10e      	bne.n	800685c <HAL_I2C_Init+0x1bc>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1e58      	subs	r0, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6859      	ldr	r1, [r3, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	440b      	add	r3, r1
 800684c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006850:	3301      	adds	r3, #1
 8006852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	e00f      	b.n	800687c <HAL_I2C_Init+0x1dc>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1e58      	subs	r0, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	0099      	lsls	r1, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006872:	3301      	adds	r3, #1
 8006874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	6809      	ldr	r1, [r1, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69da      	ldr	r2, [r3, #28]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6911      	ldr	r1, [r2, #16]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68d2      	ldr	r2, [r2, #12]
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	430b      	orrs	r3, r1
 80068be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	000186a0 	.word	0x000186a0
 8006918:	001e847f 	.word	0x001e847f
 800691c:	003d08ff 	.word	0x003d08ff
 8006920:	431bde83 	.word	0x431bde83
 8006924:	10624dd3 	.word	0x10624dd3

08006928 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	461a      	mov	r2, r3
 8006936:	4603      	mov	r3, r0
 8006938:	817b      	strh	r3, [r7, #10]
 800693a:	460b      	mov	r3, r1
 800693c:	813b      	strh	r3, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006942:	f7ff fbb5 	bl	80060b0 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b20      	cmp	r3, #32
 8006952:	f040 80d9 	bne.w	8006b08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	2319      	movs	r3, #25
 800695c:	2201      	movs	r2, #1
 800695e:	496d      	ldr	r1, [pc, #436]	; (8006b14 <HAL_I2C_Mem_Write+0x1ec>)
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fc7f 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800696c:	2302      	movs	r3, #2
 800696e:	e0cc      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2C_Mem_Write+0x56>
 800697a:	2302      	movs	r3, #2
 800697c:	e0c5      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d007      	beq.n	80069a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2221      	movs	r2, #33	; 0x21
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a4d      	ldr	r2, [pc, #308]	; (8006b18 <HAL_I2C_Mem_Write+0x1f0>)
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069e6:	88f8      	ldrh	r0, [r7, #6]
 80069e8:	893a      	ldrh	r2, [r7, #8]
 80069ea:	8979      	ldrh	r1, [r7, #10]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4603      	mov	r3, r0
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fab6 	bl	8006f68 <I2C_RequestMemoryWrite>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d052      	beq.n	8006aa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e081      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fd00 	bl	8007410 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d107      	bne.n	8006a2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e06b      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	781a      	ldrb	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d11b      	bne.n	8006aa8 <HAL_I2C_Mem_Write+0x180>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1aa      	bne.n	8006a06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fcec 	bl	8007492 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00d      	beq.n	8006adc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d107      	bne.n	8006ad8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e016      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e000      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	00100002 	.word	0x00100002
 8006b18:	ffff0000 	.word	0xffff0000

08006b1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	817b      	strh	r3, [r7, #10]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	813b      	strh	r3, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b36:	f7ff fabb 	bl	80060b0 <HAL_GetTick>
 8006b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	f040 8208 	bne.w	8006f5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2319      	movs	r3, #25
 8006b50:	2201      	movs	r2, #1
 8006b52:	497b      	ldr	r1, [pc, #492]	; (8006d40 <HAL_I2C_Mem_Read+0x224>)
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fb85 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e1fb      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2C_Mem_Read+0x56>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e1f4      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d007      	beq.n	8006b98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2222      	movs	r2, #34	; 0x22
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2240      	movs	r2, #64	; 0x40
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a5b      	ldr	r2, [pc, #364]	; (8006d44 <HAL_I2C_Mem_Read+0x228>)
 8006bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bda:	88f8      	ldrh	r0, [r7, #6]
 8006bdc:	893a      	ldrh	r2, [r7, #8]
 8006bde:	8979      	ldrh	r1, [r7, #10]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4603      	mov	r3, r0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fa52 	bl	8007094 <I2C_RequestMemoryRead>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e1b0      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d113      	bne.n	8006c2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c02:	2300      	movs	r3, #0
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e184      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d11b      	bne.n	8006c6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	e164      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d11b      	bne.n	8006caa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c92:	2300      	movs	r3, #0
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	e144      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cc0:	e138      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f200 80f1 	bhi.w	8006eae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d123      	bne.n	8006d1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fc1b 	bl	8007514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e139      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d1a:	e10b      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d14e      	bne.n	8006dc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <HAL_I2C_Mem_Read+0x22c>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fa98 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e10e      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
 8006d3e:	bf00      	nop
 8006d40:	00100002 	.word	0x00100002
 8006d44:	ffff0000 	.word	0xffff0000
 8006d48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dc0:	e0b8      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4966      	ldr	r1, [pc, #408]	; (8006f64 <HAL_I2C_Mem_Read+0x448>)
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fa49 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0bf      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	2200      	movs	r2, #0
 8006e26:	494f      	ldr	r1, [pc, #316]	; (8006f64 <HAL_I2C_Mem_Read+0x448>)
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa1b 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e091      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eac:	e042      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fb2e 	bl	8007514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e04c      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d118      	bne.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f aec2 	bne.w	8006cc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e000      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f5a:	2302      	movs	r3, #2
  }
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3728      	adds	r7, #40	; 0x28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	00010004 	.word	0x00010004

08006f68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	4608      	mov	r0, r1
 8006f72:	4611      	mov	r1, r2
 8006f74:	461a      	mov	r2, r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	817b      	strh	r3, [r7, #10]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	813b      	strh	r3, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f960 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb8:	d103      	bne.n	8006fc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e05f      	b.n	8007086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fc6:	897b      	ldrh	r3, [r7, #10]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	6a3a      	ldr	r2, [r7, #32]
 8006fda:	492d      	ldr	r1, [pc, #180]	; (8007090 <I2C_RequestMemoryWrite+0x128>)
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f998 	bl	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e04c      	b.n	8007086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007004:	6a39      	ldr	r1, [r7, #32]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa02 	bl	8007410 <I2C_WaitOnTXEFlagUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00d      	beq.n	800702e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b04      	cmp	r3, #4
 8007018:	d107      	bne.n	800702a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e02b      	b.n	8007086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d105      	bne.n	8007040 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007034:	893b      	ldrh	r3, [r7, #8]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	611a      	str	r2, [r3, #16]
 800703e:	e021      	b.n	8007084 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007040:	893b      	ldrh	r3, [r7, #8]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	b29b      	uxth	r3, r3
 8007046:	b2da      	uxtb	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	6a39      	ldr	r1, [r7, #32]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f9dc 	bl	8007410 <I2C_WaitOnTXEFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00d      	beq.n	800707a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b04      	cmp	r3, #4
 8007064:	d107      	bne.n	8007076 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e005      	b.n	8007086 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800707a:	893b      	ldrh	r3, [r7, #8]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	00010002 	.word	0x00010002

08007094 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af02      	add	r7, sp, #8
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	461a      	mov	r2, r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	817b      	strh	r3, [r7, #10]
 80070a6:	460b      	mov	r3, r1
 80070a8:	813b      	strh	r3, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f8c2 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f4:	d103      	bne.n	80070fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e0aa      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007102:	897b      	ldrh	r3, [r7, #10]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	4952      	ldr	r1, [pc, #328]	; (8007260 <I2C_RequestMemoryRead+0x1cc>)
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f8fa 	bl	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e097      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800713e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007140:	6a39      	ldr	r1, [r7, #32]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 f964 	bl	8007410 <I2C_WaitOnTXEFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00d      	beq.n	800716a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	2b04      	cmp	r3, #4
 8007154:	d107      	bne.n	8007166 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e076      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d105      	bne.n	800717c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007170:	893b      	ldrh	r3, [r7, #8]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	611a      	str	r2, [r3, #16]
 800717a:	e021      	b.n	80071c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	b2da      	uxtb	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718c:	6a39      	ldr	r1, [r7, #32]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f93e 	bl	8007410 <I2C_WaitOnTXEFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d107      	bne.n	80071b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e050      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071b6:	893b      	ldrh	r3, [r7, #8]
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	6a39      	ldr	r1, [r7, #32]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f923 	bl	8007410 <I2C_WaitOnTXEFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d107      	bne.n	80071e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e035      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	2200      	movs	r2, #0
 8007204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f82b 	bl	8007264 <I2C_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007222:	d103      	bne.n	800722c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e013      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007230:	897b      	ldrh	r3, [r7, #10]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	4906      	ldr	r1, [pc, #24]	; (8007260 <I2C_RequestMemoryRead+0x1cc>)
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f863 	bl	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	00010002 	.word	0x00010002

08007264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007274:	e025      	b.n	80072c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727c:	d021      	beq.n	80072c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727e:	f7fe ff17 	bl	80060b0 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d302      	bcc.n	8007294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d116      	bne.n	80072c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f043 0220 	orr.w	r2, r3, #32
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e023      	b.n	800730a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10d      	bne.n	80072e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	43da      	mvns	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	e00c      	b.n	8007302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	43da      	mvns	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	429a      	cmp	r2, r3
 8007306:	d0b6      	beq.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007320:	e051      	b.n	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800732c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007330:	d123      	bne.n	800737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800734a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f043 0204 	orr.w	r2, r3, #4
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e046      	b.n	8007408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007380:	d021      	beq.n	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007382:	f7fe fe95 	bl	80060b0 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	429a      	cmp	r2, r3
 8007390:	d302      	bcc.n	8007398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d116      	bne.n	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0220 	orr.w	r2, r3, #32
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e020      	b.n	8007408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10c      	bne.n	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4013      	ands	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bf14      	ite	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	2300      	moveq	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	e00b      	b.n	8007402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	43da      	mvns	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4013      	ands	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bf14      	ite	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	2300      	moveq	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d18d      	bne.n	8007322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800741c:	e02d      	b.n	800747a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f8ce 	bl	80075c0 <I2C_IsAcknowledgeFailed>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e02d      	b.n	800748a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007434:	d021      	beq.n	800747a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fe fe3b 	bl	80060b0 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d116      	bne.n	800747a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e007      	b.n	800748a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d1ca      	bne.n	800741e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800749e:	e02d      	b.n	80074fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f88d 	bl	80075c0 <I2C_IsAcknowledgeFailed>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e02d      	b.n	800750c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b6:	d021      	beq.n	80074fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b8:	f7fe fdfa 	bl	80060b0 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d302      	bcc.n	80074ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d116      	bne.n	80074fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	f043 0220 	orr.w	r2, r3, #32
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e007      	b.n	800750c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b04      	cmp	r3, #4
 8007508:	d1ca      	bne.n	80074a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007520:	e042      	b.n	80075a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b10      	cmp	r3, #16
 800752e:	d119      	bne.n	8007564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0210 	mvn.w	r2, #16
 8007538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e029      	b.n	80075b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007564:	f7fe fda4 	bl	80060b0 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d116      	bne.n	80075a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e007      	b.n	80075b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d1b5      	bne.n	8007522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d6:	d11b      	bne.n	8007610 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	f043 0204 	orr.w	r2, r3, #4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e267      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d075      	beq.n	800772a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800763e:	4b88      	ldr	r3, [pc, #544]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
 8007646:	2b04      	cmp	r3, #4
 8007648:	d00c      	beq.n	8007664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800764a:	4b85      	ldr	r3, [pc, #532]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007652:	2b08      	cmp	r3, #8
 8007654:	d112      	bne.n	800767c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007656:	4b82      	ldr	r3, [pc, #520]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007662:	d10b      	bne.n	800767c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007664:	4b7e      	ldr	r3, [pc, #504]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d05b      	beq.n	8007728 <HAL_RCC_OscConfig+0x108>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d157      	bne.n	8007728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e242      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007684:	d106      	bne.n	8007694 <HAL_RCC_OscConfig+0x74>
 8007686:	4b76      	ldr	r3, [pc, #472]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a75      	ldr	r2, [pc, #468]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 800768c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	e01d      	b.n	80076d0 <HAL_RCC_OscConfig+0xb0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800769c:	d10c      	bne.n	80076b8 <HAL_RCC_OscConfig+0x98>
 800769e:	4b70      	ldr	r3, [pc, #448]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a6f      	ldr	r2, [pc, #444]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	4b6d      	ldr	r3, [pc, #436]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a6c      	ldr	r2, [pc, #432]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e00b      	b.n	80076d0 <HAL_RCC_OscConfig+0xb0>
 80076b8:	4b69      	ldr	r3, [pc, #420]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a68      	ldr	r2, [pc, #416]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	4b66      	ldr	r3, [pc, #408]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a65      	ldr	r2, [pc, #404]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d013      	beq.n	8007700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d8:	f7fe fcea 	bl	80060b0 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076e0:	f7fe fce6 	bl	80060b0 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b64      	cmp	r3, #100	; 0x64
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e207      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	4b5b      	ldr	r3, [pc, #364]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0xc0>
 80076fe:	e014      	b.n	800772a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007700:	f7fe fcd6 	bl	80060b0 <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007708:	f7fe fcd2 	bl	80060b0 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b64      	cmp	r3, #100	; 0x64
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e1f3      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800771a:	4b51      	ldr	r3, [pc, #324]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f0      	bne.n	8007708 <HAL_RCC_OscConfig+0xe8>
 8007726:	e000      	b.n	800772a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d063      	beq.n	80077fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007736:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 030c 	and.w	r3, r3, #12
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007742:	4b47      	ldr	r3, [pc, #284]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800774a:	2b08      	cmp	r3, #8
 800774c:	d11c      	bne.n	8007788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800774e:	4b44      	ldr	r3, [pc, #272]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d116      	bne.n	8007788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800775a:	4b41      	ldr	r3, [pc, #260]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_RCC_OscConfig+0x152>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d001      	beq.n	8007772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e1c7      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007772:	4b3b      	ldr	r3, [pc, #236]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4937      	ldr	r1, [pc, #220]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007782:	4313      	orrs	r3, r2
 8007784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007786:	e03a      	b.n	80077fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d020      	beq.n	80077d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007790:	4b34      	ldr	r3, [pc, #208]	; (8007864 <HAL_RCC_OscConfig+0x244>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007796:	f7fe fc8b 	bl	80060b0 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800779e:	f7fe fc87 	bl	80060b0 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e1a8      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b0:	4b2b      	ldr	r3, [pc, #172]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077bc:	4b28      	ldr	r3, [pc, #160]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	4925      	ldr	r1, [pc, #148]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	600b      	str	r3, [r1, #0]
 80077d0:	e015      	b.n	80077fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077d2:	4b24      	ldr	r3, [pc, #144]	; (8007864 <HAL_RCC_OscConfig+0x244>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7fe fc6a 	bl	80060b0 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077e0:	f7fe fc66 	bl	80060b0 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e187      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077f2:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d036      	beq.n	8007878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d016      	beq.n	8007840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <HAL_RCC_OscConfig+0x248>)
 8007814:	2201      	movs	r2, #1
 8007816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007818:	f7fe fc4a 	bl	80060b0 <HAL_GetTick>
 800781c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007820:	f7fe fc46 	bl	80060b0 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e167      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCC_OscConfig+0x240>)
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f0      	beq.n	8007820 <HAL_RCC_OscConfig+0x200>
 800783e:	e01b      	b.n	8007878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007840:	4b09      	ldr	r3, [pc, #36]	; (8007868 <HAL_RCC_OscConfig+0x248>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007846:	f7fe fc33 	bl	80060b0 <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800784c:	e00e      	b.n	800786c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800784e:	f7fe fc2f 	bl	80060b0 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d907      	bls.n	800786c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e150      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
 8007860:	40023800 	.word	0x40023800
 8007864:	42470000 	.word	0x42470000
 8007868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800786c:	4b88      	ldr	r3, [pc, #544]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800786e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1ea      	bne.n	800784e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 8097 	beq.w	80079b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800788a:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	4b7d      	ldr	r3, [pc, #500]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	4a7c      	ldr	r2, [pc, #496]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a4:	6413      	str	r3, [r2, #64]	; 0x40
 80078a6:	4b7a      	ldr	r3, [pc, #488]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ae:	60bb      	str	r3, [r7, #8]
 80078b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078b2:	2301      	movs	r3, #1
 80078b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b6:	4b77      	ldr	r3, [pc, #476]	; (8007a94 <HAL_RCC_OscConfig+0x474>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d118      	bne.n	80078f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078c2:	4b74      	ldr	r3, [pc, #464]	; (8007a94 <HAL_RCC_OscConfig+0x474>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a73      	ldr	r2, [pc, #460]	; (8007a94 <HAL_RCC_OscConfig+0x474>)
 80078c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ce:	f7fe fbef 	bl	80060b0 <HAL_GetTick>
 80078d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d4:	e008      	b.n	80078e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d6:	f7fe fbeb 	bl	80060b0 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e10c      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e8:	4b6a      	ldr	r3, [pc, #424]	; (8007a94 <HAL_RCC_OscConfig+0x474>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f0      	beq.n	80078d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d106      	bne.n	800790a <HAL_RCC_OscConfig+0x2ea>
 80078fc:	4b64      	ldr	r3, [pc, #400]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	4a63      	ldr	r2, [pc, #396]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	6713      	str	r3, [r2, #112]	; 0x70
 8007908:	e01c      	b.n	8007944 <HAL_RCC_OscConfig+0x324>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b05      	cmp	r3, #5
 8007910:	d10c      	bne.n	800792c <HAL_RCC_OscConfig+0x30c>
 8007912:	4b5f      	ldr	r3, [pc, #380]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	4a5e      	ldr	r2, [pc, #376]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007918:	f043 0304 	orr.w	r3, r3, #4
 800791c:	6713      	str	r3, [r2, #112]	; 0x70
 800791e:	4b5c      	ldr	r3, [pc, #368]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	4a5b      	ldr	r2, [pc, #364]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	6713      	str	r3, [r2, #112]	; 0x70
 800792a:	e00b      	b.n	8007944 <HAL_RCC_OscConfig+0x324>
 800792c:	4b58      	ldr	r3, [pc, #352]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	4a57      	ldr	r2, [pc, #348]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	6713      	str	r3, [r2, #112]	; 0x70
 8007938:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	4a54      	ldr	r2, [pc, #336]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800793e:	f023 0304 	bic.w	r3, r3, #4
 8007942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d015      	beq.n	8007978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794c:	f7fe fbb0 	bl	80060b0 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007952:	e00a      	b.n	800796a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007954:	f7fe fbac 	bl	80060b0 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007962:	4293      	cmp	r3, r2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e0cb      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800796a:	4b49      	ldr	r3, [pc, #292]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0ee      	beq.n	8007954 <HAL_RCC_OscConfig+0x334>
 8007976:	e014      	b.n	80079a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007978:	f7fe fb9a 	bl	80060b0 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800797e:	e00a      	b.n	8007996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007980:	f7fe fb96 	bl	80060b0 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	f241 3288 	movw	r2, #5000	; 0x1388
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e0b5      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007996:	4b3e      	ldr	r3, [pc, #248]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1ee      	bne.n	8007980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d105      	bne.n	80079b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079a8:	4b39      	ldr	r3, [pc, #228]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	4a38      	ldr	r2, [pc, #224]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80079ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80a1 	beq.w	8007b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079be:	4b34      	ldr	r3, [pc, #208]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 030c 	and.w	r3, r3, #12
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d05c      	beq.n	8007a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d141      	bne.n	8007a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <HAL_RCC_OscConfig+0x478>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d8:	f7fe fb6a 	bl	80060b0 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e0:	f7fe fb66 	bl	80060b0 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e087      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f2:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69da      	ldr	r2, [r3, #28]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	019b      	lsls	r3, r3, #6
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	3b01      	subs	r3, #1
 8007a18:	041b      	lsls	r3, r3, #16
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	061b      	lsls	r3, r3, #24
 8007a22:	491b      	ldr	r1, [pc, #108]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a28:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <HAL_RCC_OscConfig+0x478>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2e:	f7fe fb3f 	bl	80060b0 <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a36:	f7fe fb3b 	bl	80060b0 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e05c      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a48:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0f0      	beq.n	8007a36 <HAL_RCC_OscConfig+0x416>
 8007a54:	e054      	b.n	8007b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <HAL_RCC_OscConfig+0x478>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a5c:	f7fe fb28 	bl	80060b0 <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a62:	e008      	b.n	8007a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a64:	f7fe fb24 	bl	80060b0 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e045      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a76:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <HAL_RCC_OscConfig+0x470>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f0      	bne.n	8007a64 <HAL_RCC_OscConfig+0x444>
 8007a82:	e03d      	b.n	8007b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d107      	bne.n	8007a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e038      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
 8007a90:	40023800 	.word	0x40023800
 8007a94:	40007000 	.word	0x40007000
 8007a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a9c:	4b1b      	ldr	r3, [pc, #108]	; (8007b0c <HAL_RCC_OscConfig+0x4ec>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d028      	beq.n	8007afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d121      	bne.n	8007afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d11a      	bne.n	8007afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007acc:	4013      	ands	r3, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d111      	bne.n	8007afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d107      	bne.n	8007afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d001      	beq.n	8007b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e000      	b.n	8007b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40023800 	.word	0x40023800

08007b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0cc      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b24:	4b68      	ldr	r3, [pc, #416]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d90c      	bls.n	8007b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b65      	ldr	r3, [pc, #404]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b3a:	4b63      	ldr	r3, [pc, #396]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d001      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0b8      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b64:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4a58      	ldr	r2, [pc, #352]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b7c:	4b53      	ldr	r3, [pc, #332]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4a52      	ldr	r2, [pc, #328]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b88:	4b50      	ldr	r3, [pc, #320]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	494d      	ldr	r1, [pc, #308]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d044      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d107      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bae:	4b47      	ldr	r3, [pc, #284]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d119      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e07f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d003      	beq.n	8007bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d107      	bne.n	8007bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bce:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e06f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bde:	4b3b      	ldr	r3, [pc, #236]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e067      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bee:	4b37      	ldr	r3, [pc, #220]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 0203 	bic.w	r2, r3, #3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4934      	ldr	r1, [pc, #208]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c00:	f7fe fa56 	bl	80060b0 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c06:	e00a      	b.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c08:	f7fe fa52 	bl	80060b0 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e04f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 020c 	and.w	r2, r3, #12
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d1eb      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d20c      	bcs.n	8007c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3e:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c46:	4b20      	ldr	r3, [pc, #128]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d001      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e032      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4916      	ldr	r1, [pc, #88]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	490e      	ldr	r1, [pc, #56]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c96:	f000 f82d 	bl	8007cf4 <HAL_RCC_GetSysClockFreq>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	490a      	ldr	r1, [pc, #40]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca8:	5ccb      	ldrb	r3, [r1, r3]
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe f9b6 	bl	8006028 <HAL_InitTick>

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40023c00 	.word	0x40023c00
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	0800cb84 	.word	0x0800cb84
 8007cd4:	2000003c 	.word	0x2000003c
 8007cd8:	20000040 	.word	0x20000040

08007cdc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007ce0:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <HAL_RCC_EnableCSS+0x14>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	4247004c 	.word	0x4247004c

08007cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf8:	b094      	sub	sp, #80	; 0x50
 8007cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007d00:	2300      	movs	r3, #0
 8007d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d04:	2300      	movs	r3, #0
 8007d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d0c:	4b79      	ldr	r3, [pc, #484]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 030c 	and.w	r3, r3, #12
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d00d      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x40>
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	f200 80e1 	bhi.w	8007ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <HAL_RCC_GetSysClockFreq+0x34>
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d003      	beq.n	8007d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007d26:	e0db      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d28:	4b73      	ldr	r3, [pc, #460]	; (8007ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007d2c:	e0db      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d2e:	4b73      	ldr	r3, [pc, #460]	; (8007efc <HAL_RCC_GetSysClockFreq+0x208>)
 8007d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d32:	e0d8      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d34:	4b6f      	ldr	r3, [pc, #444]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d3e:	4b6d      	ldr	r3, [pc, #436]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d063      	beq.n	8007e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d4a:	4b6a      	ldr	r3, [pc, #424]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	099b      	lsrs	r3, r3, #6
 8007d50:	2200      	movs	r2, #0
 8007d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
 8007d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d66:	4622      	mov	r2, r4
 8007d68:	462b      	mov	r3, r5
 8007d6a:	f04f 0000 	mov.w	r0, #0
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	0159      	lsls	r1, r3, #5
 8007d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d78:	0150      	lsls	r0, r2, #5
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4621      	mov	r1, r4
 8007d80:	1a51      	subs	r1, r2, r1
 8007d82:	6139      	str	r1, [r7, #16]
 8007d84:	4629      	mov	r1, r5
 8007d86:	eb63 0301 	sbc.w	r3, r3, r1
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d98:	4659      	mov	r1, fp
 8007d9a:	018b      	lsls	r3, r1, #6
 8007d9c:	4651      	mov	r1, sl
 8007d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007da2:	4651      	mov	r1, sl
 8007da4:	018a      	lsls	r2, r1, #6
 8007da6:	4651      	mov	r1, sl
 8007da8:	ebb2 0801 	subs.w	r8, r2, r1
 8007dac:	4659      	mov	r1, fp
 8007dae:	eb63 0901 	sbc.w	r9, r3, r1
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	4699      	mov	r9, r3
 8007dca:	4623      	mov	r3, r4
 8007dcc:	eb18 0303 	adds.w	r3, r8, r3
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	eb49 0303 	adc.w	r3, r9, r3
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007de6:	4629      	mov	r1, r5
 8007de8:	024b      	lsls	r3, r1, #9
 8007dea:	4621      	mov	r1, r4
 8007dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007df0:	4621      	mov	r1, r4
 8007df2:	024a      	lsls	r2, r1, #9
 8007df4:	4610      	mov	r0, r2
 8007df6:	4619      	mov	r1, r3
 8007df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e04:	f7f8 ff78 	bl	8000cf8 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e10:	e058      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e12:	4b38      	ldr	r3, [pc, #224]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e22:	623b      	str	r3, [r7, #32]
 8007e24:	2300      	movs	r3, #0
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
 8007e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	f04f 0000 	mov.w	r0, #0
 8007e34:	f04f 0100 	mov.w	r1, #0
 8007e38:	0159      	lsls	r1, r3, #5
 8007e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e3e:	0150      	lsls	r0, r2, #5
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4641      	mov	r1, r8
 8007e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e64:	ebb2 040a 	subs.w	r4, r2, sl
 8007e68:	eb63 050b 	sbc.w	r5, r3, fp
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	00eb      	lsls	r3, r5, #3
 8007e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e7a:	00e2      	lsls	r2, r4, #3
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	461d      	mov	r5, r3
 8007e80:	4643      	mov	r3, r8
 8007e82:	18e3      	adds	r3, r4, r3
 8007e84:	603b      	str	r3, [r7, #0]
 8007e86:	464b      	mov	r3, r9
 8007e88:	eb45 0303 	adc.w	r3, r5, r3
 8007e8c:	607b      	str	r3, [r7, #4]
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	028b      	lsls	r3, r1, #10
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	028a      	lsls	r2, r1, #10
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eae:	2200      	movs	r2, #0
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	61fa      	str	r2, [r7, #28]
 8007eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eb8:	f7f8 ff1e 	bl	8000cf8 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	3301      	adds	r3, #1
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ede:	e002      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3750      	adds	r7, #80	; 0x50
 8007eec:	46bd      	mov	sp, r7
 8007eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	007a1200 	.word	0x007a1200

08007f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f04:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f06:	681b      	ldr	r3, [r3, #0]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	2000003c 	.word	0x2000003c

08007f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f1c:	f7ff fff0 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	0a9b      	lsrs	r3, r3, #10
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	4903      	ldr	r1, [pc, #12]	; (8007f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f2e:	5ccb      	ldrb	r3, [r1, r3]
 8007f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	0800cb94 	.word	0x0800cb94

08007f40 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4c:	2b80      	cmp	r3, #128	; 0x80
 8007f4e:	d104      	bne.n	8007f5a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007f50:	f000 f80a 	bl	8007f68 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007f56:	2280      	movs	r2, #128	; 0x80
 8007f58:	701a      	strb	r2, [r3, #0]
  }
}
 8007f5a:	bf00      	nop
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40023800 	.word	0x40023800
 8007f64:	4002380e 	.word	0x4002380e

08007f68 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e041      	b.n	800800c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7fd ffcf 	bl	8005f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f000 f9bf 	bl	8008338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	d001      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e044      	b.n	80080b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1e      	ldr	r2, [pc, #120]	; (80080c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x6c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008056:	d013      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x6c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1a      	ldr	r2, [pc, #104]	; (80080c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x6c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a19      	ldr	r2, [pc, #100]	; (80080cc <HAL_TIM_Base_Start_IT+0xb8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x6c>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x6c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d111      	bne.n	80080a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b06      	cmp	r3, #6
 8008090:	d010      	beq.n	80080b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0201 	orr.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a2:	e007      	b.n	80080b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40010000 	.word	0x40010000
 80080c8:	40000400 	.word	0x40000400
 80080cc:	40000800 	.word	0x40000800
 80080d0:	40000c00 	.word	0x40000c00
 80080d4:	40014000 	.word	0x40014000

080080d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d122      	bne.n	8008134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d11b      	bne.n	8008134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0202 	mvn.w	r2, #2
 8008104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8ee 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8e0 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f8f1 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b04      	cmp	r3, #4
 8008140:	d122      	bne.n	8008188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b04      	cmp	r3, #4
 800814e:	d11b      	bne.n	8008188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0204 	mvn.w	r2, #4
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8c4 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8b6 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f8c7 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b08      	cmp	r3, #8
 8008194:	d122      	bne.n	80081dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d11b      	bne.n	80081dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0208 	mvn.w	r2, #8
 80081ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2204      	movs	r2, #4
 80081b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f89a 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f88c 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f89d 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d122      	bne.n	8008230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d11b      	bne.n	8008230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0210 	mvn.w	r2, #16
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2208      	movs	r2, #8
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f870 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f862 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f873 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	d10e      	bne.n	800825c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	d107      	bne.n	800825c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0201 	mvn.w	r2, #1
 8008254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fd fd06 	bl	8005c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b80      	cmp	r3, #128	; 0x80
 8008268:	d10e      	bne.n	8008288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008274:	2b80      	cmp	r3, #128	; 0x80
 8008276:	d107      	bne.n	8008288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8e2 	bl	800844c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b40      	cmp	r3, #64	; 0x40
 8008294:	d10e      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d107      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f838 	bl	8008324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d10e      	bne.n	80082e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d107      	bne.n	80082e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0220 	mvn.w	r2, #32
 80082d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f8ac 	bl	8008438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a34      	ldr	r2, [pc, #208]	; (800841c <TIM_Base_SetConfig+0xe4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00f      	beq.n	8008370 <TIM_Base_SetConfig+0x38>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d00b      	beq.n	8008370 <TIM_Base_SetConfig+0x38>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a31      	ldr	r2, [pc, #196]	; (8008420 <TIM_Base_SetConfig+0xe8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d007      	beq.n	8008370 <TIM_Base_SetConfig+0x38>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a30      	ldr	r2, [pc, #192]	; (8008424 <TIM_Base_SetConfig+0xec>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d003      	beq.n	8008370 <TIM_Base_SetConfig+0x38>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a2f      	ldr	r2, [pc, #188]	; (8008428 <TIM_Base_SetConfig+0xf0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d108      	bne.n	8008382 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a25      	ldr	r2, [pc, #148]	; (800841c <TIM_Base_SetConfig+0xe4>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01b      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008390:	d017      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a22      	ldr	r2, [pc, #136]	; (8008420 <TIM_Base_SetConfig+0xe8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d013      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a21      	ldr	r2, [pc, #132]	; (8008424 <TIM_Base_SetConfig+0xec>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00f      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a20      	ldr	r2, [pc, #128]	; (8008428 <TIM_Base_SetConfig+0xf0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00b      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a1f      	ldr	r2, [pc, #124]	; (800842c <TIM_Base_SetConfig+0xf4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d007      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a1e      	ldr	r2, [pc, #120]	; (8008430 <TIM_Base_SetConfig+0xf8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d003      	beq.n	80083c2 <TIM_Base_SetConfig+0x8a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a1d      	ldr	r2, [pc, #116]	; (8008434 <TIM_Base_SetConfig+0xfc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d108      	bne.n	80083d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a08      	ldr	r2, [pc, #32]	; (800841c <TIM_Base_SetConfig+0xe4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d103      	bne.n	8008408 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	691a      	ldr	r2, [r3, #16]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	615a      	str	r2, [r3, #20]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40010000 	.word	0x40010000
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40014000 	.word	0x40014000
 8008430:	40014400 	.word	0x40014400
 8008434:	40014800 	.word	0x40014800

08008438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <__errno>:
 8008460:	4b01      	ldr	r3, [pc, #4]	; (8008468 <__errno+0x8>)
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	20000048 	.word	0x20000048

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	4d0d      	ldr	r5, [pc, #52]	; (80084a4 <__libc_init_array+0x38>)
 8008470:	4c0d      	ldr	r4, [pc, #52]	; (80084a8 <__libc_init_array+0x3c>)
 8008472:	1b64      	subs	r4, r4, r5
 8008474:	10a4      	asrs	r4, r4, #2
 8008476:	2600      	movs	r6, #0
 8008478:	42a6      	cmp	r6, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	4d0b      	ldr	r5, [pc, #44]	; (80084ac <__libc_init_array+0x40>)
 800847e:	4c0c      	ldr	r4, [pc, #48]	; (80084b0 <__libc_init_array+0x44>)
 8008480:	f003 fcd6 	bl	800be30 <_init>
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	2600      	movs	r6, #0
 800848a:	42a6      	cmp	r6, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	f855 3b04 	ldr.w	r3, [r5], #4
 8008494:	4798      	blx	r3
 8008496:	3601      	adds	r6, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	f855 3b04 	ldr.w	r3, [r5], #4
 800849e:	4798      	blx	r3
 80084a0:	3601      	adds	r6, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	0800d000 	.word	0x0800d000
 80084a8:	0800d000 	.word	0x0800d000
 80084ac:	0800d000 	.word	0x0800d000
 80084b0:	0800d004 	.word	0x0800d004

080084b4 <memcmp>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	3901      	subs	r1, #1
 80084b8:	4402      	add	r2, r0
 80084ba:	4290      	cmp	r0, r2
 80084bc:	d101      	bne.n	80084c2 <memcmp+0xe>
 80084be:	2000      	movs	r0, #0
 80084c0:	e005      	b.n	80084ce <memcmp+0x1a>
 80084c2:	7803      	ldrb	r3, [r0, #0]
 80084c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d001      	beq.n	80084d0 <memcmp+0x1c>
 80084cc:	1b18      	subs	r0, r3, r4
 80084ce:	bd10      	pop	{r4, pc}
 80084d0:	3001      	adds	r0, #1
 80084d2:	e7f2      	b.n	80084ba <memcmp+0x6>

080084d4 <memcpy>:
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	4770      	bx	lr
 80084e0:	b510      	push	{r4, lr}
 80084e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ea:	4291      	cmp	r1, r2
 80084ec:	d1f9      	bne.n	80084e2 <memcpy+0xe>
 80084ee:	bd10      	pop	{r4, pc}

080084f0 <memset>:
 80084f0:	4402      	add	r2, r0
 80084f2:	4603      	mov	r3, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d100      	bne.n	80084fa <memset+0xa>
 80084f8:	4770      	bx	lr
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	e7f9      	b.n	80084f4 <memset+0x4>

08008500 <__cvt>:
 8008500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	ec55 4b10 	vmov	r4, r5, d0
 8008508:	2d00      	cmp	r5, #0
 800850a:	460e      	mov	r6, r1
 800850c:	4619      	mov	r1, r3
 800850e:	462b      	mov	r3, r5
 8008510:	bfbb      	ittet	lt
 8008512:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008516:	461d      	movlt	r5, r3
 8008518:	2300      	movge	r3, #0
 800851a:	232d      	movlt	r3, #45	; 0x2d
 800851c:	700b      	strb	r3, [r1, #0]
 800851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008520:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008524:	4691      	mov	r9, r2
 8008526:	f023 0820 	bic.w	r8, r3, #32
 800852a:	bfbc      	itt	lt
 800852c:	4622      	movlt	r2, r4
 800852e:	4614      	movlt	r4, r2
 8008530:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008534:	d005      	beq.n	8008542 <__cvt+0x42>
 8008536:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800853a:	d100      	bne.n	800853e <__cvt+0x3e>
 800853c:	3601      	adds	r6, #1
 800853e:	2102      	movs	r1, #2
 8008540:	e000      	b.n	8008544 <__cvt+0x44>
 8008542:	2103      	movs	r1, #3
 8008544:	ab03      	add	r3, sp, #12
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	ab02      	add	r3, sp, #8
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	ec45 4b10 	vmov	d0, r4, r5
 8008550:	4653      	mov	r3, sl
 8008552:	4632      	mov	r2, r6
 8008554:	f000 fe18 	bl	8009188 <_dtoa_r>
 8008558:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800855c:	4607      	mov	r7, r0
 800855e:	d102      	bne.n	8008566 <__cvt+0x66>
 8008560:	f019 0f01 	tst.w	r9, #1
 8008564:	d022      	beq.n	80085ac <__cvt+0xac>
 8008566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800856a:	eb07 0906 	add.w	r9, r7, r6
 800856e:	d110      	bne.n	8008592 <__cvt+0x92>
 8008570:	783b      	ldrb	r3, [r7, #0]
 8008572:	2b30      	cmp	r3, #48	; 0x30
 8008574:	d10a      	bne.n	800858c <__cvt+0x8c>
 8008576:	2200      	movs	r2, #0
 8008578:	2300      	movs	r3, #0
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008582:	b918      	cbnz	r0, 800858c <__cvt+0x8c>
 8008584:	f1c6 0601 	rsb	r6, r6, #1
 8008588:	f8ca 6000 	str.w	r6, [sl]
 800858c:	f8da 3000 	ldr.w	r3, [sl]
 8008590:	4499      	add	r9, r3
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f8 fa9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800859e:	b108      	cbz	r0, 80085a4 <__cvt+0xa4>
 80085a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80085a4:	2230      	movs	r2, #48	; 0x30
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	454b      	cmp	r3, r9
 80085aa:	d307      	bcc.n	80085bc <__cvt+0xbc>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085b0:	1bdb      	subs	r3, r3, r7
 80085b2:	4638      	mov	r0, r7
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	b004      	add	sp, #16
 80085b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085bc:	1c59      	adds	r1, r3, #1
 80085be:	9103      	str	r1, [sp, #12]
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e7f0      	b.n	80085a6 <__cvt+0xa6>

080085c4 <__exponent>:
 80085c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c6:	4603      	mov	r3, r0
 80085c8:	2900      	cmp	r1, #0
 80085ca:	bfb8      	it	lt
 80085cc:	4249      	neglt	r1, r1
 80085ce:	f803 2b02 	strb.w	r2, [r3], #2
 80085d2:	bfb4      	ite	lt
 80085d4:	222d      	movlt	r2, #45	; 0x2d
 80085d6:	222b      	movge	r2, #43	; 0x2b
 80085d8:	2909      	cmp	r1, #9
 80085da:	7042      	strb	r2, [r0, #1]
 80085dc:	dd2a      	ble.n	8008634 <__exponent+0x70>
 80085de:	f10d 0407 	add.w	r4, sp, #7
 80085e2:	46a4      	mov	ip, r4
 80085e4:	270a      	movs	r7, #10
 80085e6:	46a6      	mov	lr, r4
 80085e8:	460a      	mov	r2, r1
 80085ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80085ee:	fb07 1516 	mls	r5, r7, r6, r1
 80085f2:	3530      	adds	r5, #48	; 0x30
 80085f4:	2a63      	cmp	r2, #99	; 0x63
 80085f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80085fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085fe:	4631      	mov	r1, r6
 8008600:	dcf1      	bgt.n	80085e6 <__exponent+0x22>
 8008602:	3130      	adds	r1, #48	; 0x30
 8008604:	f1ae 0502 	sub.w	r5, lr, #2
 8008608:	f804 1c01 	strb.w	r1, [r4, #-1]
 800860c:	1c44      	adds	r4, r0, #1
 800860e:	4629      	mov	r1, r5
 8008610:	4561      	cmp	r1, ip
 8008612:	d30a      	bcc.n	800862a <__exponent+0x66>
 8008614:	f10d 0209 	add.w	r2, sp, #9
 8008618:	eba2 020e 	sub.w	r2, r2, lr
 800861c:	4565      	cmp	r5, ip
 800861e:	bf88      	it	hi
 8008620:	2200      	movhi	r2, #0
 8008622:	4413      	add	r3, r2
 8008624:	1a18      	subs	r0, r3, r0
 8008626:	b003      	add	sp, #12
 8008628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008632:	e7ed      	b.n	8008610 <__exponent+0x4c>
 8008634:	2330      	movs	r3, #48	; 0x30
 8008636:	3130      	adds	r1, #48	; 0x30
 8008638:	7083      	strb	r3, [r0, #2]
 800863a:	70c1      	strb	r1, [r0, #3]
 800863c:	1d03      	adds	r3, r0, #4
 800863e:	e7f1      	b.n	8008624 <__exponent+0x60>

08008640 <_printf_float>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	ed2d 8b02 	vpush	{d8}
 8008648:	b08d      	sub	sp, #52	; 0x34
 800864a:	460c      	mov	r4, r1
 800864c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008650:	4616      	mov	r6, r2
 8008652:	461f      	mov	r7, r3
 8008654:	4605      	mov	r5, r0
 8008656:	f001 fd3d 	bl	800a0d4 <_localeconv_r>
 800865a:	f8d0 a000 	ldr.w	sl, [r0]
 800865e:	4650      	mov	r0, sl
 8008660:	f7f7 fdbe 	bl	80001e0 <strlen>
 8008664:	2300      	movs	r3, #0
 8008666:	930a      	str	r3, [sp, #40]	; 0x28
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	f8d8 3000 	ldr.w	r3, [r8]
 8008670:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008674:	3307      	adds	r3, #7
 8008676:	f023 0307 	bic.w	r3, r3, #7
 800867a:	f103 0208 	add.w	r2, r3, #8
 800867e:	f8c8 2000 	str.w	r2, [r8]
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800868a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800868e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008692:	9307      	str	r3, [sp, #28]
 8008694:	f8cd 8018 	str.w	r8, [sp, #24]
 8008698:	ee08 0a10 	vmov	s16, r0
 800869c:	4b9f      	ldr	r3, [pc, #636]	; (800891c <_printf_float+0x2dc>)
 800869e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086a6:	f7f8 fa49 	bl	8000b3c <__aeabi_dcmpun>
 80086aa:	bb88      	cbnz	r0, 8008710 <_printf_float+0xd0>
 80086ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086b0:	4b9a      	ldr	r3, [pc, #616]	; (800891c <_printf_float+0x2dc>)
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b6:	f7f8 fa23 	bl	8000b00 <__aeabi_dcmple>
 80086ba:	bb48      	cbnz	r0, 8008710 <_printf_float+0xd0>
 80086bc:	2200      	movs	r2, #0
 80086be:	2300      	movs	r3, #0
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	f7f8 fa12 	bl	8000aec <__aeabi_dcmplt>
 80086c8:	b110      	cbz	r0, 80086d0 <_printf_float+0x90>
 80086ca:	232d      	movs	r3, #45	; 0x2d
 80086cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d0:	4b93      	ldr	r3, [pc, #588]	; (8008920 <_printf_float+0x2e0>)
 80086d2:	4894      	ldr	r0, [pc, #592]	; (8008924 <_printf_float+0x2e4>)
 80086d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086d8:	bf94      	ite	ls
 80086da:	4698      	movls	r8, r3
 80086dc:	4680      	movhi	r8, r0
 80086de:	2303      	movs	r3, #3
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	9b05      	ldr	r3, [sp, #20]
 80086e4:	f023 0204 	bic.w	r2, r3, #4
 80086e8:	6022      	str	r2, [r4, #0]
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	9700      	str	r7, [sp, #0]
 80086f0:	4633      	mov	r3, r6
 80086f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80086f4:	4621      	mov	r1, r4
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 f9d8 	bl	8008aac <_printf_common>
 80086fc:	3001      	adds	r0, #1
 80086fe:	f040 8090 	bne.w	8008822 <_printf_float+0x1e2>
 8008702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008706:	b00d      	add	sp, #52	; 0x34
 8008708:	ecbd 8b02 	vpop	{d8}
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	4640      	mov	r0, r8
 8008716:	4649      	mov	r1, r9
 8008718:	f7f8 fa10 	bl	8000b3c <__aeabi_dcmpun>
 800871c:	b140      	cbz	r0, 8008730 <_printf_float+0xf0>
 800871e:	464b      	mov	r3, r9
 8008720:	2b00      	cmp	r3, #0
 8008722:	bfbc      	itt	lt
 8008724:	232d      	movlt	r3, #45	; 0x2d
 8008726:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800872a:	487f      	ldr	r0, [pc, #508]	; (8008928 <_printf_float+0x2e8>)
 800872c:	4b7f      	ldr	r3, [pc, #508]	; (800892c <_printf_float+0x2ec>)
 800872e:	e7d1      	b.n	80086d4 <_printf_float+0x94>
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008736:	9206      	str	r2, [sp, #24]
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	d13f      	bne.n	80087bc <_printf_float+0x17c>
 800873c:	2306      	movs	r3, #6
 800873e:	6063      	str	r3, [r4, #4]
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	6861      	ldr	r1, [r4, #4]
 8008744:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008748:	2300      	movs	r3, #0
 800874a:	9303      	str	r3, [sp, #12]
 800874c:	ab0a      	add	r3, sp, #40	; 0x28
 800874e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008752:	ab09      	add	r3, sp, #36	; 0x24
 8008754:	ec49 8b10 	vmov	d0, r8, r9
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008760:	4628      	mov	r0, r5
 8008762:	f7ff fecd 	bl	8008500 <__cvt>
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	9909      	ldr	r1, [sp, #36]	; 0x24
 800876a:	2b47      	cmp	r3, #71	; 0x47
 800876c:	4680      	mov	r8, r0
 800876e:	d108      	bne.n	8008782 <_printf_float+0x142>
 8008770:	1cc8      	adds	r0, r1, #3
 8008772:	db02      	blt.n	800877a <_printf_float+0x13a>
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	4299      	cmp	r1, r3
 8008778:	dd41      	ble.n	80087fe <_printf_float+0x1be>
 800877a:	f1ab 0b02 	sub.w	fp, fp, #2
 800877e:	fa5f fb8b 	uxtb.w	fp, fp
 8008782:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008786:	d820      	bhi.n	80087ca <_printf_float+0x18a>
 8008788:	3901      	subs	r1, #1
 800878a:	465a      	mov	r2, fp
 800878c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008790:	9109      	str	r1, [sp, #36]	; 0x24
 8008792:	f7ff ff17 	bl	80085c4 <__exponent>
 8008796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008798:	1813      	adds	r3, r2, r0
 800879a:	2a01      	cmp	r2, #1
 800879c:	4681      	mov	r9, r0
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	dc02      	bgt.n	80087a8 <_printf_float+0x168>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	07d2      	lsls	r2, r2, #31
 80087a6:	d501      	bpl.n	80087ac <_printf_float+0x16c>
 80087a8:	3301      	adds	r3, #1
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d09c      	beq.n	80086ee <_printf_float+0xae>
 80087b4:	232d      	movs	r3, #45	; 0x2d
 80087b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ba:	e798      	b.n	80086ee <_printf_float+0xae>
 80087bc:	9a06      	ldr	r2, [sp, #24]
 80087be:	2a47      	cmp	r2, #71	; 0x47
 80087c0:	d1be      	bne.n	8008740 <_printf_float+0x100>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1bc      	bne.n	8008740 <_printf_float+0x100>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e7b9      	b.n	800873e <_printf_float+0xfe>
 80087ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087ce:	d118      	bne.n	8008802 <_printf_float+0x1c2>
 80087d0:	2900      	cmp	r1, #0
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	dd0b      	ble.n	80087ee <_printf_float+0x1ae>
 80087d6:	6121      	str	r1, [r4, #16]
 80087d8:	b913      	cbnz	r3, 80087e0 <_printf_float+0x1a0>
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	07d0      	lsls	r0, r2, #31
 80087de:	d502      	bpl.n	80087e6 <_printf_float+0x1a6>
 80087e0:	3301      	adds	r3, #1
 80087e2:	440b      	add	r3, r1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80087e8:	f04f 0900 	mov.w	r9, #0
 80087ec:	e7de      	b.n	80087ac <_printf_float+0x16c>
 80087ee:	b913      	cbnz	r3, 80087f6 <_printf_float+0x1b6>
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	07d2      	lsls	r2, r2, #31
 80087f4:	d501      	bpl.n	80087fa <_printf_float+0x1ba>
 80087f6:	3302      	adds	r3, #2
 80087f8:	e7f4      	b.n	80087e4 <_printf_float+0x1a4>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e7f2      	b.n	80087e4 <_printf_float+0x1a4>
 80087fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008804:	4299      	cmp	r1, r3
 8008806:	db05      	blt.n	8008814 <_printf_float+0x1d4>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	6121      	str	r1, [r4, #16]
 800880c:	07d8      	lsls	r0, r3, #31
 800880e:	d5ea      	bpl.n	80087e6 <_printf_float+0x1a6>
 8008810:	1c4b      	adds	r3, r1, #1
 8008812:	e7e7      	b.n	80087e4 <_printf_float+0x1a4>
 8008814:	2900      	cmp	r1, #0
 8008816:	bfd4      	ite	le
 8008818:	f1c1 0202 	rsble	r2, r1, #2
 800881c:	2201      	movgt	r2, #1
 800881e:	4413      	add	r3, r2
 8008820:	e7e0      	b.n	80087e4 <_printf_float+0x1a4>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	055a      	lsls	r2, r3, #21
 8008826:	d407      	bmi.n	8008838 <_printf_float+0x1f8>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	4642      	mov	r2, r8
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	d12c      	bne.n	8008890 <_printf_float+0x250>
 8008836:	e764      	b.n	8008702 <_printf_float+0xc2>
 8008838:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800883c:	f240 80e0 	bls.w	8008a00 <_printf_float+0x3c0>
 8008840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	f7f8 f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800884c:	2800      	cmp	r0, #0
 800884e:	d034      	beq.n	80088ba <_printf_float+0x27a>
 8008850:	4a37      	ldr	r2, [pc, #220]	; (8008930 <_printf_float+0x2f0>)
 8008852:	2301      	movs	r3, #1
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f af51 	beq.w	8008702 <_printf_float+0xc2>
 8008860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008864:	429a      	cmp	r2, r3
 8008866:	db02      	blt.n	800886e <_printf_float+0x22e>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	07d8      	lsls	r0, r3, #31
 800886c:	d510      	bpl.n	8008890 <_printf_float+0x250>
 800886e:	ee18 3a10 	vmov	r3, s16
 8008872:	4652      	mov	r2, sl
 8008874:	4631      	mov	r1, r6
 8008876:	4628      	mov	r0, r5
 8008878:	47b8      	blx	r7
 800887a:	3001      	adds	r0, #1
 800887c:	f43f af41 	beq.w	8008702 <_printf_float+0xc2>
 8008880:	f04f 0800 	mov.w	r8, #0
 8008884:	f104 091a 	add.w	r9, r4, #26
 8008888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888a:	3b01      	subs	r3, #1
 800888c:	4543      	cmp	r3, r8
 800888e:	dc09      	bgt.n	80088a4 <_printf_float+0x264>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	079b      	lsls	r3, r3, #30
 8008894:	f100 8105 	bmi.w	8008aa2 <_printf_float+0x462>
 8008898:	68e0      	ldr	r0, [r4, #12]
 800889a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800889c:	4298      	cmp	r0, r3
 800889e:	bfb8      	it	lt
 80088a0:	4618      	movlt	r0, r3
 80088a2:	e730      	b.n	8008706 <_printf_float+0xc6>
 80088a4:	2301      	movs	r3, #1
 80088a6:	464a      	mov	r2, r9
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f af27 	beq.w	8008702 <_printf_float+0xc2>
 80088b4:	f108 0801 	add.w	r8, r8, #1
 80088b8:	e7e6      	b.n	8008888 <_printf_float+0x248>
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dc39      	bgt.n	8008934 <_printf_float+0x2f4>
 80088c0:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <_printf_float+0x2f0>)
 80088c2:	2301      	movs	r3, #1
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f af19 	beq.w	8008702 <_printf_float+0xc2>
 80088d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d4:	4313      	orrs	r3, r2
 80088d6:	d102      	bne.n	80088de <_printf_float+0x29e>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	07d9      	lsls	r1, r3, #31
 80088dc:	d5d8      	bpl.n	8008890 <_printf_float+0x250>
 80088de:	ee18 3a10 	vmov	r3, s16
 80088e2:	4652      	mov	r2, sl
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	f43f af09 	beq.w	8008702 <_printf_float+0xc2>
 80088f0:	f04f 0900 	mov.w	r9, #0
 80088f4:	f104 0a1a 	add.w	sl, r4, #26
 80088f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fa:	425b      	negs	r3, r3
 80088fc:	454b      	cmp	r3, r9
 80088fe:	dc01      	bgt.n	8008904 <_printf_float+0x2c4>
 8008900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008902:	e792      	b.n	800882a <_printf_float+0x1ea>
 8008904:	2301      	movs	r3, #1
 8008906:	4652      	mov	r2, sl
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f aef7 	beq.w	8008702 <_printf_float+0xc2>
 8008914:	f109 0901 	add.w	r9, r9, #1
 8008918:	e7ee      	b.n	80088f8 <_printf_float+0x2b8>
 800891a:	bf00      	nop
 800891c:	7fefffff 	.word	0x7fefffff
 8008920:	0800cba0 	.word	0x0800cba0
 8008924:	0800cba4 	.word	0x0800cba4
 8008928:	0800cbac 	.word	0x0800cbac
 800892c:	0800cba8 	.word	0x0800cba8
 8008930:	0800cbb0 	.word	0x0800cbb0
 8008934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008938:	429a      	cmp	r2, r3
 800893a:	bfa8      	it	ge
 800893c:	461a      	movge	r2, r3
 800893e:	2a00      	cmp	r2, #0
 8008940:	4691      	mov	r9, r2
 8008942:	dc37      	bgt.n	80089b4 <_printf_float+0x374>
 8008944:	f04f 0b00 	mov.w	fp, #0
 8008948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800894c:	f104 021a 	add.w	r2, r4, #26
 8008950:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008952:	9305      	str	r3, [sp, #20]
 8008954:	eba3 0309 	sub.w	r3, r3, r9
 8008958:	455b      	cmp	r3, fp
 800895a:	dc33      	bgt.n	80089c4 <_printf_float+0x384>
 800895c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008960:	429a      	cmp	r2, r3
 8008962:	db3b      	blt.n	80089dc <_printf_float+0x39c>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07da      	lsls	r2, r3, #31
 8008968:	d438      	bmi.n	80089dc <_printf_float+0x39c>
 800896a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896c:	9a05      	ldr	r2, [sp, #20]
 800896e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008970:	1a9a      	subs	r2, r3, r2
 8008972:	eba3 0901 	sub.w	r9, r3, r1
 8008976:	4591      	cmp	r9, r2
 8008978:	bfa8      	it	ge
 800897a:	4691      	movge	r9, r2
 800897c:	f1b9 0f00 	cmp.w	r9, #0
 8008980:	dc35      	bgt.n	80089ee <_printf_float+0x3ae>
 8008982:	f04f 0800 	mov.w	r8, #0
 8008986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800898a:	f104 0a1a 	add.w	sl, r4, #26
 800898e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	eba3 0309 	sub.w	r3, r3, r9
 8008998:	4543      	cmp	r3, r8
 800899a:	f77f af79 	ble.w	8008890 <_printf_float+0x250>
 800899e:	2301      	movs	r3, #1
 80089a0:	4652      	mov	r2, sl
 80089a2:	4631      	mov	r1, r6
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	f43f aeaa 	beq.w	8008702 <_printf_float+0xc2>
 80089ae:	f108 0801 	add.w	r8, r8, #1
 80089b2:	e7ec      	b.n	800898e <_printf_float+0x34e>
 80089b4:	4613      	mov	r3, r2
 80089b6:	4631      	mov	r1, r6
 80089b8:	4642      	mov	r2, r8
 80089ba:	4628      	mov	r0, r5
 80089bc:	47b8      	blx	r7
 80089be:	3001      	adds	r0, #1
 80089c0:	d1c0      	bne.n	8008944 <_printf_float+0x304>
 80089c2:	e69e      	b.n	8008702 <_printf_float+0xc2>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	9205      	str	r2, [sp, #20]
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f ae97 	beq.w	8008702 <_printf_float+0xc2>
 80089d4:	9a05      	ldr	r2, [sp, #20]
 80089d6:	f10b 0b01 	add.w	fp, fp, #1
 80089da:	e7b9      	b.n	8008950 <_printf_float+0x310>
 80089dc:	ee18 3a10 	vmov	r3, s16
 80089e0:	4652      	mov	r2, sl
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	d1be      	bne.n	800896a <_printf_float+0x32a>
 80089ec:	e689      	b.n	8008702 <_printf_float+0xc2>
 80089ee:	9a05      	ldr	r2, [sp, #20]
 80089f0:	464b      	mov	r3, r9
 80089f2:	4442      	add	r2, r8
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	d1c1      	bne.n	8008982 <_printf_float+0x342>
 80089fe:	e680      	b.n	8008702 <_printf_float+0xc2>
 8008a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a02:	2a01      	cmp	r2, #1
 8008a04:	dc01      	bgt.n	8008a0a <_printf_float+0x3ca>
 8008a06:	07db      	lsls	r3, r3, #31
 8008a08:	d538      	bpl.n	8008a7c <_printf_float+0x43c>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	f43f ae74 	beq.w	8008702 <_printf_float+0xc2>
 8008a1a:	ee18 3a10 	vmov	r3, s16
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f ae6b 	beq.w	8008702 <_printf_float+0xc2>
 8008a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a30:	2200      	movs	r2, #0
 8008a32:	2300      	movs	r3, #0
 8008a34:	f7f8 f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a38:	b9d8      	cbnz	r0, 8008a72 <_printf_float+0x432>
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3c:	f108 0201 	add.w	r2, r8, #1
 8008a40:	3b01      	subs	r3, #1
 8008a42:	4631      	mov	r1, r6
 8008a44:	4628      	mov	r0, r5
 8008a46:	47b8      	blx	r7
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d10e      	bne.n	8008a6a <_printf_float+0x42a>
 8008a4c:	e659      	b.n	8008702 <_printf_float+0xc2>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4652      	mov	r2, sl
 8008a52:	4631      	mov	r1, r6
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b8      	blx	r7
 8008a58:	3001      	adds	r0, #1
 8008a5a:	f43f ae52 	beq.w	8008702 <_printf_float+0xc2>
 8008a5e:	f108 0801 	add.w	r8, r8, #1
 8008a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a64:	3b01      	subs	r3, #1
 8008a66:	4543      	cmp	r3, r8
 8008a68:	dcf1      	bgt.n	8008a4e <_printf_float+0x40e>
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a70:	e6dc      	b.n	800882c <_printf_float+0x1ec>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	f104 0a1a 	add.w	sl, r4, #26
 8008a7a:	e7f2      	b.n	8008a62 <_printf_float+0x422>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4642      	mov	r2, r8
 8008a80:	e7df      	b.n	8008a42 <_printf_float+0x402>
 8008a82:	2301      	movs	r3, #1
 8008a84:	464a      	mov	r2, r9
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f ae38 	beq.w	8008702 <_printf_float+0xc2>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a9a:	1a5b      	subs	r3, r3, r1
 8008a9c:	4543      	cmp	r3, r8
 8008a9e:	dcf0      	bgt.n	8008a82 <_printf_float+0x442>
 8008aa0:	e6fa      	b.n	8008898 <_printf_float+0x258>
 8008aa2:	f04f 0800 	mov.w	r8, #0
 8008aa6:	f104 0919 	add.w	r9, r4, #25
 8008aaa:	e7f4      	b.n	8008a96 <_printf_float+0x456>

08008aac <_printf_common>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	4616      	mov	r6, r2
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	688a      	ldr	r2, [r1, #8]
 8008ab6:	690b      	ldr	r3, [r1, #16]
 8008ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	bfb8      	it	lt
 8008ac0:	4613      	movlt	r3, r2
 8008ac2:	6033      	str	r3, [r6, #0]
 8008ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ac8:	4607      	mov	r7, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b10a      	cbz	r2, 8008ad2 <_printf_common+0x26>
 8008ace:	3301      	adds	r3, #1
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	0699      	lsls	r1, r3, #26
 8008ad6:	bf42      	ittt	mi
 8008ad8:	6833      	ldrmi	r3, [r6, #0]
 8008ada:	3302      	addmi	r3, #2
 8008adc:	6033      	strmi	r3, [r6, #0]
 8008ade:	6825      	ldr	r5, [r4, #0]
 8008ae0:	f015 0506 	ands.w	r5, r5, #6
 8008ae4:	d106      	bne.n	8008af4 <_printf_common+0x48>
 8008ae6:	f104 0a19 	add.w	sl, r4, #25
 8008aea:	68e3      	ldr	r3, [r4, #12]
 8008aec:	6832      	ldr	r2, [r6, #0]
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	dc26      	bgt.n	8008b42 <_printf_common+0x96>
 8008af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008af8:	1e13      	subs	r3, r2, #0
 8008afa:	6822      	ldr	r2, [r4, #0]
 8008afc:	bf18      	it	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	0692      	lsls	r2, r2, #26
 8008b02:	d42b      	bmi.n	8008b5c <_printf_common+0xb0>
 8008b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	47c0      	blx	r8
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d01e      	beq.n	8008b50 <_printf_common+0xa4>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	68e5      	ldr	r5, [r4, #12]
 8008b16:	6832      	ldr	r2, [r6, #0]
 8008b18:	f003 0306 	and.w	r3, r3, #6
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	bf08      	it	eq
 8008b20:	1aad      	subeq	r5, r5, r2
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	bf0c      	ite	eq
 8008b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b2c:	2500      	movne	r5, #0
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bfc4      	itt	gt
 8008b32:	1a9b      	subgt	r3, r3, r2
 8008b34:	18ed      	addgt	r5, r5, r3
 8008b36:	2600      	movs	r6, #0
 8008b38:	341a      	adds	r4, #26
 8008b3a:	42b5      	cmp	r5, r6
 8008b3c:	d11a      	bne.n	8008b74 <_printf_common+0xc8>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e008      	b.n	8008b54 <_printf_common+0xa8>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4652      	mov	r2, sl
 8008b46:	4649      	mov	r1, r9
 8008b48:	4638      	mov	r0, r7
 8008b4a:	47c0      	blx	r8
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d103      	bne.n	8008b58 <_printf_common+0xac>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	3501      	adds	r5, #1
 8008b5a:	e7c6      	b.n	8008aea <_printf_common+0x3e>
 8008b5c:	18e1      	adds	r1, r4, r3
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	2030      	movs	r0, #48	; 0x30
 8008b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b66:	4422      	add	r2, r4
 8008b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b70:	3302      	adds	r3, #2
 8008b72:	e7c7      	b.n	8008b04 <_printf_common+0x58>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4622      	mov	r2, r4
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d0e6      	beq.n	8008b50 <_printf_common+0xa4>
 8008b82:	3601      	adds	r6, #1
 8008b84:	e7d9      	b.n	8008b3a <_printf_common+0x8e>
	...

08008b88 <_printf_i>:
 8008b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	7e0f      	ldrb	r7, [r1, #24]
 8008b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b90:	2f78      	cmp	r7, #120	; 0x78
 8008b92:	4691      	mov	r9, r2
 8008b94:	4680      	mov	r8, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	469a      	mov	sl, r3
 8008b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b9e:	d807      	bhi.n	8008bb0 <_printf_i+0x28>
 8008ba0:	2f62      	cmp	r7, #98	; 0x62
 8008ba2:	d80a      	bhi.n	8008bba <_printf_i+0x32>
 8008ba4:	2f00      	cmp	r7, #0
 8008ba6:	f000 80d8 	beq.w	8008d5a <_printf_i+0x1d2>
 8008baa:	2f58      	cmp	r7, #88	; 0x58
 8008bac:	f000 80a3 	beq.w	8008cf6 <_printf_i+0x16e>
 8008bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bb8:	e03a      	b.n	8008c30 <_printf_i+0xa8>
 8008bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bbe:	2b15      	cmp	r3, #21
 8008bc0:	d8f6      	bhi.n	8008bb0 <_printf_i+0x28>
 8008bc2:	a101      	add	r1, pc, #4	; (adr r1, 8008bc8 <_printf_i+0x40>)
 8008bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc8:	08008c21 	.word	0x08008c21
 8008bcc:	08008c35 	.word	0x08008c35
 8008bd0:	08008bb1 	.word	0x08008bb1
 8008bd4:	08008bb1 	.word	0x08008bb1
 8008bd8:	08008bb1 	.word	0x08008bb1
 8008bdc:	08008bb1 	.word	0x08008bb1
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008bb1 	.word	0x08008bb1
 8008be8:	08008bb1 	.word	0x08008bb1
 8008bec:	08008bb1 	.word	0x08008bb1
 8008bf0:	08008bb1 	.word	0x08008bb1
 8008bf4:	08008d41 	.word	0x08008d41
 8008bf8:	08008c65 	.word	0x08008c65
 8008bfc:	08008d23 	.word	0x08008d23
 8008c00:	08008bb1 	.word	0x08008bb1
 8008c04:	08008bb1 	.word	0x08008bb1
 8008c08:	08008d63 	.word	0x08008d63
 8008c0c:	08008bb1 	.word	0x08008bb1
 8008c10:	08008c65 	.word	0x08008c65
 8008c14:	08008bb1 	.word	0x08008bb1
 8008c18:	08008bb1 	.word	0x08008bb1
 8008c1c:	08008d2b 	.word	0x08008d2b
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	602a      	str	r2, [r5, #0]
 8008c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0a3      	b.n	8008d7c <_printf_i+0x1f4>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	6829      	ldr	r1, [r5, #0]
 8008c38:	0606      	lsls	r6, r0, #24
 8008c3a:	f101 0304 	add.w	r3, r1, #4
 8008c3e:	d50a      	bpl.n	8008c56 <_printf_i+0xce>
 8008c40:	680e      	ldr	r6, [r1, #0]
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	da03      	bge.n	8008c50 <_printf_i+0xc8>
 8008c48:	232d      	movs	r3, #45	; 0x2d
 8008c4a:	4276      	negs	r6, r6
 8008c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c50:	485e      	ldr	r0, [pc, #376]	; (8008dcc <_printf_i+0x244>)
 8008c52:	230a      	movs	r3, #10
 8008c54:	e019      	b.n	8008c8a <_printf_i+0x102>
 8008c56:	680e      	ldr	r6, [r1, #0]
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c5e:	bf18      	it	ne
 8008c60:	b236      	sxthne	r6, r6
 8008c62:	e7ef      	b.n	8008c44 <_printf_i+0xbc>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	6820      	ldr	r0, [r4, #0]
 8008c68:	1d19      	adds	r1, r3, #4
 8008c6a:	6029      	str	r1, [r5, #0]
 8008c6c:	0601      	lsls	r1, r0, #24
 8008c6e:	d501      	bpl.n	8008c74 <_printf_i+0xec>
 8008c70:	681e      	ldr	r6, [r3, #0]
 8008c72:	e002      	b.n	8008c7a <_printf_i+0xf2>
 8008c74:	0646      	lsls	r6, r0, #25
 8008c76:	d5fb      	bpl.n	8008c70 <_printf_i+0xe8>
 8008c78:	881e      	ldrh	r6, [r3, #0]
 8008c7a:	4854      	ldr	r0, [pc, #336]	; (8008dcc <_printf_i+0x244>)
 8008c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c7e:	bf0c      	ite	eq
 8008c80:	2308      	moveq	r3, #8
 8008c82:	230a      	movne	r3, #10
 8008c84:	2100      	movs	r1, #0
 8008c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c8a:	6865      	ldr	r5, [r4, #4]
 8008c8c:	60a5      	str	r5, [r4, #8]
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	bfa2      	ittt	ge
 8008c92:	6821      	ldrge	r1, [r4, #0]
 8008c94:	f021 0104 	bicge.w	r1, r1, #4
 8008c98:	6021      	strge	r1, [r4, #0]
 8008c9a:	b90e      	cbnz	r6, 8008ca0 <_printf_i+0x118>
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	d04d      	beq.n	8008d3c <_printf_i+0x1b4>
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8008caa:	5dc7      	ldrb	r7, [r0, r7]
 8008cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cb0:	4637      	mov	r7, r6
 8008cb2:	42bb      	cmp	r3, r7
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	d9f4      	bls.n	8008ca2 <_printf_i+0x11a>
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d10b      	bne.n	8008cd4 <_printf_i+0x14c>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	07de      	lsls	r6, r3, #31
 8008cc0:	d508      	bpl.n	8008cd4 <_printf_i+0x14c>
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	6861      	ldr	r1, [r4, #4]
 8008cc6:	4299      	cmp	r1, r3
 8008cc8:	bfde      	ittt	le
 8008cca:	2330      	movle	r3, #48	; 0x30
 8008ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008cd4:	1b52      	subs	r2, r2, r5
 8008cd6:	6122      	str	r2, [r4, #16]
 8008cd8:	f8cd a000 	str.w	sl, [sp]
 8008cdc:	464b      	mov	r3, r9
 8008cde:	aa03      	add	r2, sp, #12
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	f7ff fee2 	bl	8008aac <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d14c      	bne.n	8008d86 <_printf_i+0x1fe>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf0:	b004      	add	sp, #16
 8008cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf6:	4835      	ldr	r0, [pc, #212]	; (8008dcc <_printf_i+0x244>)
 8008cf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cfc:	6829      	ldr	r1, [r5, #0]
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d04:	6029      	str	r1, [r5, #0]
 8008d06:	061d      	lsls	r5, r3, #24
 8008d08:	d514      	bpl.n	8008d34 <_printf_i+0x1ac>
 8008d0a:	07df      	lsls	r7, r3, #31
 8008d0c:	bf44      	itt	mi
 8008d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d12:	6023      	strmi	r3, [r4, #0]
 8008d14:	b91e      	cbnz	r6, 8008d1e <_printf_i+0x196>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f023 0320 	bic.w	r3, r3, #32
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	2310      	movs	r3, #16
 8008d20:	e7b0      	b.n	8008c84 <_printf_i+0xfc>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f043 0320 	orr.w	r3, r3, #32
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	2378      	movs	r3, #120	; 0x78
 8008d2c:	4828      	ldr	r0, [pc, #160]	; (8008dd0 <_printf_i+0x248>)
 8008d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d32:	e7e3      	b.n	8008cfc <_printf_i+0x174>
 8008d34:	0659      	lsls	r1, r3, #25
 8008d36:	bf48      	it	mi
 8008d38:	b2b6      	uxthmi	r6, r6
 8008d3a:	e7e6      	b.n	8008d0a <_printf_i+0x182>
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	e7bb      	b.n	8008cb8 <_printf_i+0x130>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	6826      	ldr	r6, [r4, #0]
 8008d44:	6961      	ldr	r1, [r4, #20]
 8008d46:	1d18      	adds	r0, r3, #4
 8008d48:	6028      	str	r0, [r5, #0]
 8008d4a:	0635      	lsls	r5, r6, #24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	d501      	bpl.n	8008d54 <_printf_i+0x1cc>
 8008d50:	6019      	str	r1, [r3, #0]
 8008d52:	e002      	b.n	8008d5a <_printf_i+0x1d2>
 8008d54:	0670      	lsls	r0, r6, #25
 8008d56:	d5fb      	bpl.n	8008d50 <_printf_i+0x1c8>
 8008d58:	8019      	strh	r1, [r3, #0]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	4615      	mov	r5, r2
 8008d60:	e7ba      	b.n	8008cd8 <_printf_i+0x150>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	602a      	str	r2, [r5, #0]
 8008d68:	681d      	ldr	r5, [r3, #0]
 8008d6a:	6862      	ldr	r2, [r4, #4]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7f7 fa3e 	bl	80001f0 <memchr>
 8008d74:	b108      	cbz	r0, 8008d7a <_printf_i+0x1f2>
 8008d76:	1b40      	subs	r0, r0, r5
 8008d78:	6060      	str	r0, [r4, #4]
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d84:	e7a8      	b.n	8008cd8 <_printf_i+0x150>
 8008d86:	6923      	ldr	r3, [r4, #16]
 8008d88:	462a      	mov	r2, r5
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	47d0      	blx	sl
 8008d90:	3001      	adds	r0, #1
 8008d92:	d0ab      	beq.n	8008cec <_printf_i+0x164>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	079b      	lsls	r3, r3, #30
 8008d98:	d413      	bmi.n	8008dc2 <_printf_i+0x23a>
 8008d9a:	68e0      	ldr	r0, [r4, #12]
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	4298      	cmp	r0, r3
 8008da0:	bfb8      	it	lt
 8008da2:	4618      	movlt	r0, r3
 8008da4:	e7a4      	b.n	8008cf0 <_printf_i+0x168>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4632      	mov	r2, r6
 8008daa:	4649      	mov	r1, r9
 8008dac:	4640      	mov	r0, r8
 8008dae:	47d0      	blx	sl
 8008db0:	3001      	adds	r0, #1
 8008db2:	d09b      	beq.n	8008cec <_printf_i+0x164>
 8008db4:	3501      	adds	r5, #1
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	9903      	ldr	r1, [sp, #12]
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dcf2      	bgt.n	8008da6 <_printf_i+0x21e>
 8008dc0:	e7eb      	b.n	8008d9a <_printf_i+0x212>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	f104 0619 	add.w	r6, r4, #25
 8008dc8:	e7f5      	b.n	8008db6 <_printf_i+0x22e>
 8008dca:	bf00      	nop
 8008dcc:	0800cbb2 	.word	0x0800cbb2
 8008dd0:	0800cbc3 	.word	0x0800cbc3

08008dd4 <iprintf>:
 8008dd4:	b40f      	push	{r0, r1, r2, r3}
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <iprintf+0x2c>)
 8008dd8:	b513      	push	{r0, r1, r4, lr}
 8008dda:	681c      	ldr	r4, [r3, #0]
 8008ddc:	b124      	cbz	r4, 8008de8 <iprintf+0x14>
 8008dde:	69a3      	ldr	r3, [r4, #24]
 8008de0:	b913      	cbnz	r3, 8008de8 <iprintf+0x14>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f001 f8d8 	bl	8009f98 <__sinit>
 8008de8:	ab05      	add	r3, sp, #20
 8008dea:	9a04      	ldr	r2, [sp, #16]
 8008dec:	68a1      	ldr	r1, [r4, #8]
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	4620      	mov	r0, r4
 8008df2:	f001 fe87 	bl	800ab04 <_vfiprintf_r>
 8008df6:	b002      	add	sp, #8
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	b004      	add	sp, #16
 8008dfe:	4770      	bx	lr
 8008e00:	20000048 	.word	0x20000048

08008e04 <_puts_r>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	460e      	mov	r6, r1
 8008e08:	4605      	mov	r5, r0
 8008e0a:	b118      	cbz	r0, 8008e14 <_puts_r+0x10>
 8008e0c:	6983      	ldr	r3, [r0, #24]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <_puts_r+0x10>
 8008e10:	f001 f8c2 	bl	8009f98 <__sinit>
 8008e14:	69ab      	ldr	r3, [r5, #24]
 8008e16:	68ac      	ldr	r4, [r5, #8]
 8008e18:	b913      	cbnz	r3, 8008e20 <_puts_r+0x1c>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f001 f8bc 	bl	8009f98 <__sinit>
 8008e20:	4b2c      	ldr	r3, [pc, #176]	; (8008ed4 <_puts_r+0xd0>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d120      	bne.n	8008e68 <_puts_r+0x64>
 8008e26:	686c      	ldr	r4, [r5, #4]
 8008e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e2a:	07db      	lsls	r3, r3, #31
 8008e2c:	d405      	bmi.n	8008e3a <_puts_r+0x36>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	0598      	lsls	r0, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_puts_r+0x36>
 8008e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e36:	f001 f952 	bl	800a0de <__retarget_lock_acquire_recursive>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	0719      	lsls	r1, r3, #28
 8008e3e:	d51d      	bpl.n	8008e7c <_puts_r+0x78>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	b1db      	cbz	r3, 8008e7c <_puts_r+0x78>
 8008e44:	3e01      	subs	r6, #1
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	60a3      	str	r3, [r4, #8]
 8008e50:	bb39      	cbnz	r1, 8008ea2 <_puts_r+0x9e>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da38      	bge.n	8008ec8 <_puts_r+0xc4>
 8008e56:	4622      	mov	r2, r4
 8008e58:	210a      	movs	r1, #10
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 f848 	bl	8008ef0 <__swbuf_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d011      	beq.n	8008e88 <_puts_r+0x84>
 8008e64:	250a      	movs	r5, #10
 8008e66:	e011      	b.n	8008e8c <_puts_r+0x88>
 8008e68:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <_puts_r+0xd4>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <_puts_r+0x6e>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7da      	b.n	8008e28 <_puts_r+0x24>
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <_puts_r+0xd8>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7d5      	b.n	8008e28 <_puts_r+0x24>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 f888 	bl	8008f94 <__swsetup_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0dd      	beq.n	8008e44 <_puts_r+0x40>
 8008e88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8e:	07da      	lsls	r2, r3, #31
 8008e90:	d405      	bmi.n	8008e9e <_puts_r+0x9a>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d402      	bmi.n	8008e9e <_puts_r+0x9a>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f001 f921 	bl	800a0e0 <__retarget_lock_release_recursive>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da04      	bge.n	8008eb0 <_puts_r+0xac>
 8008ea6:	69a2      	ldr	r2, [r4, #24]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	dc06      	bgt.n	8008eba <_puts_r+0xb6>
 8008eac:	290a      	cmp	r1, #10
 8008eae:	d004      	beq.n	8008eba <_puts_r+0xb6>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	7019      	strb	r1, [r3, #0]
 8008eb8:	e7c5      	b.n	8008e46 <_puts_r+0x42>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f000 f817 	bl	8008ef0 <__swbuf_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d1bf      	bne.n	8008e46 <_puts_r+0x42>
 8008ec6:	e7df      	b.n	8008e88 <_puts_r+0x84>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	250a      	movs	r5, #10
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	701d      	strb	r5, [r3, #0]
 8008ed2:	e7db      	b.n	8008e8c <_puts_r+0x88>
 8008ed4:	0800cc84 	.word	0x0800cc84
 8008ed8:	0800cca4 	.word	0x0800cca4
 8008edc:	0800cc64 	.word	0x0800cc64

08008ee0 <puts>:
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <puts+0xc>)
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	f7ff bf8d 	b.w	8008e04 <_puts_r>
 8008eea:	bf00      	nop
 8008eec:	20000048 	.word	0x20000048

08008ef0 <__swbuf_r>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	460e      	mov	r6, r1
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	b118      	cbz	r0, 8008f02 <__swbuf_r+0x12>
 8008efa:	6983      	ldr	r3, [r0, #24]
 8008efc:	b90b      	cbnz	r3, 8008f02 <__swbuf_r+0x12>
 8008efe:	f001 f84b 	bl	8009f98 <__sinit>
 8008f02:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <__swbuf_r+0x98>)
 8008f04:	429c      	cmp	r4, r3
 8008f06:	d12b      	bne.n	8008f60 <__swbuf_r+0x70>
 8008f08:	686c      	ldr	r4, [r5, #4]
 8008f0a:	69a3      	ldr	r3, [r4, #24]
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	071a      	lsls	r2, r3, #28
 8008f12:	d52f      	bpl.n	8008f74 <__swbuf_r+0x84>
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	b36b      	cbz	r3, 8008f74 <__swbuf_r+0x84>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	1ac0      	subs	r0, r0, r3
 8008f1e:	6963      	ldr	r3, [r4, #20]
 8008f20:	b2f6      	uxtb	r6, r6
 8008f22:	4283      	cmp	r3, r0
 8008f24:	4637      	mov	r7, r6
 8008f26:	dc04      	bgt.n	8008f32 <__swbuf_r+0x42>
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 ffa0 	bl	8009e70 <_fflush_r>
 8008f30:	bb30      	cbnz	r0, 8008f80 <__swbuf_r+0x90>
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	60a3      	str	r3, [r4, #8]
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	6022      	str	r2, [r4, #0]
 8008f3e:	701e      	strb	r6, [r3, #0]
 8008f40:	6963      	ldr	r3, [r4, #20]
 8008f42:	3001      	adds	r0, #1
 8008f44:	4283      	cmp	r3, r0
 8008f46:	d004      	beq.n	8008f52 <__swbuf_r+0x62>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	07db      	lsls	r3, r3, #31
 8008f4c:	d506      	bpl.n	8008f5c <__swbuf_r+0x6c>
 8008f4e:	2e0a      	cmp	r6, #10
 8008f50:	d104      	bne.n	8008f5c <__swbuf_r+0x6c>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 ff8b 	bl	8009e70 <_fflush_r>
 8008f5a:	b988      	cbnz	r0, 8008f80 <__swbuf_r+0x90>
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <__swbuf_r+0x9c>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d101      	bne.n	8008f6a <__swbuf_r+0x7a>
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	e7cf      	b.n	8008f0a <__swbuf_r+0x1a>
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <__swbuf_r+0xa0>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	bf08      	it	eq
 8008f70:	68ec      	ldreq	r4, [r5, #12]
 8008f72:	e7ca      	b.n	8008f0a <__swbuf_r+0x1a>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 f80c 	bl	8008f94 <__swsetup_r>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d0cb      	beq.n	8008f18 <__swbuf_r+0x28>
 8008f80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008f84:	e7ea      	b.n	8008f5c <__swbuf_r+0x6c>
 8008f86:	bf00      	nop
 8008f88:	0800cc84 	.word	0x0800cc84
 8008f8c:	0800cca4 	.word	0x0800cca4
 8008f90:	0800cc64 	.word	0x0800cc64

08008f94 <__swsetup_r>:
 8008f94:	4b32      	ldr	r3, [pc, #200]	; (8009060 <__swsetup_r+0xcc>)
 8008f96:	b570      	push	{r4, r5, r6, lr}
 8008f98:	681d      	ldr	r5, [r3, #0]
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	b125      	cbz	r5, 8008faa <__swsetup_r+0x16>
 8008fa0:	69ab      	ldr	r3, [r5, #24]
 8008fa2:	b913      	cbnz	r3, 8008faa <__swsetup_r+0x16>
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 fff7 	bl	8009f98 <__sinit>
 8008faa:	4b2e      	ldr	r3, [pc, #184]	; (8009064 <__swsetup_r+0xd0>)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	d10f      	bne.n	8008fd0 <__swsetup_r+0x3c>
 8008fb0:	686c      	ldr	r4, [r5, #4]
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fb8:	0719      	lsls	r1, r3, #28
 8008fba:	d42c      	bmi.n	8009016 <__swsetup_r+0x82>
 8008fbc:	06dd      	lsls	r5, r3, #27
 8008fbe:	d411      	bmi.n	8008fe4 <__swsetup_r+0x50>
 8008fc0:	2309      	movs	r3, #9
 8008fc2:	6033      	str	r3, [r6, #0]
 8008fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fce:	e03e      	b.n	800904e <__swsetup_r+0xba>
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <__swsetup_r+0xd4>)
 8008fd2:	429c      	cmp	r4, r3
 8008fd4:	d101      	bne.n	8008fda <__swsetup_r+0x46>
 8008fd6:	68ac      	ldr	r4, [r5, #8]
 8008fd8:	e7eb      	b.n	8008fb2 <__swsetup_r+0x1e>
 8008fda:	4b24      	ldr	r3, [pc, #144]	; (800906c <__swsetup_r+0xd8>)
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	bf08      	it	eq
 8008fe0:	68ec      	ldreq	r4, [r5, #12]
 8008fe2:	e7e6      	b.n	8008fb2 <__swsetup_r+0x1e>
 8008fe4:	0758      	lsls	r0, r3, #29
 8008fe6:	d512      	bpl.n	800900e <__swsetup_r+0x7a>
 8008fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fea:	b141      	cbz	r1, 8008ffe <__swsetup_r+0x6a>
 8008fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d002      	beq.n	8008ffa <__swsetup_r+0x66>
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f001 fc7b 	bl	800a8f0 <_free_r>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009004:	81a3      	strh	r3, [r4, #12]
 8009006:	2300      	movs	r3, #0
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f043 0308 	orr.w	r3, r3, #8
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	b94b      	cbnz	r3, 800902e <__swsetup_r+0x9a>
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009024:	d003      	beq.n	800902e <__swsetup_r+0x9a>
 8009026:	4621      	mov	r1, r4
 8009028:	4630      	mov	r0, r6
 800902a:	f001 f87f 	bl	800a12c <__smakebuf_r>
 800902e:	89a0      	ldrh	r0, [r4, #12]
 8009030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009034:	f010 0301 	ands.w	r3, r0, #1
 8009038:	d00a      	beq.n	8009050 <__swsetup_r+0xbc>
 800903a:	2300      	movs	r3, #0
 800903c:	60a3      	str	r3, [r4, #8]
 800903e:	6963      	ldr	r3, [r4, #20]
 8009040:	425b      	negs	r3, r3
 8009042:	61a3      	str	r3, [r4, #24]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	b943      	cbnz	r3, 800905a <__swsetup_r+0xc6>
 8009048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800904c:	d1ba      	bne.n	8008fc4 <__swsetup_r+0x30>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	0781      	lsls	r1, r0, #30
 8009052:	bf58      	it	pl
 8009054:	6963      	ldrpl	r3, [r4, #20]
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	e7f4      	b.n	8009044 <__swsetup_r+0xb0>
 800905a:	2000      	movs	r0, #0
 800905c:	e7f7      	b.n	800904e <__swsetup_r+0xba>
 800905e:	bf00      	nop
 8009060:	20000048 	.word	0x20000048
 8009064:	0800cc84 	.word	0x0800cc84
 8009068:	0800cca4 	.word	0x0800cca4
 800906c:	0800cc64 	.word	0x0800cc64

08009070 <quorem>:
 8009070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	6903      	ldr	r3, [r0, #16]
 8009076:	690c      	ldr	r4, [r1, #16]
 8009078:	42a3      	cmp	r3, r4
 800907a:	4607      	mov	r7, r0
 800907c:	f2c0 8081 	blt.w	8009182 <quorem+0x112>
 8009080:	3c01      	subs	r4, #1
 8009082:	f101 0814 	add.w	r8, r1, #20
 8009086:	f100 0514 	add.w	r5, r0, #20
 800908a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800908e:	9301      	str	r3, [sp, #4]
 8009090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009098:	3301      	adds	r3, #1
 800909a:	429a      	cmp	r2, r3
 800909c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80090a8:	d331      	bcc.n	800910e <quorem+0x9e>
 80090aa:	f04f 0e00 	mov.w	lr, #0
 80090ae:	4640      	mov	r0, r8
 80090b0:	46ac      	mov	ip, r5
 80090b2:	46f2      	mov	sl, lr
 80090b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80090b8:	b293      	uxth	r3, r2
 80090ba:	fb06 e303 	mla	r3, r6, r3, lr
 80090be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	ebaa 0303 	sub.w	r3, sl, r3
 80090c8:	f8dc a000 	ldr.w	sl, [ip]
 80090cc:	0c12      	lsrs	r2, r2, #16
 80090ce:	fa13 f38a 	uxtah	r3, r3, sl
 80090d2:	fb06 e202 	mla	r2, r6, r2, lr
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	9b00      	ldr	r3, [sp, #0]
 80090da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090de:	b292      	uxth	r2, r2
 80090e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80090ec:	4581      	cmp	r9, r0
 80090ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f2:	f84c 3b04 	str.w	r3, [ip], #4
 80090f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090fa:	d2db      	bcs.n	80090b4 <quorem+0x44>
 80090fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009100:	b92b      	cbnz	r3, 800910e <quorem+0x9e>
 8009102:	9b01      	ldr	r3, [sp, #4]
 8009104:	3b04      	subs	r3, #4
 8009106:	429d      	cmp	r5, r3
 8009108:	461a      	mov	r2, r3
 800910a:	d32e      	bcc.n	800916a <quorem+0xfa>
 800910c:	613c      	str	r4, [r7, #16]
 800910e:	4638      	mov	r0, r7
 8009110:	f001 fad6 	bl	800a6c0 <__mcmp>
 8009114:	2800      	cmp	r0, #0
 8009116:	db24      	blt.n	8009162 <quorem+0xf2>
 8009118:	3601      	adds	r6, #1
 800911a:	4628      	mov	r0, r5
 800911c:	f04f 0c00 	mov.w	ip, #0
 8009120:	f858 2b04 	ldr.w	r2, [r8], #4
 8009124:	f8d0 e000 	ldr.w	lr, [r0]
 8009128:	b293      	uxth	r3, r2
 800912a:	ebac 0303 	sub.w	r3, ip, r3
 800912e:	0c12      	lsrs	r2, r2, #16
 8009130:	fa13 f38e 	uxtah	r3, r3, lr
 8009134:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800913c:	b29b      	uxth	r3, r3
 800913e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009142:	45c1      	cmp	r9, r8
 8009144:	f840 3b04 	str.w	r3, [r0], #4
 8009148:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800914c:	d2e8      	bcs.n	8009120 <quorem+0xb0>
 800914e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009156:	b922      	cbnz	r2, 8009162 <quorem+0xf2>
 8009158:	3b04      	subs	r3, #4
 800915a:	429d      	cmp	r5, r3
 800915c:	461a      	mov	r2, r3
 800915e:	d30a      	bcc.n	8009176 <quorem+0x106>
 8009160:	613c      	str	r4, [r7, #16]
 8009162:	4630      	mov	r0, r6
 8009164:	b003      	add	sp, #12
 8009166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916a:	6812      	ldr	r2, [r2, #0]
 800916c:	3b04      	subs	r3, #4
 800916e:	2a00      	cmp	r2, #0
 8009170:	d1cc      	bne.n	800910c <quorem+0x9c>
 8009172:	3c01      	subs	r4, #1
 8009174:	e7c7      	b.n	8009106 <quorem+0x96>
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	3b04      	subs	r3, #4
 800917a:	2a00      	cmp	r2, #0
 800917c:	d1f0      	bne.n	8009160 <quorem+0xf0>
 800917e:	3c01      	subs	r4, #1
 8009180:	e7eb      	b.n	800915a <quorem+0xea>
 8009182:	2000      	movs	r0, #0
 8009184:	e7ee      	b.n	8009164 <quorem+0xf4>
	...

08009188 <_dtoa_r>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	ed2d 8b04 	vpush	{d8-d9}
 8009190:	ec57 6b10 	vmov	r6, r7, d0
 8009194:	b093      	sub	sp, #76	; 0x4c
 8009196:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009198:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800919c:	9106      	str	r1, [sp, #24]
 800919e:	ee10 aa10 	vmov	sl, s0
 80091a2:	4604      	mov	r4, r0
 80091a4:	9209      	str	r2, [sp, #36]	; 0x24
 80091a6:	930c      	str	r3, [sp, #48]	; 0x30
 80091a8:	46bb      	mov	fp, r7
 80091aa:	b975      	cbnz	r5, 80091ca <_dtoa_r+0x42>
 80091ac:	2010      	movs	r0, #16
 80091ae:	f000 fffd 	bl	800a1ac <malloc>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6260      	str	r0, [r4, #36]	; 0x24
 80091b6:	b920      	cbnz	r0, 80091c2 <_dtoa_r+0x3a>
 80091b8:	4ba7      	ldr	r3, [pc, #668]	; (8009458 <_dtoa_r+0x2d0>)
 80091ba:	21ea      	movs	r1, #234	; 0xea
 80091bc:	48a7      	ldr	r0, [pc, #668]	; (800945c <_dtoa_r+0x2d4>)
 80091be:	f001 fe37 	bl	800ae30 <__assert_func>
 80091c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091c6:	6005      	str	r5, [r0, #0]
 80091c8:	60c5      	str	r5, [r0, #12]
 80091ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091cc:	6819      	ldr	r1, [r3, #0]
 80091ce:	b151      	cbz	r1, 80091e6 <_dtoa_r+0x5e>
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	604a      	str	r2, [r1, #4]
 80091d4:	2301      	movs	r3, #1
 80091d6:	4093      	lsls	r3, r2
 80091d8:	608b      	str	r3, [r1, #8]
 80091da:	4620      	mov	r0, r4
 80091dc:	f001 f82e 	bl	800a23c <_Bfree>
 80091e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	1e3b      	subs	r3, r7, #0
 80091e8:	bfaa      	itet	ge
 80091ea:	2300      	movge	r3, #0
 80091ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091f0:	f8c8 3000 	strge.w	r3, [r8]
 80091f4:	4b9a      	ldr	r3, [pc, #616]	; (8009460 <_dtoa_r+0x2d8>)
 80091f6:	bfbc      	itt	lt
 80091f8:	2201      	movlt	r2, #1
 80091fa:	f8c8 2000 	strlt.w	r2, [r8]
 80091fe:	ea33 030b 	bics.w	r3, r3, fp
 8009202:	d11b      	bne.n	800923c <_dtoa_r+0xb4>
 8009204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009206:	f242 730f 	movw	r3, #9999	; 0x270f
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009210:	4333      	orrs	r3, r6
 8009212:	f000 8592 	beq.w	8009d3a <_dtoa_r+0xbb2>
 8009216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009218:	b963      	cbnz	r3, 8009234 <_dtoa_r+0xac>
 800921a:	4b92      	ldr	r3, [pc, #584]	; (8009464 <_dtoa_r+0x2dc>)
 800921c:	e022      	b.n	8009264 <_dtoa_r+0xdc>
 800921e:	4b92      	ldr	r3, [pc, #584]	; (8009468 <_dtoa_r+0x2e0>)
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	3308      	adds	r3, #8
 8009224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	9801      	ldr	r0, [sp, #4]
 800922a:	b013      	add	sp, #76	; 0x4c
 800922c:	ecbd 8b04 	vpop	{d8-d9}
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	4b8b      	ldr	r3, [pc, #556]	; (8009464 <_dtoa_r+0x2dc>)
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	3303      	adds	r3, #3
 800923a:	e7f3      	b.n	8009224 <_dtoa_r+0x9c>
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	4650      	mov	r0, sl
 8009242:	4659      	mov	r1, fp
 8009244:	f7f7 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8009248:	ec4b ab19 	vmov	d9, sl, fp
 800924c:	4680      	mov	r8, r0
 800924e:	b158      	cbz	r0, 8009268 <_dtoa_r+0xe0>
 8009250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009252:	2301      	movs	r3, #1
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 856b 	beq.w	8009d34 <_dtoa_r+0xbac>
 800925e:	4883      	ldr	r0, [pc, #524]	; (800946c <_dtoa_r+0x2e4>)
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	1e43      	subs	r3, r0, #1
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	e7df      	b.n	8009228 <_dtoa_r+0xa0>
 8009268:	ec4b ab10 	vmov	d0, sl, fp
 800926c:	aa10      	add	r2, sp, #64	; 0x40
 800926e:	a911      	add	r1, sp, #68	; 0x44
 8009270:	4620      	mov	r0, r4
 8009272:	f001 facb 	bl	800a80c <__d2b>
 8009276:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800927a:	ee08 0a10 	vmov	s16, r0
 800927e:	2d00      	cmp	r5, #0
 8009280:	f000 8084 	beq.w	800938c <_dtoa_r+0x204>
 8009284:	ee19 3a90 	vmov	r3, s19
 8009288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800928c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009290:	4656      	mov	r6, sl
 8009292:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800929a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800929e:	4b74      	ldr	r3, [pc, #464]	; (8009470 <_dtoa_r+0x2e8>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	4630      	mov	r0, r6
 80092a4:	4639      	mov	r1, r7
 80092a6:	f7f6 fff7 	bl	8000298 <__aeabi_dsub>
 80092aa:	a365      	add	r3, pc, #404	; (adr r3, 8009440 <_dtoa_r+0x2b8>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f7 f9aa 	bl	8000608 <__aeabi_dmul>
 80092b4:	a364      	add	r3, pc, #400	; (adr r3, 8009448 <_dtoa_r+0x2c0>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ffef 	bl	800029c <__adddf3>
 80092be:	4606      	mov	r6, r0
 80092c0:	4628      	mov	r0, r5
 80092c2:	460f      	mov	r7, r1
 80092c4:	f7f7 f936 	bl	8000534 <__aeabi_i2d>
 80092c8:	a361      	add	r3, pc, #388	; (adr r3, 8009450 <_dtoa_r+0x2c8>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	f7f7 f99b 	bl	8000608 <__aeabi_dmul>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	f7f6 ffdf 	bl	800029c <__adddf3>
 80092de:	4606      	mov	r6, r0
 80092e0:	460f      	mov	r7, r1
 80092e2:	f7f7 fc41 	bl	8000b68 <__aeabi_d2iz>
 80092e6:	2200      	movs	r2, #0
 80092e8:	9000      	str	r0, [sp, #0]
 80092ea:	2300      	movs	r3, #0
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f7 fbfc 	bl	8000aec <__aeabi_dcmplt>
 80092f4:	b150      	cbz	r0, 800930c <_dtoa_r+0x184>
 80092f6:	9800      	ldr	r0, [sp, #0]
 80092f8:	f7f7 f91c 	bl	8000534 <__aeabi_i2d>
 80092fc:	4632      	mov	r2, r6
 80092fe:	463b      	mov	r3, r7
 8009300:	f7f7 fbea 	bl	8000ad8 <__aeabi_dcmpeq>
 8009304:	b910      	cbnz	r0, 800930c <_dtoa_r+0x184>
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	3b01      	subs	r3, #1
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	9b00      	ldr	r3, [sp, #0]
 800930e:	2b16      	cmp	r3, #22
 8009310:	d85a      	bhi.n	80093c8 <_dtoa_r+0x240>
 8009312:	9a00      	ldr	r2, [sp, #0]
 8009314:	4b57      	ldr	r3, [pc, #348]	; (8009474 <_dtoa_r+0x2ec>)
 8009316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	ec51 0b19 	vmov	r0, r1, d9
 8009322:	f7f7 fbe3 	bl	8000aec <__aeabi_dcmplt>
 8009326:	2800      	cmp	r0, #0
 8009328:	d050      	beq.n	80093cc <_dtoa_r+0x244>
 800932a:	9b00      	ldr	r3, [sp, #0]
 800932c:	3b01      	subs	r3, #1
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2300      	movs	r3, #0
 8009332:	930b      	str	r3, [sp, #44]	; 0x2c
 8009334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009336:	1b5d      	subs	r5, r3, r5
 8009338:	1e6b      	subs	r3, r5, #1
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	bf45      	ittet	mi
 800933e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009342:	9304      	strmi	r3, [sp, #16]
 8009344:	2300      	movpl	r3, #0
 8009346:	2300      	movmi	r3, #0
 8009348:	bf4c      	ite	mi
 800934a:	9305      	strmi	r3, [sp, #20]
 800934c:	9304      	strpl	r3, [sp, #16]
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	db3d      	blt.n	80093d0 <_dtoa_r+0x248>
 8009354:	9b05      	ldr	r3, [sp, #20]
 8009356:	9a00      	ldr	r2, [sp, #0]
 8009358:	920a      	str	r2, [sp, #40]	; 0x28
 800935a:	4413      	add	r3, r2
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	2300      	movs	r3, #0
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	2b09      	cmp	r3, #9
 8009366:	f200 8089 	bhi.w	800947c <_dtoa_r+0x2f4>
 800936a:	2b05      	cmp	r3, #5
 800936c:	bfc4      	itt	gt
 800936e:	3b04      	subgt	r3, #4
 8009370:	9306      	strgt	r3, [sp, #24]
 8009372:	9b06      	ldr	r3, [sp, #24]
 8009374:	f1a3 0302 	sub.w	r3, r3, #2
 8009378:	bfcc      	ite	gt
 800937a:	2500      	movgt	r5, #0
 800937c:	2501      	movle	r5, #1
 800937e:	2b03      	cmp	r3, #3
 8009380:	f200 8087 	bhi.w	8009492 <_dtoa_r+0x30a>
 8009384:	e8df f003 	tbb	[pc, r3]
 8009388:	59383a2d 	.word	0x59383a2d
 800938c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009390:	441d      	add	r5, r3
 8009392:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009396:	2b20      	cmp	r3, #32
 8009398:	bfc1      	itttt	gt
 800939a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800939e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80093a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80093a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80093aa:	bfda      	itte	le
 80093ac:	f1c3 0320 	rsble	r3, r3, #32
 80093b0:	fa06 f003 	lslle.w	r0, r6, r3
 80093b4:	4318      	orrgt	r0, r3
 80093b6:	f7f7 f8ad 	bl	8000514 <__aeabi_ui2d>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4606      	mov	r6, r0
 80093be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093c2:	3d01      	subs	r5, #1
 80093c4:	930e      	str	r3, [sp, #56]	; 0x38
 80093c6:	e76a      	b.n	800929e <_dtoa_r+0x116>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e7b2      	b.n	8009332 <_dtoa_r+0x1aa>
 80093cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80093ce:	e7b1      	b.n	8009334 <_dtoa_r+0x1ac>
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	9a00      	ldr	r2, [sp, #0]
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	4253      	negs	r3, r2
 80093da:	9307      	str	r3, [sp, #28]
 80093dc:	2300      	movs	r3, #0
 80093de:	930a      	str	r3, [sp, #40]	; 0x28
 80093e0:	e7bf      	b.n	8009362 <_dtoa_r+0x1da>
 80093e2:	2300      	movs	r3, #0
 80093e4:	9308      	str	r3, [sp, #32]
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc55      	bgt.n	8009498 <_dtoa_r+0x310>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093f2:	461a      	mov	r2, r3
 80093f4:	9209      	str	r2, [sp, #36]	; 0x24
 80093f6:	e00c      	b.n	8009412 <_dtoa_r+0x28a>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e7f3      	b.n	80093e4 <_dtoa_r+0x25c>
 80093fc:	2300      	movs	r3, #0
 80093fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009400:	9308      	str	r3, [sp, #32]
 8009402:	9b00      	ldr	r3, [sp, #0]
 8009404:	4413      	add	r3, r2
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	3301      	adds	r3, #1
 800940a:	2b01      	cmp	r3, #1
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	bfb8      	it	lt
 8009410:	2301      	movlt	r3, #1
 8009412:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009414:	2200      	movs	r2, #0
 8009416:	6042      	str	r2, [r0, #4]
 8009418:	2204      	movs	r2, #4
 800941a:	f102 0614 	add.w	r6, r2, #20
 800941e:	429e      	cmp	r6, r3
 8009420:	6841      	ldr	r1, [r0, #4]
 8009422:	d93d      	bls.n	80094a0 <_dtoa_r+0x318>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fec9 	bl	800a1bc <_Balloc>
 800942a:	9001      	str	r0, [sp, #4]
 800942c:	2800      	cmp	r0, #0
 800942e:	d13b      	bne.n	80094a8 <_dtoa_r+0x320>
 8009430:	4b11      	ldr	r3, [pc, #68]	; (8009478 <_dtoa_r+0x2f0>)
 8009432:	4602      	mov	r2, r0
 8009434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009438:	e6c0      	b.n	80091bc <_dtoa_r+0x34>
 800943a:	2301      	movs	r3, #1
 800943c:	e7df      	b.n	80093fe <_dtoa_r+0x276>
 800943e:	bf00      	nop
 8009440:	636f4361 	.word	0x636f4361
 8009444:	3fd287a7 	.word	0x3fd287a7
 8009448:	8b60c8b3 	.word	0x8b60c8b3
 800944c:	3fc68a28 	.word	0x3fc68a28
 8009450:	509f79fb 	.word	0x509f79fb
 8009454:	3fd34413 	.word	0x3fd34413
 8009458:	0800cbe1 	.word	0x0800cbe1
 800945c:	0800cbf8 	.word	0x0800cbf8
 8009460:	7ff00000 	.word	0x7ff00000
 8009464:	0800cbdd 	.word	0x0800cbdd
 8009468:	0800cbd4 	.word	0x0800cbd4
 800946c:	0800cbb1 	.word	0x0800cbb1
 8009470:	3ff80000 	.word	0x3ff80000
 8009474:	0800cd48 	.word	0x0800cd48
 8009478:	0800cc53 	.word	0x0800cc53
 800947c:	2501      	movs	r5, #1
 800947e:	2300      	movs	r3, #0
 8009480:	9306      	str	r3, [sp, #24]
 8009482:	9508      	str	r5, [sp, #32]
 8009484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009488:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800948c:	2200      	movs	r2, #0
 800948e:	2312      	movs	r3, #18
 8009490:	e7b0      	b.n	80093f4 <_dtoa_r+0x26c>
 8009492:	2301      	movs	r3, #1
 8009494:	9308      	str	r3, [sp, #32]
 8009496:	e7f5      	b.n	8009484 <_dtoa_r+0x2fc>
 8009498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800949e:	e7b8      	b.n	8009412 <_dtoa_r+0x28a>
 80094a0:	3101      	adds	r1, #1
 80094a2:	6041      	str	r1, [r0, #4]
 80094a4:	0052      	lsls	r2, r2, #1
 80094a6:	e7b8      	b.n	800941a <_dtoa_r+0x292>
 80094a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094aa:	9a01      	ldr	r2, [sp, #4]
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	9b03      	ldr	r3, [sp, #12]
 80094b0:	2b0e      	cmp	r3, #14
 80094b2:	f200 809d 	bhi.w	80095f0 <_dtoa_r+0x468>
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	f000 809a 	beq.w	80095f0 <_dtoa_r+0x468>
 80094bc:	9b00      	ldr	r3, [sp, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dd32      	ble.n	8009528 <_dtoa_r+0x3a0>
 80094c2:	4ab7      	ldr	r2, [pc, #732]	; (80097a0 <_dtoa_r+0x618>)
 80094c4:	f003 030f 	and.w	r3, r3, #15
 80094c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094d0:	9b00      	ldr	r3, [sp, #0]
 80094d2:	05d8      	lsls	r0, r3, #23
 80094d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80094d8:	d516      	bpl.n	8009508 <_dtoa_r+0x380>
 80094da:	4bb2      	ldr	r3, [pc, #712]	; (80097a4 <_dtoa_r+0x61c>)
 80094dc:	ec51 0b19 	vmov	r0, r1, d9
 80094e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094e4:	f7f7 f9ba 	bl	800085c <__aeabi_ddiv>
 80094e8:	f007 070f 	and.w	r7, r7, #15
 80094ec:	4682      	mov	sl, r0
 80094ee:	468b      	mov	fp, r1
 80094f0:	2503      	movs	r5, #3
 80094f2:	4eac      	ldr	r6, [pc, #688]	; (80097a4 <_dtoa_r+0x61c>)
 80094f4:	b957      	cbnz	r7, 800950c <_dtoa_r+0x384>
 80094f6:	4642      	mov	r2, r8
 80094f8:	464b      	mov	r3, r9
 80094fa:	4650      	mov	r0, sl
 80094fc:	4659      	mov	r1, fp
 80094fe:	f7f7 f9ad 	bl	800085c <__aeabi_ddiv>
 8009502:	4682      	mov	sl, r0
 8009504:	468b      	mov	fp, r1
 8009506:	e028      	b.n	800955a <_dtoa_r+0x3d2>
 8009508:	2502      	movs	r5, #2
 800950a:	e7f2      	b.n	80094f2 <_dtoa_r+0x36a>
 800950c:	07f9      	lsls	r1, r7, #31
 800950e:	d508      	bpl.n	8009522 <_dtoa_r+0x39a>
 8009510:	4640      	mov	r0, r8
 8009512:	4649      	mov	r1, r9
 8009514:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009518:	f7f7 f876 	bl	8000608 <__aeabi_dmul>
 800951c:	3501      	adds	r5, #1
 800951e:	4680      	mov	r8, r0
 8009520:	4689      	mov	r9, r1
 8009522:	107f      	asrs	r7, r7, #1
 8009524:	3608      	adds	r6, #8
 8009526:	e7e5      	b.n	80094f4 <_dtoa_r+0x36c>
 8009528:	f000 809b 	beq.w	8009662 <_dtoa_r+0x4da>
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	4f9d      	ldr	r7, [pc, #628]	; (80097a4 <_dtoa_r+0x61c>)
 8009530:	425e      	negs	r6, r3
 8009532:	4b9b      	ldr	r3, [pc, #620]	; (80097a0 <_dtoa_r+0x618>)
 8009534:	f006 020f 	and.w	r2, r6, #15
 8009538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	ec51 0b19 	vmov	r0, r1, d9
 8009544:	f7f7 f860 	bl	8000608 <__aeabi_dmul>
 8009548:	1136      	asrs	r6, r6, #4
 800954a:	4682      	mov	sl, r0
 800954c:	468b      	mov	fp, r1
 800954e:	2300      	movs	r3, #0
 8009550:	2502      	movs	r5, #2
 8009552:	2e00      	cmp	r6, #0
 8009554:	d17a      	bne.n	800964c <_dtoa_r+0x4c4>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1d3      	bne.n	8009502 <_dtoa_r+0x37a>
 800955a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8082 	beq.w	8009666 <_dtoa_r+0x4de>
 8009562:	4b91      	ldr	r3, [pc, #580]	; (80097a8 <_dtoa_r+0x620>)
 8009564:	2200      	movs	r2, #0
 8009566:	4650      	mov	r0, sl
 8009568:	4659      	mov	r1, fp
 800956a:	f7f7 fabf 	bl	8000aec <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	d079      	beq.n	8009666 <_dtoa_r+0x4de>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d076      	beq.n	8009666 <_dtoa_r+0x4de>
 8009578:	9b02      	ldr	r3, [sp, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd36      	ble.n	80095ec <_dtoa_r+0x464>
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	1e5f      	subs	r7, r3, #1
 8009586:	2200      	movs	r2, #0
 8009588:	4b88      	ldr	r3, [pc, #544]	; (80097ac <_dtoa_r+0x624>)
 800958a:	f7f7 f83d 	bl	8000608 <__aeabi_dmul>
 800958e:	9e02      	ldr	r6, [sp, #8]
 8009590:	4682      	mov	sl, r0
 8009592:	468b      	mov	fp, r1
 8009594:	3501      	adds	r5, #1
 8009596:	4628      	mov	r0, r5
 8009598:	f7f6 ffcc 	bl	8000534 <__aeabi_i2d>
 800959c:	4652      	mov	r2, sl
 800959e:	465b      	mov	r3, fp
 80095a0:	f7f7 f832 	bl	8000608 <__aeabi_dmul>
 80095a4:	4b82      	ldr	r3, [pc, #520]	; (80097b0 <_dtoa_r+0x628>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f7f6 fe78 	bl	800029c <__adddf3>
 80095ac:	46d0      	mov	r8, sl
 80095ae:	46d9      	mov	r9, fp
 80095b0:	4682      	mov	sl, r0
 80095b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	d158      	bne.n	800966c <_dtoa_r+0x4e4>
 80095ba:	4b7e      	ldr	r3, [pc, #504]	; (80097b4 <_dtoa_r+0x62c>)
 80095bc:	2200      	movs	r2, #0
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f6 fe69 	bl	8000298 <__aeabi_dsub>
 80095c6:	4652      	mov	r2, sl
 80095c8:	465b      	mov	r3, fp
 80095ca:	4680      	mov	r8, r0
 80095cc:	4689      	mov	r9, r1
 80095ce:	f7f7 faab 	bl	8000b28 <__aeabi_dcmpgt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f040 8295 	bne.w	8009b02 <_dtoa_r+0x97a>
 80095d8:	4652      	mov	r2, sl
 80095da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095de:	4640      	mov	r0, r8
 80095e0:	4649      	mov	r1, r9
 80095e2:	f7f7 fa83 	bl	8000aec <__aeabi_dcmplt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f040 8289 	bne.w	8009afe <_dtoa_r+0x976>
 80095ec:	ec5b ab19 	vmov	sl, fp, d9
 80095f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f2c0 8148 	blt.w	8009888 <_dtoa_r+0x700>
 80095f8:	9a00      	ldr	r2, [sp, #0]
 80095fa:	2a0e      	cmp	r2, #14
 80095fc:	f300 8144 	bgt.w	8009888 <_dtoa_r+0x700>
 8009600:	4b67      	ldr	r3, [pc, #412]	; (80097a0 <_dtoa_r+0x618>)
 8009602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009606:	e9d3 8900 	ldrd	r8, r9, [r3]
 800960a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960c:	2b00      	cmp	r3, #0
 800960e:	f280 80d5 	bge.w	80097bc <_dtoa_r+0x634>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f300 80d1 	bgt.w	80097bc <_dtoa_r+0x634>
 800961a:	f040 826f 	bne.w	8009afc <_dtoa_r+0x974>
 800961e:	4b65      	ldr	r3, [pc, #404]	; (80097b4 <_dtoa_r+0x62c>)
 8009620:	2200      	movs	r2, #0
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f6 ffef 	bl	8000608 <__aeabi_dmul>
 800962a:	4652      	mov	r2, sl
 800962c:	465b      	mov	r3, fp
 800962e:	f7f7 fa71 	bl	8000b14 <__aeabi_dcmpge>
 8009632:	9e03      	ldr	r6, [sp, #12]
 8009634:	4637      	mov	r7, r6
 8009636:	2800      	cmp	r0, #0
 8009638:	f040 8245 	bne.w	8009ac6 <_dtoa_r+0x93e>
 800963c:	9d01      	ldr	r5, [sp, #4]
 800963e:	2331      	movs	r3, #49	; 0x31
 8009640:	f805 3b01 	strb.w	r3, [r5], #1
 8009644:	9b00      	ldr	r3, [sp, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	e240      	b.n	8009ace <_dtoa_r+0x946>
 800964c:	07f2      	lsls	r2, r6, #31
 800964e:	d505      	bpl.n	800965c <_dtoa_r+0x4d4>
 8009650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009654:	f7f6 ffd8 	bl	8000608 <__aeabi_dmul>
 8009658:	3501      	adds	r5, #1
 800965a:	2301      	movs	r3, #1
 800965c:	1076      	asrs	r6, r6, #1
 800965e:	3708      	adds	r7, #8
 8009660:	e777      	b.n	8009552 <_dtoa_r+0x3ca>
 8009662:	2502      	movs	r5, #2
 8009664:	e779      	b.n	800955a <_dtoa_r+0x3d2>
 8009666:	9f00      	ldr	r7, [sp, #0]
 8009668:	9e03      	ldr	r6, [sp, #12]
 800966a:	e794      	b.n	8009596 <_dtoa_r+0x40e>
 800966c:	9901      	ldr	r1, [sp, #4]
 800966e:	4b4c      	ldr	r3, [pc, #304]	; (80097a0 <_dtoa_r+0x618>)
 8009670:	4431      	add	r1, r6
 8009672:	910d      	str	r1, [sp, #52]	; 0x34
 8009674:	9908      	ldr	r1, [sp, #32]
 8009676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800967a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800967e:	2900      	cmp	r1, #0
 8009680:	d043      	beq.n	800970a <_dtoa_r+0x582>
 8009682:	494d      	ldr	r1, [pc, #308]	; (80097b8 <_dtoa_r+0x630>)
 8009684:	2000      	movs	r0, #0
 8009686:	f7f7 f8e9 	bl	800085c <__aeabi_ddiv>
 800968a:	4652      	mov	r2, sl
 800968c:	465b      	mov	r3, fp
 800968e:	f7f6 fe03 	bl	8000298 <__aeabi_dsub>
 8009692:	9d01      	ldr	r5, [sp, #4]
 8009694:	4682      	mov	sl, r0
 8009696:	468b      	mov	fp, r1
 8009698:	4649      	mov	r1, r9
 800969a:	4640      	mov	r0, r8
 800969c:	f7f7 fa64 	bl	8000b68 <__aeabi_d2iz>
 80096a0:	4606      	mov	r6, r0
 80096a2:	f7f6 ff47 	bl	8000534 <__aeabi_i2d>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	f7f6 fdf3 	bl	8000298 <__aeabi_dsub>
 80096b2:	3630      	adds	r6, #48	; 0x30
 80096b4:	f805 6b01 	strb.w	r6, [r5], #1
 80096b8:	4652      	mov	r2, sl
 80096ba:	465b      	mov	r3, fp
 80096bc:	4680      	mov	r8, r0
 80096be:	4689      	mov	r9, r1
 80096c0:	f7f7 fa14 	bl	8000aec <__aeabi_dcmplt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d163      	bne.n	8009790 <_dtoa_r+0x608>
 80096c8:	4642      	mov	r2, r8
 80096ca:	464b      	mov	r3, r9
 80096cc:	4936      	ldr	r1, [pc, #216]	; (80097a8 <_dtoa_r+0x620>)
 80096ce:	2000      	movs	r0, #0
 80096d0:	f7f6 fde2 	bl	8000298 <__aeabi_dsub>
 80096d4:	4652      	mov	r2, sl
 80096d6:	465b      	mov	r3, fp
 80096d8:	f7f7 fa08 	bl	8000aec <__aeabi_dcmplt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f040 80b5 	bne.w	800984c <_dtoa_r+0x6c4>
 80096e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096e4:	429d      	cmp	r5, r3
 80096e6:	d081      	beq.n	80095ec <_dtoa_r+0x464>
 80096e8:	4b30      	ldr	r3, [pc, #192]	; (80097ac <_dtoa_r+0x624>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	4650      	mov	r0, sl
 80096ee:	4659      	mov	r1, fp
 80096f0:	f7f6 ff8a 	bl	8000608 <__aeabi_dmul>
 80096f4:	4b2d      	ldr	r3, [pc, #180]	; (80097ac <_dtoa_r+0x624>)
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	2200      	movs	r2, #0
 8009700:	f7f6 ff82 	bl	8000608 <__aeabi_dmul>
 8009704:	4680      	mov	r8, r0
 8009706:	4689      	mov	r9, r1
 8009708:	e7c6      	b.n	8009698 <_dtoa_r+0x510>
 800970a:	4650      	mov	r0, sl
 800970c:	4659      	mov	r1, fp
 800970e:	f7f6 ff7b 	bl	8000608 <__aeabi_dmul>
 8009712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009714:	9d01      	ldr	r5, [sp, #4]
 8009716:	930f      	str	r3, [sp, #60]	; 0x3c
 8009718:	4682      	mov	sl, r0
 800971a:	468b      	mov	fp, r1
 800971c:	4649      	mov	r1, r9
 800971e:	4640      	mov	r0, r8
 8009720:	f7f7 fa22 	bl	8000b68 <__aeabi_d2iz>
 8009724:	4606      	mov	r6, r0
 8009726:	f7f6 ff05 	bl	8000534 <__aeabi_i2d>
 800972a:	3630      	adds	r6, #48	; 0x30
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f6 fdb0 	bl	8000298 <__aeabi_dsub>
 8009738:	f805 6b01 	strb.w	r6, [r5], #1
 800973c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800973e:	429d      	cmp	r5, r3
 8009740:	4680      	mov	r8, r0
 8009742:	4689      	mov	r9, r1
 8009744:	f04f 0200 	mov.w	r2, #0
 8009748:	d124      	bne.n	8009794 <_dtoa_r+0x60c>
 800974a:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <_dtoa_r+0x630>)
 800974c:	4650      	mov	r0, sl
 800974e:	4659      	mov	r1, fp
 8009750:	f7f6 fda4 	bl	800029c <__adddf3>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f7 f9e4 	bl	8000b28 <__aeabi_dcmpgt>
 8009760:	2800      	cmp	r0, #0
 8009762:	d173      	bne.n	800984c <_dtoa_r+0x6c4>
 8009764:	4652      	mov	r2, sl
 8009766:	465b      	mov	r3, fp
 8009768:	4913      	ldr	r1, [pc, #76]	; (80097b8 <_dtoa_r+0x630>)
 800976a:	2000      	movs	r0, #0
 800976c:	f7f6 fd94 	bl	8000298 <__aeabi_dsub>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4640      	mov	r0, r8
 8009776:	4649      	mov	r1, r9
 8009778:	f7f7 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800977c:	2800      	cmp	r0, #0
 800977e:	f43f af35 	beq.w	80095ec <_dtoa_r+0x464>
 8009782:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009784:	1e6b      	subs	r3, r5, #1
 8009786:	930f      	str	r3, [sp, #60]	; 0x3c
 8009788:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800978c:	2b30      	cmp	r3, #48	; 0x30
 800978e:	d0f8      	beq.n	8009782 <_dtoa_r+0x5fa>
 8009790:	9700      	str	r7, [sp, #0]
 8009792:	e049      	b.n	8009828 <_dtoa_r+0x6a0>
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <_dtoa_r+0x624>)
 8009796:	f7f6 ff37 	bl	8000608 <__aeabi_dmul>
 800979a:	4680      	mov	r8, r0
 800979c:	4689      	mov	r9, r1
 800979e:	e7bd      	b.n	800971c <_dtoa_r+0x594>
 80097a0:	0800cd48 	.word	0x0800cd48
 80097a4:	0800cd20 	.word	0x0800cd20
 80097a8:	3ff00000 	.word	0x3ff00000
 80097ac:	40240000 	.word	0x40240000
 80097b0:	401c0000 	.word	0x401c0000
 80097b4:	40140000 	.word	0x40140000
 80097b8:	3fe00000 	.word	0x3fe00000
 80097bc:	9d01      	ldr	r5, [sp, #4]
 80097be:	4656      	mov	r6, sl
 80097c0:	465f      	mov	r7, fp
 80097c2:	4642      	mov	r2, r8
 80097c4:	464b      	mov	r3, r9
 80097c6:	4630      	mov	r0, r6
 80097c8:	4639      	mov	r1, r7
 80097ca:	f7f7 f847 	bl	800085c <__aeabi_ddiv>
 80097ce:	f7f7 f9cb 	bl	8000b68 <__aeabi_d2iz>
 80097d2:	4682      	mov	sl, r0
 80097d4:	f7f6 feae 	bl	8000534 <__aeabi_i2d>
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	f7f6 ff14 	bl	8000608 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4630      	mov	r0, r6
 80097e6:	4639      	mov	r1, r7
 80097e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097ec:	f7f6 fd54 	bl	8000298 <__aeabi_dsub>
 80097f0:	f805 6b01 	strb.w	r6, [r5], #1
 80097f4:	9e01      	ldr	r6, [sp, #4]
 80097f6:	9f03      	ldr	r7, [sp, #12]
 80097f8:	1bae      	subs	r6, r5, r6
 80097fa:	42b7      	cmp	r7, r6
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	d135      	bne.n	800986e <_dtoa_r+0x6e6>
 8009802:	f7f6 fd4b 	bl	800029c <__adddf3>
 8009806:	4642      	mov	r2, r8
 8009808:	464b      	mov	r3, r9
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	f7f7 f98b 	bl	8000b28 <__aeabi_dcmpgt>
 8009812:	b9d0      	cbnz	r0, 800984a <_dtoa_r+0x6c2>
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f7 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009820:	b110      	cbz	r0, 8009828 <_dtoa_r+0x6a0>
 8009822:	f01a 0f01 	tst.w	sl, #1
 8009826:	d110      	bne.n	800984a <_dtoa_r+0x6c2>
 8009828:	4620      	mov	r0, r4
 800982a:	ee18 1a10 	vmov	r1, s16
 800982e:	f000 fd05 	bl	800a23c <_Bfree>
 8009832:	2300      	movs	r3, #0
 8009834:	9800      	ldr	r0, [sp, #0]
 8009836:	702b      	strb	r3, [r5, #0]
 8009838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800983a:	3001      	adds	r0, #1
 800983c:	6018      	str	r0, [r3, #0]
 800983e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009840:	2b00      	cmp	r3, #0
 8009842:	f43f acf1 	beq.w	8009228 <_dtoa_r+0xa0>
 8009846:	601d      	str	r5, [r3, #0]
 8009848:	e4ee      	b.n	8009228 <_dtoa_r+0xa0>
 800984a:	9f00      	ldr	r7, [sp, #0]
 800984c:	462b      	mov	r3, r5
 800984e:	461d      	mov	r5, r3
 8009850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009854:	2a39      	cmp	r2, #57	; 0x39
 8009856:	d106      	bne.n	8009866 <_dtoa_r+0x6de>
 8009858:	9a01      	ldr	r2, [sp, #4]
 800985a:	429a      	cmp	r2, r3
 800985c:	d1f7      	bne.n	800984e <_dtoa_r+0x6c6>
 800985e:	9901      	ldr	r1, [sp, #4]
 8009860:	2230      	movs	r2, #48	; 0x30
 8009862:	3701      	adds	r7, #1
 8009864:	700a      	strb	r2, [r1, #0]
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	3201      	adds	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	e790      	b.n	8009790 <_dtoa_r+0x608>
 800986e:	4ba6      	ldr	r3, [pc, #664]	; (8009b08 <_dtoa_r+0x980>)
 8009870:	2200      	movs	r2, #0
 8009872:	f7f6 fec9 	bl	8000608 <__aeabi_dmul>
 8009876:	2200      	movs	r2, #0
 8009878:	2300      	movs	r3, #0
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	f7f7 f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009882:	2800      	cmp	r0, #0
 8009884:	d09d      	beq.n	80097c2 <_dtoa_r+0x63a>
 8009886:	e7cf      	b.n	8009828 <_dtoa_r+0x6a0>
 8009888:	9a08      	ldr	r2, [sp, #32]
 800988a:	2a00      	cmp	r2, #0
 800988c:	f000 80d7 	beq.w	8009a3e <_dtoa_r+0x8b6>
 8009890:	9a06      	ldr	r2, [sp, #24]
 8009892:	2a01      	cmp	r2, #1
 8009894:	f300 80ba 	bgt.w	8009a0c <_dtoa_r+0x884>
 8009898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800989a:	2a00      	cmp	r2, #0
 800989c:	f000 80b2 	beq.w	8009a04 <_dtoa_r+0x87c>
 80098a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098a4:	9e07      	ldr	r6, [sp, #28]
 80098a6:	9d04      	ldr	r5, [sp, #16]
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	441a      	add	r2, r3
 80098ac:	9204      	str	r2, [sp, #16]
 80098ae:	9a05      	ldr	r2, [sp, #20]
 80098b0:	2101      	movs	r1, #1
 80098b2:	441a      	add	r2, r3
 80098b4:	4620      	mov	r0, r4
 80098b6:	9205      	str	r2, [sp, #20]
 80098b8:	f000 fd78 	bl	800a3ac <__i2b>
 80098bc:	4607      	mov	r7, r0
 80098be:	2d00      	cmp	r5, #0
 80098c0:	dd0c      	ble.n	80098dc <_dtoa_r+0x754>
 80098c2:	9b05      	ldr	r3, [sp, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dd09      	ble.n	80098dc <_dtoa_r+0x754>
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	9a04      	ldr	r2, [sp, #16]
 80098cc:	bfa8      	it	ge
 80098ce:	462b      	movge	r3, r5
 80098d0:	1ad2      	subs	r2, r2, r3
 80098d2:	9204      	str	r2, [sp, #16]
 80098d4:	9a05      	ldr	r2, [sp, #20]
 80098d6:	1aed      	subs	r5, r5, r3
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	9305      	str	r3, [sp, #20]
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	b31b      	cbz	r3, 8009928 <_dtoa_r+0x7a0>
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80af 	beq.w	8009a46 <_dtoa_r+0x8be>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	dd13      	ble.n	8009914 <_dtoa_r+0x78c>
 80098ec:	4639      	mov	r1, r7
 80098ee:	4632      	mov	r2, r6
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fe1b 	bl	800a52c <__pow5mult>
 80098f6:	ee18 2a10 	vmov	r2, s16
 80098fa:	4601      	mov	r1, r0
 80098fc:	4607      	mov	r7, r0
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fd6a 	bl	800a3d8 <__multiply>
 8009904:	ee18 1a10 	vmov	r1, s16
 8009908:	4680      	mov	r8, r0
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fc96 	bl	800a23c <_Bfree>
 8009910:	ee08 8a10 	vmov	s16, r8
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	1b9a      	subs	r2, r3, r6
 8009918:	d006      	beq.n	8009928 <_dtoa_r+0x7a0>
 800991a:	ee18 1a10 	vmov	r1, s16
 800991e:	4620      	mov	r0, r4
 8009920:	f000 fe04 	bl	800a52c <__pow5mult>
 8009924:	ee08 0a10 	vmov	s16, r0
 8009928:	2101      	movs	r1, #1
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fd3e 	bl	800a3ac <__i2b>
 8009930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009932:	2b00      	cmp	r3, #0
 8009934:	4606      	mov	r6, r0
 8009936:	f340 8088 	ble.w	8009a4a <_dtoa_r+0x8c2>
 800993a:	461a      	mov	r2, r3
 800993c:	4601      	mov	r1, r0
 800993e:	4620      	mov	r0, r4
 8009940:	f000 fdf4 	bl	800a52c <__pow5mult>
 8009944:	9b06      	ldr	r3, [sp, #24]
 8009946:	2b01      	cmp	r3, #1
 8009948:	4606      	mov	r6, r0
 800994a:	f340 8081 	ble.w	8009a50 <_dtoa_r+0x8c8>
 800994e:	f04f 0800 	mov.w	r8, #0
 8009952:	6933      	ldr	r3, [r6, #16]
 8009954:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009958:	6918      	ldr	r0, [r3, #16]
 800995a:	f000 fcd7 	bl	800a30c <__hi0bits>
 800995e:	f1c0 0020 	rsb	r0, r0, #32
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	4418      	add	r0, r3
 8009966:	f010 001f 	ands.w	r0, r0, #31
 800996a:	f000 8092 	beq.w	8009a92 <_dtoa_r+0x90a>
 800996e:	f1c0 0320 	rsb	r3, r0, #32
 8009972:	2b04      	cmp	r3, #4
 8009974:	f340 808a 	ble.w	8009a8c <_dtoa_r+0x904>
 8009978:	f1c0 001c 	rsb	r0, r0, #28
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	4403      	add	r3, r0
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	9b05      	ldr	r3, [sp, #20]
 8009984:	4403      	add	r3, r0
 8009986:	4405      	add	r5, r0
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	9b04      	ldr	r3, [sp, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	dd07      	ble.n	80099a0 <_dtoa_r+0x818>
 8009990:	ee18 1a10 	vmov	r1, s16
 8009994:	461a      	mov	r2, r3
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fe22 	bl	800a5e0 <__lshift>
 800999c:	ee08 0a10 	vmov	s16, r0
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd05      	ble.n	80099b2 <_dtoa_r+0x82a>
 80099a6:	4631      	mov	r1, r6
 80099a8:	461a      	mov	r2, r3
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fe18 	bl	800a5e0 <__lshift>
 80099b0:	4606      	mov	r6, r0
 80099b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d06e      	beq.n	8009a96 <_dtoa_r+0x90e>
 80099b8:	ee18 0a10 	vmov	r0, s16
 80099bc:	4631      	mov	r1, r6
 80099be:	f000 fe7f 	bl	800a6c0 <__mcmp>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	da67      	bge.n	8009a96 <_dtoa_r+0x90e>
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	ee18 1a10 	vmov	r1, s16
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	220a      	movs	r2, #10
 80099d2:	2300      	movs	r3, #0
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 fc53 	bl	800a280 <__multadd>
 80099da:	9b08      	ldr	r3, [sp, #32]
 80099dc:	ee08 0a10 	vmov	s16, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 81b1 	beq.w	8009d48 <_dtoa_r+0xbc0>
 80099e6:	2300      	movs	r3, #0
 80099e8:	4639      	mov	r1, r7
 80099ea:	220a      	movs	r2, #10
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 fc47 	bl	800a280 <__multadd>
 80099f2:	9b02      	ldr	r3, [sp, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	4607      	mov	r7, r0
 80099f8:	f300 808e 	bgt.w	8009b18 <_dtoa_r+0x990>
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	dc51      	bgt.n	8009aa6 <_dtoa_r+0x91e>
 8009a02:	e089      	b.n	8009b18 <_dtoa_r+0x990>
 8009a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a0a:	e74b      	b.n	80098a4 <_dtoa_r+0x71c>
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	1e5e      	subs	r6, r3, #1
 8009a10:	9b07      	ldr	r3, [sp, #28]
 8009a12:	42b3      	cmp	r3, r6
 8009a14:	bfbf      	itttt	lt
 8009a16:	9b07      	ldrlt	r3, [sp, #28]
 8009a18:	9607      	strlt	r6, [sp, #28]
 8009a1a:	1af2      	sublt	r2, r6, r3
 8009a1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a1e:	bfb6      	itet	lt
 8009a20:	189b      	addlt	r3, r3, r2
 8009a22:	1b9e      	subge	r6, r3, r6
 8009a24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	bfb8      	it	lt
 8009a2a:	2600      	movlt	r6, #0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	bfb7      	itett	lt
 8009a30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009a38:	1a9d      	sublt	r5, r3, r2
 8009a3a:	2300      	movlt	r3, #0
 8009a3c:	e734      	b.n	80098a8 <_dtoa_r+0x720>
 8009a3e:	9e07      	ldr	r6, [sp, #28]
 8009a40:	9d04      	ldr	r5, [sp, #16]
 8009a42:	9f08      	ldr	r7, [sp, #32]
 8009a44:	e73b      	b.n	80098be <_dtoa_r+0x736>
 8009a46:	9a07      	ldr	r2, [sp, #28]
 8009a48:	e767      	b.n	800991a <_dtoa_r+0x792>
 8009a4a:	9b06      	ldr	r3, [sp, #24]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	dc18      	bgt.n	8009a82 <_dtoa_r+0x8fa>
 8009a50:	f1ba 0f00 	cmp.w	sl, #0
 8009a54:	d115      	bne.n	8009a82 <_dtoa_r+0x8fa>
 8009a56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a5a:	b993      	cbnz	r3, 8009a82 <_dtoa_r+0x8fa>
 8009a5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a60:	0d1b      	lsrs	r3, r3, #20
 8009a62:	051b      	lsls	r3, r3, #20
 8009a64:	b183      	cbz	r3, 8009a88 <_dtoa_r+0x900>
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	9b05      	ldr	r3, [sp, #20]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	9305      	str	r3, [sp, #20]
 8009a72:	f04f 0801 	mov.w	r8, #1
 8009a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f af6a 	bne.w	8009952 <_dtoa_r+0x7ca>
 8009a7e:	2001      	movs	r0, #1
 8009a80:	e76f      	b.n	8009962 <_dtoa_r+0x7da>
 8009a82:	f04f 0800 	mov.w	r8, #0
 8009a86:	e7f6      	b.n	8009a76 <_dtoa_r+0x8ee>
 8009a88:	4698      	mov	r8, r3
 8009a8a:	e7f4      	b.n	8009a76 <_dtoa_r+0x8ee>
 8009a8c:	f43f af7d 	beq.w	800998a <_dtoa_r+0x802>
 8009a90:	4618      	mov	r0, r3
 8009a92:	301c      	adds	r0, #28
 8009a94:	e772      	b.n	800997c <_dtoa_r+0x7f4>
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc37      	bgt.n	8009b0c <_dtoa_r+0x984>
 8009a9c:	9b06      	ldr	r3, [sp, #24]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	dd34      	ble.n	8009b0c <_dtoa_r+0x984>
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	9302      	str	r3, [sp, #8]
 8009aa6:	9b02      	ldr	r3, [sp, #8]
 8009aa8:	b96b      	cbnz	r3, 8009ac6 <_dtoa_r+0x93e>
 8009aaa:	4631      	mov	r1, r6
 8009aac:	2205      	movs	r2, #5
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 fbe6 	bl	800a280 <__multadd>
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	ee18 0a10 	vmov	r0, s16
 8009abc:	f000 fe00 	bl	800a6c0 <__mcmp>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	f73f adbb 	bgt.w	800963c <_dtoa_r+0x4b4>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	9d01      	ldr	r5, [sp, #4]
 8009aca:	43db      	mvns	r3, r3
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	f04f 0800 	mov.w	r8, #0
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 fbb1 	bl	800a23c <_Bfree>
 8009ada:	2f00      	cmp	r7, #0
 8009adc:	f43f aea4 	beq.w	8009828 <_dtoa_r+0x6a0>
 8009ae0:	f1b8 0f00 	cmp.w	r8, #0
 8009ae4:	d005      	beq.n	8009af2 <_dtoa_r+0x96a>
 8009ae6:	45b8      	cmp	r8, r7
 8009ae8:	d003      	beq.n	8009af2 <_dtoa_r+0x96a>
 8009aea:	4641      	mov	r1, r8
 8009aec:	4620      	mov	r0, r4
 8009aee:	f000 fba5 	bl	800a23c <_Bfree>
 8009af2:	4639      	mov	r1, r7
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 fba1 	bl	800a23c <_Bfree>
 8009afa:	e695      	b.n	8009828 <_dtoa_r+0x6a0>
 8009afc:	2600      	movs	r6, #0
 8009afe:	4637      	mov	r7, r6
 8009b00:	e7e1      	b.n	8009ac6 <_dtoa_r+0x93e>
 8009b02:	9700      	str	r7, [sp, #0]
 8009b04:	4637      	mov	r7, r6
 8009b06:	e599      	b.n	800963c <_dtoa_r+0x4b4>
 8009b08:	40240000 	.word	0x40240000
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80ca 	beq.w	8009ca8 <_dtoa_r+0xb20>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	9302      	str	r3, [sp, #8]
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	dd05      	ble.n	8009b28 <_dtoa_r+0x9a0>
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	462a      	mov	r2, r5
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fd5d 	bl	800a5e0 <__lshift>
 8009b26:	4607      	mov	r7, r0
 8009b28:	f1b8 0f00 	cmp.w	r8, #0
 8009b2c:	d05b      	beq.n	8009be6 <_dtoa_r+0xa5e>
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 fb43 	bl	800a1bc <_Balloc>
 8009b36:	4605      	mov	r5, r0
 8009b38:	b928      	cbnz	r0, 8009b46 <_dtoa_r+0x9be>
 8009b3a:	4b87      	ldr	r3, [pc, #540]	; (8009d58 <_dtoa_r+0xbd0>)
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b42:	f7ff bb3b 	b.w	80091bc <_dtoa_r+0x34>
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	3202      	adds	r2, #2
 8009b4a:	0092      	lsls	r2, r2, #2
 8009b4c:	f107 010c 	add.w	r1, r7, #12
 8009b50:	300c      	adds	r0, #12
 8009b52:	f7fe fcbf 	bl	80084d4 <memcpy>
 8009b56:	2201      	movs	r2, #1
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fd40 	bl	800a5e0 <__lshift>
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	f103 0901 	add.w	r9, r3, #1
 8009b66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	f00a 0301 	and.w	r3, sl, #1
 8009b72:	46b8      	mov	r8, r7
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	4607      	mov	r7, r0
 8009b78:	4631      	mov	r1, r6
 8009b7a:	ee18 0a10 	vmov	r0, s16
 8009b7e:	f7ff fa77 	bl	8009070 <quorem>
 8009b82:	4641      	mov	r1, r8
 8009b84:	9002      	str	r0, [sp, #8]
 8009b86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b8a:	ee18 0a10 	vmov	r0, s16
 8009b8e:	f000 fd97 	bl	800a6c0 <__mcmp>
 8009b92:	463a      	mov	r2, r7
 8009b94:	9003      	str	r0, [sp, #12]
 8009b96:	4631      	mov	r1, r6
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fdad 	bl	800a6f8 <__mdiff>
 8009b9e:	68c2      	ldr	r2, [r0, #12]
 8009ba0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	bb02      	cbnz	r2, 8009bea <_dtoa_r+0xa62>
 8009ba8:	4601      	mov	r1, r0
 8009baa:	ee18 0a10 	vmov	r0, s16
 8009bae:	f000 fd87 	bl	800a6c0 <__mcmp>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	9207      	str	r2, [sp, #28]
 8009bba:	f000 fb3f 	bl	800a23c <_Bfree>
 8009bbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009bc2:	ea43 0102 	orr.w	r1, r3, r2
 8009bc6:	9b04      	ldr	r3, [sp, #16]
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	464d      	mov	r5, r9
 8009bcc:	d10f      	bne.n	8009bee <_dtoa_r+0xa66>
 8009bce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bd2:	d02a      	beq.n	8009c2a <_dtoa_r+0xaa2>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dd02      	ble.n	8009be0 <_dtoa_r+0xa58>
 8009bda:	9b02      	ldr	r3, [sp, #8]
 8009bdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009be0:	f88b a000 	strb.w	sl, [fp]
 8009be4:	e775      	b.n	8009ad2 <_dtoa_r+0x94a>
 8009be6:	4638      	mov	r0, r7
 8009be8:	e7ba      	b.n	8009b60 <_dtoa_r+0x9d8>
 8009bea:	2201      	movs	r2, #1
 8009bec:	e7e2      	b.n	8009bb4 <_dtoa_r+0xa2c>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	db04      	blt.n	8009bfe <_dtoa_r+0xa76>
 8009bf4:	9906      	ldr	r1, [sp, #24]
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	9904      	ldr	r1, [sp, #16]
 8009bfa:	430b      	orrs	r3, r1
 8009bfc:	d122      	bne.n	8009c44 <_dtoa_r+0xabc>
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	ddee      	ble.n	8009be0 <_dtoa_r+0xa58>
 8009c02:	ee18 1a10 	vmov	r1, s16
 8009c06:	2201      	movs	r2, #1
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 fce9 	bl	800a5e0 <__lshift>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	ee08 0a10 	vmov	s16, r0
 8009c14:	f000 fd54 	bl	800a6c0 <__mcmp>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	dc03      	bgt.n	8009c24 <_dtoa_r+0xa9c>
 8009c1c:	d1e0      	bne.n	8009be0 <_dtoa_r+0xa58>
 8009c1e:	f01a 0f01 	tst.w	sl, #1
 8009c22:	d0dd      	beq.n	8009be0 <_dtoa_r+0xa58>
 8009c24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c28:	d1d7      	bne.n	8009bda <_dtoa_r+0xa52>
 8009c2a:	2339      	movs	r3, #57	; 0x39
 8009c2c:	f88b 3000 	strb.w	r3, [fp]
 8009c30:	462b      	mov	r3, r5
 8009c32:	461d      	mov	r5, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c3a:	2a39      	cmp	r2, #57	; 0x39
 8009c3c:	d071      	beq.n	8009d22 <_dtoa_r+0xb9a>
 8009c3e:	3201      	adds	r2, #1
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	e746      	b.n	8009ad2 <_dtoa_r+0x94a>
 8009c44:	2a00      	cmp	r2, #0
 8009c46:	dd07      	ble.n	8009c58 <_dtoa_r+0xad0>
 8009c48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c4c:	d0ed      	beq.n	8009c2a <_dtoa_r+0xaa2>
 8009c4e:	f10a 0301 	add.w	r3, sl, #1
 8009c52:	f88b 3000 	strb.w	r3, [fp]
 8009c56:	e73c      	b.n	8009ad2 <_dtoa_r+0x94a>
 8009c58:	9b05      	ldr	r3, [sp, #20]
 8009c5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c5e:	4599      	cmp	r9, r3
 8009c60:	d047      	beq.n	8009cf2 <_dtoa_r+0xb6a>
 8009c62:	ee18 1a10 	vmov	r1, s16
 8009c66:	2300      	movs	r3, #0
 8009c68:	220a      	movs	r2, #10
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 fb08 	bl	800a280 <__multadd>
 8009c70:	45b8      	cmp	r8, r7
 8009c72:	ee08 0a10 	vmov	s16, r0
 8009c76:	f04f 0300 	mov.w	r3, #0
 8009c7a:	f04f 020a 	mov.w	r2, #10
 8009c7e:	4641      	mov	r1, r8
 8009c80:	4620      	mov	r0, r4
 8009c82:	d106      	bne.n	8009c92 <_dtoa_r+0xb0a>
 8009c84:	f000 fafc 	bl	800a280 <__multadd>
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	f109 0901 	add.w	r9, r9, #1
 8009c90:	e772      	b.n	8009b78 <_dtoa_r+0x9f0>
 8009c92:	f000 faf5 	bl	800a280 <__multadd>
 8009c96:	4639      	mov	r1, r7
 8009c98:	4680      	mov	r8, r0
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 faee 	bl	800a280 <__multadd>
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	e7f1      	b.n	8009c8c <_dtoa_r+0xb04>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	9302      	str	r3, [sp, #8]
 8009cac:	9d01      	ldr	r5, [sp, #4]
 8009cae:	ee18 0a10 	vmov	r0, s16
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	f7ff f9dc 	bl	8009070 <quorem>
 8009cb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	f805 ab01 	strb.w	sl, [r5], #1
 8009cc2:	1aea      	subs	r2, r5, r3
 8009cc4:	9b02      	ldr	r3, [sp, #8]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	dd09      	ble.n	8009cde <_dtoa_r+0xb56>
 8009cca:	ee18 1a10 	vmov	r1, s16
 8009cce:	2300      	movs	r3, #0
 8009cd0:	220a      	movs	r2, #10
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fad4 	bl	800a280 <__multadd>
 8009cd8:	ee08 0a10 	vmov	s16, r0
 8009cdc:	e7e7      	b.n	8009cae <_dtoa_r+0xb26>
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfc8      	it	gt
 8009ce4:	461d      	movgt	r5, r3
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	bfd8      	it	le
 8009cea:	2501      	movle	r5, #1
 8009cec:	441d      	add	r5, r3
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	ee18 1a10 	vmov	r1, s16
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fc71 	bl	800a5e0 <__lshift>
 8009cfe:	4631      	mov	r1, r6
 8009d00:	ee08 0a10 	vmov	s16, r0
 8009d04:	f000 fcdc 	bl	800a6c0 <__mcmp>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	dc91      	bgt.n	8009c30 <_dtoa_r+0xaa8>
 8009d0c:	d102      	bne.n	8009d14 <_dtoa_r+0xb8c>
 8009d0e:	f01a 0f01 	tst.w	sl, #1
 8009d12:	d18d      	bne.n	8009c30 <_dtoa_r+0xaa8>
 8009d14:	462b      	mov	r3, r5
 8009d16:	461d      	mov	r5, r3
 8009d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d1c:	2a30      	cmp	r2, #48	; 0x30
 8009d1e:	d0fa      	beq.n	8009d16 <_dtoa_r+0xb8e>
 8009d20:	e6d7      	b.n	8009ad2 <_dtoa_r+0x94a>
 8009d22:	9a01      	ldr	r2, [sp, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d184      	bne.n	8009c32 <_dtoa_r+0xaaa>
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	2331      	movs	r3, #49	; 0x31
 8009d30:	7013      	strb	r3, [r2, #0]
 8009d32:	e6ce      	b.n	8009ad2 <_dtoa_r+0x94a>
 8009d34:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <_dtoa_r+0xbd4>)
 8009d36:	f7ff ba95 	b.w	8009264 <_dtoa_r+0xdc>
 8009d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f47f aa6e 	bne.w	800921e <_dtoa_r+0x96>
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <_dtoa_r+0xbd8>)
 8009d44:	f7ff ba8e 	b.w	8009264 <_dtoa_r+0xdc>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dcae      	bgt.n	8009cac <_dtoa_r+0xb24>
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	f73f aea8 	bgt.w	8009aa6 <_dtoa_r+0x91e>
 8009d56:	e7a9      	b.n	8009cac <_dtoa_r+0xb24>
 8009d58:	0800cc53 	.word	0x0800cc53
 8009d5c:	0800cbb0 	.word	0x0800cbb0
 8009d60:	0800cbd4 	.word	0x0800cbd4

08009d64 <__sflush_r>:
 8009d64:	898a      	ldrh	r2, [r1, #12]
 8009d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	0710      	lsls	r0, r2, #28
 8009d6e:	460c      	mov	r4, r1
 8009d70:	d458      	bmi.n	8009e24 <__sflush_r+0xc0>
 8009d72:	684b      	ldr	r3, [r1, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dc05      	bgt.n	8009d84 <__sflush_r+0x20>
 8009d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	dc02      	bgt.n	8009d84 <__sflush_r+0x20>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	d0f9      	beq.n	8009d7e <__sflush_r+0x1a>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d90:	682f      	ldr	r7, [r5, #0]
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	d032      	beq.n	8009dfc <__sflush_r+0x98>
 8009d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	075a      	lsls	r2, r3, #29
 8009d9c:	d505      	bpl.n	8009daa <__sflush_r+0x46>
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	1ac0      	subs	r0, r0, r3
 8009da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da4:	b10b      	cbz	r3, 8009daa <__sflush_r+0x46>
 8009da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009da8:	1ac0      	subs	r0, r0, r3
 8009daa:	2300      	movs	r3, #0
 8009dac:	4602      	mov	r2, r0
 8009dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009db0:	6a21      	ldr	r1, [r4, #32]
 8009db2:	4628      	mov	r0, r5
 8009db4:	47b0      	blx	r6
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	d106      	bne.n	8009dca <__sflush_r+0x66>
 8009dbc:	6829      	ldr	r1, [r5, #0]
 8009dbe:	291d      	cmp	r1, #29
 8009dc0:	d82c      	bhi.n	8009e1c <__sflush_r+0xb8>
 8009dc2:	4a2a      	ldr	r2, [pc, #168]	; (8009e6c <__sflush_r+0x108>)
 8009dc4:	40ca      	lsrs	r2, r1
 8009dc6:	07d6      	lsls	r6, r2, #31
 8009dc8:	d528      	bpl.n	8009e1c <__sflush_r+0xb8>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6062      	str	r2, [r4, #4]
 8009dce:	04d9      	lsls	r1, r3, #19
 8009dd0:	6922      	ldr	r2, [r4, #16]
 8009dd2:	6022      	str	r2, [r4, #0]
 8009dd4:	d504      	bpl.n	8009de0 <__sflush_r+0x7c>
 8009dd6:	1c42      	adds	r2, r0, #1
 8009dd8:	d101      	bne.n	8009dde <__sflush_r+0x7a>
 8009dda:	682b      	ldr	r3, [r5, #0]
 8009ddc:	b903      	cbnz	r3, 8009de0 <__sflush_r+0x7c>
 8009dde:	6560      	str	r0, [r4, #84]	; 0x54
 8009de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de2:	602f      	str	r7, [r5, #0]
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d0ca      	beq.n	8009d7e <__sflush_r+0x1a>
 8009de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dec:	4299      	cmp	r1, r3
 8009dee:	d002      	beq.n	8009df6 <__sflush_r+0x92>
 8009df0:	4628      	mov	r0, r5
 8009df2:	f000 fd7d 	bl	800a8f0 <_free_r>
 8009df6:	2000      	movs	r0, #0
 8009df8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dfa:	e7c1      	b.n	8009d80 <__sflush_r+0x1c>
 8009dfc:	6a21      	ldr	r1, [r4, #32]
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4628      	mov	r0, r5
 8009e02:	47b0      	blx	r6
 8009e04:	1c41      	adds	r1, r0, #1
 8009e06:	d1c7      	bne.n	8009d98 <__sflush_r+0x34>
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0c4      	beq.n	8009d98 <__sflush_r+0x34>
 8009e0e:	2b1d      	cmp	r3, #29
 8009e10:	d001      	beq.n	8009e16 <__sflush_r+0xb2>
 8009e12:	2b16      	cmp	r3, #22
 8009e14:	d101      	bne.n	8009e1a <__sflush_r+0xb6>
 8009e16:	602f      	str	r7, [r5, #0]
 8009e18:	e7b1      	b.n	8009d7e <__sflush_r+0x1a>
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	e7ad      	b.n	8009d80 <__sflush_r+0x1c>
 8009e24:	690f      	ldr	r7, [r1, #16]
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	d0a9      	beq.n	8009d7e <__sflush_r+0x1a>
 8009e2a:	0793      	lsls	r3, r2, #30
 8009e2c:	680e      	ldr	r6, [r1, #0]
 8009e2e:	bf08      	it	eq
 8009e30:	694b      	ldreq	r3, [r1, #20]
 8009e32:	600f      	str	r7, [r1, #0]
 8009e34:	bf18      	it	ne
 8009e36:	2300      	movne	r3, #0
 8009e38:	eba6 0807 	sub.w	r8, r6, r7
 8009e3c:	608b      	str	r3, [r1, #8]
 8009e3e:	f1b8 0f00 	cmp.w	r8, #0
 8009e42:	dd9c      	ble.n	8009d7e <__sflush_r+0x1a>
 8009e44:	6a21      	ldr	r1, [r4, #32]
 8009e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e48:	4643      	mov	r3, r8
 8009e4a:	463a      	mov	r2, r7
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b0      	blx	r6
 8009e50:	2800      	cmp	r0, #0
 8009e52:	dc06      	bgt.n	8009e62 <__sflush_r+0xfe>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e60:	e78e      	b.n	8009d80 <__sflush_r+0x1c>
 8009e62:	4407      	add	r7, r0
 8009e64:	eba8 0800 	sub.w	r8, r8, r0
 8009e68:	e7e9      	b.n	8009e3e <__sflush_r+0xda>
 8009e6a:	bf00      	nop
 8009e6c:	20400001 	.word	0x20400001

08009e70 <_fflush_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	690b      	ldr	r3, [r1, #16]
 8009e74:	4605      	mov	r5, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	b913      	cbnz	r3, 8009e80 <_fflush_r+0x10>
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	b118      	cbz	r0, 8009e8a <_fflush_r+0x1a>
 8009e82:	6983      	ldr	r3, [r0, #24]
 8009e84:	b90b      	cbnz	r3, 8009e8a <_fflush_r+0x1a>
 8009e86:	f000 f887 	bl	8009f98 <__sinit>
 8009e8a:	4b14      	ldr	r3, [pc, #80]	; (8009edc <_fflush_r+0x6c>)
 8009e8c:	429c      	cmp	r4, r3
 8009e8e:	d11b      	bne.n	8009ec8 <_fflush_r+0x58>
 8009e90:	686c      	ldr	r4, [r5, #4]
 8009e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0ef      	beq.n	8009e7a <_fflush_r+0xa>
 8009e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e9c:	07d0      	lsls	r0, r2, #31
 8009e9e:	d404      	bmi.n	8009eaa <_fflush_r+0x3a>
 8009ea0:	0599      	lsls	r1, r3, #22
 8009ea2:	d402      	bmi.n	8009eaa <_fflush_r+0x3a>
 8009ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea6:	f000 f91a 	bl	800a0de <__retarget_lock_acquire_recursive>
 8009eaa:	4628      	mov	r0, r5
 8009eac:	4621      	mov	r1, r4
 8009eae:	f7ff ff59 	bl	8009d64 <__sflush_r>
 8009eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eb4:	07da      	lsls	r2, r3, #31
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	d4e0      	bmi.n	8009e7c <_fflush_r+0xc>
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	059b      	lsls	r3, r3, #22
 8009ebe:	d4dd      	bmi.n	8009e7c <_fflush_r+0xc>
 8009ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ec2:	f000 f90d 	bl	800a0e0 <__retarget_lock_release_recursive>
 8009ec6:	e7d9      	b.n	8009e7c <_fflush_r+0xc>
 8009ec8:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <_fflush_r+0x70>)
 8009eca:	429c      	cmp	r4, r3
 8009ecc:	d101      	bne.n	8009ed2 <_fflush_r+0x62>
 8009ece:	68ac      	ldr	r4, [r5, #8]
 8009ed0:	e7df      	b.n	8009e92 <_fflush_r+0x22>
 8009ed2:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <_fflush_r+0x74>)
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	bf08      	it	eq
 8009ed8:	68ec      	ldreq	r4, [r5, #12]
 8009eda:	e7da      	b.n	8009e92 <_fflush_r+0x22>
 8009edc:	0800cc84 	.word	0x0800cc84
 8009ee0:	0800cca4 	.word	0x0800cca4
 8009ee4:	0800cc64 	.word	0x0800cc64

08009ee8 <std>:
 8009ee8:	2300      	movs	r3, #0
 8009eea:	b510      	push	{r4, lr}
 8009eec:	4604      	mov	r4, r0
 8009eee:	e9c0 3300 	strd	r3, r3, [r0]
 8009ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ef6:	6083      	str	r3, [r0, #8]
 8009ef8:	8181      	strh	r1, [r0, #12]
 8009efa:	6643      	str	r3, [r0, #100]	; 0x64
 8009efc:	81c2      	strh	r2, [r0, #14]
 8009efe:	6183      	str	r3, [r0, #24]
 8009f00:	4619      	mov	r1, r3
 8009f02:	2208      	movs	r2, #8
 8009f04:	305c      	adds	r0, #92	; 0x5c
 8009f06:	f7fe faf3 	bl	80084f0 <memset>
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <std+0x38>)
 8009f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f0e:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <std+0x3c>)
 8009f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f12:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <std+0x40>)
 8009f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f16:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <std+0x44>)
 8009f18:	6224      	str	r4, [r4, #32]
 8009f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	bf00      	nop
 8009f20:	0800ad85 	.word	0x0800ad85
 8009f24:	0800ada7 	.word	0x0800ada7
 8009f28:	0800addf 	.word	0x0800addf
 8009f2c:	0800ae03 	.word	0x0800ae03

08009f30 <_cleanup_r>:
 8009f30:	4901      	ldr	r1, [pc, #4]	; (8009f38 <_cleanup_r+0x8>)
 8009f32:	f000 b8af 	b.w	800a094 <_fwalk_reent>
 8009f36:	bf00      	nop
 8009f38:	08009e71 	.word	0x08009e71

08009f3c <__sfmoreglue>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	2268      	movs	r2, #104	; 0x68
 8009f40:	1e4d      	subs	r5, r1, #1
 8009f42:	4355      	muls	r5, r2
 8009f44:	460e      	mov	r6, r1
 8009f46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f4a:	f000 fd3d 	bl	800a9c8 <_malloc_r>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	b140      	cbz	r0, 8009f64 <__sfmoreglue+0x28>
 8009f52:	2100      	movs	r1, #0
 8009f54:	e9c0 1600 	strd	r1, r6, [r0]
 8009f58:	300c      	adds	r0, #12
 8009f5a:	60a0      	str	r0, [r4, #8]
 8009f5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f60:	f7fe fac6 	bl	80084f0 <memset>
 8009f64:	4620      	mov	r0, r4
 8009f66:	bd70      	pop	{r4, r5, r6, pc}

08009f68 <__sfp_lock_acquire>:
 8009f68:	4801      	ldr	r0, [pc, #4]	; (8009f70 <__sfp_lock_acquire+0x8>)
 8009f6a:	f000 b8b8 	b.w	800a0de <__retarget_lock_acquire_recursive>
 8009f6e:	bf00      	nop
 8009f70:	200003dd 	.word	0x200003dd

08009f74 <__sfp_lock_release>:
 8009f74:	4801      	ldr	r0, [pc, #4]	; (8009f7c <__sfp_lock_release+0x8>)
 8009f76:	f000 b8b3 	b.w	800a0e0 <__retarget_lock_release_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	200003dd 	.word	0x200003dd

08009f80 <__sinit_lock_acquire>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__sinit_lock_acquire+0x8>)
 8009f82:	f000 b8ac 	b.w	800a0de <__retarget_lock_acquire_recursive>
 8009f86:	bf00      	nop
 8009f88:	200003de 	.word	0x200003de

08009f8c <__sinit_lock_release>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__sinit_lock_release+0x8>)
 8009f8e:	f000 b8a7 	b.w	800a0e0 <__retarget_lock_release_recursive>
 8009f92:	bf00      	nop
 8009f94:	200003de 	.word	0x200003de

08009f98 <__sinit>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	f7ff fff0 	bl	8009f80 <__sinit_lock_acquire>
 8009fa0:	69a3      	ldr	r3, [r4, #24]
 8009fa2:	b11b      	cbz	r3, 8009fac <__sinit+0x14>
 8009fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa8:	f7ff bff0 	b.w	8009f8c <__sinit_lock_release>
 8009fac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fb0:	6523      	str	r3, [r4, #80]	; 0x50
 8009fb2:	4b13      	ldr	r3, [pc, #76]	; (800a000 <__sinit+0x68>)
 8009fb4:	4a13      	ldr	r2, [pc, #76]	; (800a004 <__sinit+0x6c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	bf04      	itt	eq
 8009fbe:	2301      	moveq	r3, #1
 8009fc0:	61a3      	streq	r3, [r4, #24]
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f820 	bl	800a008 <__sfp>
 8009fc8:	6060      	str	r0, [r4, #4]
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 f81c 	bl	800a008 <__sfp>
 8009fd0:	60a0      	str	r0, [r4, #8]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f818 	bl	800a008 <__sfp>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	60e0      	str	r0, [r4, #12]
 8009fdc:	2104      	movs	r1, #4
 8009fde:	6860      	ldr	r0, [r4, #4]
 8009fe0:	f7ff ff82 	bl	8009ee8 <std>
 8009fe4:	68a0      	ldr	r0, [r4, #8]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	2109      	movs	r1, #9
 8009fea:	f7ff ff7d 	bl	8009ee8 <std>
 8009fee:	68e0      	ldr	r0, [r4, #12]
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	2112      	movs	r1, #18
 8009ff4:	f7ff ff78 	bl	8009ee8 <std>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	61a3      	str	r3, [r4, #24]
 8009ffc:	e7d2      	b.n	8009fa4 <__sinit+0xc>
 8009ffe:	bf00      	nop
 800a000:	0800cb9c 	.word	0x0800cb9c
 800a004:	08009f31 	.word	0x08009f31

0800a008 <__sfp>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	4607      	mov	r7, r0
 800a00c:	f7ff ffac 	bl	8009f68 <__sfp_lock_acquire>
 800a010:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <__sfp+0x84>)
 800a012:	681e      	ldr	r6, [r3, #0]
 800a014:	69b3      	ldr	r3, [r6, #24]
 800a016:	b913      	cbnz	r3, 800a01e <__sfp+0x16>
 800a018:	4630      	mov	r0, r6
 800a01a:	f7ff ffbd 	bl	8009f98 <__sinit>
 800a01e:	3648      	adds	r6, #72	; 0x48
 800a020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a024:	3b01      	subs	r3, #1
 800a026:	d503      	bpl.n	800a030 <__sfp+0x28>
 800a028:	6833      	ldr	r3, [r6, #0]
 800a02a:	b30b      	cbz	r3, 800a070 <__sfp+0x68>
 800a02c:	6836      	ldr	r6, [r6, #0]
 800a02e:	e7f7      	b.n	800a020 <__sfp+0x18>
 800a030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a034:	b9d5      	cbnz	r5, 800a06c <__sfp+0x64>
 800a036:	4b16      	ldr	r3, [pc, #88]	; (800a090 <__sfp+0x88>)
 800a038:	60e3      	str	r3, [r4, #12]
 800a03a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a03e:	6665      	str	r5, [r4, #100]	; 0x64
 800a040:	f000 f84c 	bl	800a0dc <__retarget_lock_init_recursive>
 800a044:	f7ff ff96 	bl	8009f74 <__sfp_lock_release>
 800a048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a050:	6025      	str	r5, [r4, #0]
 800a052:	61a5      	str	r5, [r4, #24]
 800a054:	2208      	movs	r2, #8
 800a056:	4629      	mov	r1, r5
 800a058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a05c:	f7fe fa48 	bl	80084f0 <memset>
 800a060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a068:	4620      	mov	r0, r4
 800a06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06c:	3468      	adds	r4, #104	; 0x68
 800a06e:	e7d9      	b.n	800a024 <__sfp+0x1c>
 800a070:	2104      	movs	r1, #4
 800a072:	4638      	mov	r0, r7
 800a074:	f7ff ff62 	bl	8009f3c <__sfmoreglue>
 800a078:	4604      	mov	r4, r0
 800a07a:	6030      	str	r0, [r6, #0]
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d1d5      	bne.n	800a02c <__sfp+0x24>
 800a080:	f7ff ff78 	bl	8009f74 <__sfp_lock_release>
 800a084:	230c      	movs	r3, #12
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	e7ee      	b.n	800a068 <__sfp+0x60>
 800a08a:	bf00      	nop
 800a08c:	0800cb9c 	.word	0x0800cb9c
 800a090:	ffff0001 	.word	0xffff0001

0800a094 <_fwalk_reent>:
 800a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a098:	4606      	mov	r6, r0
 800a09a:	4688      	mov	r8, r1
 800a09c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0a0:	2700      	movs	r7, #0
 800a0a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a0aa:	d505      	bpl.n	800a0b8 <_fwalk_reent+0x24>
 800a0ac:	6824      	ldr	r4, [r4, #0]
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	d1f7      	bne.n	800a0a2 <_fwalk_reent+0xe>
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b8:	89ab      	ldrh	r3, [r5, #12]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d907      	bls.n	800a0ce <_fwalk_reent+0x3a>
 800a0be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	d003      	beq.n	800a0ce <_fwalk_reent+0x3a>
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	47c0      	blx	r8
 800a0cc:	4307      	orrs	r7, r0
 800a0ce:	3568      	adds	r5, #104	; 0x68
 800a0d0:	e7e9      	b.n	800a0a6 <_fwalk_reent+0x12>
	...

0800a0d4 <_localeconv_r>:
 800a0d4:	4800      	ldr	r0, [pc, #0]	; (800a0d8 <_localeconv_r+0x4>)
 800a0d6:	4770      	bx	lr
 800a0d8:	2000019c 	.word	0x2000019c

0800a0dc <__retarget_lock_init_recursive>:
 800a0dc:	4770      	bx	lr

0800a0de <__retarget_lock_acquire_recursive>:
 800a0de:	4770      	bx	lr

0800a0e0 <__retarget_lock_release_recursive>:
 800a0e0:	4770      	bx	lr

0800a0e2 <__swhatbuf_r>:
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	460e      	mov	r6, r1
 800a0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	b096      	sub	sp, #88	; 0x58
 800a0ee:	4614      	mov	r4, r2
 800a0f0:	461d      	mov	r5, r3
 800a0f2:	da08      	bge.n	800a106 <__swhatbuf_r+0x24>
 800a0f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	602a      	str	r2, [r5, #0]
 800a0fc:	061a      	lsls	r2, r3, #24
 800a0fe:	d410      	bmi.n	800a122 <__swhatbuf_r+0x40>
 800a100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a104:	e00e      	b.n	800a124 <__swhatbuf_r+0x42>
 800a106:	466a      	mov	r2, sp
 800a108:	f000 fed2 	bl	800aeb0 <_fstat_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	dbf1      	blt.n	800a0f4 <__swhatbuf_r+0x12>
 800a110:	9a01      	ldr	r2, [sp, #4]
 800a112:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a116:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a11a:	425a      	negs	r2, r3
 800a11c:	415a      	adcs	r2, r3
 800a11e:	602a      	str	r2, [r5, #0]
 800a120:	e7ee      	b.n	800a100 <__swhatbuf_r+0x1e>
 800a122:	2340      	movs	r3, #64	; 0x40
 800a124:	2000      	movs	r0, #0
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	b016      	add	sp, #88	; 0x58
 800a12a:	bd70      	pop	{r4, r5, r6, pc}

0800a12c <__smakebuf_r>:
 800a12c:	898b      	ldrh	r3, [r1, #12]
 800a12e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a130:	079d      	lsls	r5, r3, #30
 800a132:	4606      	mov	r6, r0
 800a134:	460c      	mov	r4, r1
 800a136:	d507      	bpl.n	800a148 <__smakebuf_r+0x1c>
 800a138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	6123      	str	r3, [r4, #16]
 800a140:	2301      	movs	r3, #1
 800a142:	6163      	str	r3, [r4, #20]
 800a144:	b002      	add	sp, #8
 800a146:	bd70      	pop	{r4, r5, r6, pc}
 800a148:	ab01      	add	r3, sp, #4
 800a14a:	466a      	mov	r2, sp
 800a14c:	f7ff ffc9 	bl	800a0e2 <__swhatbuf_r>
 800a150:	9900      	ldr	r1, [sp, #0]
 800a152:	4605      	mov	r5, r0
 800a154:	4630      	mov	r0, r6
 800a156:	f000 fc37 	bl	800a9c8 <_malloc_r>
 800a15a:	b948      	cbnz	r0, 800a170 <__smakebuf_r+0x44>
 800a15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a160:	059a      	lsls	r2, r3, #22
 800a162:	d4ef      	bmi.n	800a144 <__smakebuf_r+0x18>
 800a164:	f023 0303 	bic.w	r3, r3, #3
 800a168:	f043 0302 	orr.w	r3, r3, #2
 800a16c:	81a3      	strh	r3, [r4, #12]
 800a16e:	e7e3      	b.n	800a138 <__smakebuf_r+0xc>
 800a170:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <__smakebuf_r+0x7c>)
 800a172:	62b3      	str	r3, [r6, #40]	; 0x28
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	6020      	str	r0, [r4, #0]
 800a178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	9b00      	ldr	r3, [sp, #0]
 800a180:	6163      	str	r3, [r4, #20]
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	6120      	str	r0, [r4, #16]
 800a186:	b15b      	cbz	r3, 800a1a0 <__smakebuf_r+0x74>
 800a188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a18c:	4630      	mov	r0, r6
 800a18e:	f000 fea1 	bl	800aed4 <_isatty_r>
 800a192:	b128      	cbz	r0, 800a1a0 <__smakebuf_r+0x74>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f023 0303 	bic.w	r3, r3, #3
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	89a0      	ldrh	r0, [r4, #12]
 800a1a2:	4305      	orrs	r5, r0
 800a1a4:	81a5      	strh	r5, [r4, #12]
 800a1a6:	e7cd      	b.n	800a144 <__smakebuf_r+0x18>
 800a1a8:	08009f31 	.word	0x08009f31

0800a1ac <malloc>:
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <malloc+0xc>)
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	f000 bc09 	b.w	800a9c8 <_malloc_r>
 800a1b6:	bf00      	nop
 800a1b8:	20000048 	.word	0x20000048

0800a1bc <_Balloc>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	b976      	cbnz	r6, 800a1e4 <_Balloc+0x28>
 800a1c6:	2010      	movs	r0, #16
 800a1c8:	f7ff fff0 	bl	800a1ac <malloc>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	6260      	str	r0, [r4, #36]	; 0x24
 800a1d0:	b920      	cbnz	r0, 800a1dc <_Balloc+0x20>
 800a1d2:	4b18      	ldr	r3, [pc, #96]	; (800a234 <_Balloc+0x78>)
 800a1d4:	4818      	ldr	r0, [pc, #96]	; (800a238 <_Balloc+0x7c>)
 800a1d6:	2166      	movs	r1, #102	; 0x66
 800a1d8:	f000 fe2a 	bl	800ae30 <__assert_func>
 800a1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e0:	6006      	str	r6, [r0, #0]
 800a1e2:	60c6      	str	r6, [r0, #12]
 800a1e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1e6:	68f3      	ldr	r3, [r6, #12]
 800a1e8:	b183      	cbz	r3, 800a20c <_Balloc+0x50>
 800a1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1f2:	b9b8      	cbnz	r0, 800a224 <_Balloc+0x68>
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1fa:	1d72      	adds	r2, r6, #5
 800a1fc:	0092      	lsls	r2, r2, #2
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 fb60 	bl	800a8c4 <_calloc_r>
 800a204:	b160      	cbz	r0, 800a220 <_Balloc+0x64>
 800a206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a20a:	e00e      	b.n	800a22a <_Balloc+0x6e>
 800a20c:	2221      	movs	r2, #33	; 0x21
 800a20e:	2104      	movs	r1, #4
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fb57 	bl	800a8c4 <_calloc_r>
 800a216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a218:	60f0      	str	r0, [r6, #12]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e4      	bne.n	800a1ea <_Balloc+0x2e>
 800a220:	2000      	movs	r0, #0
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	6802      	ldr	r2, [r0, #0]
 800a226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a22a:	2300      	movs	r3, #0
 800a22c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a230:	e7f7      	b.n	800a222 <_Balloc+0x66>
 800a232:	bf00      	nop
 800a234:	0800cbe1 	.word	0x0800cbe1
 800a238:	0800ccc4 	.word	0x0800ccc4

0800a23c <_Bfree>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a240:	4605      	mov	r5, r0
 800a242:	460c      	mov	r4, r1
 800a244:	b976      	cbnz	r6, 800a264 <_Bfree+0x28>
 800a246:	2010      	movs	r0, #16
 800a248:	f7ff ffb0 	bl	800a1ac <malloc>
 800a24c:	4602      	mov	r2, r0
 800a24e:	6268      	str	r0, [r5, #36]	; 0x24
 800a250:	b920      	cbnz	r0, 800a25c <_Bfree+0x20>
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <_Bfree+0x3c>)
 800a254:	4809      	ldr	r0, [pc, #36]	; (800a27c <_Bfree+0x40>)
 800a256:	218a      	movs	r1, #138	; 0x8a
 800a258:	f000 fdea 	bl	800ae30 <__assert_func>
 800a25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a260:	6006      	str	r6, [r0, #0]
 800a262:	60c6      	str	r6, [r0, #12]
 800a264:	b13c      	cbz	r4, 800a276 <_Bfree+0x3a>
 800a266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a268:	6862      	ldr	r2, [r4, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a270:	6021      	str	r1, [r4, #0]
 800a272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	0800cbe1 	.word	0x0800cbe1
 800a27c:	0800ccc4 	.word	0x0800ccc4

0800a280 <__multadd>:
 800a280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a284:	690d      	ldr	r5, [r1, #16]
 800a286:	4607      	mov	r7, r0
 800a288:	460c      	mov	r4, r1
 800a28a:	461e      	mov	r6, r3
 800a28c:	f101 0c14 	add.w	ip, r1, #20
 800a290:	2000      	movs	r0, #0
 800a292:	f8dc 3000 	ldr.w	r3, [ip]
 800a296:	b299      	uxth	r1, r3
 800a298:	fb02 6101 	mla	r1, r2, r1, r6
 800a29c:	0c1e      	lsrs	r6, r3, #16
 800a29e:	0c0b      	lsrs	r3, r1, #16
 800a2a0:	fb02 3306 	mla	r3, r2, r6, r3
 800a2a4:	b289      	uxth	r1, r1
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2ac:	4285      	cmp	r5, r0
 800a2ae:	f84c 1b04 	str.w	r1, [ip], #4
 800a2b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2b6:	dcec      	bgt.n	800a292 <__multadd+0x12>
 800a2b8:	b30e      	cbz	r6, 800a2fe <__multadd+0x7e>
 800a2ba:	68a3      	ldr	r3, [r4, #8]
 800a2bc:	42ab      	cmp	r3, r5
 800a2be:	dc19      	bgt.n	800a2f4 <__multadd+0x74>
 800a2c0:	6861      	ldr	r1, [r4, #4]
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	3101      	adds	r1, #1
 800a2c6:	f7ff ff79 	bl	800a1bc <_Balloc>
 800a2ca:	4680      	mov	r8, r0
 800a2cc:	b928      	cbnz	r0, 800a2da <__multadd+0x5a>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	4b0c      	ldr	r3, [pc, #48]	; (800a304 <__multadd+0x84>)
 800a2d2:	480d      	ldr	r0, [pc, #52]	; (800a308 <__multadd+0x88>)
 800a2d4:	21b5      	movs	r1, #181	; 0xb5
 800a2d6:	f000 fdab 	bl	800ae30 <__assert_func>
 800a2da:	6922      	ldr	r2, [r4, #16]
 800a2dc:	3202      	adds	r2, #2
 800a2de:	f104 010c 	add.w	r1, r4, #12
 800a2e2:	0092      	lsls	r2, r2, #2
 800a2e4:	300c      	adds	r0, #12
 800a2e6:	f7fe f8f5 	bl	80084d4 <memcpy>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff ffa5 	bl	800a23c <_Bfree>
 800a2f2:	4644      	mov	r4, r8
 800a2f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	615e      	str	r6, [r3, #20]
 800a2fc:	6125      	str	r5, [r4, #16]
 800a2fe:	4620      	mov	r0, r4
 800a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a304:	0800cc53 	.word	0x0800cc53
 800a308:	0800ccc4 	.word	0x0800ccc4

0800a30c <__hi0bits>:
 800a30c:	0c03      	lsrs	r3, r0, #16
 800a30e:	041b      	lsls	r3, r3, #16
 800a310:	b9d3      	cbnz	r3, 800a348 <__hi0bits+0x3c>
 800a312:	0400      	lsls	r0, r0, #16
 800a314:	2310      	movs	r3, #16
 800a316:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a31a:	bf04      	itt	eq
 800a31c:	0200      	lsleq	r0, r0, #8
 800a31e:	3308      	addeq	r3, #8
 800a320:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a324:	bf04      	itt	eq
 800a326:	0100      	lsleq	r0, r0, #4
 800a328:	3304      	addeq	r3, #4
 800a32a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a32e:	bf04      	itt	eq
 800a330:	0080      	lsleq	r0, r0, #2
 800a332:	3302      	addeq	r3, #2
 800a334:	2800      	cmp	r0, #0
 800a336:	db05      	blt.n	800a344 <__hi0bits+0x38>
 800a338:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a33c:	f103 0301 	add.w	r3, r3, #1
 800a340:	bf08      	it	eq
 800a342:	2320      	moveq	r3, #32
 800a344:	4618      	mov	r0, r3
 800a346:	4770      	bx	lr
 800a348:	2300      	movs	r3, #0
 800a34a:	e7e4      	b.n	800a316 <__hi0bits+0xa>

0800a34c <__lo0bits>:
 800a34c:	6803      	ldr	r3, [r0, #0]
 800a34e:	f013 0207 	ands.w	r2, r3, #7
 800a352:	4601      	mov	r1, r0
 800a354:	d00b      	beq.n	800a36e <__lo0bits+0x22>
 800a356:	07da      	lsls	r2, r3, #31
 800a358:	d423      	bmi.n	800a3a2 <__lo0bits+0x56>
 800a35a:	0798      	lsls	r0, r3, #30
 800a35c:	bf49      	itett	mi
 800a35e:	085b      	lsrmi	r3, r3, #1
 800a360:	089b      	lsrpl	r3, r3, #2
 800a362:	2001      	movmi	r0, #1
 800a364:	600b      	strmi	r3, [r1, #0]
 800a366:	bf5c      	itt	pl
 800a368:	600b      	strpl	r3, [r1, #0]
 800a36a:	2002      	movpl	r0, #2
 800a36c:	4770      	bx	lr
 800a36e:	b298      	uxth	r0, r3
 800a370:	b9a8      	cbnz	r0, 800a39e <__lo0bits+0x52>
 800a372:	0c1b      	lsrs	r3, r3, #16
 800a374:	2010      	movs	r0, #16
 800a376:	b2da      	uxtb	r2, r3
 800a378:	b90a      	cbnz	r2, 800a37e <__lo0bits+0x32>
 800a37a:	3008      	adds	r0, #8
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	071a      	lsls	r2, r3, #28
 800a380:	bf04      	itt	eq
 800a382:	091b      	lsreq	r3, r3, #4
 800a384:	3004      	addeq	r0, #4
 800a386:	079a      	lsls	r2, r3, #30
 800a388:	bf04      	itt	eq
 800a38a:	089b      	lsreq	r3, r3, #2
 800a38c:	3002      	addeq	r0, #2
 800a38e:	07da      	lsls	r2, r3, #31
 800a390:	d403      	bmi.n	800a39a <__lo0bits+0x4e>
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	f100 0001 	add.w	r0, r0, #1
 800a398:	d005      	beq.n	800a3a6 <__lo0bits+0x5a>
 800a39a:	600b      	str	r3, [r1, #0]
 800a39c:	4770      	bx	lr
 800a39e:	4610      	mov	r0, r2
 800a3a0:	e7e9      	b.n	800a376 <__lo0bits+0x2a>
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	4770      	bx	lr
 800a3a6:	2020      	movs	r0, #32
 800a3a8:	4770      	bx	lr
	...

0800a3ac <__i2b>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	f7ff ff03 	bl	800a1bc <_Balloc>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	b928      	cbnz	r0, 800a3c6 <__i2b+0x1a>
 800a3ba:	4b05      	ldr	r3, [pc, #20]	; (800a3d0 <__i2b+0x24>)
 800a3bc:	4805      	ldr	r0, [pc, #20]	; (800a3d4 <__i2b+0x28>)
 800a3be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3c2:	f000 fd35 	bl	800ae30 <__assert_func>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	6144      	str	r4, [r0, #20]
 800a3ca:	6103      	str	r3, [r0, #16]
 800a3cc:	bd10      	pop	{r4, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800cc53 	.word	0x0800cc53
 800a3d4:	0800ccc4 	.word	0x0800ccc4

0800a3d8 <__multiply>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	4691      	mov	r9, r2
 800a3de:	690a      	ldr	r2, [r1, #16]
 800a3e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	bfb8      	it	lt
 800a3e8:	460b      	movlt	r3, r1
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	bfbc      	itt	lt
 800a3ee:	464c      	movlt	r4, r9
 800a3f0:	4699      	movlt	r9, r3
 800a3f2:	6927      	ldr	r7, [r4, #16]
 800a3f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3f8:	68a3      	ldr	r3, [r4, #8]
 800a3fa:	6861      	ldr	r1, [r4, #4]
 800a3fc:	eb07 060a 	add.w	r6, r7, sl
 800a400:	42b3      	cmp	r3, r6
 800a402:	b085      	sub	sp, #20
 800a404:	bfb8      	it	lt
 800a406:	3101      	addlt	r1, #1
 800a408:	f7ff fed8 	bl	800a1bc <_Balloc>
 800a40c:	b930      	cbnz	r0, 800a41c <__multiply+0x44>
 800a40e:	4602      	mov	r2, r0
 800a410:	4b44      	ldr	r3, [pc, #272]	; (800a524 <__multiply+0x14c>)
 800a412:	4845      	ldr	r0, [pc, #276]	; (800a528 <__multiply+0x150>)
 800a414:	f240 115d 	movw	r1, #349	; 0x15d
 800a418:	f000 fd0a 	bl	800ae30 <__assert_func>
 800a41c:	f100 0514 	add.w	r5, r0, #20
 800a420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a424:	462b      	mov	r3, r5
 800a426:	2200      	movs	r2, #0
 800a428:	4543      	cmp	r3, r8
 800a42a:	d321      	bcc.n	800a470 <__multiply+0x98>
 800a42c:	f104 0314 	add.w	r3, r4, #20
 800a430:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a434:	f109 0314 	add.w	r3, r9, #20
 800a438:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a43c:	9202      	str	r2, [sp, #8]
 800a43e:	1b3a      	subs	r2, r7, r4
 800a440:	3a15      	subs	r2, #21
 800a442:	f022 0203 	bic.w	r2, r2, #3
 800a446:	3204      	adds	r2, #4
 800a448:	f104 0115 	add.w	r1, r4, #21
 800a44c:	428f      	cmp	r7, r1
 800a44e:	bf38      	it	cc
 800a450:	2204      	movcc	r2, #4
 800a452:	9201      	str	r2, [sp, #4]
 800a454:	9a02      	ldr	r2, [sp, #8]
 800a456:	9303      	str	r3, [sp, #12]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d80c      	bhi.n	800a476 <__multiply+0x9e>
 800a45c:	2e00      	cmp	r6, #0
 800a45e:	dd03      	ble.n	800a468 <__multiply+0x90>
 800a460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a464:	2b00      	cmp	r3, #0
 800a466:	d05a      	beq.n	800a51e <__multiply+0x146>
 800a468:	6106      	str	r6, [r0, #16]
 800a46a:	b005      	add	sp, #20
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	f843 2b04 	str.w	r2, [r3], #4
 800a474:	e7d8      	b.n	800a428 <__multiply+0x50>
 800a476:	f8b3 a000 	ldrh.w	sl, [r3]
 800a47a:	f1ba 0f00 	cmp.w	sl, #0
 800a47e:	d024      	beq.n	800a4ca <__multiply+0xf2>
 800a480:	f104 0e14 	add.w	lr, r4, #20
 800a484:	46a9      	mov	r9, r5
 800a486:	f04f 0c00 	mov.w	ip, #0
 800a48a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a48e:	f8d9 1000 	ldr.w	r1, [r9]
 800a492:	fa1f fb82 	uxth.w	fp, r2
 800a496:	b289      	uxth	r1, r1
 800a498:	fb0a 110b 	mla	r1, sl, fp, r1
 800a49c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4a4:	4461      	add	r1, ip
 800a4a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4b2:	b289      	uxth	r1, r1
 800a4b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4b8:	4577      	cmp	r7, lr
 800a4ba:	f849 1b04 	str.w	r1, [r9], #4
 800a4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4c2:	d8e2      	bhi.n	800a48a <__multiply+0xb2>
 800a4c4:	9a01      	ldr	r2, [sp, #4]
 800a4c6:	f845 c002 	str.w	ip, [r5, r2]
 800a4ca:	9a03      	ldr	r2, [sp, #12]
 800a4cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	f1b9 0f00 	cmp.w	r9, #0
 800a4d6:	d020      	beq.n	800a51a <__multiply+0x142>
 800a4d8:	6829      	ldr	r1, [r5, #0]
 800a4da:	f104 0c14 	add.w	ip, r4, #20
 800a4de:	46ae      	mov	lr, r5
 800a4e0:	f04f 0a00 	mov.w	sl, #0
 800a4e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a4e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a4f0:	4492      	add	sl, r2
 800a4f2:	b289      	uxth	r1, r1
 800a4f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a4fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a500:	f8be 1000 	ldrh.w	r1, [lr]
 800a504:	0c12      	lsrs	r2, r2, #16
 800a506:	fb09 1102 	mla	r1, r9, r2, r1
 800a50a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a50e:	4567      	cmp	r7, ip
 800a510:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a514:	d8e6      	bhi.n	800a4e4 <__multiply+0x10c>
 800a516:	9a01      	ldr	r2, [sp, #4]
 800a518:	50a9      	str	r1, [r5, r2]
 800a51a:	3504      	adds	r5, #4
 800a51c:	e79a      	b.n	800a454 <__multiply+0x7c>
 800a51e:	3e01      	subs	r6, #1
 800a520:	e79c      	b.n	800a45c <__multiply+0x84>
 800a522:	bf00      	nop
 800a524:	0800cc53 	.word	0x0800cc53
 800a528:	0800ccc4 	.word	0x0800ccc4

0800a52c <__pow5mult>:
 800a52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a530:	4615      	mov	r5, r2
 800a532:	f012 0203 	ands.w	r2, r2, #3
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	d007      	beq.n	800a54c <__pow5mult+0x20>
 800a53c:	4c25      	ldr	r4, [pc, #148]	; (800a5d4 <__pow5mult+0xa8>)
 800a53e:	3a01      	subs	r2, #1
 800a540:	2300      	movs	r3, #0
 800a542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a546:	f7ff fe9b 	bl	800a280 <__multadd>
 800a54a:	4607      	mov	r7, r0
 800a54c:	10ad      	asrs	r5, r5, #2
 800a54e:	d03d      	beq.n	800a5cc <__pow5mult+0xa0>
 800a550:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a552:	b97c      	cbnz	r4, 800a574 <__pow5mult+0x48>
 800a554:	2010      	movs	r0, #16
 800a556:	f7ff fe29 	bl	800a1ac <malloc>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6270      	str	r0, [r6, #36]	; 0x24
 800a55e:	b928      	cbnz	r0, 800a56c <__pow5mult+0x40>
 800a560:	4b1d      	ldr	r3, [pc, #116]	; (800a5d8 <__pow5mult+0xac>)
 800a562:	481e      	ldr	r0, [pc, #120]	; (800a5dc <__pow5mult+0xb0>)
 800a564:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a568:	f000 fc62 	bl	800ae30 <__assert_func>
 800a56c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a570:	6004      	str	r4, [r0, #0]
 800a572:	60c4      	str	r4, [r0, #12]
 800a574:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a57c:	b94c      	cbnz	r4, 800a592 <__pow5mult+0x66>
 800a57e:	f240 2171 	movw	r1, #625	; 0x271
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff ff12 	bl	800a3ac <__i2b>
 800a588:	2300      	movs	r3, #0
 800a58a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a58e:	4604      	mov	r4, r0
 800a590:	6003      	str	r3, [r0, #0]
 800a592:	f04f 0900 	mov.w	r9, #0
 800a596:	07eb      	lsls	r3, r5, #31
 800a598:	d50a      	bpl.n	800a5b0 <__pow5mult+0x84>
 800a59a:	4639      	mov	r1, r7
 800a59c:	4622      	mov	r2, r4
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ff1a 	bl	800a3d8 <__multiply>
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7ff fe47 	bl	800a23c <_Bfree>
 800a5ae:	4647      	mov	r7, r8
 800a5b0:	106d      	asrs	r5, r5, #1
 800a5b2:	d00b      	beq.n	800a5cc <__pow5mult+0xa0>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	b938      	cbnz	r0, 800a5c8 <__pow5mult+0x9c>
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff ff0b 	bl	800a3d8 <__multiply>
 800a5c2:	6020      	str	r0, [r4, #0]
 800a5c4:	f8c0 9000 	str.w	r9, [r0]
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	e7e4      	b.n	800a596 <__pow5mult+0x6a>
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	bf00      	nop
 800a5d4:	0800ce10 	.word	0x0800ce10
 800a5d8:	0800cbe1 	.word	0x0800cbe1
 800a5dc:	0800ccc4 	.word	0x0800ccc4

0800a5e0 <__lshift>:
 800a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	6849      	ldr	r1, [r1, #4]
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	4691      	mov	r9, r2
 800a5f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5f8:	f108 0601 	add.w	r6, r8, #1
 800a5fc:	42b3      	cmp	r3, r6
 800a5fe:	db0b      	blt.n	800a618 <__lshift+0x38>
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff fddb 	bl	800a1bc <_Balloc>
 800a606:	4605      	mov	r5, r0
 800a608:	b948      	cbnz	r0, 800a61e <__lshift+0x3e>
 800a60a:	4602      	mov	r2, r0
 800a60c:	4b2a      	ldr	r3, [pc, #168]	; (800a6b8 <__lshift+0xd8>)
 800a60e:	482b      	ldr	r0, [pc, #172]	; (800a6bc <__lshift+0xdc>)
 800a610:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a614:	f000 fc0c 	bl	800ae30 <__assert_func>
 800a618:	3101      	adds	r1, #1
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	e7ee      	b.n	800a5fc <__lshift+0x1c>
 800a61e:	2300      	movs	r3, #0
 800a620:	f100 0114 	add.w	r1, r0, #20
 800a624:	f100 0210 	add.w	r2, r0, #16
 800a628:	4618      	mov	r0, r3
 800a62a:	4553      	cmp	r3, sl
 800a62c:	db37      	blt.n	800a69e <__lshift+0xbe>
 800a62e:	6920      	ldr	r0, [r4, #16]
 800a630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a634:	f104 0314 	add.w	r3, r4, #20
 800a638:	f019 091f 	ands.w	r9, r9, #31
 800a63c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a640:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a644:	d02f      	beq.n	800a6a6 <__lshift+0xc6>
 800a646:	f1c9 0e20 	rsb	lr, r9, #32
 800a64a:	468a      	mov	sl, r1
 800a64c:	f04f 0c00 	mov.w	ip, #0
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	fa02 f209 	lsl.w	r2, r2, r9
 800a656:	ea42 020c 	orr.w	r2, r2, ip
 800a65a:	f84a 2b04 	str.w	r2, [sl], #4
 800a65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a662:	4298      	cmp	r0, r3
 800a664:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a668:	d8f2      	bhi.n	800a650 <__lshift+0x70>
 800a66a:	1b03      	subs	r3, r0, r4
 800a66c:	3b15      	subs	r3, #21
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	3304      	adds	r3, #4
 800a674:	f104 0215 	add.w	r2, r4, #21
 800a678:	4290      	cmp	r0, r2
 800a67a:	bf38      	it	cc
 800a67c:	2304      	movcc	r3, #4
 800a67e:	f841 c003 	str.w	ip, [r1, r3]
 800a682:	f1bc 0f00 	cmp.w	ip, #0
 800a686:	d001      	beq.n	800a68c <__lshift+0xac>
 800a688:	f108 0602 	add.w	r6, r8, #2
 800a68c:	3e01      	subs	r6, #1
 800a68e:	4638      	mov	r0, r7
 800a690:	612e      	str	r6, [r5, #16]
 800a692:	4621      	mov	r1, r4
 800a694:	f7ff fdd2 	bl	800a23c <_Bfree>
 800a698:	4628      	mov	r0, r5
 800a69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	e7c1      	b.n	800a62a <__lshift+0x4a>
 800a6a6:	3904      	subs	r1, #4
 800a6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6b0:	4298      	cmp	r0, r3
 800a6b2:	d8f9      	bhi.n	800a6a8 <__lshift+0xc8>
 800a6b4:	e7ea      	b.n	800a68c <__lshift+0xac>
 800a6b6:	bf00      	nop
 800a6b8:	0800cc53 	.word	0x0800cc53
 800a6bc:	0800ccc4 	.word	0x0800ccc4

0800a6c0 <__mcmp>:
 800a6c0:	b530      	push	{r4, r5, lr}
 800a6c2:	6902      	ldr	r2, [r0, #16]
 800a6c4:	690c      	ldr	r4, [r1, #16]
 800a6c6:	1b12      	subs	r2, r2, r4
 800a6c8:	d10e      	bne.n	800a6e8 <__mcmp+0x28>
 800a6ca:	f100 0314 	add.w	r3, r0, #20
 800a6ce:	3114      	adds	r1, #20
 800a6d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6e0:	42a5      	cmp	r5, r4
 800a6e2:	d003      	beq.n	800a6ec <__mcmp+0x2c>
 800a6e4:	d305      	bcc.n	800a6f2 <__mcmp+0x32>
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	bd30      	pop	{r4, r5, pc}
 800a6ec:	4283      	cmp	r3, r0
 800a6ee:	d3f3      	bcc.n	800a6d8 <__mcmp+0x18>
 800a6f0:	e7fa      	b.n	800a6e8 <__mcmp+0x28>
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f6:	e7f7      	b.n	800a6e8 <__mcmp+0x28>

0800a6f8 <__mdiff>:
 800a6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	4606      	mov	r6, r0
 800a700:	4611      	mov	r1, r2
 800a702:	4620      	mov	r0, r4
 800a704:	4690      	mov	r8, r2
 800a706:	f7ff ffdb 	bl	800a6c0 <__mcmp>
 800a70a:	1e05      	subs	r5, r0, #0
 800a70c:	d110      	bne.n	800a730 <__mdiff+0x38>
 800a70e:	4629      	mov	r1, r5
 800a710:	4630      	mov	r0, r6
 800a712:	f7ff fd53 	bl	800a1bc <_Balloc>
 800a716:	b930      	cbnz	r0, 800a726 <__mdiff+0x2e>
 800a718:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <__mdiff+0x10c>)
 800a71a:	4602      	mov	r2, r0
 800a71c:	f240 2132 	movw	r1, #562	; 0x232
 800a720:	4839      	ldr	r0, [pc, #228]	; (800a808 <__mdiff+0x110>)
 800a722:	f000 fb85 	bl	800ae30 <__assert_func>
 800a726:	2301      	movs	r3, #1
 800a728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a72c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a730:	bfa4      	itt	ge
 800a732:	4643      	movge	r3, r8
 800a734:	46a0      	movge	r8, r4
 800a736:	4630      	mov	r0, r6
 800a738:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a73c:	bfa6      	itte	ge
 800a73e:	461c      	movge	r4, r3
 800a740:	2500      	movge	r5, #0
 800a742:	2501      	movlt	r5, #1
 800a744:	f7ff fd3a 	bl	800a1bc <_Balloc>
 800a748:	b920      	cbnz	r0, 800a754 <__mdiff+0x5c>
 800a74a:	4b2e      	ldr	r3, [pc, #184]	; (800a804 <__mdiff+0x10c>)
 800a74c:	4602      	mov	r2, r0
 800a74e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a752:	e7e5      	b.n	800a720 <__mdiff+0x28>
 800a754:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a758:	6926      	ldr	r6, [r4, #16]
 800a75a:	60c5      	str	r5, [r0, #12]
 800a75c:	f104 0914 	add.w	r9, r4, #20
 800a760:	f108 0514 	add.w	r5, r8, #20
 800a764:	f100 0e14 	add.w	lr, r0, #20
 800a768:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a76c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a770:	f108 0210 	add.w	r2, r8, #16
 800a774:	46f2      	mov	sl, lr
 800a776:	2100      	movs	r1, #0
 800a778:	f859 3b04 	ldr.w	r3, [r9], #4
 800a77c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a780:	fa1f f883 	uxth.w	r8, r3
 800a784:	fa11 f18b 	uxtah	r1, r1, fp
 800a788:	0c1b      	lsrs	r3, r3, #16
 800a78a:	eba1 0808 	sub.w	r8, r1, r8
 800a78e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a792:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a796:	fa1f f888 	uxth.w	r8, r8
 800a79a:	1419      	asrs	r1, r3, #16
 800a79c:	454e      	cmp	r6, r9
 800a79e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a7a6:	d8e7      	bhi.n	800a778 <__mdiff+0x80>
 800a7a8:	1b33      	subs	r3, r6, r4
 800a7aa:	3b15      	subs	r3, #21
 800a7ac:	f023 0303 	bic.w	r3, r3, #3
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	3415      	adds	r4, #21
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	bf38      	it	cc
 800a7b8:	2304      	movcc	r3, #4
 800a7ba:	441d      	add	r5, r3
 800a7bc:	4473      	add	r3, lr
 800a7be:	469e      	mov	lr, r3
 800a7c0:	462e      	mov	r6, r5
 800a7c2:	4566      	cmp	r6, ip
 800a7c4:	d30e      	bcc.n	800a7e4 <__mdiff+0xec>
 800a7c6:	f10c 0203 	add.w	r2, ip, #3
 800a7ca:	1b52      	subs	r2, r2, r5
 800a7cc:	f022 0203 	bic.w	r2, r2, #3
 800a7d0:	3d03      	subs	r5, #3
 800a7d2:	45ac      	cmp	ip, r5
 800a7d4:	bf38      	it	cc
 800a7d6:	2200      	movcc	r2, #0
 800a7d8:	441a      	add	r2, r3
 800a7da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7de:	b17b      	cbz	r3, 800a800 <__mdiff+0x108>
 800a7e0:	6107      	str	r7, [r0, #16]
 800a7e2:	e7a3      	b.n	800a72c <__mdiff+0x34>
 800a7e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7e8:	fa11 f288 	uxtah	r2, r1, r8
 800a7ec:	1414      	asrs	r4, r2, #16
 800a7ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7f2:	b292      	uxth	r2, r2
 800a7f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a7fc:	1421      	asrs	r1, r4, #16
 800a7fe:	e7e0      	b.n	800a7c2 <__mdiff+0xca>
 800a800:	3f01      	subs	r7, #1
 800a802:	e7ea      	b.n	800a7da <__mdiff+0xe2>
 800a804:	0800cc53 	.word	0x0800cc53
 800a808:	0800ccc4 	.word	0x0800ccc4

0800a80c <__d2b>:
 800a80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a810:	4689      	mov	r9, r1
 800a812:	2101      	movs	r1, #1
 800a814:	ec57 6b10 	vmov	r6, r7, d0
 800a818:	4690      	mov	r8, r2
 800a81a:	f7ff fccf 	bl	800a1bc <_Balloc>
 800a81e:	4604      	mov	r4, r0
 800a820:	b930      	cbnz	r0, 800a830 <__d2b+0x24>
 800a822:	4602      	mov	r2, r0
 800a824:	4b25      	ldr	r3, [pc, #148]	; (800a8bc <__d2b+0xb0>)
 800a826:	4826      	ldr	r0, [pc, #152]	; (800a8c0 <__d2b+0xb4>)
 800a828:	f240 310a 	movw	r1, #778	; 0x30a
 800a82c:	f000 fb00 	bl	800ae30 <__assert_func>
 800a830:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a834:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a838:	bb35      	cbnz	r5, 800a888 <__d2b+0x7c>
 800a83a:	2e00      	cmp	r6, #0
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	d028      	beq.n	800a892 <__d2b+0x86>
 800a840:	4668      	mov	r0, sp
 800a842:	9600      	str	r6, [sp, #0]
 800a844:	f7ff fd82 	bl	800a34c <__lo0bits>
 800a848:	9900      	ldr	r1, [sp, #0]
 800a84a:	b300      	cbz	r0, 800a88e <__d2b+0x82>
 800a84c:	9a01      	ldr	r2, [sp, #4]
 800a84e:	f1c0 0320 	rsb	r3, r0, #32
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
 800a856:	430b      	orrs	r3, r1
 800a858:	40c2      	lsrs	r2, r0
 800a85a:	6163      	str	r3, [r4, #20]
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	61a3      	str	r3, [r4, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	bf14      	ite	ne
 800a866:	2202      	movne	r2, #2
 800a868:	2201      	moveq	r2, #1
 800a86a:	6122      	str	r2, [r4, #16]
 800a86c:	b1d5      	cbz	r5, 800a8a4 <__d2b+0x98>
 800a86e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a872:	4405      	add	r5, r0
 800a874:	f8c9 5000 	str.w	r5, [r9]
 800a878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a87c:	f8c8 0000 	str.w	r0, [r8]
 800a880:	4620      	mov	r0, r4
 800a882:	b003      	add	sp, #12
 800a884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a88c:	e7d5      	b.n	800a83a <__d2b+0x2e>
 800a88e:	6161      	str	r1, [r4, #20]
 800a890:	e7e5      	b.n	800a85e <__d2b+0x52>
 800a892:	a801      	add	r0, sp, #4
 800a894:	f7ff fd5a 	bl	800a34c <__lo0bits>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	6163      	str	r3, [r4, #20]
 800a89c:	2201      	movs	r2, #1
 800a89e:	6122      	str	r2, [r4, #16]
 800a8a0:	3020      	adds	r0, #32
 800a8a2:	e7e3      	b.n	800a86c <__d2b+0x60>
 800a8a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8ac:	f8c9 0000 	str.w	r0, [r9]
 800a8b0:	6918      	ldr	r0, [r3, #16]
 800a8b2:	f7ff fd2b 	bl	800a30c <__hi0bits>
 800a8b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8ba:	e7df      	b.n	800a87c <__d2b+0x70>
 800a8bc:	0800cc53 	.word	0x0800cc53
 800a8c0:	0800ccc4 	.word	0x0800ccc4

0800a8c4 <_calloc_r>:
 800a8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a8ca:	b94c      	cbnz	r4, 800a8e0 <_calloc_r+0x1c>
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	9201      	str	r2, [sp, #4]
 800a8d0:	f000 f87a 	bl	800a9c8 <_malloc_r>
 800a8d4:	9a01      	ldr	r2, [sp, #4]
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	b930      	cbnz	r0, 800a8e8 <_calloc_r+0x24>
 800a8da:	4628      	mov	r0, r5
 800a8dc:	b003      	add	sp, #12
 800a8de:	bd30      	pop	{r4, r5, pc}
 800a8e0:	220c      	movs	r2, #12
 800a8e2:	6002      	str	r2, [r0, #0]
 800a8e4:	2500      	movs	r5, #0
 800a8e6:	e7f8      	b.n	800a8da <_calloc_r+0x16>
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	f7fd fe01 	bl	80084f0 <memset>
 800a8ee:	e7f4      	b.n	800a8da <_calloc_r+0x16>

0800a8f0 <_free_r>:
 800a8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8f2:	2900      	cmp	r1, #0
 800a8f4:	d044      	beq.n	800a980 <_free_r+0x90>
 800a8f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fa:	9001      	str	r0, [sp, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a902:	bfb8      	it	lt
 800a904:	18e4      	addlt	r4, r4, r3
 800a906:	f000 fb19 	bl	800af3c <__malloc_lock>
 800a90a:	4a1e      	ldr	r2, [pc, #120]	; (800a984 <_free_r+0x94>)
 800a90c:	9801      	ldr	r0, [sp, #4]
 800a90e:	6813      	ldr	r3, [r2, #0]
 800a910:	b933      	cbnz	r3, 800a920 <_free_r+0x30>
 800a912:	6063      	str	r3, [r4, #4]
 800a914:	6014      	str	r4, [r2, #0]
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a91c:	f000 bb14 	b.w	800af48 <__malloc_unlock>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d908      	bls.n	800a936 <_free_r+0x46>
 800a924:	6825      	ldr	r5, [r4, #0]
 800a926:	1961      	adds	r1, r4, r5
 800a928:	428b      	cmp	r3, r1
 800a92a:	bf01      	itttt	eq
 800a92c:	6819      	ldreq	r1, [r3, #0]
 800a92e:	685b      	ldreq	r3, [r3, #4]
 800a930:	1949      	addeq	r1, r1, r5
 800a932:	6021      	streq	r1, [r4, #0]
 800a934:	e7ed      	b.n	800a912 <_free_r+0x22>
 800a936:	461a      	mov	r2, r3
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	b10b      	cbz	r3, 800a940 <_free_r+0x50>
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	d9fa      	bls.n	800a936 <_free_r+0x46>
 800a940:	6811      	ldr	r1, [r2, #0]
 800a942:	1855      	adds	r5, r2, r1
 800a944:	42a5      	cmp	r5, r4
 800a946:	d10b      	bne.n	800a960 <_free_r+0x70>
 800a948:	6824      	ldr	r4, [r4, #0]
 800a94a:	4421      	add	r1, r4
 800a94c:	1854      	adds	r4, r2, r1
 800a94e:	42a3      	cmp	r3, r4
 800a950:	6011      	str	r1, [r2, #0]
 800a952:	d1e0      	bne.n	800a916 <_free_r+0x26>
 800a954:	681c      	ldr	r4, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	6053      	str	r3, [r2, #4]
 800a95a:	4421      	add	r1, r4
 800a95c:	6011      	str	r1, [r2, #0]
 800a95e:	e7da      	b.n	800a916 <_free_r+0x26>
 800a960:	d902      	bls.n	800a968 <_free_r+0x78>
 800a962:	230c      	movs	r3, #12
 800a964:	6003      	str	r3, [r0, #0]
 800a966:	e7d6      	b.n	800a916 <_free_r+0x26>
 800a968:	6825      	ldr	r5, [r4, #0]
 800a96a:	1961      	adds	r1, r4, r5
 800a96c:	428b      	cmp	r3, r1
 800a96e:	bf04      	itt	eq
 800a970:	6819      	ldreq	r1, [r3, #0]
 800a972:	685b      	ldreq	r3, [r3, #4]
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	bf04      	itt	eq
 800a978:	1949      	addeq	r1, r1, r5
 800a97a:	6021      	streq	r1, [r4, #0]
 800a97c:	6054      	str	r4, [r2, #4]
 800a97e:	e7ca      	b.n	800a916 <_free_r+0x26>
 800a980:	b003      	add	sp, #12
 800a982:	bd30      	pop	{r4, r5, pc}
 800a984:	200003e0 	.word	0x200003e0

0800a988 <sbrk_aligned>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4e0e      	ldr	r6, [pc, #56]	; (800a9c4 <sbrk_aligned+0x3c>)
 800a98c:	460c      	mov	r4, r1
 800a98e:	6831      	ldr	r1, [r6, #0]
 800a990:	4605      	mov	r5, r0
 800a992:	b911      	cbnz	r1, 800a99a <sbrk_aligned+0x12>
 800a994:	f000 f9e6 	bl	800ad64 <_sbrk_r>
 800a998:	6030      	str	r0, [r6, #0]
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	f000 f9e1 	bl	800ad64 <_sbrk_r>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d00a      	beq.n	800a9bc <sbrk_aligned+0x34>
 800a9a6:	1cc4      	adds	r4, r0, #3
 800a9a8:	f024 0403 	bic.w	r4, r4, #3
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d007      	beq.n	800a9c0 <sbrk_aligned+0x38>
 800a9b0:	1a21      	subs	r1, r4, r0
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f000 f9d6 	bl	800ad64 <_sbrk_r>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d101      	bne.n	800a9c0 <sbrk_aligned+0x38>
 800a9bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	200003e4 	.word	0x200003e4

0800a9c8 <_malloc_r>:
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	1ccd      	adds	r5, r1, #3
 800a9ce:	f025 0503 	bic.w	r5, r5, #3
 800a9d2:	3508      	adds	r5, #8
 800a9d4:	2d0c      	cmp	r5, #12
 800a9d6:	bf38      	it	cc
 800a9d8:	250c      	movcc	r5, #12
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	4607      	mov	r7, r0
 800a9de:	db01      	blt.n	800a9e4 <_malloc_r+0x1c>
 800a9e0:	42a9      	cmp	r1, r5
 800a9e2:	d905      	bls.n	800a9f0 <_malloc_r+0x28>
 800a9e4:	230c      	movs	r3, #12
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f0:	4e2e      	ldr	r6, [pc, #184]	; (800aaac <_malloc_r+0xe4>)
 800a9f2:	f000 faa3 	bl	800af3c <__malloc_lock>
 800a9f6:	6833      	ldr	r3, [r6, #0]
 800a9f8:	461c      	mov	r4, r3
 800a9fa:	bb34      	cbnz	r4, 800aa4a <_malloc_r+0x82>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f7ff ffc2 	bl	800a988 <sbrk_aligned>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	4604      	mov	r4, r0
 800aa08:	d14d      	bne.n	800aaa6 <_malloc_r+0xde>
 800aa0a:	6834      	ldr	r4, [r6, #0]
 800aa0c:	4626      	mov	r6, r4
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	d140      	bne.n	800aa94 <_malloc_r+0xcc>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	4631      	mov	r1, r6
 800aa16:	4638      	mov	r0, r7
 800aa18:	eb04 0803 	add.w	r8, r4, r3
 800aa1c:	f000 f9a2 	bl	800ad64 <_sbrk_r>
 800aa20:	4580      	cmp	r8, r0
 800aa22:	d13a      	bne.n	800aa9a <_malloc_r+0xd2>
 800aa24:	6821      	ldr	r1, [r4, #0]
 800aa26:	3503      	adds	r5, #3
 800aa28:	1a6d      	subs	r5, r5, r1
 800aa2a:	f025 0503 	bic.w	r5, r5, #3
 800aa2e:	3508      	adds	r5, #8
 800aa30:	2d0c      	cmp	r5, #12
 800aa32:	bf38      	it	cc
 800aa34:	250c      	movcc	r5, #12
 800aa36:	4629      	mov	r1, r5
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7ff ffa5 	bl	800a988 <sbrk_aligned>
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d02b      	beq.n	800aa9a <_malloc_r+0xd2>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	442b      	add	r3, r5
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	e00e      	b.n	800aa68 <_malloc_r+0xa0>
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	1b52      	subs	r2, r2, r5
 800aa4e:	d41e      	bmi.n	800aa8e <_malloc_r+0xc6>
 800aa50:	2a0b      	cmp	r2, #11
 800aa52:	d916      	bls.n	800aa82 <_malloc_r+0xba>
 800aa54:	1961      	adds	r1, r4, r5
 800aa56:	42a3      	cmp	r3, r4
 800aa58:	6025      	str	r5, [r4, #0]
 800aa5a:	bf18      	it	ne
 800aa5c:	6059      	strne	r1, [r3, #4]
 800aa5e:	6863      	ldr	r3, [r4, #4]
 800aa60:	bf08      	it	eq
 800aa62:	6031      	streq	r1, [r6, #0]
 800aa64:	5162      	str	r2, [r4, r5]
 800aa66:	604b      	str	r3, [r1, #4]
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f104 060b 	add.w	r6, r4, #11
 800aa6e:	f000 fa6b 	bl	800af48 <__malloc_unlock>
 800aa72:	f026 0607 	bic.w	r6, r6, #7
 800aa76:	1d23      	adds	r3, r4, #4
 800aa78:	1af2      	subs	r2, r6, r3
 800aa7a:	d0b6      	beq.n	800a9ea <_malloc_r+0x22>
 800aa7c:	1b9b      	subs	r3, r3, r6
 800aa7e:	50a3      	str	r3, [r4, r2]
 800aa80:	e7b3      	b.n	800a9ea <_malloc_r+0x22>
 800aa82:	6862      	ldr	r2, [r4, #4]
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	bf0c      	ite	eq
 800aa88:	6032      	streq	r2, [r6, #0]
 800aa8a:	605a      	strne	r2, [r3, #4]
 800aa8c:	e7ec      	b.n	800aa68 <_malloc_r+0xa0>
 800aa8e:	4623      	mov	r3, r4
 800aa90:	6864      	ldr	r4, [r4, #4]
 800aa92:	e7b2      	b.n	800a9fa <_malloc_r+0x32>
 800aa94:	4634      	mov	r4, r6
 800aa96:	6876      	ldr	r6, [r6, #4]
 800aa98:	e7b9      	b.n	800aa0e <_malloc_r+0x46>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	603b      	str	r3, [r7, #0]
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f000 fa52 	bl	800af48 <__malloc_unlock>
 800aaa4:	e7a1      	b.n	800a9ea <_malloc_r+0x22>
 800aaa6:	6025      	str	r5, [r4, #0]
 800aaa8:	e7de      	b.n	800aa68 <_malloc_r+0xa0>
 800aaaa:	bf00      	nop
 800aaac:	200003e0 	.word	0x200003e0

0800aab0 <__sfputc_r>:
 800aab0:	6893      	ldr	r3, [r2, #8]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	b410      	push	{r4}
 800aab8:	6093      	str	r3, [r2, #8]
 800aaba:	da08      	bge.n	800aace <__sfputc_r+0x1e>
 800aabc:	6994      	ldr	r4, [r2, #24]
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	db01      	blt.n	800aac6 <__sfputc_r+0x16>
 800aac2:	290a      	cmp	r1, #10
 800aac4:	d103      	bne.n	800aace <__sfputc_r+0x1e>
 800aac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaca:	f7fe ba11 	b.w	8008ef0 <__swbuf_r>
 800aace:	6813      	ldr	r3, [r2, #0]
 800aad0:	1c58      	adds	r0, r3, #1
 800aad2:	6010      	str	r0, [r2, #0]
 800aad4:	7019      	strb	r1, [r3, #0]
 800aad6:	4608      	mov	r0, r1
 800aad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <__sfputs_r>:
 800aade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae0:	4606      	mov	r6, r0
 800aae2:	460f      	mov	r7, r1
 800aae4:	4614      	mov	r4, r2
 800aae6:	18d5      	adds	r5, r2, r3
 800aae8:	42ac      	cmp	r4, r5
 800aaea:	d101      	bne.n	800aaf0 <__sfputs_r+0x12>
 800aaec:	2000      	movs	r0, #0
 800aaee:	e007      	b.n	800ab00 <__sfputs_r+0x22>
 800aaf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf4:	463a      	mov	r2, r7
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f7ff ffda 	bl	800aab0 <__sfputc_r>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d1f3      	bne.n	800aae8 <__sfputs_r+0xa>
 800ab00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab04 <_vfiprintf_r>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	460d      	mov	r5, r1
 800ab0a:	b09d      	sub	sp, #116	; 0x74
 800ab0c:	4614      	mov	r4, r2
 800ab0e:	4698      	mov	r8, r3
 800ab10:	4606      	mov	r6, r0
 800ab12:	b118      	cbz	r0, 800ab1c <_vfiprintf_r+0x18>
 800ab14:	6983      	ldr	r3, [r0, #24]
 800ab16:	b90b      	cbnz	r3, 800ab1c <_vfiprintf_r+0x18>
 800ab18:	f7ff fa3e 	bl	8009f98 <__sinit>
 800ab1c:	4b89      	ldr	r3, [pc, #548]	; (800ad44 <_vfiprintf_r+0x240>)
 800ab1e:	429d      	cmp	r5, r3
 800ab20:	d11b      	bne.n	800ab5a <_vfiprintf_r+0x56>
 800ab22:	6875      	ldr	r5, [r6, #4]
 800ab24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab26:	07d9      	lsls	r1, r3, #31
 800ab28:	d405      	bmi.n	800ab36 <_vfiprintf_r+0x32>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_vfiprintf_r+0x32>
 800ab30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab32:	f7ff fad4 	bl	800a0de <__retarget_lock_acquire_recursive>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	071b      	lsls	r3, r3, #28
 800ab3a:	d501      	bpl.n	800ab40 <_vfiprintf_r+0x3c>
 800ab3c:	692b      	ldr	r3, [r5, #16]
 800ab3e:	b9eb      	cbnz	r3, 800ab7c <_vfiprintf_r+0x78>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4630      	mov	r0, r6
 800ab44:	f7fe fa26 	bl	8008f94 <__swsetup_r>
 800ab48:	b1c0      	cbz	r0, 800ab7c <_vfiprintf_r+0x78>
 800ab4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4c:	07dc      	lsls	r4, r3, #31
 800ab4e:	d50e      	bpl.n	800ab6e <_vfiprintf_r+0x6a>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab54:	b01d      	add	sp, #116	; 0x74
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	4b7b      	ldr	r3, [pc, #492]	; (800ad48 <_vfiprintf_r+0x244>)
 800ab5c:	429d      	cmp	r5, r3
 800ab5e:	d101      	bne.n	800ab64 <_vfiprintf_r+0x60>
 800ab60:	68b5      	ldr	r5, [r6, #8]
 800ab62:	e7df      	b.n	800ab24 <_vfiprintf_r+0x20>
 800ab64:	4b79      	ldr	r3, [pc, #484]	; (800ad4c <_vfiprintf_r+0x248>)
 800ab66:	429d      	cmp	r5, r3
 800ab68:	bf08      	it	eq
 800ab6a:	68f5      	ldreq	r5, [r6, #12]
 800ab6c:	e7da      	b.n	800ab24 <_vfiprintf_r+0x20>
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	0598      	lsls	r0, r3, #22
 800ab72:	d4ed      	bmi.n	800ab50 <_vfiprintf_r+0x4c>
 800ab74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab76:	f7ff fab3 	bl	800a0e0 <__retarget_lock_release_recursive>
 800ab7a:	e7e9      	b.n	800ab50 <_vfiprintf_r+0x4c>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab80:	2320      	movs	r3, #32
 800ab82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab8a:	2330      	movs	r3, #48	; 0x30
 800ab8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad50 <_vfiprintf_r+0x24c>
 800ab90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab94:	f04f 0901 	mov.w	r9, #1
 800ab98:	4623      	mov	r3, r4
 800ab9a:	469a      	mov	sl, r3
 800ab9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aba0:	b10a      	cbz	r2, 800aba6 <_vfiprintf_r+0xa2>
 800aba2:	2a25      	cmp	r2, #37	; 0x25
 800aba4:	d1f9      	bne.n	800ab9a <_vfiprintf_r+0x96>
 800aba6:	ebba 0b04 	subs.w	fp, sl, r4
 800abaa:	d00b      	beq.n	800abc4 <_vfiprintf_r+0xc0>
 800abac:	465b      	mov	r3, fp
 800abae:	4622      	mov	r2, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7ff ff93 	bl	800aade <__sfputs_r>
 800abb8:	3001      	adds	r0, #1
 800abba:	f000 80aa 	beq.w	800ad12 <_vfiprintf_r+0x20e>
 800abbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc0:	445a      	add	r2, fp
 800abc2:	9209      	str	r2, [sp, #36]	; 0x24
 800abc4:	f89a 3000 	ldrb.w	r3, [sl]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 80a2 	beq.w	800ad12 <_vfiprintf_r+0x20e>
 800abce:	2300      	movs	r3, #0
 800abd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abd8:	f10a 0a01 	add.w	sl, sl, #1
 800abdc:	9304      	str	r3, [sp, #16]
 800abde:	9307      	str	r3, [sp, #28]
 800abe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abe4:	931a      	str	r3, [sp, #104]	; 0x68
 800abe6:	4654      	mov	r4, sl
 800abe8:	2205      	movs	r2, #5
 800abea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abee:	4858      	ldr	r0, [pc, #352]	; (800ad50 <_vfiprintf_r+0x24c>)
 800abf0:	f7f5 fafe 	bl	80001f0 <memchr>
 800abf4:	9a04      	ldr	r2, [sp, #16]
 800abf6:	b9d8      	cbnz	r0, 800ac30 <_vfiprintf_r+0x12c>
 800abf8:	06d1      	lsls	r1, r2, #27
 800abfa:	bf44      	itt	mi
 800abfc:	2320      	movmi	r3, #32
 800abfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac02:	0713      	lsls	r3, r2, #28
 800ac04:	bf44      	itt	mi
 800ac06:	232b      	movmi	r3, #43	; 0x2b
 800ac08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac10:	2b2a      	cmp	r3, #42	; 0x2a
 800ac12:	d015      	beq.n	800ac40 <_vfiprintf_r+0x13c>
 800ac14:	9a07      	ldr	r2, [sp, #28]
 800ac16:	4654      	mov	r4, sl
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f04f 0c0a 	mov.w	ip, #10
 800ac1e:	4621      	mov	r1, r4
 800ac20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac24:	3b30      	subs	r3, #48	; 0x30
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d94e      	bls.n	800acc8 <_vfiprintf_r+0x1c4>
 800ac2a:	b1b0      	cbz	r0, 800ac5a <_vfiprintf_r+0x156>
 800ac2c:	9207      	str	r2, [sp, #28]
 800ac2e:	e014      	b.n	800ac5a <_vfiprintf_r+0x156>
 800ac30:	eba0 0308 	sub.w	r3, r0, r8
 800ac34:	fa09 f303 	lsl.w	r3, r9, r3
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	9304      	str	r3, [sp, #16]
 800ac3c:	46a2      	mov	sl, r4
 800ac3e:	e7d2      	b.n	800abe6 <_vfiprintf_r+0xe2>
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	1d19      	adds	r1, r3, #4
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	9103      	str	r1, [sp, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bfbb      	ittet	lt
 800ac4c:	425b      	neglt	r3, r3
 800ac4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac52:	9307      	strge	r3, [sp, #28]
 800ac54:	9307      	strlt	r3, [sp, #28]
 800ac56:	bfb8      	it	lt
 800ac58:	9204      	strlt	r2, [sp, #16]
 800ac5a:	7823      	ldrb	r3, [r4, #0]
 800ac5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac5e:	d10c      	bne.n	800ac7a <_vfiprintf_r+0x176>
 800ac60:	7863      	ldrb	r3, [r4, #1]
 800ac62:	2b2a      	cmp	r3, #42	; 0x2a
 800ac64:	d135      	bne.n	800acd2 <_vfiprintf_r+0x1ce>
 800ac66:	9b03      	ldr	r3, [sp, #12]
 800ac68:	1d1a      	adds	r2, r3, #4
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	9203      	str	r2, [sp, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	bfb8      	it	lt
 800ac72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac76:	3402      	adds	r4, #2
 800ac78:	9305      	str	r3, [sp, #20]
 800ac7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad60 <_vfiprintf_r+0x25c>
 800ac7e:	7821      	ldrb	r1, [r4, #0]
 800ac80:	2203      	movs	r2, #3
 800ac82:	4650      	mov	r0, sl
 800ac84:	f7f5 fab4 	bl	80001f0 <memchr>
 800ac88:	b140      	cbz	r0, 800ac9c <_vfiprintf_r+0x198>
 800ac8a:	2340      	movs	r3, #64	; 0x40
 800ac8c:	eba0 000a 	sub.w	r0, r0, sl
 800ac90:	fa03 f000 	lsl.w	r0, r3, r0
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	4303      	orrs	r3, r0
 800ac98:	3401      	adds	r4, #1
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca0:	482c      	ldr	r0, [pc, #176]	; (800ad54 <_vfiprintf_r+0x250>)
 800aca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aca6:	2206      	movs	r2, #6
 800aca8:	f7f5 faa2 	bl	80001f0 <memchr>
 800acac:	2800      	cmp	r0, #0
 800acae:	d03f      	beq.n	800ad30 <_vfiprintf_r+0x22c>
 800acb0:	4b29      	ldr	r3, [pc, #164]	; (800ad58 <_vfiprintf_r+0x254>)
 800acb2:	bb1b      	cbnz	r3, 800acfc <_vfiprintf_r+0x1f8>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	3307      	adds	r3, #7
 800acb8:	f023 0307 	bic.w	r3, r3, #7
 800acbc:	3308      	adds	r3, #8
 800acbe:	9303      	str	r3, [sp, #12]
 800acc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc2:	443b      	add	r3, r7
 800acc4:	9309      	str	r3, [sp, #36]	; 0x24
 800acc6:	e767      	b.n	800ab98 <_vfiprintf_r+0x94>
 800acc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800accc:	460c      	mov	r4, r1
 800acce:	2001      	movs	r0, #1
 800acd0:	e7a5      	b.n	800ac1e <_vfiprintf_r+0x11a>
 800acd2:	2300      	movs	r3, #0
 800acd4:	3401      	adds	r4, #1
 800acd6:	9305      	str	r3, [sp, #20]
 800acd8:	4619      	mov	r1, r3
 800acda:	f04f 0c0a 	mov.w	ip, #10
 800acde:	4620      	mov	r0, r4
 800ace0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ace4:	3a30      	subs	r2, #48	; 0x30
 800ace6:	2a09      	cmp	r2, #9
 800ace8:	d903      	bls.n	800acf2 <_vfiprintf_r+0x1ee>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0c5      	beq.n	800ac7a <_vfiprintf_r+0x176>
 800acee:	9105      	str	r1, [sp, #20]
 800acf0:	e7c3      	b.n	800ac7a <_vfiprintf_r+0x176>
 800acf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acf6:	4604      	mov	r4, r0
 800acf8:	2301      	movs	r3, #1
 800acfa:	e7f0      	b.n	800acde <_vfiprintf_r+0x1da>
 800acfc:	ab03      	add	r3, sp, #12
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	462a      	mov	r2, r5
 800ad02:	4b16      	ldr	r3, [pc, #88]	; (800ad5c <_vfiprintf_r+0x258>)
 800ad04:	a904      	add	r1, sp, #16
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7fd fc9a 	bl	8008640 <_printf_float>
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	1c78      	adds	r0, r7, #1
 800ad10:	d1d6      	bne.n	800acc0 <_vfiprintf_r+0x1bc>
 800ad12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad14:	07d9      	lsls	r1, r3, #31
 800ad16:	d405      	bmi.n	800ad24 <_vfiprintf_r+0x220>
 800ad18:	89ab      	ldrh	r3, [r5, #12]
 800ad1a:	059a      	lsls	r2, r3, #22
 800ad1c:	d402      	bmi.n	800ad24 <_vfiprintf_r+0x220>
 800ad1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad20:	f7ff f9de 	bl	800a0e0 <__retarget_lock_release_recursive>
 800ad24:	89ab      	ldrh	r3, [r5, #12]
 800ad26:	065b      	lsls	r3, r3, #25
 800ad28:	f53f af12 	bmi.w	800ab50 <_vfiprintf_r+0x4c>
 800ad2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad2e:	e711      	b.n	800ab54 <_vfiprintf_r+0x50>
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	462a      	mov	r2, r5
 800ad36:	4b09      	ldr	r3, [pc, #36]	; (800ad5c <_vfiprintf_r+0x258>)
 800ad38:	a904      	add	r1, sp, #16
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7fd ff24 	bl	8008b88 <_printf_i>
 800ad40:	e7e4      	b.n	800ad0c <_vfiprintf_r+0x208>
 800ad42:	bf00      	nop
 800ad44:	0800cc84 	.word	0x0800cc84
 800ad48:	0800cca4 	.word	0x0800cca4
 800ad4c:	0800cc64 	.word	0x0800cc64
 800ad50:	0800ce1c 	.word	0x0800ce1c
 800ad54:	0800ce26 	.word	0x0800ce26
 800ad58:	08008641 	.word	0x08008641
 800ad5c:	0800aadf 	.word	0x0800aadf
 800ad60:	0800ce22 	.word	0x0800ce22

0800ad64 <_sbrk_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	; (800ad80 <_sbrk_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7fb f87a 	bl	8005e68 <_sbrk>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_sbrk_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_sbrk_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	200003e8 	.word	0x200003e8

0800ad84 <__sread>:
 800ad84:	b510      	push	{r4, lr}
 800ad86:	460c      	mov	r4, r1
 800ad88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad8c:	f000 f8e2 	bl	800af54 <_read_r>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	bfab      	itete	ge
 800ad94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad96:	89a3      	ldrhlt	r3, [r4, #12]
 800ad98:	181b      	addge	r3, r3, r0
 800ad9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad9e:	bfac      	ite	ge
 800ada0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ada2:	81a3      	strhlt	r3, [r4, #12]
 800ada4:	bd10      	pop	{r4, pc}

0800ada6 <__swrite>:
 800ada6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adaa:	461f      	mov	r7, r3
 800adac:	898b      	ldrh	r3, [r1, #12]
 800adae:	05db      	lsls	r3, r3, #23
 800adb0:	4605      	mov	r5, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	4616      	mov	r6, r2
 800adb6:	d505      	bpl.n	800adc4 <__swrite+0x1e>
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	2302      	movs	r3, #2
 800adbe:	2200      	movs	r2, #0
 800adc0:	f000 f898 	bl	800aef4 <_lseek_r>
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	4632      	mov	r2, r6
 800add2:	463b      	mov	r3, r7
 800add4:	4628      	mov	r0, r5
 800add6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adda:	f000 b817 	b.w	800ae0c <_write_r>

0800adde <__sseek>:
 800adde:	b510      	push	{r4, lr}
 800ade0:	460c      	mov	r4, r1
 800ade2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade6:	f000 f885 	bl	800aef4 <_lseek_r>
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	bf15      	itete	ne
 800adf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800adf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adfa:	81a3      	strheq	r3, [r4, #12]
 800adfc:	bf18      	it	ne
 800adfe:	81a3      	strhne	r3, [r4, #12]
 800ae00:	bd10      	pop	{r4, pc}

0800ae02 <__sclose>:
 800ae02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae06:	f000 b831 	b.w	800ae6c <_close_r>
	...

0800ae0c <_write_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d07      	ldr	r5, [pc, #28]	; (800ae2c <_write_r+0x20>)
 800ae10:	4604      	mov	r4, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	602a      	str	r2, [r5, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f7fa ff08 	bl	8005c30 <_write>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_write_r+0x1e>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_write_r+0x1e>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	200003e8 	.word	0x200003e8

0800ae30 <__assert_func>:
 800ae30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae32:	4614      	mov	r4, r2
 800ae34:	461a      	mov	r2, r3
 800ae36:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <__assert_func+0x2c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	68d8      	ldr	r0, [r3, #12]
 800ae3e:	b14c      	cbz	r4, 800ae54 <__assert_func+0x24>
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <__assert_func+0x30>)
 800ae42:	9100      	str	r1, [sp, #0]
 800ae44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae48:	4906      	ldr	r1, [pc, #24]	; (800ae64 <__assert_func+0x34>)
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	f000 f81e 	bl	800ae8c <fiprintf>
 800ae50:	f000 f89f 	bl	800af92 <abort>
 800ae54:	4b04      	ldr	r3, [pc, #16]	; (800ae68 <__assert_func+0x38>)
 800ae56:	461c      	mov	r4, r3
 800ae58:	e7f3      	b.n	800ae42 <__assert_func+0x12>
 800ae5a:	bf00      	nop
 800ae5c:	20000048 	.word	0x20000048
 800ae60:	0800ce2d 	.word	0x0800ce2d
 800ae64:	0800ce3a 	.word	0x0800ce3a
 800ae68:	0800ce68 	.word	0x0800ce68

0800ae6c <_close_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d06      	ldr	r5, [pc, #24]	; (800ae88 <_close_r+0x1c>)
 800ae70:	2300      	movs	r3, #0
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7fa ffc1 	bl	8005dfe <_close>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_close_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_close_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	200003e8 	.word	0x200003e8

0800ae8c <fiprintf>:
 800ae8c:	b40e      	push	{r1, r2, r3}
 800ae8e:	b503      	push	{r0, r1, lr}
 800ae90:	4601      	mov	r1, r0
 800ae92:	ab03      	add	r3, sp, #12
 800ae94:	4805      	ldr	r0, [pc, #20]	; (800aeac <fiprintf+0x20>)
 800ae96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9a:	6800      	ldr	r0, [r0, #0]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	f7ff fe31 	bl	800ab04 <_vfiprintf_r>
 800aea2:	b002      	add	sp, #8
 800aea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea8:	b003      	add	sp, #12
 800aeaa:	4770      	bx	lr
 800aeac:	20000048 	.word	0x20000048

0800aeb0 <_fstat_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d07      	ldr	r5, [pc, #28]	; (800aed0 <_fstat_r+0x20>)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	4611      	mov	r1, r2
 800aebc:	602b      	str	r3, [r5, #0]
 800aebe:	f7fa ffaa 	bl	8005e16 <_fstat>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	d102      	bne.n	800aecc <_fstat_r+0x1c>
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	b103      	cbz	r3, 800aecc <_fstat_r+0x1c>
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	bd38      	pop	{r3, r4, r5, pc}
 800aece:	bf00      	nop
 800aed0:	200003e8 	.word	0x200003e8

0800aed4 <_isatty_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d06      	ldr	r5, [pc, #24]	; (800aef0 <_isatty_r+0x1c>)
 800aed8:	2300      	movs	r3, #0
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7fa ffa9 	bl	8005e36 <_isatty>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_isatty_r+0x1a>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_isatty_r+0x1a>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	200003e8 	.word	0x200003e8

0800aef4 <_lseek_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	; (800af14 <_lseek_r+0x20>)
 800aef8:	4604      	mov	r4, r0
 800aefa:	4608      	mov	r0, r1
 800aefc:	4611      	mov	r1, r2
 800aefe:	2200      	movs	r2, #0
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7fa ffa2 	bl	8005e4c <_lseek>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_lseek_r+0x1e>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_lseek_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	200003e8 	.word	0x200003e8

0800af18 <__ascii_mbtowc>:
 800af18:	b082      	sub	sp, #8
 800af1a:	b901      	cbnz	r1, 800af1e <__ascii_mbtowc+0x6>
 800af1c:	a901      	add	r1, sp, #4
 800af1e:	b142      	cbz	r2, 800af32 <__ascii_mbtowc+0x1a>
 800af20:	b14b      	cbz	r3, 800af36 <__ascii_mbtowc+0x1e>
 800af22:	7813      	ldrb	r3, [r2, #0]
 800af24:	600b      	str	r3, [r1, #0]
 800af26:	7812      	ldrb	r2, [r2, #0]
 800af28:	1e10      	subs	r0, r2, #0
 800af2a:	bf18      	it	ne
 800af2c:	2001      	movne	r0, #1
 800af2e:	b002      	add	sp, #8
 800af30:	4770      	bx	lr
 800af32:	4610      	mov	r0, r2
 800af34:	e7fb      	b.n	800af2e <__ascii_mbtowc+0x16>
 800af36:	f06f 0001 	mvn.w	r0, #1
 800af3a:	e7f8      	b.n	800af2e <__ascii_mbtowc+0x16>

0800af3c <__malloc_lock>:
 800af3c:	4801      	ldr	r0, [pc, #4]	; (800af44 <__malloc_lock+0x8>)
 800af3e:	f7ff b8ce 	b.w	800a0de <__retarget_lock_acquire_recursive>
 800af42:	bf00      	nop
 800af44:	200003dc 	.word	0x200003dc

0800af48 <__malloc_unlock>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__malloc_unlock+0x8>)
 800af4a:	f7ff b8c9 	b.w	800a0e0 <__retarget_lock_release_recursive>
 800af4e:	bf00      	nop
 800af50:	200003dc 	.word	0x200003dc

0800af54 <_read_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	; (800af74 <_read_r+0x20>)
 800af58:	4604      	mov	r4, r0
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	602a      	str	r2, [r5, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f7fa ff2e 	bl	8005dc4 <_read>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_read_r+0x1e>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_read_r+0x1e>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	200003e8 	.word	0x200003e8

0800af78 <__ascii_wctomb>:
 800af78:	b149      	cbz	r1, 800af8e <__ascii_wctomb+0x16>
 800af7a:	2aff      	cmp	r2, #255	; 0xff
 800af7c:	bf85      	ittet	hi
 800af7e:	238a      	movhi	r3, #138	; 0x8a
 800af80:	6003      	strhi	r3, [r0, #0]
 800af82:	700a      	strbls	r2, [r1, #0]
 800af84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af88:	bf98      	it	ls
 800af8a:	2001      	movls	r0, #1
 800af8c:	4770      	bx	lr
 800af8e:	4608      	mov	r0, r1
 800af90:	4770      	bx	lr

0800af92 <abort>:
 800af92:	b508      	push	{r3, lr}
 800af94:	2006      	movs	r0, #6
 800af96:	f000 f82b 	bl	800aff0 <raise>
 800af9a:	2001      	movs	r0, #1
 800af9c:	f7fa ff08 	bl	8005db0 <_exit>

0800afa0 <_raise_r>:
 800afa0:	291f      	cmp	r1, #31
 800afa2:	b538      	push	{r3, r4, r5, lr}
 800afa4:	4604      	mov	r4, r0
 800afa6:	460d      	mov	r5, r1
 800afa8:	d904      	bls.n	800afb4 <_raise_r+0x14>
 800afaa:	2316      	movs	r3, #22
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afb6:	b112      	cbz	r2, 800afbe <_raise_r+0x1e>
 800afb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afbc:	b94b      	cbnz	r3, 800afd2 <_raise_r+0x32>
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 f830 	bl	800b024 <_getpid_r>
 800afc4:	462a      	mov	r2, r5
 800afc6:	4601      	mov	r1, r0
 800afc8:	4620      	mov	r0, r4
 800afca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afce:	f000 b817 	b.w	800b000 <_kill_r>
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d00a      	beq.n	800afec <_raise_r+0x4c>
 800afd6:	1c59      	adds	r1, r3, #1
 800afd8:	d103      	bne.n	800afe2 <_raise_r+0x42>
 800afda:	2316      	movs	r3, #22
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	2001      	movs	r0, #1
 800afe0:	e7e7      	b.n	800afb2 <_raise_r+0x12>
 800afe2:	2400      	movs	r4, #0
 800afe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afe8:	4628      	mov	r0, r5
 800afea:	4798      	blx	r3
 800afec:	2000      	movs	r0, #0
 800afee:	e7e0      	b.n	800afb2 <_raise_r+0x12>

0800aff0 <raise>:
 800aff0:	4b02      	ldr	r3, [pc, #8]	; (800affc <raise+0xc>)
 800aff2:	4601      	mov	r1, r0
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	f7ff bfd3 	b.w	800afa0 <_raise_r>
 800affa:	bf00      	nop
 800affc:	20000048 	.word	0x20000048

0800b000 <_kill_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4d07      	ldr	r5, [pc, #28]	; (800b020 <_kill_r+0x20>)
 800b004:	2300      	movs	r3, #0
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	4611      	mov	r1, r2
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	f7fa febf 	bl	8005d90 <_kill>
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	d102      	bne.n	800b01c <_kill_r+0x1c>
 800b016:	682b      	ldr	r3, [r5, #0]
 800b018:	b103      	cbz	r3, 800b01c <_kill_r+0x1c>
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	bd38      	pop	{r3, r4, r5, pc}
 800b01e:	bf00      	nop
 800b020:	200003e8 	.word	0x200003e8

0800b024 <_getpid_r>:
 800b024:	f7fa beac 	b.w	8005d80 <_getpid>

0800b028 <round>:
 800b028:	ec51 0b10 	vmov	r0, r1, d0
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b032:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b036:	2c13      	cmp	r4, #19
 800b038:	ee10 2a10 	vmov	r2, s0
 800b03c:	460b      	mov	r3, r1
 800b03e:	dc19      	bgt.n	800b074 <round+0x4c>
 800b040:	2c00      	cmp	r4, #0
 800b042:	da09      	bge.n	800b058 <round+0x30>
 800b044:	3401      	adds	r4, #1
 800b046:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b04a:	d103      	bne.n	800b054 <round+0x2c>
 800b04c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b050:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b054:	2200      	movs	r2, #0
 800b056:	e028      	b.n	800b0aa <round+0x82>
 800b058:	4d15      	ldr	r5, [pc, #84]	; (800b0b0 <round+0x88>)
 800b05a:	4125      	asrs	r5, r4
 800b05c:	ea01 0605 	and.w	r6, r1, r5
 800b060:	4332      	orrs	r2, r6
 800b062:	d00e      	beq.n	800b082 <round+0x5a>
 800b064:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b068:	fa42 f404 	asr.w	r4, r2, r4
 800b06c:	4423      	add	r3, r4
 800b06e:	ea23 0305 	bic.w	r3, r3, r5
 800b072:	e7ef      	b.n	800b054 <round+0x2c>
 800b074:	2c33      	cmp	r4, #51	; 0x33
 800b076:	dd07      	ble.n	800b088 <round+0x60>
 800b078:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b07c:	d101      	bne.n	800b082 <round+0x5a>
 800b07e:	f7f5 f90d 	bl	800029c <__adddf3>
 800b082:	ec41 0b10 	vmov	d0, r0, r1
 800b086:	bd70      	pop	{r4, r5, r6, pc}
 800b088:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b08c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b090:	40f5      	lsrs	r5, r6
 800b092:	4228      	tst	r0, r5
 800b094:	d0f5      	beq.n	800b082 <round+0x5a>
 800b096:	2101      	movs	r1, #1
 800b098:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b09c:	fa01 f404 	lsl.w	r4, r1, r4
 800b0a0:	1912      	adds	r2, r2, r4
 800b0a2:	bf28      	it	cs
 800b0a4:	185b      	addcs	r3, r3, r1
 800b0a6:	ea22 0205 	bic.w	r2, r2, r5
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	e7e8      	b.n	800b082 <round+0x5a>
 800b0b0:	000fffff 	.word	0x000fffff

0800b0b4 <asin>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	ed2d 8b02 	vpush	{d8}
 800b0ba:	ec55 4b10 	vmov	r4, r5, d0
 800b0be:	f000 f85f 	bl	800b180 <__ieee754_asin>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	462b      	mov	r3, r5
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b0ce:	eef0 8a60 	vmov.f32	s17, s1
 800b0d2:	f7f5 fd33 	bl	8000b3c <__aeabi_dcmpun>
 800b0d6:	b9a8      	cbnz	r0, 800b104 <asin+0x50>
 800b0d8:	ec45 4b10 	vmov	d0, r4, r5
 800b0dc:	f000 fe94 	bl	800be08 <fabs>
 800b0e0:	4b0c      	ldr	r3, [pc, #48]	; (800b114 <asin+0x60>)
 800b0e2:	ec51 0b10 	vmov	r0, r1, d0
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f7f5 fd1e 	bl	8000b28 <__aeabi_dcmpgt>
 800b0ec:	b150      	cbz	r0, 800b104 <asin+0x50>
 800b0ee:	f7fd f9b7 	bl	8008460 <__errno>
 800b0f2:	ecbd 8b02 	vpop	{d8}
 800b0f6:	2321      	movs	r3, #33	; 0x21
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0fe:	4806      	ldr	r0, [pc, #24]	; (800b118 <asin+0x64>)
 800b100:	f000 be8e 	b.w	800be20 <nan>
 800b104:	eeb0 0a48 	vmov.f32	s0, s16
 800b108:	eef0 0a68 	vmov.f32	s1, s17
 800b10c:	ecbd 8b02 	vpop	{d8}
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	bf00      	nop
 800b114:	3ff00000 	.word	0x3ff00000
 800b118:	0800ce68 	.word	0x0800ce68

0800b11c <atan2>:
 800b11c:	f000 ba44 	b.w	800b5a8 <__ieee754_atan2>

0800b120 <fmod>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	ed2d 8b02 	vpush	{d8}
 800b126:	ec57 6b10 	vmov	r6, r7, d0
 800b12a:	ec55 4b11 	vmov	r4, r5, d1
 800b12e:	f000 fb05 	bl	800b73c <__ieee754_fmod>
 800b132:	4622      	mov	r2, r4
 800b134:	462b      	mov	r3, r5
 800b136:	4630      	mov	r0, r6
 800b138:	4639      	mov	r1, r7
 800b13a:	eeb0 8a40 	vmov.f32	s16, s0
 800b13e:	eef0 8a60 	vmov.f32	s17, s1
 800b142:	f7f5 fcfb 	bl	8000b3c <__aeabi_dcmpun>
 800b146:	b990      	cbnz	r0, 800b16e <fmod+0x4e>
 800b148:	2200      	movs	r2, #0
 800b14a:	2300      	movs	r3, #0
 800b14c:	4620      	mov	r0, r4
 800b14e:	4629      	mov	r1, r5
 800b150:	f7f5 fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b154:	b158      	cbz	r0, 800b16e <fmod+0x4e>
 800b156:	f7fd f983 	bl	8008460 <__errno>
 800b15a:	2321      	movs	r3, #33	; 0x21
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	2200      	movs	r2, #0
 800b160:	2300      	movs	r3, #0
 800b162:	4610      	mov	r0, r2
 800b164:	4619      	mov	r1, r3
 800b166:	f7f5 fb79 	bl	800085c <__aeabi_ddiv>
 800b16a:	ec41 0b18 	vmov	d8, r0, r1
 800b16e:	eeb0 0a48 	vmov.f32	s0, s16
 800b172:	eef0 0a68 	vmov.f32	s1, s17
 800b176:	ecbd 8b02 	vpop	{d8}
 800b17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17c:	0000      	movs	r0, r0
	...

0800b180 <__ieee754_asin>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	ed2d 8b04 	vpush	{d8-d9}
 800b188:	ec55 4b10 	vmov	r4, r5, d0
 800b18c:	4bcc      	ldr	r3, [pc, #816]	; (800b4c0 <__ieee754_asin+0x340>)
 800b18e:	b083      	sub	sp, #12
 800b190:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b194:	4598      	cmp	r8, r3
 800b196:	9501      	str	r5, [sp, #4]
 800b198:	dd35      	ble.n	800b206 <__ieee754_asin+0x86>
 800b19a:	ee10 3a10 	vmov	r3, s0
 800b19e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b1a2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b1a6:	ea58 0303 	orrs.w	r3, r8, r3
 800b1aa:	d117      	bne.n	800b1dc <__ieee754_asin+0x5c>
 800b1ac:	a3aa      	add	r3, pc, #680	; (adr r3, 800b458 <__ieee754_asin+0x2d8>)
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	ee10 0a10 	vmov	r0, s0
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	f7f5 fa26 	bl	8000608 <__aeabi_dmul>
 800b1bc:	a3a8      	add	r3, pc, #672	; (adr r3, 800b460 <__ieee754_asin+0x2e0>)
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7f5 fa1d 	bl	8000608 <__aeabi_dmul>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f7f5 f861 	bl	800029c <__adddf3>
 800b1da:	e00b      	b.n	800b1f4 <__ieee754_asin+0x74>
 800b1dc:	ee10 2a10 	vmov	r2, s0
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	ee10 0a10 	vmov	r0, s0
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 f856 	bl	8000298 <__aeabi_dsub>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	f7f5 fb34 	bl	800085c <__aeabi_ddiv>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	460d      	mov	r5, r1
 800b1f8:	ec45 4b10 	vmov	d0, r4, r5
 800b1fc:	b003      	add	sp, #12
 800b1fe:	ecbd 8b04 	vpop	{d8-d9}
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b206:	4baf      	ldr	r3, [pc, #700]	; (800b4c4 <__ieee754_asin+0x344>)
 800b208:	4598      	cmp	r8, r3
 800b20a:	dc11      	bgt.n	800b230 <__ieee754_asin+0xb0>
 800b20c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b210:	f280 80ae 	bge.w	800b370 <__ieee754_asin+0x1f0>
 800b214:	a394      	add	r3, pc, #592	; (adr r3, 800b468 <__ieee754_asin+0x2e8>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	ee10 0a10 	vmov	r0, s0
 800b21e:	4629      	mov	r1, r5
 800b220:	f7f5 f83c 	bl	800029c <__adddf3>
 800b224:	4ba8      	ldr	r3, [pc, #672]	; (800b4c8 <__ieee754_asin+0x348>)
 800b226:	2200      	movs	r2, #0
 800b228:	f7f5 fc7e 	bl	8000b28 <__aeabi_dcmpgt>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1e3      	bne.n	800b1f8 <__ieee754_asin+0x78>
 800b230:	ec45 4b10 	vmov	d0, r4, r5
 800b234:	f000 fde8 	bl	800be08 <fabs>
 800b238:	49a3      	ldr	r1, [pc, #652]	; (800b4c8 <__ieee754_asin+0x348>)
 800b23a:	ec53 2b10 	vmov	r2, r3, d0
 800b23e:	2000      	movs	r0, #0
 800b240:	f7f5 f82a 	bl	8000298 <__aeabi_dsub>
 800b244:	4ba1      	ldr	r3, [pc, #644]	; (800b4cc <__ieee754_asin+0x34c>)
 800b246:	2200      	movs	r2, #0
 800b248:	f7f5 f9de 	bl	8000608 <__aeabi_dmul>
 800b24c:	a388      	add	r3, pc, #544	; (adr r3, 800b470 <__ieee754_asin+0x2f0>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	4604      	mov	r4, r0
 800b254:	460d      	mov	r5, r1
 800b256:	f7f5 f9d7 	bl	8000608 <__aeabi_dmul>
 800b25a:	a387      	add	r3, pc, #540	; (adr r3, 800b478 <__ieee754_asin+0x2f8>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7f5 f81c 	bl	800029c <__adddf3>
 800b264:	4622      	mov	r2, r4
 800b266:	462b      	mov	r3, r5
 800b268:	f7f5 f9ce 	bl	8000608 <__aeabi_dmul>
 800b26c:	a384      	add	r3, pc, #528	; (adr r3, 800b480 <__ieee754_asin+0x300>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f7f5 f811 	bl	8000298 <__aeabi_dsub>
 800b276:	4622      	mov	r2, r4
 800b278:	462b      	mov	r3, r5
 800b27a:	f7f5 f9c5 	bl	8000608 <__aeabi_dmul>
 800b27e:	a382      	add	r3, pc, #520	; (adr r3, 800b488 <__ieee754_asin+0x308>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	f7f5 f80a 	bl	800029c <__adddf3>
 800b288:	4622      	mov	r2, r4
 800b28a:	462b      	mov	r3, r5
 800b28c:	f7f5 f9bc 	bl	8000608 <__aeabi_dmul>
 800b290:	a37f      	add	r3, pc, #508	; (adr r3, 800b490 <__ieee754_asin+0x310>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f4 ffff 	bl	8000298 <__aeabi_dsub>
 800b29a:	4622      	mov	r2, r4
 800b29c:	462b      	mov	r3, r5
 800b29e:	f7f5 f9b3 	bl	8000608 <__aeabi_dmul>
 800b2a2:	a37d      	add	r3, pc, #500	; (adr r3, 800b498 <__ieee754_asin+0x318>)
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f7f4 fff8 	bl	800029c <__adddf3>
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	462b      	mov	r3, r5
 800b2b0:	f7f5 f9aa 	bl	8000608 <__aeabi_dmul>
 800b2b4:	a37a      	add	r3, pc, #488	; (adr r3, 800b4a0 <__ieee754_asin+0x320>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	ec41 0b18 	vmov	d8, r0, r1
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f5 f9a1 	bl	8000608 <__aeabi_dmul>
 800b2c6:	a378      	add	r3, pc, #480	; (adr r3, 800b4a8 <__ieee754_asin+0x328>)
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f7f4 ffe4 	bl	8000298 <__aeabi_dsub>
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	f7f5 f998 	bl	8000608 <__aeabi_dmul>
 800b2d8:	a375      	add	r3, pc, #468	; (adr r3, 800b4b0 <__ieee754_asin+0x330>)
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f7f4 ffdd 	bl	800029c <__adddf3>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	462b      	mov	r3, r5
 800b2e6:	f7f5 f98f 	bl	8000608 <__aeabi_dmul>
 800b2ea:	a373      	add	r3, pc, #460	; (adr r3, 800b4b8 <__ieee754_asin+0x338>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	f7f4 ffd2 	bl	8000298 <__aeabi_dsub>
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	f7f5 f986 	bl	8000608 <__aeabi_dmul>
 800b2fc:	4b72      	ldr	r3, [pc, #456]	; (800b4c8 <__ieee754_asin+0x348>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	f7f4 ffcc 	bl	800029c <__adddf3>
 800b304:	ec45 4b10 	vmov	d0, r4, r5
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	f000 fb28 	bl	800b960 <__ieee754_sqrt>
 800b310:	4b6f      	ldr	r3, [pc, #444]	; (800b4d0 <__ieee754_asin+0x350>)
 800b312:	4598      	cmp	r8, r3
 800b314:	ec5b ab10 	vmov	sl, fp, d0
 800b318:	f340 80dc 	ble.w	800b4d4 <__ieee754_asin+0x354>
 800b31c:	4632      	mov	r2, r6
 800b31e:	463b      	mov	r3, r7
 800b320:	ec51 0b18 	vmov	r0, r1, d8
 800b324:	f7f5 fa9a 	bl	800085c <__aeabi_ddiv>
 800b328:	4652      	mov	r2, sl
 800b32a:	465b      	mov	r3, fp
 800b32c:	f7f5 f96c 	bl	8000608 <__aeabi_dmul>
 800b330:	4652      	mov	r2, sl
 800b332:	465b      	mov	r3, fp
 800b334:	f7f4 ffb2 	bl	800029c <__adddf3>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	f7f4 ffae 	bl	800029c <__adddf3>
 800b340:	a347      	add	r3, pc, #284	; (adr r3, 800b460 <__ieee754_asin+0x2e0>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	f7f4 ffa7 	bl	8000298 <__aeabi_dsub>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	a142      	add	r1, pc, #264	; (adr r1, 800b458 <__ieee754_asin+0x2d8>)
 800b350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b354:	f7f4 ffa0 	bl	8000298 <__aeabi_dsub>
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfdc      	itt	le
 800b35e:	4602      	movle	r2, r0
 800b360:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b364:	4604      	mov	r4, r0
 800b366:	460d      	mov	r5, r1
 800b368:	bfdc      	itt	le
 800b36a:	4614      	movle	r4, r2
 800b36c:	461d      	movle	r5, r3
 800b36e:	e743      	b.n	800b1f8 <__ieee754_asin+0x78>
 800b370:	ee10 2a10 	vmov	r2, s0
 800b374:	ee10 0a10 	vmov	r0, s0
 800b378:	462b      	mov	r3, r5
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f5 f944 	bl	8000608 <__aeabi_dmul>
 800b380:	a33b      	add	r3, pc, #236	; (adr r3, 800b470 <__ieee754_asin+0x2f0>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	f7f5 f93d 	bl	8000608 <__aeabi_dmul>
 800b38e:	a33a      	add	r3, pc, #232	; (adr r3, 800b478 <__ieee754_asin+0x2f8>)
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f7f4 ff82 	bl	800029c <__adddf3>
 800b398:	4632      	mov	r2, r6
 800b39a:	463b      	mov	r3, r7
 800b39c:	f7f5 f934 	bl	8000608 <__aeabi_dmul>
 800b3a0:	a337      	add	r3, pc, #220	; (adr r3, 800b480 <__ieee754_asin+0x300>)
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f7f4 ff77 	bl	8000298 <__aeabi_dsub>
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	463b      	mov	r3, r7
 800b3ae:	f7f5 f92b 	bl	8000608 <__aeabi_dmul>
 800b3b2:	a335      	add	r3, pc, #212	; (adr r3, 800b488 <__ieee754_asin+0x308>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	f7f4 ff70 	bl	800029c <__adddf3>
 800b3bc:	4632      	mov	r2, r6
 800b3be:	463b      	mov	r3, r7
 800b3c0:	f7f5 f922 	bl	8000608 <__aeabi_dmul>
 800b3c4:	a332      	add	r3, pc, #200	; (adr r3, 800b490 <__ieee754_asin+0x310>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f4 ff65 	bl	8000298 <__aeabi_dsub>
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	463b      	mov	r3, r7
 800b3d2:	f7f5 f919 	bl	8000608 <__aeabi_dmul>
 800b3d6:	a330      	add	r3, pc, #192	; (adr r3, 800b498 <__ieee754_asin+0x318>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f4 ff5e 	bl	800029c <__adddf3>
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	f7f5 f910 	bl	8000608 <__aeabi_dmul>
 800b3e8:	a32d      	add	r3, pc, #180	; (adr r3, 800b4a0 <__ieee754_asin+0x320>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	4689      	mov	r9, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 f907 	bl	8000608 <__aeabi_dmul>
 800b3fa:	a32b      	add	r3, pc, #172	; (adr r3, 800b4a8 <__ieee754_asin+0x328>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f4 ff4a 	bl	8000298 <__aeabi_dsub>
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	f7f5 f8fe 	bl	8000608 <__aeabi_dmul>
 800b40c:	a328      	add	r3, pc, #160	; (adr r3, 800b4b0 <__ieee754_asin+0x330>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 ff43 	bl	800029c <__adddf3>
 800b416:	4632      	mov	r2, r6
 800b418:	463b      	mov	r3, r7
 800b41a:	f7f5 f8f5 	bl	8000608 <__aeabi_dmul>
 800b41e:	a326      	add	r3, pc, #152	; (adr r3, 800b4b8 <__ieee754_asin+0x338>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f4 ff38 	bl	8000298 <__aeabi_dsub>
 800b428:	4632      	mov	r2, r6
 800b42a:	463b      	mov	r3, r7
 800b42c:	f7f5 f8ec 	bl	8000608 <__aeabi_dmul>
 800b430:	4b25      	ldr	r3, [pc, #148]	; (800b4c8 <__ieee754_asin+0x348>)
 800b432:	2200      	movs	r2, #0
 800b434:	f7f4 ff32 	bl	800029c <__adddf3>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4640      	mov	r0, r8
 800b43e:	4649      	mov	r1, r9
 800b440:	f7f5 fa0c 	bl	800085c <__aeabi_ddiv>
 800b444:	4622      	mov	r2, r4
 800b446:	462b      	mov	r3, r5
 800b448:	f7f5 f8de 	bl	8000608 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	e6bf      	b.n	800b1d6 <__ieee754_asin+0x56>
 800b456:	bf00      	nop
 800b458:	54442d18 	.word	0x54442d18
 800b45c:	3ff921fb 	.word	0x3ff921fb
 800b460:	33145c07 	.word	0x33145c07
 800b464:	3c91a626 	.word	0x3c91a626
 800b468:	8800759c 	.word	0x8800759c
 800b46c:	7e37e43c 	.word	0x7e37e43c
 800b470:	0dfdf709 	.word	0x0dfdf709
 800b474:	3f023de1 	.word	0x3f023de1
 800b478:	7501b288 	.word	0x7501b288
 800b47c:	3f49efe0 	.word	0x3f49efe0
 800b480:	b5688f3b 	.word	0xb5688f3b
 800b484:	3fa48228 	.word	0x3fa48228
 800b488:	0e884455 	.word	0x0e884455
 800b48c:	3fc9c155 	.word	0x3fc9c155
 800b490:	03eb6f7d 	.word	0x03eb6f7d
 800b494:	3fd4d612 	.word	0x3fd4d612
 800b498:	55555555 	.word	0x55555555
 800b49c:	3fc55555 	.word	0x3fc55555
 800b4a0:	b12e9282 	.word	0xb12e9282
 800b4a4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b4a8:	1b8d0159 	.word	0x1b8d0159
 800b4ac:	3fe6066c 	.word	0x3fe6066c
 800b4b0:	9c598ac8 	.word	0x9c598ac8
 800b4b4:	40002ae5 	.word	0x40002ae5
 800b4b8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b4bc:	40033a27 	.word	0x40033a27
 800b4c0:	3fefffff 	.word	0x3fefffff
 800b4c4:	3fdfffff 	.word	0x3fdfffff
 800b4c8:	3ff00000 	.word	0x3ff00000
 800b4cc:	3fe00000 	.word	0x3fe00000
 800b4d0:	3fef3332 	.word	0x3fef3332
 800b4d4:	ee10 2a10 	vmov	r2, s0
 800b4d8:	ee10 0a10 	vmov	r0, s0
 800b4dc:	465b      	mov	r3, fp
 800b4de:	4659      	mov	r1, fp
 800b4e0:	f7f4 fedc 	bl	800029c <__adddf3>
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	ec41 0b19 	vmov	d9, r0, r1
 800b4ec:	ec51 0b18 	vmov	r0, r1, d8
 800b4f0:	f7f5 f9b4 	bl	800085c <__aeabi_ddiv>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	ec51 0b19 	vmov	r0, r1, d9
 800b4fc:	f7f5 f884 	bl	8000608 <__aeabi_dmul>
 800b500:	f04f 0800 	mov.w	r8, #0
 800b504:	4606      	mov	r6, r0
 800b506:	460f      	mov	r7, r1
 800b508:	4642      	mov	r2, r8
 800b50a:	465b      	mov	r3, fp
 800b50c:	4640      	mov	r0, r8
 800b50e:	4659      	mov	r1, fp
 800b510:	f7f5 f87a 	bl	8000608 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 febc 	bl	8000298 <__aeabi_dsub>
 800b520:	4642      	mov	r2, r8
 800b522:	4604      	mov	r4, r0
 800b524:	460d      	mov	r5, r1
 800b526:	465b      	mov	r3, fp
 800b528:	4650      	mov	r0, sl
 800b52a:	4659      	mov	r1, fp
 800b52c:	f7f4 feb6 	bl	800029c <__adddf3>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4620      	mov	r0, r4
 800b536:	4629      	mov	r1, r5
 800b538:	f7f5 f990 	bl	800085c <__aeabi_ddiv>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	f7f4 feac 	bl	800029c <__adddf3>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	a113      	add	r1, pc, #76	; (adr r1, 800b598 <__ieee754_asin+0x418>)
 800b54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b54e:	f7f4 fea3 	bl	8000298 <__aeabi_dsub>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f4 fe9d 	bl	8000298 <__aeabi_dsub>
 800b55e:	4642      	mov	r2, r8
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	465b      	mov	r3, fp
 800b566:	4640      	mov	r0, r8
 800b568:	4659      	mov	r1, fp
 800b56a:	f7f4 fe97 	bl	800029c <__adddf3>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	a10b      	add	r1, pc, #44	; (adr r1, 800b5a0 <__ieee754_asin+0x420>)
 800b574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b578:	f7f4 fe8e 	bl	8000298 <__aeabi_dsub>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f4 fe88 	bl	8000298 <__aeabi_dsub>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	a104      	add	r1, pc, #16	; (adr r1, 800b5a0 <__ieee754_asin+0x420>)
 800b58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b592:	e6df      	b.n	800b354 <__ieee754_asin+0x1d4>
 800b594:	f3af 8000 	nop.w
 800b598:	33145c07 	.word	0x33145c07
 800b59c:	3c91a626 	.word	0x3c91a626
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	3fe921fb 	.word	0x3fe921fb

0800b5a8 <__ieee754_atan2>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	ec57 6b11 	vmov	r6, r7, d1
 800b5b0:	4273      	negs	r3, r6
 800b5b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b738 <__ieee754_atan2+0x190>
 800b5b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b5ba:	4333      	orrs	r3, r6
 800b5bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b5c0:	4573      	cmp	r3, lr
 800b5c2:	ec51 0b10 	vmov	r0, r1, d0
 800b5c6:	ee11 8a10 	vmov	r8, s2
 800b5ca:	d80a      	bhi.n	800b5e2 <__ieee754_atan2+0x3a>
 800b5cc:	4244      	negs	r4, r0
 800b5ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5d2:	4304      	orrs	r4, r0
 800b5d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b5d8:	4574      	cmp	r4, lr
 800b5da:	ee10 9a10 	vmov	r9, s0
 800b5de:	468c      	mov	ip, r1
 800b5e0:	d907      	bls.n	800b5f2 <__ieee754_atan2+0x4a>
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	463b      	mov	r3, r7
 800b5e6:	f7f4 fe59 	bl	800029c <__adddf3>
 800b5ea:	ec41 0b10 	vmov	d0, r0, r1
 800b5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b5f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b5fa:	4334      	orrs	r4, r6
 800b5fc:	d103      	bne.n	800b606 <__ieee754_atan2+0x5e>
 800b5fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b602:	f000 ba61 	b.w	800bac8 <atan>
 800b606:	17bc      	asrs	r4, r7, #30
 800b608:	f004 0402 	and.w	r4, r4, #2
 800b60c:	ea53 0909 	orrs.w	r9, r3, r9
 800b610:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b614:	d107      	bne.n	800b626 <__ieee754_atan2+0x7e>
 800b616:	2c02      	cmp	r4, #2
 800b618:	d060      	beq.n	800b6dc <__ieee754_atan2+0x134>
 800b61a:	2c03      	cmp	r4, #3
 800b61c:	d1e5      	bne.n	800b5ea <__ieee754_atan2+0x42>
 800b61e:	a142      	add	r1, pc, #264	; (adr r1, 800b728 <__ieee754_atan2+0x180>)
 800b620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b624:	e7e1      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b626:	ea52 0808 	orrs.w	r8, r2, r8
 800b62a:	d106      	bne.n	800b63a <__ieee754_atan2+0x92>
 800b62c:	f1bc 0f00 	cmp.w	ip, #0
 800b630:	da5f      	bge.n	800b6f2 <__ieee754_atan2+0x14a>
 800b632:	a13f      	add	r1, pc, #252	; (adr r1, 800b730 <__ieee754_atan2+0x188>)
 800b634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b638:	e7d7      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b63a:	4572      	cmp	r2, lr
 800b63c:	d10f      	bne.n	800b65e <__ieee754_atan2+0xb6>
 800b63e:	4293      	cmp	r3, r2
 800b640:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b644:	d107      	bne.n	800b656 <__ieee754_atan2+0xae>
 800b646:	2c02      	cmp	r4, #2
 800b648:	d84c      	bhi.n	800b6e4 <__ieee754_atan2+0x13c>
 800b64a:	4b35      	ldr	r3, [pc, #212]	; (800b720 <__ieee754_atan2+0x178>)
 800b64c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b650:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b654:	e7c9      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b656:	2c02      	cmp	r4, #2
 800b658:	d848      	bhi.n	800b6ec <__ieee754_atan2+0x144>
 800b65a:	4b32      	ldr	r3, [pc, #200]	; (800b724 <__ieee754_atan2+0x17c>)
 800b65c:	e7f6      	b.n	800b64c <__ieee754_atan2+0xa4>
 800b65e:	4573      	cmp	r3, lr
 800b660:	d0e4      	beq.n	800b62c <__ieee754_atan2+0x84>
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b668:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b66c:	da1e      	bge.n	800b6ac <__ieee754_atan2+0x104>
 800b66e:	2f00      	cmp	r7, #0
 800b670:	da01      	bge.n	800b676 <__ieee754_atan2+0xce>
 800b672:	323c      	adds	r2, #60	; 0x3c
 800b674:	db1e      	blt.n	800b6b4 <__ieee754_atan2+0x10c>
 800b676:	4632      	mov	r2, r6
 800b678:	463b      	mov	r3, r7
 800b67a:	f7f5 f8ef 	bl	800085c <__aeabi_ddiv>
 800b67e:	ec41 0b10 	vmov	d0, r0, r1
 800b682:	f000 fbc1 	bl	800be08 <fabs>
 800b686:	f000 fa1f 	bl	800bac8 <atan>
 800b68a:	ec51 0b10 	vmov	r0, r1, d0
 800b68e:	2c01      	cmp	r4, #1
 800b690:	d013      	beq.n	800b6ba <__ieee754_atan2+0x112>
 800b692:	2c02      	cmp	r4, #2
 800b694:	d015      	beq.n	800b6c2 <__ieee754_atan2+0x11a>
 800b696:	2c00      	cmp	r4, #0
 800b698:	d0a7      	beq.n	800b5ea <__ieee754_atan2+0x42>
 800b69a:	a319      	add	r3, pc, #100	; (adr r3, 800b700 <__ieee754_atan2+0x158>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fdfa 	bl	8000298 <__aeabi_dsub>
 800b6a4:	a318      	add	r3, pc, #96	; (adr r3, 800b708 <__ieee754_atan2+0x160>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	e014      	b.n	800b6d6 <__ieee754_atan2+0x12e>
 800b6ac:	a118      	add	r1, pc, #96	; (adr r1, 800b710 <__ieee754_atan2+0x168>)
 800b6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b2:	e7ec      	b.n	800b68e <__ieee754_atan2+0xe6>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	e7e9      	b.n	800b68e <__ieee754_atan2+0xe6>
 800b6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6be:	4619      	mov	r1, r3
 800b6c0:	e793      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b6c2:	a30f      	add	r3, pc, #60	; (adr r3, 800b700 <__ieee754_atan2+0x158>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fde6 	bl	8000298 <__aeabi_dsub>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	a10d      	add	r1, pc, #52	; (adr r1, 800b708 <__ieee754_atan2+0x160>)
 800b6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6d6:	f7f4 fddf 	bl	8000298 <__aeabi_dsub>
 800b6da:	e786      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b6dc:	a10a      	add	r1, pc, #40	; (adr r1, 800b708 <__ieee754_atan2+0x160>)
 800b6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6e2:	e782      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b6e4:	a10c      	add	r1, pc, #48	; (adr r1, 800b718 <__ieee754_atan2+0x170>)
 800b6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ea:	e77e      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	e77b      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b6f2:	a107      	add	r1, pc, #28	; (adr r1, 800b710 <__ieee754_atan2+0x168>)
 800b6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6f8:	e777      	b.n	800b5ea <__ieee754_atan2+0x42>
 800b6fa:	bf00      	nop
 800b6fc:	f3af 8000 	nop.w
 800b700:	33145c07 	.word	0x33145c07
 800b704:	3ca1a626 	.word	0x3ca1a626
 800b708:	54442d18 	.word	0x54442d18
 800b70c:	400921fb 	.word	0x400921fb
 800b710:	54442d18 	.word	0x54442d18
 800b714:	3ff921fb 	.word	0x3ff921fb
 800b718:	54442d18 	.word	0x54442d18
 800b71c:	3fe921fb 	.word	0x3fe921fb
 800b720:	0800cf78 	.word	0x0800cf78
 800b724:	0800cf90 	.word	0x0800cf90
 800b728:	54442d18 	.word	0x54442d18
 800b72c:	c00921fb 	.word	0xc00921fb
 800b730:	54442d18 	.word	0x54442d18
 800b734:	bff921fb 	.word	0xbff921fb
 800b738:	7ff00000 	.word	0x7ff00000

0800b73c <__ieee754_fmod>:
 800b73c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	ec53 2b11 	vmov	r2, r3, d1
 800b744:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b748:	ea5e 0402 	orrs.w	r4, lr, r2
 800b74c:	ec51 0b10 	vmov	r0, r1, d0
 800b750:	ee11 7a10 	vmov	r7, s2
 800b754:	ee11 ca10 	vmov	ip, s2
 800b758:	461e      	mov	r6, r3
 800b75a:	d00d      	beq.n	800b778 <__ieee754_fmod+0x3c>
 800b75c:	4c7a      	ldr	r4, [pc, #488]	; (800b948 <__ieee754_fmod+0x20c>)
 800b75e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b762:	45a0      	cmp	r8, r4
 800b764:	4689      	mov	r9, r1
 800b766:	dc07      	bgt.n	800b778 <__ieee754_fmod+0x3c>
 800b768:	4254      	negs	r4, r2
 800b76a:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800b954 <__ieee754_fmod+0x218>
 800b76e:	4314      	orrs	r4, r2
 800b770:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b774:	455c      	cmp	r4, fp
 800b776:	d909      	bls.n	800b78c <__ieee754_fmod+0x50>
 800b778:	f7f4 ff46 	bl	8000608 <__aeabi_dmul>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	f7f5 f86c 	bl	800085c <__aeabi_ddiv>
 800b784:	ec41 0b10 	vmov	d0, r0, r1
 800b788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	45f0      	cmp	r8, lr
 800b78e:	ee10 aa10 	vmov	sl, s0
 800b792:	ee10 4a10 	vmov	r4, s0
 800b796:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b79a:	dc09      	bgt.n	800b7b0 <__ieee754_fmod+0x74>
 800b79c:	dbf2      	blt.n	800b784 <__ieee754_fmod+0x48>
 800b79e:	4290      	cmp	r0, r2
 800b7a0:	d3f0      	bcc.n	800b784 <__ieee754_fmod+0x48>
 800b7a2:	d105      	bne.n	800b7b0 <__ieee754_fmod+0x74>
 800b7a4:	4b69      	ldr	r3, [pc, #420]	; (800b94c <__ieee754_fmod+0x210>)
 800b7a6:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800b7aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b7ae:	e7e9      	b.n	800b784 <__ieee754_fmod+0x48>
 800b7b0:	ea19 0f0b 	tst.w	r9, fp
 800b7b4:	d14a      	bne.n	800b84c <__ieee754_fmod+0x110>
 800b7b6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ba:	d13f      	bne.n	800b83c <__ieee754_fmod+0x100>
 800b7bc:	4964      	ldr	r1, [pc, #400]	; (800b950 <__ieee754_fmod+0x214>)
 800b7be:	4653      	mov	r3, sl
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dc38      	bgt.n	800b836 <__ieee754_fmod+0xfa>
 800b7c4:	4b63      	ldr	r3, [pc, #396]	; (800b954 <__ieee754_fmod+0x218>)
 800b7c6:	4033      	ands	r3, r6
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d14f      	bne.n	800b86c <__ieee754_fmod+0x130>
 800b7cc:	f1be 0f00 	cmp.w	lr, #0
 800b7d0:	d144      	bne.n	800b85c <__ieee754_fmod+0x120>
 800b7d2:	4a5f      	ldr	r2, [pc, #380]	; (800b950 <__ieee754_fmod+0x214>)
 800b7d4:	463b      	mov	r3, r7
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	dc3d      	bgt.n	800b856 <__ieee754_fmod+0x11a>
 800b7da:	4b5f      	ldr	r3, [pc, #380]	; (800b958 <__ieee754_fmod+0x21c>)
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	db4a      	blt.n	800b876 <__ieee754_fmod+0x13a>
 800b7e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7e8:	485b      	ldr	r0, [pc, #364]	; (800b958 <__ieee754_fmod+0x21c>)
 800b7ea:	4282      	cmp	r2, r0
 800b7ec:	db57      	blt.n	800b89e <__ieee754_fmod+0x162>
 800b7ee:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b7f2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b7f6:	1a89      	subs	r1, r1, r2
 800b7f8:	1b98      	subs	r0, r3, r6
 800b7fa:	eba4 070c 	sub.w	r7, r4, ip
 800b7fe:	2900      	cmp	r1, #0
 800b800:	d164      	bne.n	800b8cc <__ieee754_fmod+0x190>
 800b802:	4564      	cmp	r4, ip
 800b804:	bf38      	it	cc
 800b806:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800b80a:	2800      	cmp	r0, #0
 800b80c:	bfa4      	itt	ge
 800b80e:	463c      	movge	r4, r7
 800b810:	4603      	movge	r3, r0
 800b812:	ea53 0104 	orrs.w	r1, r3, r4
 800b816:	d0c5      	beq.n	800b7a4 <__ieee754_fmod+0x68>
 800b818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b81c:	db6b      	blt.n	800b8f6 <__ieee754_fmod+0x1ba>
 800b81e:	494e      	ldr	r1, [pc, #312]	; (800b958 <__ieee754_fmod+0x21c>)
 800b820:	428a      	cmp	r2, r1
 800b822:	db6e      	blt.n	800b902 <__ieee754_fmod+0x1c6>
 800b824:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b828:	431d      	orrs	r5, r3
 800b82a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b82e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b832:	4620      	mov	r0, r4
 800b834:	e7a6      	b.n	800b784 <__ieee754_fmod+0x48>
 800b836:	3901      	subs	r1, #1
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	e7c1      	b.n	800b7c0 <__ieee754_fmod+0x84>
 800b83c:	4946      	ldr	r1, [pc, #280]	; (800b958 <__ieee754_fmod+0x21c>)
 800b83e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b842:	2b00      	cmp	r3, #0
 800b844:	ddbe      	ble.n	800b7c4 <__ieee754_fmod+0x88>
 800b846:	3901      	subs	r1, #1
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	e7fa      	b.n	800b842 <__ieee754_fmod+0x106>
 800b84c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b850:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b854:	e7b6      	b.n	800b7c4 <__ieee754_fmod+0x88>
 800b856:	3a01      	subs	r2, #1
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	e7bc      	b.n	800b7d6 <__ieee754_fmod+0x9a>
 800b85c:	4a3e      	ldr	r2, [pc, #248]	; (800b958 <__ieee754_fmod+0x21c>)
 800b85e:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b862:	2b00      	cmp	r3, #0
 800b864:	ddb9      	ble.n	800b7da <__ieee754_fmod+0x9e>
 800b866:	3a01      	subs	r2, #1
 800b868:	005b      	lsls	r3, r3, #1
 800b86a:	e7fa      	b.n	800b862 <__ieee754_fmod+0x126>
 800b86c:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b870:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b874:	e7b1      	b.n	800b7da <__ieee754_fmod+0x9e>
 800b876:	1a5c      	subs	r4, r3, r1
 800b878:	2c1f      	cmp	r4, #31
 800b87a:	dc0a      	bgt.n	800b892 <__ieee754_fmod+0x156>
 800b87c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b880:	fa08 f804 	lsl.w	r8, r8, r4
 800b884:	fa2a f303 	lsr.w	r3, sl, r3
 800b888:	ea43 0308 	orr.w	r3, r3, r8
 800b88c:	fa0a f404 	lsl.w	r4, sl, r4
 800b890:	e7aa      	b.n	800b7e8 <__ieee754_fmod+0xac>
 800b892:	4b32      	ldr	r3, [pc, #200]	; (800b95c <__ieee754_fmod+0x220>)
 800b894:	1a5b      	subs	r3, r3, r1
 800b896:	fa0a f303 	lsl.w	r3, sl, r3
 800b89a:	2400      	movs	r4, #0
 800b89c:	e7a4      	b.n	800b7e8 <__ieee754_fmod+0xac>
 800b89e:	eba0 0c02 	sub.w	ip, r0, r2
 800b8a2:	f1bc 0f1f 	cmp.w	ip, #31
 800b8a6:	dc0a      	bgt.n	800b8be <__ieee754_fmod+0x182>
 800b8a8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b8ac:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b8b0:	fa27 f606 	lsr.w	r6, r7, r6
 800b8b4:	ea46 060e 	orr.w	r6, r6, lr
 800b8b8:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b8bc:	e79b      	b.n	800b7f6 <__ieee754_fmod+0xba>
 800b8be:	4e27      	ldr	r6, [pc, #156]	; (800b95c <__ieee754_fmod+0x220>)
 800b8c0:	1ab6      	subs	r6, r6, r2
 800b8c2:	fa07 f606 	lsl.w	r6, r7, r6
 800b8c6:	f04f 0c00 	mov.w	ip, #0
 800b8ca:	e794      	b.n	800b7f6 <__ieee754_fmod+0xba>
 800b8cc:	4564      	cmp	r4, ip
 800b8ce:	bf38      	it	cc
 800b8d0:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	da05      	bge.n	800b8e4 <__ieee754_fmod+0x1a8>
 800b8d8:	0fe0      	lsrs	r0, r4, #31
 800b8da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b8de:	0064      	lsls	r4, r4, #1
 800b8e0:	3901      	subs	r1, #1
 800b8e2:	e789      	b.n	800b7f8 <__ieee754_fmod+0xbc>
 800b8e4:	ea50 0307 	orrs.w	r3, r0, r7
 800b8e8:	f43f af5c 	beq.w	800b7a4 <__ieee754_fmod+0x68>
 800b8ec:	0ffb      	lsrs	r3, r7, #31
 800b8ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b8f2:	007c      	lsls	r4, r7, #1
 800b8f4:	e7f4      	b.n	800b8e0 <__ieee754_fmod+0x1a4>
 800b8f6:	0fe1      	lsrs	r1, r4, #31
 800b8f8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b8fc:	0064      	lsls	r4, r4, #1
 800b8fe:	3a01      	subs	r2, #1
 800b900:	e78a      	b.n	800b818 <__ieee754_fmod+0xdc>
 800b902:	1a89      	subs	r1, r1, r2
 800b904:	2914      	cmp	r1, #20
 800b906:	dc0a      	bgt.n	800b91e <__ieee754_fmod+0x1e2>
 800b908:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b90c:	fa03 f202 	lsl.w	r2, r3, r2
 800b910:	40cc      	lsrs	r4, r1
 800b912:	4322      	orrs	r2, r4
 800b914:	410b      	asrs	r3, r1
 800b916:	ea43 0105 	orr.w	r1, r3, r5
 800b91a:	4610      	mov	r0, r2
 800b91c:	e732      	b.n	800b784 <__ieee754_fmod+0x48>
 800b91e:	291f      	cmp	r1, #31
 800b920:	dc07      	bgt.n	800b932 <__ieee754_fmod+0x1f6>
 800b922:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b926:	40cc      	lsrs	r4, r1
 800b928:	fa03 f202 	lsl.w	r2, r3, r2
 800b92c:	4322      	orrs	r2, r4
 800b92e:	462b      	mov	r3, r5
 800b930:	e7f1      	b.n	800b916 <__ieee754_fmod+0x1da>
 800b932:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b936:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b93a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b93e:	32e2      	adds	r2, #226	; 0xe2
 800b940:	fa43 f202 	asr.w	r2, r3, r2
 800b944:	e7f3      	b.n	800b92e <__ieee754_fmod+0x1f2>
 800b946:	bf00      	nop
 800b948:	7fefffff 	.word	0x7fefffff
 800b94c:	0800cfa8 	.word	0x0800cfa8
 800b950:	fffffbed 	.word	0xfffffbed
 800b954:	7ff00000 	.word	0x7ff00000
 800b958:	fffffc02 	.word	0xfffffc02
 800b95c:	fffffbe2 	.word	0xfffffbe2

0800b960 <__ieee754_sqrt>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	ec55 4b10 	vmov	r4, r5, d0
 800b968:	4e55      	ldr	r6, [pc, #340]	; (800bac0 <__ieee754_sqrt+0x160>)
 800b96a:	43ae      	bics	r6, r5
 800b96c:	ee10 0a10 	vmov	r0, s0
 800b970:	ee10 3a10 	vmov	r3, s0
 800b974:	462a      	mov	r2, r5
 800b976:	4629      	mov	r1, r5
 800b978:	d110      	bne.n	800b99c <__ieee754_sqrt+0x3c>
 800b97a:	ee10 2a10 	vmov	r2, s0
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f4 fe42 	bl	8000608 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4620      	mov	r0, r4
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f4 fc86 	bl	800029c <__adddf3>
 800b990:	4604      	mov	r4, r0
 800b992:	460d      	mov	r5, r1
 800b994:	ec45 4b10 	vmov	d0, r4, r5
 800b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99c:	2d00      	cmp	r5, #0
 800b99e:	dc10      	bgt.n	800b9c2 <__ieee754_sqrt+0x62>
 800b9a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b9a4:	4330      	orrs	r0, r6
 800b9a6:	d0f5      	beq.n	800b994 <__ieee754_sqrt+0x34>
 800b9a8:	b15d      	cbz	r5, 800b9c2 <__ieee754_sqrt+0x62>
 800b9aa:	ee10 2a10 	vmov	r2, s0
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	ee10 0a10 	vmov	r0, s0
 800b9b4:	f7f4 fc70 	bl	8000298 <__aeabi_dsub>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	f7f4 ff4e 	bl	800085c <__aeabi_ddiv>
 800b9c0:	e7e6      	b.n	800b990 <__ieee754_sqrt+0x30>
 800b9c2:	1512      	asrs	r2, r2, #20
 800b9c4:	d074      	beq.n	800bab0 <__ieee754_sqrt+0x150>
 800b9c6:	07d4      	lsls	r4, r2, #31
 800b9c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b9cc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b9d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b9d4:	bf5e      	ittt	pl
 800b9d6:	0fda      	lsrpl	r2, r3, #31
 800b9d8:	005b      	lslpl	r3, r3, #1
 800b9da:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b9de:	2400      	movs	r4, #0
 800b9e0:	0fda      	lsrs	r2, r3, #31
 800b9e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b9e6:	107f      	asrs	r7, r7, #1
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	2516      	movs	r5, #22
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b9f2:	1886      	adds	r6, r0, r2
 800b9f4:	428e      	cmp	r6, r1
 800b9f6:	bfde      	ittt	le
 800b9f8:	1b89      	suble	r1, r1, r6
 800b9fa:	18b0      	addle	r0, r6, r2
 800b9fc:	18a4      	addle	r4, r4, r2
 800b9fe:	0049      	lsls	r1, r1, #1
 800ba00:	3d01      	subs	r5, #1
 800ba02:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ba06:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ba0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba0e:	d1f0      	bne.n	800b9f2 <__ieee754_sqrt+0x92>
 800ba10:	462a      	mov	r2, r5
 800ba12:	f04f 0e20 	mov.w	lr, #32
 800ba16:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba1a:	4281      	cmp	r1, r0
 800ba1c:	eb06 0c05 	add.w	ip, r6, r5
 800ba20:	dc02      	bgt.n	800ba28 <__ieee754_sqrt+0xc8>
 800ba22:	d113      	bne.n	800ba4c <__ieee754_sqrt+0xec>
 800ba24:	459c      	cmp	ip, r3
 800ba26:	d811      	bhi.n	800ba4c <__ieee754_sqrt+0xec>
 800ba28:	f1bc 0f00 	cmp.w	ip, #0
 800ba2c:	eb0c 0506 	add.w	r5, ip, r6
 800ba30:	da43      	bge.n	800baba <__ieee754_sqrt+0x15a>
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	db41      	blt.n	800baba <__ieee754_sqrt+0x15a>
 800ba36:	f100 0801 	add.w	r8, r0, #1
 800ba3a:	1a09      	subs	r1, r1, r0
 800ba3c:	459c      	cmp	ip, r3
 800ba3e:	bf88      	it	hi
 800ba40:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ba44:	eba3 030c 	sub.w	r3, r3, ip
 800ba48:	4432      	add	r2, r6
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ba50:	f1be 0e01 	subs.w	lr, lr, #1
 800ba54:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ba58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba60:	d1db      	bne.n	800ba1a <__ieee754_sqrt+0xba>
 800ba62:	430b      	orrs	r3, r1
 800ba64:	d006      	beq.n	800ba74 <__ieee754_sqrt+0x114>
 800ba66:	1c50      	adds	r0, r2, #1
 800ba68:	bf13      	iteet	ne
 800ba6a:	3201      	addne	r2, #1
 800ba6c:	3401      	addeq	r4, #1
 800ba6e:	4672      	moveq	r2, lr
 800ba70:	f022 0201 	bicne.w	r2, r2, #1
 800ba74:	1063      	asrs	r3, r4, #1
 800ba76:	0852      	lsrs	r2, r2, #1
 800ba78:	07e1      	lsls	r1, r4, #31
 800ba7a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ba7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ba82:	bf48      	it	mi
 800ba84:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ba88:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ba8c:	4614      	mov	r4, r2
 800ba8e:	e781      	b.n	800b994 <__ieee754_sqrt+0x34>
 800ba90:	0ad9      	lsrs	r1, r3, #11
 800ba92:	3815      	subs	r0, #21
 800ba94:	055b      	lsls	r3, r3, #21
 800ba96:	2900      	cmp	r1, #0
 800ba98:	d0fa      	beq.n	800ba90 <__ieee754_sqrt+0x130>
 800ba9a:	02cd      	lsls	r5, r1, #11
 800ba9c:	d50a      	bpl.n	800bab4 <__ieee754_sqrt+0x154>
 800ba9e:	f1c2 0420 	rsb	r4, r2, #32
 800baa2:	fa23 f404 	lsr.w	r4, r3, r4
 800baa6:	1e55      	subs	r5, r2, #1
 800baa8:	4093      	lsls	r3, r2
 800baaa:	4321      	orrs	r1, r4
 800baac:	1b42      	subs	r2, r0, r5
 800baae:	e78a      	b.n	800b9c6 <__ieee754_sqrt+0x66>
 800bab0:	4610      	mov	r0, r2
 800bab2:	e7f0      	b.n	800ba96 <__ieee754_sqrt+0x136>
 800bab4:	0049      	lsls	r1, r1, #1
 800bab6:	3201      	adds	r2, #1
 800bab8:	e7ef      	b.n	800ba9a <__ieee754_sqrt+0x13a>
 800baba:	4680      	mov	r8, r0
 800babc:	e7bd      	b.n	800ba3a <__ieee754_sqrt+0xda>
 800babe:	bf00      	nop
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	00000000 	.word	0x00000000

0800bac8 <atan>:
 800bac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	ec55 4b10 	vmov	r4, r5, d0
 800bad0:	4bc3      	ldr	r3, [pc, #780]	; (800bde0 <atan+0x318>)
 800bad2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bad6:	429e      	cmp	r6, r3
 800bad8:	46ab      	mov	fp, r5
 800bada:	dd18      	ble.n	800bb0e <atan+0x46>
 800badc:	4bc1      	ldr	r3, [pc, #772]	; (800bde4 <atan+0x31c>)
 800bade:	429e      	cmp	r6, r3
 800bae0:	dc01      	bgt.n	800bae6 <atan+0x1e>
 800bae2:	d109      	bne.n	800baf8 <atan+0x30>
 800bae4:	b144      	cbz	r4, 800baf8 <atan+0x30>
 800bae6:	4622      	mov	r2, r4
 800bae8:	462b      	mov	r3, r5
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fbd5 	bl	800029c <__adddf3>
 800baf2:	4604      	mov	r4, r0
 800baf4:	460d      	mov	r5, r1
 800baf6:	e006      	b.n	800bb06 <atan+0x3e>
 800baf8:	f1bb 0f00 	cmp.w	fp, #0
 800bafc:	f300 8131 	bgt.w	800bd62 <atan+0x29a>
 800bb00:	a59b      	add	r5, pc, #620	; (adr r5, 800bd70 <atan+0x2a8>)
 800bb02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb06:	ec45 4b10 	vmov	d0, r4, r5
 800bb0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0e:	4bb6      	ldr	r3, [pc, #728]	; (800bde8 <atan+0x320>)
 800bb10:	429e      	cmp	r6, r3
 800bb12:	dc14      	bgt.n	800bb3e <atan+0x76>
 800bb14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bb18:	429e      	cmp	r6, r3
 800bb1a:	dc0d      	bgt.n	800bb38 <atan+0x70>
 800bb1c:	a396      	add	r3, pc, #600	; (adr r3, 800bd78 <atan+0x2b0>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	ee10 0a10 	vmov	r0, s0
 800bb26:	4629      	mov	r1, r5
 800bb28:	f7f4 fbb8 	bl	800029c <__adddf3>
 800bb2c:	4baf      	ldr	r3, [pc, #700]	; (800bdec <atan+0x324>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f7f4 fffa 	bl	8000b28 <__aeabi_dcmpgt>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d1e6      	bne.n	800bb06 <atan+0x3e>
 800bb38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bb3c:	e02b      	b.n	800bb96 <atan+0xce>
 800bb3e:	f000 f963 	bl	800be08 <fabs>
 800bb42:	4bab      	ldr	r3, [pc, #684]	; (800bdf0 <atan+0x328>)
 800bb44:	429e      	cmp	r6, r3
 800bb46:	ec55 4b10 	vmov	r4, r5, d0
 800bb4a:	f300 80bf 	bgt.w	800bccc <atan+0x204>
 800bb4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bb52:	429e      	cmp	r6, r3
 800bb54:	f300 80a0 	bgt.w	800bc98 <atan+0x1d0>
 800bb58:	ee10 2a10 	vmov	r2, s0
 800bb5c:	ee10 0a10 	vmov	r0, s0
 800bb60:	462b      	mov	r3, r5
 800bb62:	4629      	mov	r1, r5
 800bb64:	f7f4 fb9a 	bl	800029c <__adddf3>
 800bb68:	4ba0      	ldr	r3, [pc, #640]	; (800bdec <atan+0x324>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7f4 fb94 	bl	8000298 <__aeabi_dsub>
 800bb70:	2200      	movs	r2, #0
 800bb72:	4606      	mov	r6, r0
 800bb74:	460f      	mov	r7, r1
 800bb76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 fb8d 	bl	800029c <__adddf3>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4630      	mov	r0, r6
 800bb88:	4639      	mov	r1, r7
 800bb8a:	f7f4 fe67 	bl	800085c <__aeabi_ddiv>
 800bb8e:	f04f 0a00 	mov.w	sl, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	460d      	mov	r5, r1
 800bb96:	4622      	mov	r2, r4
 800bb98:	462b      	mov	r3, r5
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f7f4 fd33 	bl	8000608 <__aeabi_dmul>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4680      	mov	r8, r0
 800bba8:	4689      	mov	r9, r1
 800bbaa:	f7f4 fd2d 	bl	8000608 <__aeabi_dmul>
 800bbae:	a374      	add	r3, pc, #464	; (adr r3, 800bd80 <atan+0x2b8>)
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	f7f4 fd26 	bl	8000608 <__aeabi_dmul>
 800bbbc:	a372      	add	r3, pc, #456	; (adr r3, 800bd88 <atan+0x2c0>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f7f4 fb6b 	bl	800029c <__adddf3>
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	463b      	mov	r3, r7
 800bbca:	f7f4 fd1d 	bl	8000608 <__aeabi_dmul>
 800bbce:	a370      	add	r3, pc, #448	; (adr r3, 800bd90 <atan+0x2c8>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fb62 	bl	800029c <__adddf3>
 800bbd8:	4632      	mov	r2, r6
 800bbda:	463b      	mov	r3, r7
 800bbdc:	f7f4 fd14 	bl	8000608 <__aeabi_dmul>
 800bbe0:	a36d      	add	r3, pc, #436	; (adr r3, 800bd98 <atan+0x2d0>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fb59 	bl	800029c <__adddf3>
 800bbea:	4632      	mov	r2, r6
 800bbec:	463b      	mov	r3, r7
 800bbee:	f7f4 fd0b 	bl	8000608 <__aeabi_dmul>
 800bbf2:	a36b      	add	r3, pc, #428	; (adr r3, 800bda0 <atan+0x2d8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb50 	bl	800029c <__adddf3>
 800bbfc:	4632      	mov	r2, r6
 800bbfe:	463b      	mov	r3, r7
 800bc00:	f7f4 fd02 	bl	8000608 <__aeabi_dmul>
 800bc04:	a368      	add	r3, pc, #416	; (adr r3, 800bda8 <atan+0x2e0>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fb47 	bl	800029c <__adddf3>
 800bc0e:	4642      	mov	r2, r8
 800bc10:	464b      	mov	r3, r9
 800bc12:	f7f4 fcf9 	bl	8000608 <__aeabi_dmul>
 800bc16:	a366      	add	r3, pc, #408	; (adr r3, 800bdb0 <atan+0x2e8>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	4689      	mov	r9, r1
 800bc20:	4630      	mov	r0, r6
 800bc22:	4639      	mov	r1, r7
 800bc24:	f7f4 fcf0 	bl	8000608 <__aeabi_dmul>
 800bc28:	a363      	add	r3, pc, #396	; (adr r3, 800bdb8 <atan+0x2f0>)
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f7f4 fb33 	bl	8000298 <__aeabi_dsub>
 800bc32:	4632      	mov	r2, r6
 800bc34:	463b      	mov	r3, r7
 800bc36:	f7f4 fce7 	bl	8000608 <__aeabi_dmul>
 800bc3a:	a361      	add	r3, pc, #388	; (adr r3, 800bdc0 <atan+0x2f8>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f7f4 fb2a 	bl	8000298 <__aeabi_dsub>
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	f7f4 fcde 	bl	8000608 <__aeabi_dmul>
 800bc4c:	a35e      	add	r3, pc, #376	; (adr r3, 800bdc8 <atan+0x300>)
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	f7f4 fb21 	bl	8000298 <__aeabi_dsub>
 800bc56:	4632      	mov	r2, r6
 800bc58:	463b      	mov	r3, r7
 800bc5a:	f7f4 fcd5 	bl	8000608 <__aeabi_dmul>
 800bc5e:	a35c      	add	r3, pc, #368	; (adr r3, 800bdd0 <atan+0x308>)
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f7f4 fb18 	bl	8000298 <__aeabi_dsub>
 800bc68:	4632      	mov	r2, r6
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	f7f4 fccc 	bl	8000608 <__aeabi_dmul>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4640      	mov	r0, r8
 800bc76:	4649      	mov	r1, r9
 800bc78:	f7f4 fb10 	bl	800029c <__adddf3>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	462b      	mov	r3, r5
 800bc80:	f7f4 fcc2 	bl	8000608 <__aeabi_dmul>
 800bc84:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	d14b      	bne.n	800bd26 <atan+0x25e>
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 fb01 	bl	8000298 <__aeabi_dsub>
 800bc96:	e72c      	b.n	800baf2 <atan+0x2a>
 800bc98:	ee10 0a10 	vmov	r0, s0
 800bc9c:	4b53      	ldr	r3, [pc, #332]	; (800bdec <atan+0x324>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 faf9 	bl	8000298 <__aeabi_dsub>
 800bca6:	4b51      	ldr	r3, [pc, #324]	; (800bdec <atan+0x324>)
 800bca8:	4606      	mov	r6, r0
 800bcaa:	460f      	mov	r7, r1
 800bcac:	2200      	movs	r2, #0
 800bcae:	4620      	mov	r0, r4
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	f7f4 faf3 	bl	800029c <__adddf3>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4630      	mov	r0, r6
 800bcbc:	4639      	mov	r1, r7
 800bcbe:	f7f4 fdcd 	bl	800085c <__aeabi_ddiv>
 800bcc2:	f04f 0a01 	mov.w	sl, #1
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	460d      	mov	r5, r1
 800bcca:	e764      	b.n	800bb96 <atan+0xce>
 800bccc:	4b49      	ldr	r3, [pc, #292]	; (800bdf4 <atan+0x32c>)
 800bcce:	429e      	cmp	r6, r3
 800bcd0:	da1d      	bge.n	800bd0e <atan+0x246>
 800bcd2:	ee10 0a10 	vmov	r0, s0
 800bcd6:	4b48      	ldr	r3, [pc, #288]	; (800bdf8 <atan+0x330>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4629      	mov	r1, r5
 800bcdc:	f7f4 fadc 	bl	8000298 <__aeabi_dsub>
 800bce0:	4b45      	ldr	r3, [pc, #276]	; (800bdf8 <atan+0x330>)
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	2200      	movs	r2, #0
 800bce8:	4620      	mov	r0, r4
 800bcea:	4629      	mov	r1, r5
 800bcec:	f7f4 fc8c 	bl	8000608 <__aeabi_dmul>
 800bcf0:	4b3e      	ldr	r3, [pc, #248]	; (800bdec <atan+0x324>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f7f4 fad2 	bl	800029c <__adddf3>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	4639      	mov	r1, r7
 800bd00:	f7f4 fdac 	bl	800085c <__aeabi_ddiv>
 800bd04:	f04f 0a02 	mov.w	sl, #2
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	e743      	b.n	800bb96 <atan+0xce>
 800bd0e:	462b      	mov	r3, r5
 800bd10:	ee10 2a10 	vmov	r2, s0
 800bd14:	4939      	ldr	r1, [pc, #228]	; (800bdfc <atan+0x334>)
 800bd16:	2000      	movs	r0, #0
 800bd18:	f7f4 fda0 	bl	800085c <__aeabi_ddiv>
 800bd1c:	f04f 0a03 	mov.w	sl, #3
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	e737      	b.n	800bb96 <atan+0xce>
 800bd26:	4b36      	ldr	r3, [pc, #216]	; (800be00 <atan+0x338>)
 800bd28:	4e36      	ldr	r6, [pc, #216]	; (800be04 <atan+0x33c>)
 800bd2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bd32:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd36:	f7f4 faaf 	bl	8000298 <__aeabi_dsub>
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	f7f4 faab 	bl	8000298 <__aeabi_dsub>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd4a:	f7f4 faa5 	bl	8000298 <__aeabi_dsub>
 800bd4e:	f1bb 0f00 	cmp.w	fp, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	460d      	mov	r5, r1
 800bd56:	f6bf aed6 	bge.w	800bb06 <atan+0x3e>
 800bd5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd5e:	461d      	mov	r5, r3
 800bd60:	e6d1      	b.n	800bb06 <atan+0x3e>
 800bd62:	a51d      	add	r5, pc, #116	; (adr r5, 800bdd8 <atan+0x310>)
 800bd64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd68:	e6cd      	b.n	800bb06 <atan+0x3e>
 800bd6a:	bf00      	nop
 800bd6c:	f3af 8000 	nop.w
 800bd70:	54442d18 	.word	0x54442d18
 800bd74:	bff921fb 	.word	0xbff921fb
 800bd78:	8800759c 	.word	0x8800759c
 800bd7c:	7e37e43c 	.word	0x7e37e43c
 800bd80:	e322da11 	.word	0xe322da11
 800bd84:	3f90ad3a 	.word	0x3f90ad3a
 800bd88:	24760deb 	.word	0x24760deb
 800bd8c:	3fa97b4b 	.word	0x3fa97b4b
 800bd90:	a0d03d51 	.word	0xa0d03d51
 800bd94:	3fb10d66 	.word	0x3fb10d66
 800bd98:	c54c206e 	.word	0xc54c206e
 800bd9c:	3fb745cd 	.word	0x3fb745cd
 800bda0:	920083ff 	.word	0x920083ff
 800bda4:	3fc24924 	.word	0x3fc24924
 800bda8:	5555550d 	.word	0x5555550d
 800bdac:	3fd55555 	.word	0x3fd55555
 800bdb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bdb4:	bfa2b444 	.word	0xbfa2b444
 800bdb8:	52defd9a 	.word	0x52defd9a
 800bdbc:	3fadde2d 	.word	0x3fadde2d
 800bdc0:	af749a6d 	.word	0xaf749a6d
 800bdc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bdc8:	fe231671 	.word	0xfe231671
 800bdcc:	3fbc71c6 	.word	0x3fbc71c6
 800bdd0:	9998ebc4 	.word	0x9998ebc4
 800bdd4:	3fc99999 	.word	0x3fc99999
 800bdd8:	54442d18 	.word	0x54442d18
 800bddc:	3ff921fb 	.word	0x3ff921fb
 800bde0:	440fffff 	.word	0x440fffff
 800bde4:	7ff00000 	.word	0x7ff00000
 800bde8:	3fdbffff 	.word	0x3fdbffff
 800bdec:	3ff00000 	.word	0x3ff00000
 800bdf0:	3ff2ffff 	.word	0x3ff2ffff
 800bdf4:	40038000 	.word	0x40038000
 800bdf8:	3ff80000 	.word	0x3ff80000
 800bdfc:	bff00000 	.word	0xbff00000
 800be00:	0800cfd8 	.word	0x0800cfd8
 800be04:	0800cfb8 	.word	0x0800cfb8

0800be08 <fabs>:
 800be08:	ec51 0b10 	vmov	r0, r1, d0
 800be0c:	ee10 2a10 	vmov	r2, s0
 800be10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be14:	ec43 2b10 	vmov	d0, r2, r3
 800be18:	4770      	bx	lr
 800be1a:	0000      	movs	r0, r0
 800be1c:	0000      	movs	r0, r0
	...

0800be20 <nan>:
 800be20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be28 <nan+0x8>
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	00000000 	.word	0x00000000
 800be2c:	7ff80000 	.word	0x7ff80000

0800be30 <_init>:
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be32:	bf00      	nop
 800be34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be36:	bc08      	pop	{r3}
 800be38:	469e      	mov	lr, r3
 800be3a:	4770      	bx	lr

0800be3c <_fini>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	bf00      	nop
 800be40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be42:	bc08      	pop	{r3}
 800be44:	469e      	mov	lr, r3
 800be46:	4770      	bx	lr
