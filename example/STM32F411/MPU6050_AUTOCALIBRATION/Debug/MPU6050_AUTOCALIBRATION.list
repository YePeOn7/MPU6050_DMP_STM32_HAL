
MPU6050_AUTOCALIBRATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b860  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c8  0800ba00  0800ba00  0001ba00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbc8  0800cbc8  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbc8  0800cbc8  0001cbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbd0  0800cbd0  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbd0  0800cbd0  0001cbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbd4  0800cbd4  0001cbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800cbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000218  0800cdf0  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  0800cdf0  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116a7  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a03  00000000  00000000  000318ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00035490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac5c  00000000  00000000  00036528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e85  00000000  00000000  00051184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c8b  00000000  00000000  00066009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fec94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  000fece4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9e8 	.word	0x0800b9e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800b9e8 	.word	0x0800b9e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <IIC_Init>:
GPIO_TypeDef * GPIO_SDA;
uint32_t GPIO_PIN_SCL;
uint32_t GPIO_PIN_SDA;

void IIC_Init(I2C_HandleTypeDef i2cHandle)
{			
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
 8001002:	f107 0c08 	add.w	ip, r7, #8
 8001006:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_handle = i2cHandle;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <IIC_Init+0x2c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2254      	movs	r2, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	f007 f8af 	bl	8008178 <memcpy>
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000234 	.word	0x20000234

0800102c <IIC_InitLockupRecover>:

void IIC_InitLockupRecover(GPIO_TypeDef * _GPIO_SLC, uint32_t _GPIO_PIN_SCL, GPIO_TypeDef * _GPIO_SDA, uint32_t _GPIO_PIN_SDA)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
	GPIO_SDA = _GPIO_SDA;
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <IIC_InitLockupRecover+0x34>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]
	GPIO_SCL = _GPIO_SLC;
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <IIC_InitLockupRecover+0x38>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6013      	str	r3, [r2, #0]
	GPIO_PIN_SCL = _GPIO_PIN_SCL;
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <IIC_InitLockupRecover+0x3c>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	6013      	str	r3, [r2, #0]
	GPIO_PIN_SDA = _GPIO_PIN_SDA;
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <IIC_InitLockupRecover+0x40>)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000028c 	.word	0x2000028c
 8001064:	20000288 	.word	0x20000288
 8001068:	20000290 	.word	0x20000290
 800106c:	20000294 	.word	0x20000294

08001070 <IIC_LockupRecover>:

void IIC_LockupRecover()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIO_SDA, GPIO_PIN_SDA))
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <IIC_LockupRecover+0xfc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <IIC_LockupRecover+0x100>)
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	b292      	uxth	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f005 f92c 	bl	80062e0 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d169      	bne.n	8001162 <IIC_LockupRecover+0xf2>
	{
		// Lockup Recovery process
		for(int i = 0; i < IIC_GPIO_NUMBER; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e063      	b.n	800115c <IIC_LockupRecover+0xec>
		{
			if((1 << i) & GPIO_PIN_SCL)
 8001094:	2201      	movs	r2, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	461a      	mov	r2, r3
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <IIC_LockupRecover+0x104>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d056      	beq.n	8001156 <IIC_LockupRecover+0xe6>
			{
				// put the pin into output mode
				GPIO_SCL-> MODER &= ~(0b11 << 2*i);
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <IIC_LockupRecover+0x108>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <IIC_LockupRecover+0x108>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
				GPIO_SCL-> MODER |= (0b1 << 2*i);
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <IIC_LockupRecover+0x108>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <IIC_LockupRecover+0x108>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

				// inject 9 pulses to SCL
				for(int j = 0; j < 9; j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	e01a      	b.n	800111a <IIC_LockupRecover+0xaa>
				{
					HAL_GPIO_WritePin(GPIO_SCL, GPIO_PIN_SCL, RESET);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <IIC_LockupRecover+0x108>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <IIC_LockupRecover+0x104>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	b291      	uxth	r1, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 f90d 	bl	8006310 <HAL_GPIO_WritePin>
					delay_ms(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f004 fe38 	bl	8005d6c <HAL_Delay>
					HAL_GPIO_WritePin(GPIO_SCL, GPIO_PIN_SCL, SET);
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <IIC_LockupRecover+0x108>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <IIC_LockupRecover+0x104>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	b291      	uxth	r1, r2
 8001106:	2201      	movs	r2, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f005 f901 	bl	8006310 <HAL_GPIO_WritePin>
					delay_ms(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f004 fe2c 	bl	8005d6c <HAL_Delay>
				for(int j = 0; j < 9; j++)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b08      	cmp	r3, #8
 800111e:	dde1      	ble.n	80010e4 <IIC_LockupRecover+0x74>
				}

				// put the pin back into AF mode
				GPIO_SCL-> MODER &= ~(0b11 << 2*i);
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <IIC_LockupRecover+0x108>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2103      	movs	r1, #3
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <IIC_LockupRecover+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
				GPIO_SCL-> MODER |= (0b10 << 2*i);
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <IIC_LockupRecover+0x108>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2102      	movs	r1, #2
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4619      	mov	r1, r3
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <IIC_LockupRecover+0x108>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < IIC_GPIO_NUMBER; i++)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3301      	adds	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	dd98      	ble.n	8001094 <IIC_LockupRecover+0x24>
			}
		}


	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000028c 	.word	0x2000028c
 8001170:	20000294 	.word	0x20000294
 8001174:	20000290 	.word	0x20000290
 8001178:	20000288 	.word	0x20000288

0800117c <i2cWrite>:
  
int i2cWrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	460b      	mov	r3, r1
 800118a:	71bb      	strb	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
    return (int)HAL_I2C_Mem_Write(&i2c_handle, addr << 1, reg, 1, data, len, I2C_TIMEOUT);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	b29b      	uxth	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b299      	uxth	r1, r3
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29a      	uxth	r2, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	9002      	str	r0, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <i2cWrite+0x44>)
 80011b0:	f005 fa0c 	bl	80065cc <HAL_I2C_Mem_Write>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000234 	.word	0x20000234

080011c4 <i2cRead>:

int i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&i2c_handle, addr << 1, reg, 1, buf, len, I2C_TIMEOUT);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	9002      	str	r0, [sp, #8]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <i2cRead+0x44>)
 80011f8:	f005 fae2 	bl	80067c0 <HAL_I2C_Mem_Read>
    return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000234 	.word	0x20000234

0800120c <I2C_ReadOneByte>:

unsigned char I2C_ReadOneByte(unsigned char I2C_Addr,unsigned char addr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
	unsigned char data;
	HAL_I2C_Mem_Read(&i2c_handle, I2C_Addr, addr, 1, &data, 1, I2C_TIMEOUT);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b299      	uxth	r1, r3
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f107 030f 	add.w	r3, r7, #15
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <I2C_ReadOneByte+0x3c>)
 8001238:	f005 fac2 	bl	80067c0 <HAL_I2C_Mem_Read>

	return data;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000234 	.word	0x20000234

0800124c <IICreadBytes>:

void IICreadBytes(u8 dev, u8 reg, u8 length, u8 *data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af04      	add	r7, sp, #16
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	b299      	uxth	r1, r3
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	797b      	ldrb	r3, [r7, #5]
 800126a:	b29b      	uxth	r3, r3
 800126c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001270:	9002      	str	r0, [sp, #8]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <IICreadBytes+0x3c>)
 800127c:	f005 faa0 	bl	80067c0 <HAL_I2C_Mem_Read>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000234 	.word	0x20000234

0800128c <IICwriteBytes>:


u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af04      	add	r7, sp, #16
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	460b      	mov	r3, r1
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	4613      	mov	r3, r2
 800129e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	b299      	uxth	r1, r3
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	9002      	str	r0, [sp, #8]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <IICwriteBytes+0x40>)
 80012bc:	f005 f986 	bl	80065cc <HAL_I2C_Mem_Write>
    return 1; //status == 0;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000234 	.word	0x20000234

080012d0 <IICreadByte>:

u8 IICreadByte(u8 dev, u8 reg, u8 *data){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	603a      	str	r2, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	460b      	mov	r3, r1
 80012de:	71bb      	strb	r3, [r7, #6]
	*data=I2C_ReadOneByte(dev, reg);
 80012e0:	79ba      	ldrb	r2, [r7, #6]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff90 	bl	800120c <I2C_ReadOneByte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
    return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <IICwriteByte>:

unsigned char IICwriteByte(unsigned char dev, unsigned char reg, unsigned char data){
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	460b      	mov	r3, r1
 800130a:	71bb      	strb	r3, [r7, #6]
 800130c:	4613      	mov	r3, r2
 800130e:	717b      	strb	r3, [r7, #5]
    return IICwriteBytes(dev, reg, 1, &data);
 8001310:	1d7b      	adds	r3, r7, #5
 8001312:	79b9      	ldrb	r1, [r7, #6]
 8001314:	79f8      	ldrb	r0, [r7, #7]
 8001316:	2201      	movs	r2, #1
 8001318:	f7ff ffb8 	bl	800128c <IICwriteBytes>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <IICwriteBits>:

u8 IICwriteBits(u8 dev,u8 reg,u8 bitStart,u8 length,u8 data)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]

    u8 b;
    if (IICreadByte(dev, reg, &b) != 0) {
 8001346:	f107 020e 	add.w	r2, r7, #14
 800134a:	79b9      	ldrb	r1, [r7, #6]
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ffbe 	bl	80012d0 <IICreadByte>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d03c      	beq.n	80013d4 <IICwriteBits+0xac>
    	printf("start: %d\n", b);
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	4619      	mov	r1, r3
 800135e:	4820      	ldr	r0, [pc, #128]	; (80013e0 <IICwriteBits+0xb8>)
 8001360:	f007 fb8a 	bl	8008a78 <iprintf>
        u8 mask = (0xFF >> (8-length)) << bitStart;
 8001364:	793b      	ldrb	r3, [r7, #4]
 8001366:	f1c3 0308 	rsb	r3, r3, #8
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	411a      	asrs	r2, r3
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	73fb      	strb	r3, [r7, #15]
        data &= (mask >> bitStart);
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	b25a      	sxtb	r2, r3
 8001380:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001384:	4013      	ands	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	f887 3020 	strb.w	r3, [r7, #32]
        data <<= bitStart;
 800138c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~mask;
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	43db      	mvns	r3, r3
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	4013      	ands	r3, r2
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	73bb      	strb	r3, [r7, #14]
        b |= data;
 80013ae:	7bba      	ldrb	r2, [r7, #14]
 80013b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	73bb      	strb	r3, [r7, #14]
        printf("end: %d\n",b);
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	4619      	mov	r1, r3
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <IICwriteBits+0xbc>)
 80013c0:	f007 fb5a 	bl	8008a78 <iprintf>
        return IICwriteByte(dev, reg, b);
 80013c4:	7bba      	ldrb	r2, [r7, #14]
 80013c6:	79b9      	ldrb	r1, [r7, #6]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff97 	bl	80012fe <IICwriteByte>
 80013d0:	4603      	mov	r3, r0
 80013d2:	e000      	b.n	80013d6 <IICwriteBits+0xae>
    } else {
        return 0;
 80013d4:	2300      	movs	r3, #0
    }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800ba00 	.word	0x0800ba00
 80013e4:	0800ba0c 	.word	0x0800ba0c

080013e8 <IICwriteBit>:

u8 IICwriteBit(u8 dev, u8 reg, u8 bitNum, u8 data){
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	4603      	mov	r3, r0
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	460b      	mov	r3, r1
 8001400:	717b      	strb	r3, [r7, #5]
 8001402:	4613      	mov	r3, r2
 8001404:	713b      	strb	r3, [r7, #4]
    u8 b;
    IICreadByte(dev, reg, &b);
 8001406:	f107 020f 	add.w	r2, r7, #15
 800140a:	79b9      	ldrb	r1, [r7, #6]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff5e 	bl	80012d0 <IICreadByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001414:	793b      	ldrb	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <IICwriteBit+0x48>
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	2201      	movs	r2, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	b25a      	sxtb	r2, r3
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e00b      	b.n	8001448 <IICwriteBit+0x60>
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2201      	movs	r2, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	b25b      	sxtb	r3, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	b25a      	sxtb	r2, r3
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4013      	ands	r3, r2
 8001444:	b25b      	sxtb	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
    return IICwriteByte(dev, reg, b);
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	79b9      	ldrb	r1, [r7, #6]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff54 	bl	80012fe <IICwriteByte>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}

08001460 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <__NVIC_SystemReset+0x24>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001472:	4904      	ldr	r1, [pc, #16]	; (8001484 <__NVIC_SystemReset+0x24>)
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_SystemReset+0x28>)
 8001476:	4313      	orrs	r3, r2
 8001478:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <__NVIC_SystemReset+0x20>
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	05fa0004 	.word	0x05fa0004

0800148c <inv_row_2_scale>:

float MPU6050_gyroSensitivity;
float MPU6050_accSensitivity;

static  unsigned short inv_row_2_scale(const signed char *row)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f993 3000 	ldrsb.w	r3, [r3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	dd02      	ble.n	80014a4 <inv_row_2_scale+0x18>
        b = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	81fb      	strh	r3, [r7, #14]
 80014a2:	e02d      	b.n	8001500 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f993 3000 	ldrsb.w	r3, [r3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da02      	bge.n	80014b4 <inv_row_2_scale+0x28>
        b = 4;
 80014ae:	2304      	movs	r3, #4
 80014b0:	81fb      	strh	r3, [r7, #14]
 80014b2:	e025      	b.n	8001500 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	f993 3000 	ldrsb.w	r3, [r3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dd02      	ble.n	80014c6 <inv_row_2_scale+0x3a>
        b = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	81fb      	strh	r3, [r7, #14]
 80014c4:	e01c      	b.n	8001500 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3301      	adds	r3, #1
 80014ca:	f993 3000 	ldrsb.w	r3, [r3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da02      	bge.n	80014d8 <inv_row_2_scale+0x4c>
        b = 5;
 80014d2:	2305      	movs	r3, #5
 80014d4:	81fb      	strh	r3, [r7, #14]
 80014d6:	e013      	b.n	8001500 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3302      	adds	r3, #2
 80014dc:	f993 3000 	ldrsb.w	r3, [r3]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dd02      	ble.n	80014ea <inv_row_2_scale+0x5e>
        b = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	81fb      	strh	r3, [r7, #14]
 80014e8:	e00a      	b.n	8001500 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3302      	adds	r3, #2
 80014ee:	f993 3000 	ldrsb.w	r3, [r3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da02      	bge.n	80014fc <inv_row_2_scale+0x70>
        b = 6;
 80014f6:	2306      	movs	r3, #6
 80014f8:	81fb      	strh	r3, [r7, #14]
 80014fa:	e001      	b.n	8001500 <inv_row_2_scale+0x74>
    else
        b = 7;            // error
 80014fc:	2307      	movs	r3, #7
 80014fe:	81fb      	strh	r3, [r7, #14]
    return b;
 8001500:	89fb      	ldrh	r3, [r7, #14]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffb8 	bl	800148c <inv_row_2_scale>
 800151c:	4603      	mov	r3, r0
 800151e:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3303      	adds	r3, #3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ffb1 	bl	800148c <inv_row_2_scale>
 800152a:	4603      	mov	r3, r0
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	b21a      	sxth	r2, r3
 8001530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3306      	adds	r3, #6
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ffa4 	bl	800148c <inv_row_2_scale>
 8001544:	4603      	mov	r3, r0
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	b21a      	sxth	r2, r3
 800154a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	81fb      	strh	r3, [r7, #14]

    return scalar;
 8001554:	89fb      	ldrh	r3, [r7, #14]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <run_self_test>:

static void run_self_test(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b08a      	sub	sp, #40	; 0x28
 8001562:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fca0 	bl	8003eb4 <mpu_run_self_test>
 8001574:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0x03) {                   //����0x03ΪMPU6050
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	2b03      	cmp	r3, #3
 800157a:	d14b      	bne.n	8001614 <run_self_test+0xb6>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);			//��ȡ��ǰ�����ǵ�״̬
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fc6b 	bl	8002e5c <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001590:	edd7 7a02 	vldr	s15, [r7, #8]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159c:	ee17 3a90 	vmov	r3, s15
 80015a0:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d4:	ee17 3a90 	vmov	r3, s15
 80015d8:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);			//���ݶ�ȡ��״̬����У׼
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 ffb8 	bl	8004554 <dmp_set_gyro_bias>
		
        mpu_get_accel_sens(&accel_sens);	//��ȡ��ǰ���ٶȼƵ�״̬
 80015e4:	1dbb      	adds	r3, r7, #6
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fc70 	bl	8002ecc <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	88fa      	ldrh	r2, [r7, #6]
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	88fa      	ldrh	r2, [r7, #6]
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	88fa      	ldrh	r2, [r7, #6]
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);			//���ݶ�ȡ��״̬����У׼
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f8aa 	bl	8004768 <dmp_set_accel_bias>
		//printf("setting bias succesfully ......\r\n");
    }
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
*******************************************************************************/
void MPU6050_setClockSource(uint8_t source){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af02      	add	r7, sp, #8
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2303      	movs	r3, #3
 800162c:	2202      	movs	r2, #2
 800162e:	216b      	movs	r1, #107	; 0x6b
 8001630:	20d0      	movs	r0, #208	; 0xd0
 8001632:	f7ff fe79 	bl	8001328 <IICwriteBits>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af02      	add	r7, sp, #8
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2302      	movs	r3, #2
 8001650:	2204      	movs	r2, #4
 8001652:	211b      	movs	r1, #27
 8001654:	20d0      	movs	r0, #208	; 0xd0
 8001656:	f7ff fe67 	bl	8001328 <IICwriteBits>

    switch(range)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d81b      	bhi.n	8001698 <MPU6050_setFullScaleGyroRange+0x58>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <MPU6050_setFullScaleGyroRange+0x28>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	08001681 	.word	0x08001681
 8001670:	08001689 	.word	0x08001689
 8001674:	08001691 	.word	0x08001691
    {
    	case MPU6050_GYRO_FS_250: MPU6050_gyroSensitivity = 131; break;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MPU6050_setFullScaleGyroRange+0x60>)
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <MPU6050_setFullScaleGyroRange+0x64>)
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e00b      	b.n	8001698 <MPU6050_setFullScaleGyroRange+0x58>
    	case MPU6050_GYRO_FS_500: MPU6050_gyroSensitivity = 65.5; break;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MPU6050_setFullScaleGyroRange+0x60>)
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <MPU6050_setFullScaleGyroRange+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e007      	b.n	8001698 <MPU6050_setFullScaleGyroRange+0x58>
    	case MPU6050_GYRO_FS_1000: MPU6050_gyroSensitivity = 32.8; break;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <MPU6050_setFullScaleGyroRange+0x60>)
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <MPU6050_setFullScaleGyroRange+0x6c>)
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e003      	b.n	8001698 <MPU6050_setFullScaleGyroRange+0x58>
    	case MPU6050_GYRO_FS_2000: MPU6050_gyroSensitivity = 16.4; break;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <MPU6050_setFullScaleGyroRange+0x60>)
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <MPU6050_setFullScaleGyroRange+0x70>)
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	bf00      	nop
    }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002e4 	.word	0x200002e4
 80016a4:	43030000 	.word	0x43030000
 80016a8:	42830000 	.word	0x42830000
 80016ac:	42033333 	.word	0x42033333
 80016b0:	41833333 	.word	0x41833333

080016b4 <MPU6050_setFullScaleAccelRange>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setFullScaleAccelRange(uint8_t range)
*��������:	    ����  MPU6050 ���ٶȼƵ��������
*******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2302      	movs	r3, #2
 80016c4:	2204      	movs	r2, #4
 80016c6:	211c      	movs	r1, #28
 80016c8:	20d0      	movs	r0, #208	; 0xd0
 80016ca:	f7ff fe2d 	bl	8001328 <IICwriteBits>

    switch(range)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d81f      	bhi.n	8001714 <MPU6050_setFullScaleAccelRange+0x60>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <MPU6050_setFullScaleAccelRange+0x28>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	080016f7 	.word	0x080016f7
 80016e4:	08001701 	.word	0x08001701
 80016e8:	0800170b 	.word	0x0800170b
    {
    	case MPU6050_ACCEL_FS_2: MPU6050_accSensitivity = 16384; break;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MPU6050_setFullScaleAccelRange+0x68>)
 80016ee:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e00e      	b.n	8001714 <MPU6050_setFullScaleAccelRange+0x60>
    	case MPU6050_ACCEL_FS_4: MPU6050_accSensitivity = 8192; break;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MPU6050_setFullScaleAccelRange+0x68>)
 80016f8:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e009      	b.n	8001714 <MPU6050_setFullScaleAccelRange+0x60>
    	case MPU6050_ACCEL_FS_8: MPU6050_accSensitivity = 4096; break;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MPU6050_setFullScaleAccelRange+0x68>)
 8001702:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e004      	b.n	8001714 <MPU6050_setFullScaleAccelRange+0x60>
    	case MPU6050_ACCEL_FS_16: MPU6050_accSensitivity = 2048; break;
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <MPU6050_setFullScaleAccelRange+0x68>)
 800170c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	bf00      	nop
    }
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002e8 	.word	0x200002e8

08001720 <MPU6050_setSleepEnabled>:
*����ԭ��:		void MPU6050_setSleepEnabled(uint8_t enabled)
*��������:	    ����  MPU6050 �Ƿ����˯��ģʽ
				enabled =1   ˯��
			    enabled =0   ����
*******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2206      	movs	r2, #6
 800172e:	216b      	movs	r1, #107	; 0x6b
 8001730:	20d0      	movs	r0, #208	; 0xd0
 8001732:	f7ff fe59 	bl	80013e8 <IICwriteBit>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <MPU6050_setI2CMasterModeEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2205      	movs	r2, #5
 800174c:	216a      	movs	r1, #106	; 0x6a
 800174e:	20d0      	movs	r0, #208	; 0xd0
 8001750:	f7ff fe4a 	bl	80013e8 <IICwriteBit>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <MPU6050_setI2CBypassEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2201      	movs	r2, #1
 800176a:	2137      	movs	r1, #55	; 0x37
 800176c:	20d0      	movs	r0, #208	; 0xd0
 800176e:	f7ff fe3b 	bl	80013e8 <IICwriteBit>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <MPU6050_initialize>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_initialize(void)
*��������:	    ��ʼ�� 	MPU6050 �Խ������״̬��
*******************************************************************************/
void MPU6050_initialize(void) {
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 8001780:	2300      	movs	r3, #0
 8001782:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2201      	movs	r2, #1
 800178c:	2175      	movs	r1, #117	; 0x75
 800178e:	2068      	movs	r0, #104	; 0x68
 8001790:	f7ff fd18 	bl	80011c4 <i2cRead>
	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2201      	movs	r2, #1
 8001798:	2175      	movs	r1, #117	; 0x75
 800179a:	2068      	movs	r0, #104	; 0x68
 800179c:	f7ff fd12 	bl	80011c4 <i2cRead>
		retry++;
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	3301      	adds	r3, #1
 80017a4:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <MPU6050_initialize+0x36>
 80017ac:	f7ff fe58 	bl	8001460 <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 80017b0:	793b      	ldrb	r3, [r7, #4]
 80017b2:	2b68      	cmp	r3, #104	; 0x68
 80017b4:	d1ee      	bne.n	8001794 <MPU6050_initialize+0x1a>

	MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO);
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff ff30 	bl	800161c <MPU6050_setClockSource>
	MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80017bc:	2003      	movs	r0, #3
 80017be:	f7ff ff3f 	bl	8001640 <MPU6050_setFullScaleGyroRange>
	MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff ff76 	bl	80016b4 <MPU6050_setFullScaleAccelRange>
	MPU6050_setSleepEnabled(0);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff ffa9 	bl	8001720 <MPU6050_setSleepEnabled>
	MPU6050_setI2CMasterModeEnabled(0);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff ffb5 	bl	800173e <MPU6050_setI2CMasterModeEnabled>
	MPU6050_setI2CBypassEnabled(0);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ffc1 	bl	800175c <MPU6050_setI2CBypassEnabled>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <MPU6050_DMPInit>:
�������ܣ�MPU6050����DMP�ĳ�ʼ��
��ڲ�������
����  ֵ����
**************************************************************************/
void MPU6050_DMPInit(void)
{ 
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 80017ea:	2300      	movs	r3, #0
 80017ec:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2201      	movs	r2, #1
 80017f6:	2175      	movs	r1, #117	; 0x75
 80017f8:	2068      	movs	r0, #104	; 0x68
 80017fa:	f7ff fce3 	bl	80011c4 <i2cRead>
//	printf("%d\n", temp[0]);

	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2201      	movs	r2, #1
 8001802:	2175      	movs	r1, #117	; 0x75
 8001804:	2068      	movs	r0, #104	; 0x68
 8001806:	f7ff fcdd 	bl	80011c4 <i2cRead>
		retry++;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	3301      	adds	r3, #1
 800180e:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <MPU6050_DMPInit+0x36>
 8001816:	f7ff fe23 	bl	8001460 <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 800181a:	793b      	ldrb	r3, [r7, #4]
 800181c:	2b68      	cmp	r3, #104	; 0x68
 800181e:	d1ee      	bne.n	80017fe <MPU6050_DMPInit+0x1a>

	delay_ms(100);
 8001820:	2064      	movs	r0, #100	; 0x64
 8001822:	f004 faa3 	bl	8005d6c <HAL_Delay>
//	if(temp[0]!=0x68)NVIC_SystemReset();
	if(!mpu_init())
 8001826:	f000 fe67 	bl	80024f8 <mpu_init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11d      	bne.n	800186c <MPU6050_DMPInit+0x88>
	{
//		printf("mpu_setting_sensor.....\r\n");
		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8001830:	2078      	movs	r0, #120	; 0x78
 8001832:	f001 fbed 	bl	8003010 <mpu_set_sensors>
		{
//			printf("mpu_set_sensor complete ......\r\n");
		}
//		printf("mpu configure fifo........\r\n");
		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8001836:	2078      	movs	r0, #120	; 0x78
 8001838:	f001 fb98 	bl	8002f6c <mpu_configure_fifo>
		{
//			printf("mpu_configure_fifo complete ......\r\n");
		}
//		printf("mpu setting sample rate......\r\n");
		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 800183c:	20c8      	movs	r0, #200	; 0xc8
 800183e:	f001 faa7 	bl	8002d90 <mpu_set_sample_rate>
		{
//			printf("mpu_set_sample_rate complete ......\r\n");
		}
//		printf("loading firmware......\r\n");
		if(!dmp_load_motion_driver_firmware())
 8001842:	f002 fd8b 	bl	800435c <dmp_load_motion_driver_firmware>
		{
//			printf("dmp_load_motion_driver_firmware complete ......\r\n");
		}
//		printf("setting orientation.....\r\n");
		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MPU6050_DMPInit+0x9c>)
 8001848:	f7ff fe61 	bl	800150e <inv_orientation_matrix_to_scalar>
 800184c:	4603      	mov	r3, r0
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fd94 	bl	800437c <dmp_set_orientation>
		{
//			printf("dmp set_orientation complete ......\r\n");
		}
//		printf("enabling dmp features ......\r\n");
		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 8001854:	f240 1073 	movw	r0, #371	; 0x173
 8001858:	f003 fb12 	bl	8004e80 <dmp_enable_feature>
		DMP_FEATURE_GYRO_CAL))
		{
//			printf("dmp_enable_feature complete ......\r\n");
		}
//		printf("dmp setting fifo rate ......\r\n");
		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 800185c:	20c8      	movs	r0, #200	; 0xc8
 800185e:	f003 f885 	bl	800496c <dmp_set_fifo_rate>
		{
//			printf("dmp_set_fifo_rate complete ......\r\n");
		}
		run_self_test();
 8001862:	f7ff fe7c 	bl	800155e <run_self_test>
//		printf("setting dmp state.....\r\n");
		if(!mpu_set_dmp_state(1))
 8001866:	2001      	movs	r0, #1
 8001868:	f002 fd1a 	bl	80042a0 <mpu_set_dmp_state>
		{
//			printf("mpu_set_dmp_state complete ......\r\n");
		}
	}

	MPU6050_setZeroMotionDetectionThreshold(1); //set this value to make it very sensitive to movement
 800186c:	2001      	movs	r0, #1
 800186e:	f000 fb4f 	bl	8001f10 <MPU6050_setZeroMotionDetectionThreshold>
	MPU6050_setZeroMotionDetectionDuration(1); //make it as fast as possible detect if the sensor has no movement
 8001872:	2001      	movs	r0, #1
 8001874:	f000 fb6a 	bl	8001f4c <MPU6050_setZeroMotionDetectionDuration>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000004 	.word	0x20000004
 8001884:	00000000 	.word	0x00000000

08001888 <MPU6050_readDMP>:
/**************************************************************************
The output of this function will return to MPU6050_Pitch, MPU6050_Roll, MPU6050_Yaw
**************************************************************************/
int MPU6050_readDMP(void)
{	
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af02      	add	r7, sp, #8
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	float pitch, roll, yaw;

	if(dmp_read_fifo(MPU6050_gyroRAW, MPU6050_accelRAW, quat, &sensor_timestamp, &sensors, &more))
 800188e:	f107 0118 	add.w	r1, r7, #24
 8001892:	1d3a      	adds	r2, r7, #4
 8001894:	f107 0317 	add.w	r3, r7, #23
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MPU6050_readDMP+0x2c>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	460b      	mov	r3, r1
 80018a0:	4905      	ldr	r1, [pc, #20]	; (80018b8 <MPU6050_readDMP+0x30>)
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MPU6050_readDMP+0x34>)
 80018a4:	f003 fcd6 	bl	8005254 <dmp_read_fifo>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <MPU6050_readDMP+0x38>
		return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b2:	e1df      	b.n	8001c74 <MPU6050_readDMP+0x3ec>
 80018b4:	200002a6 	.word	0x200002a6
 80018b8:	200002a0 	.word	0x200002a0
 80018bc:	20000298 	.word	0x20000298

	if (sensors & INV_WXYZ_QUAT )
 80018c0:	4bd9      	ldr	r3, [pc, #868]	; (8001c28 <MPU6050_readDMP+0x3a0>)
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 81d0 	beq.w	8001c72 <MPU6050_readDMP+0x3ea>
	{    
		 q0=quat[0] / q30;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018dc:	eddf 6ad3 	vldr	s13, [pc, #844]	; 8001c2c <MPU6050_readDMP+0x3a4>
 80018e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e4:	4bd2      	ldr	r3, [pc, #840]	; (8001c30 <MPU6050_readDMP+0x3a8>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f4:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001c2c <MPU6050_readDMP+0x3a4>
 80018f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fc:	4bcd      	ldr	r3, [pc, #820]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190c:	eddf 6ac7 	vldr	s13, [pc, #796]	; 8001c2c <MPU6050_readDMP+0x3a4>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	4bc8      	ldr	r3, [pc, #800]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001924:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8001c2c <MPU6050_readDMP+0x3a4>
 8001928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192c:	4bc3      	ldr	r3, [pc, #780]	; (8001c3c <MPU6050_readDMP+0x3b4>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
		 pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;
 8001932:	4bc0      	ldr	r3, [pc, #768]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800193c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001940:	4bbe      	ldr	r3, [pc, #760]	; (8001c3c <MPU6050_readDMP+0x3b4>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800194a:	4bb9      	ldr	r3, [pc, #740]	; (8001c30 <MPU6050_readDMP+0x3a8>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001954:	4bb8      	ldr	r3, [pc, #736]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	ee17 0a90 	vmov	r0, s15
 8001966:	f7fe fdf7 	bl	8000558 <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b10 	vmov	d0, r2, r3
 8001972:	f009 f97d 	bl	800ac70 <asin>
 8001976:	ec51 0b10 	vmov	r0, r1, d0
 800197a:	a3a7      	add	r3, pc, #668	; (adr r3, 8001c18 <MPU6050_readDMP+0x390>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe42 	bl	8000608 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f914 	bl	8000bb8 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
		 roll= atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;
 8001994:	4ba8      	ldr	r3, [pc, #672]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800199e:	4ba7      	ldr	r3, [pc, #668]	; (8001c3c <MPU6050_readDMP+0x3b4>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	4ba1      	ldr	r3, [pc, #644]	; (8001c30 <MPU6050_readDMP+0x3a8>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019b2:	4ba0      	ldr	r3, [pc, #640]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	ee17 0a90 	vmov	r0, s15
 80019c4:	f7fe fdc8 	bl	8000558 <__aeabi_f2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80019d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019da:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e4:	4b94      	ldr	r3, [pc, #592]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ee:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a04:	ee17 0a90 	vmov	r0, s15
 8001a08:	f7fe fda6 	bl	8000558 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b11 	vmov	d1, r2, r3
 8001a14:	ec45 4b10 	vmov	d0, r4, r5
 8001a18:	f009 f95e 	bl	800acd8 <atan2>
 8001a1c:	ec51 0b10 	vmov	r0, r1, d0
 8001a20:	a37d      	add	r3, pc, #500	; (adr r3, 8001c18 <MPU6050_readDMP+0x390>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fdef 	bl	8000608 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8c1 	bl	8000bb8 <__aeabi_d2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	623b      	str	r3, [r7, #32]
		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 8001a3a:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4a:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <MPU6050_readDMP+0x3a8>)
 8001a4c:	edd3 6a00 	vldr	s13, [r3]
 8001a50:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <MPU6050_readDMP+0x3b4>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a62:	ee17 0a90 	vmov	r0, s15
 8001a66:	f7fe fd77 	bl	8000558 <__aeabi_f2d>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	460d      	mov	r5, r1
 8001a6e:	4b70      	ldr	r3, [pc, #448]	; (8001c30 <MPU6050_readDMP+0x3a8>)
 8001a70:	ed93 7a00 	vldr	s14, [r3]
 8001a74:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <MPU6050_readDMP+0x3a8>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 8001a80:	edd3 6a00 	vldr	s13, [r3]
 8001a84:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <MPU6050_readDMP+0x3ac>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a92:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 8001a94:	edd3 6a00 	vldr	s13, [r3]
 8001a98:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <MPU6050_readDMP+0x3b0>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa6:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <MPU6050_readDMP+0x3b4>)
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <MPU6050_readDMP+0x3b4>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aba:	ee17 0a90 	vmov	r0, s15
 8001abe:	f7fe fd4b 	bl	8000558 <__aeabi_f2d>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	ec43 2b11 	vmov	d1, r2, r3
 8001aca:	ec45 4b10 	vmov	d0, r4, r5
 8001ace:	f009 f903 	bl	800acd8 <atan2>
 8001ad2:	ec51 0b10 	vmov	r0, r1, d0
 8001ad6:	a350      	add	r3, pc, #320	; (adr r3, 8001c18 <MPU6050_readDMP+0x390>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fd94 	bl	8000608 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f866 	bl	8000bb8 <__aeabi_d2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	61fb      	str	r3, [r7, #28]

		 MPU6050_PitchUncorected = pitch;
 8001af0:	4a53      	ldr	r2, [pc, #332]	; (8001c40 <MPU6050_readDMP+0x3b8>)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	6013      	str	r3, [r2, #0]
		 MPU6050_RollUncorected = roll;
 8001af6:	4a53      	ldr	r2, [pc, #332]	; (8001c44 <MPU6050_readDMP+0x3bc>)
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	6013      	str	r3, [r2, #0]
		 MPU6050_YawUncorected = yaw;
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <MPU6050_readDMP+0x3c0>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	6013      	str	r3, [r2, #0]

		 pitch += MPU6050_PitchCorrector;
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <MPU6050_readDMP+0x3c4>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		 pitch = fmod(pitch, 360);
 8001b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b16:	f7fe fd1f 	bl	8000558 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001c20 <MPU6050_readDMP+0x398>
 8001b22:	ec43 2b10 	vmov	d0, r2, r3
 8001b26:	f009 f8d9 	bl	800acdc <fmod>
 8001b2a:	ec53 2b10 	vmov	r2, r3, d0
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f841 	bl	8000bb8 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
		 if(pitch > 180) pitch -= 360;
 8001b3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b3e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001c50 <MPU6050_readDMP+0x3c8>
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	dd07      	ble.n	8001b5c <MPU6050_readDMP+0x2d4>
 8001b4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b50:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c54 <MPU6050_readDMP+0x3cc>
 8001b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		 roll += MPU6050_RollCorrector;
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <MPU6050_readDMP+0x3d0>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6a:	edc7 7a08 	vstr	s15, [r7, #32]
		 roll = fmod(roll, 360);
 8001b6e:	6a38      	ldr	r0, [r7, #32]
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001c20 <MPU6050_readDMP+0x398>
 8001b7c:	ec43 2b10 	vmov	d0, r2, r3
 8001b80:	f009 f8ac 	bl	800acdc <fmod>
 8001b84:	ec53 2b10 	vmov	r2, r3, d0
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff f814 	bl	8000bb8 <__aeabi_d2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	623b      	str	r3, [r7, #32]
		 if(roll > 180) roll -= 360;
 8001b94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b98:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001c50 <MPU6050_readDMP+0x3c8>
 8001b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	dd07      	ble.n	8001bb6 <MPU6050_readDMP+0x32e>
 8001ba6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001baa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001c54 <MPU6050_readDMP+0x3cc>
 8001bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bb2:	edc7 7a08 	vstr	s15, [r7, #32]

		 yaw += MPU6050_YawCorrector;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <MPU6050_readDMP+0x3d4>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	edc7 7a07 	vstr	s15, [r7, #28]
		 yaw = fmod(yaw,360);
 8001bc8:	69f8      	ldr	r0, [r7, #28]
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001c20 <MPU6050_readDMP+0x398>
 8001bd6:	ec43 2b10 	vmov	d0, r2, r3
 8001bda:	f009 f87f 	bl	800acdc <fmod>
 8001bde:	ec53 2b10 	vmov	r2, r3, d0
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffe7 	bl	8000bb8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	61fb      	str	r3, [r7, #28]
		 if(yaw > 180) yaw -= 360;
 8001bee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bf2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c50 <MPU6050_readDMP+0x3c8>
 8001bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	dd2f      	ble.n	8001c60 <MPU6050_readDMP+0x3d8>
 8001c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c04:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c54 <MPU6050_readDMP+0x3cc>
 8001c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c0c:	edc7 7a07 	vstr	s15, [r7, #28]
 8001c10:	e026      	b.n	8001c60 <MPU6050_readDMP+0x3d8>
 8001c12:	bf00      	nop
 8001c14:	f3af 8000 	nop.w
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	404ca666 	.word	0x404ca666
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40768000 	.word	0x40768000
 8001c28:	200002a6 	.word	0x200002a6
 8001c2c:	4e800000 	.word	0x4e800000
 8001c30:	20000000 	.word	0x20000000
 8001c34:	200002d8 	.word	0x200002d8
 8001c38:	200002dc 	.word	0x200002dc
 8001c3c:	200002e0 	.word	0x200002e0
 8001c40:	200002b4 	.word	0x200002b4
 8001c44:	200002b8 	.word	0x200002b8
 8001c48:	200002bc 	.word	0x200002bc
 8001c4c:	200002cc 	.word	0x200002cc
 8001c50:	43340000 	.word	0x43340000
 8001c54:	43b40000 	.word	0x43b40000
 8001c58:	200002d0 	.word	0x200002d0
 8001c5c:	200002d4 	.word	0x200002d4

		 MPU6050_Pitch = pitch;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <MPU6050_readDMP+0x3f4>)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	6013      	str	r3, [r2, #0]
		 MPU6050_Roll = roll;
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <MPU6050_readDMP+0x3f8>)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	6013      	str	r3, [r2, #0]
		 MPU6050_Yaw = yaw;
 8001c6c:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <MPU6050_readDMP+0x3fc>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	6013      	str	r3, [r2, #0]
	}

	return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7c:	200002a8 	.word	0x200002a8
 8001c80:	200002ac 	.word	0x200002ac
 8001c84:	200002b0 	.word	0x200002b0

08001c88 <MPU6050_readDMPYaw>:

	return MPU6050_Roll;
}

float MPU6050_readDMPYaw()
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af02      	add	r7, sp, #8
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	float yaw;

	dmp_read_fifo(MPU6050_gyroRAW, MPU6050_accelRAW, quat, &sensor_timestamp, &sensors, &more);
 8001c8e:	f107 0118 	add.w	r1, r7, #24
 8001c92:	1d3a      	adds	r2, r7, #4
 8001c94:	f107 0317 	add.w	r3, r7, #23
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <MPU6050_readDMPYaw+0x1d0>)
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	496e      	ldr	r1, [pc, #440]	; (8001e5c <MPU6050_readDMPYaw+0x1d4>)
 8001ca2:	486f      	ldr	r0, [pc, #444]	; (8001e60 <MPU6050_readDMPYaw+0x1d8>)
 8001ca4:	f003 fad6 	bl	8005254 <dmp_read_fifo>
	if (sensors & INV_WXYZ_QUAT )
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <MPU6050_readDMPYaw+0x1d0>)
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80be 	beq.w	8001e36 <MPU6050_readDMPYaw+0x1ae>
	{
		 q0=quat[0] / q30;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001e64 <MPU6050_readDMPYaw+0x1dc>
 8001cc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <MPU6050_readDMPYaw+0x1e0>)
 8001cce:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cdc:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001e64 <MPU6050_readDMPYaw+0x1dc>
 8001ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <MPU6050_readDMPYaw+0x1e4>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001e64 <MPU6050_readDMPYaw+0x1dc>
 8001cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <MPU6050_readDMPYaw+0x1e8>)
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001e64 <MPU6050_readDMPYaw+0x1dc>
 8001d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d14:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <MPU6050_readDMPYaw+0x1ec>)
 8001d16:	edc3 7a00 	vstr	s15, [r3]

		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 8001d1a:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <MPU6050_readDMPYaw+0x1e4>)
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <MPU6050_readDMPYaw+0x1e8>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2a:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <MPU6050_readDMPYaw+0x1e0>)
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <MPU6050_readDMPYaw+0x1ec>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d42:	ee17 0a90 	vmov	r0, s15
 8001d46:	f7fe fc07 	bl	8000558 <__aeabi_f2d>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <MPU6050_readDMPYaw+0x1e0>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <MPU6050_readDMPYaw+0x1e0>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <MPU6050_readDMPYaw+0x1e4>)
 8001d60:	edd3 6a00 	vldr	s13, [r3]
 8001d64:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <MPU6050_readDMPYaw+0x1e4>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <MPU6050_readDMPYaw+0x1e8>)
 8001d74:	edd3 6a00 	vldr	s13, [r3]
 8001d78:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <MPU6050_readDMPYaw+0x1e8>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <MPU6050_readDMPYaw+0x1ec>)
 8001d88:	edd3 6a00 	vldr	s13, [r3]
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <MPU6050_readDMPYaw+0x1ec>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ec43 2b11 	vmov	d1, r2, r3
 8001daa:	ec45 4b10 	vmov	d0, r4, r5
 8001dae:	f008 ff93 	bl	800acd8 <atan2>
 8001db2:	ec51 0b10 	vmov	r0, r1, d0
 8001db6:	a324      	add	r3, pc, #144	; (adr r3, 8001e48 <MPU6050_readDMPYaw+0x1c0>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fc24 	bl	8000608 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe fef6 	bl	8000bb8 <__aeabi_d2f>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	61fb      	str	r3, [r7, #28]

		 MPU6050_YawUncorected = yaw;
 8001dd0:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <MPU6050_readDMPYaw+0x1f0>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	6013      	str	r3, [r2, #0]

		 yaw += MPU6050_YawCorrector;
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <MPU6050_readDMPYaw+0x1f4>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
		 yaw = fmod(yaw, 360);
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f7fe fbb5 	bl	8000558 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001e50 <MPU6050_readDMPYaw+0x1c8>
 8001df6:	ec43 2b10 	vmov	d0, r2, r3
 8001dfa:	f008 ff6f 	bl	800acdc <fmod>
 8001dfe:	ec53 2b10 	vmov	r2, r3, d0
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fed7 	bl	8000bb8 <__aeabi_d2f>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	61fb      	str	r3, [r7, #28]
		 if(yaw > 180) yaw -= 360;
 8001e0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e12:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e80 <MPU6050_readDMPYaw+0x1f8>
 8001e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	dd07      	ble.n	8001e30 <MPU6050_readDMPYaw+0x1a8>
 8001e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e24:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001e84 <MPU6050_readDMPYaw+0x1fc>
 8001e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e2c:	edc7 7a07 	vstr	s15, [r7, #28]
		 MPU6050_Yaw = yaw;
 8001e30:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <MPU6050_readDMPYaw+0x200>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	6013      	str	r3, [r2, #0]
	}

	return MPU6050_Yaw;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MPU6050_readDMPYaw+0x200>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	ee07 3a90 	vmov	s15, r3
}
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bdb0      	pop	{r4, r5, r7, pc}
 8001e48:	66666666 	.word	0x66666666
 8001e4c:	404ca666 	.word	0x404ca666
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40768000 	.word	0x40768000
 8001e58:	200002a6 	.word	0x200002a6
 8001e5c:	200002a0 	.word	0x200002a0
 8001e60:	20000298 	.word	0x20000298
 8001e64:	4e800000 	.word	0x4e800000
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	200002d8 	.word	0x200002d8
 8001e70:	200002dc 	.word	0x200002dc
 8001e74:	200002e0 	.word	0x200002e0
 8001e78:	200002bc 	.word	0x200002bc
 8001e7c:	200002d4 	.word	0x200002d4
 8001e80:	43340000 	.word	0x43340000
 8001e84:	43b40000 	.word	0x43b40000
 8001e88:	200002b0 	.word	0x200002b0

08001e8c <MPU6050_updateAngleCorrector>:
{
	MPU6050_YawCorrectorRate = yawCorrectorRate;
}

void MPU6050_updateAngleCorrector(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	MPU6050_PitchCorrector += MPU6050_PitchCorrectorRate;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MPU6050_updateAngleCorrector+0x50>)
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MPU6050_updateAngleCorrector+0x54>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MPU6050_updateAngleCorrector+0x50>)
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_RollCorrector += MPU6050_RollCorrectorRate;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MPU6050_updateAngleCorrector+0x58>)
 8001ea8:	ed93 7a00 	vldr	s14, [r3]
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MPU6050_updateAngleCorrector+0x5c>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MPU6050_updateAngleCorrector+0x58>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_YawCorrector += MPU6050_YawCorrectorRate;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MPU6050_updateAngleCorrector+0x60>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MPU6050_updateAngleCorrector+0x64>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MPU6050_updateAngleCorrector+0x60>)
 8001ece:	edc3 7a00 	vstr	s15, [r3]
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	200002cc 	.word	0x200002cc
 8001ee0:	200002c0 	.word	0x200002c0
 8001ee4:	200002d0 	.word	0x200002d0
 8001ee8:	200002c4 	.word	0x200002c4
 8001eec:	200002d4 	.word	0x200002d4
 8001ef0:	200002c8 	.word	0x200002c8

08001ef4 <MPU6050_getZeroMotionDetectionThreshold>:
		acc[i] = (float)MPU6050_accelRAW[i] / MPU6050_accSensitivity;
	}
}

uint8_t MPU6050_getZeroMotionDetectionThreshold()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	IICreadBytes(devAddr, MPU6050_RA_ZRMOT_THR, 1, buffer);
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <MPU6050_getZeroMotionDetectionThreshold+0x18>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	2121      	movs	r1, #33	; 0x21
 8001efe:	20d0      	movs	r0, #208	; 0xd0
 8001f00:	f7ff f9a4 	bl	800124c <IICreadBytes>
	return buffer[0];
 8001f04:	4b01      	ldr	r3, [pc, #4]	; (8001f0c <MPU6050_getZeroMotionDetectionThreshold+0x18>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200002ec 	.word	0x200002ec

08001f10 <MPU6050_setZeroMotionDetectionThreshold>:
void MPU6050_setZeroMotionDetectionThreshold(unsigned char threshold)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	IICwriteByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2121      	movs	r1, #33	; 0x21
 8001f20:	20d0      	movs	r0, #208	; 0xd0
 8001f22:	f7ff f9ec 	bl	80012fe <IICwriteByte>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <MPU6050_getZeroMotionDetectionDuration>:
uint8_t MPU6050_getZeroMotionDetectionDuration()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	IICreadBytes(devAddr, MPU6050_RA_ZRMOT_DUR, 1, buffer);
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <MPU6050_getZeroMotionDetectionDuration+0x18>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	2122      	movs	r1, #34	; 0x22
 8001f3a:	20d0      	movs	r0, #208	; 0xd0
 8001f3c:	f7ff f986 	bl	800124c <IICreadBytes>
	return buffer[0];
 8001f40:	4b01      	ldr	r3, [pc, #4]	; (8001f48 <MPU6050_getZeroMotionDetectionDuration+0x18>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200002ec 	.word	0x200002ec

08001f4c <MPU6050_setZeroMotionDetectionDuration>:
void MPU6050_setZeroMotionDetectionDuration(unsigned char duration)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	IICwriteByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2122      	movs	r1, #34	; 0x22
 8001f5c:	20d0      	movs	r0, #208	; 0xd0
 8001f5e:	f7ff f9ce 	bl	80012fe <IICwriteByte>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <MPU6050_getMotionStatus>:
uint8_t MPU6050_getMotionStatus()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	IICreadBytes(devAddr, MPU6050_RA_MOT_DETECT_STATUS, 1, buffer);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <MPU6050_getMotionStatus+0x18>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	2161      	movs	r1, #97	; 0x61
 8001f76:	20d0      	movs	r0, #208	; 0xd0
 8001f78:	f7ff f968 	bl	800124c <IICreadBytes>
	return buffer[0];
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <MPU6050_getMotionStatus+0x18>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200002ec 	.word	0x200002ec

08001f88 <MPU6050_getXGyroOffset>:

int16_t MPU6050_getXGyroOffset() {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    IICreadBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MPU6050_getXGyroOffset+0x28>)
 8001f8e:	2202      	movs	r2, #2
 8001f90:	2113      	movs	r1, #19
 8001f92:	20d0      	movs	r0, #208	; 0xd0
 8001f94:	f7ff f95a 	bl	800124c <IICreadBytes>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <MPU6050_getXGyroOffset+0x28>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <MPU6050_getXGyroOffset+0x28>)
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002ec 	.word	0x200002ec

08001fb4 <MPU6050_setXGyroOffset>:
void MPU6050_setXGyroOffset(int16_t offset) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
	u8 buffer[] = {offset>>8 & 0xff, offset & 0xff};
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	121b      	asrs	r3, r3, #8
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	733b      	strb	r3, [r7, #12]
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	737b      	strb	r3, [r7, #13]
    IICwriteBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	2113      	movs	r1, #19
 8001fd8:	20d0      	movs	r0, #208	; 0xd0
 8001fda:	f7ff f957 	bl	800128c <IICwriteBytes>
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <MPU6050_getYGyroOffset>:

// YG_OFFS_USR* register

int16_t MPU6050_getYGyroOffset() {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    IICreadBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MPU6050_getYGyroOffset+0x28>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	2115      	movs	r1, #21
 8001ff2:	20d0      	movs	r0, #208	; 0xd0
 8001ff4:	f7ff f92a 	bl	800124c <IICreadBytes>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <MPU6050_getYGyroOffset+0x28>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <MPU6050_getYGyroOffset+0x28>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200002ec 	.word	0x200002ec

08002014 <MPU6050_setYGyroOffset>:
void MPU6050_setYGyroOffset(int16_t offset) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
	u8 buffer[] = {offset>>8 & 0xff, offset & 0xff};
 800201e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002022:	121b      	asrs	r3, r3, #8
 8002024:	b21b      	sxth	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	733b      	strb	r3, [r7, #12]
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	737b      	strb	r3, [r7, #13]
    IICwriteBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2202      	movs	r2, #2
 8002036:	2115      	movs	r1, #21
 8002038:	20d0      	movs	r0, #208	; 0xd0
 800203a:	f7ff f927 	bl	800128c <IICwriteBytes>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <MPU6050_getZGyroOffset>:

// ZG_OFFS_USR* register

int16_t MPU6050_getZGyroOffset() {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    IICreadBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MPU6050_getZGyroOffset+0x28>)
 800204e:	2202      	movs	r2, #2
 8002050:	2117      	movs	r1, #23
 8002052:	20d0      	movs	r0, #208	; 0xd0
 8002054:	f7ff f8fa 	bl	800124c <IICreadBytes>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <MPU6050_getZGyroOffset+0x28>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <MPU6050_getZGyroOffset+0x28>)
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200002ec 	.word	0x200002ec

08002074 <MPU6050_setZGyroOffset>:
void MPU6050_setZGyroOffset(int16_t offset) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
	u8 buffer[] = {offset>>8 & 0xff, offset & 0xff};
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	121b      	asrs	r3, r3, #8
 8002084:	b21b      	sxth	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	733b      	strb	r3, [r7, #12]
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	737b      	strb	r3, [r7, #13]
    IICwriteBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2202      	movs	r2, #2
 8002096:	2117      	movs	r1, #23
 8002098:	20d0      	movs	r0, #208	; 0xd0
 800209a:	f7ff f8f7 	bl	800128c <IICwriteBytes>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <MPU6050_getAllGyroOffset>:

void MPU6050_getAllGyroOffset(int16_t* gyroOffset)
{
 80020a6:	b590      	push	{r4, r7, lr}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	gyroOffset[0] = MPU6050_getXGyroOffset();
 80020ae:	f7ff ff6b 	bl	8001f88 <MPU6050_getXGyroOffset>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	801a      	strh	r2, [r3, #0]
	gyroOffset[1] = MPU6050_getYGyroOffset();
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1c9c      	adds	r4, r3, #2
 80020be:	f7ff ff93 	bl	8001fe8 <MPU6050_getYGyroOffset>
 80020c2:	4603      	mov	r3, r0
 80020c4:	8023      	strh	r3, [r4, #0]
	gyroOffset[2] = MPU6050_getZGyroOffset();
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	1d1c      	adds	r4, r3, #4
 80020ca:	f7ff ffbd 	bl	8002048 <MPU6050_getZGyroOffset>
 80020ce:	4603      	mov	r3, r0
 80020d0:	8023      	strh	r3, [r4, #0]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}

080020da <MPU6050_setAllGyroOffset>:

void MPU6050_setAllGyroOffset(int16_t* gyroOffset)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	MPU6050_setXGyroOffset(gyroOffset[0]);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff63 	bl	8001fb4 <MPU6050_setXGyroOffset>
	MPU6050_setYGyroOffset(gyroOffset[1]);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3302      	adds	r3, #2
 80020f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff8c 	bl	8002014 <MPU6050_setYGyroOffset>
	MPU6050_setZGyroOffset(gyroOffset[2]);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ffb5 	bl	8002074 <MPU6050_setZGyroOffset>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <MPU6050_GyroCalibration>:

void MPU6050_GyroCalibration(int observationTime, float threshold)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	ed87 0a00 	vstr	s0, [r7]
	int loop = 100;
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	623b      	str	r3, [r7, #32]
	int16_t temp[3] = {0};
 8002124:	f107 0318 	add.w	r3, r7, #24
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	809a      	strh	r2, [r3, #4]
	short gyroOffset[3];
	unsigned short gyroFSR;
	short gyroOffsetFSR = 1000; //get from "MPU HW Offset Registers 1.2.pdf"
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	83fb      	strh	r3, [r7, #30]

	/************** FIRST STEP CALIBRATION **********/
	mpu_get_gyro_fsr(&gyroFSR);
 8002134:	f107 030e 	add.w	r3, r7, #14
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fc59 	bl	80029f0 <mpu_get_gyro_fsr>

	for (int i=0;i<50;i++) while(MPU6050_readDMP());
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002142:	e008      	b.n	8002156 <MPU6050_GyroCalibration+0x42>
 8002144:	bf00      	nop
 8002146:	f7ff fb9f 	bl	8001888 <MPU6050_readDMP>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1fa      	bne.n	8002146 <MPU6050_GyroCalibration+0x32>
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	3301      	adds	r3, #1
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	2b31      	cmp	r3, #49	; 0x31
 800215a:	ddf3      	ble.n	8002144 <MPU6050_GyroCalibration+0x30>
	for(int i = 0;i < loop;i++)
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002160:	e029      	b.n	80021b6 <MPU6050_GyroCalibration+0xa2>
	{
		while(MPU6050_readDMP());
 8002162:	bf00      	nop
 8002164:	f7ff fb90 	bl	8001888 <MPU6050_readDMP>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1fa      	bne.n	8002164 <MPU6050_GyroCalibration+0x50>
		temp[0] += MPU6050_gyroRAW[0];
 800216e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b47      	ldr	r3, [pc, #284]	; (8002294 <MPU6050_GyroCalibration+0x180>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4413      	add	r3, r2
 800217e:	b29b      	uxth	r3, r3
 8002180:	b21b      	sxth	r3, r3
 8002182:	833b      	strh	r3, [r7, #24]
		temp[1] += MPU6050_gyroRAW[1];
 8002184:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <MPU6050_GyroCalibration+0x180>)
 800218c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	b21b      	sxth	r3, r3
 8002198:	837b      	strh	r3, [r7, #26]
		temp[2] += MPU6050_gyroRAW[2];
 800219a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <MPU6050_GyroCalibration+0x180>)
 80021a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	83bb      	strh	r3, [r7, #28]
	for(int i = 0;i < loop;i++)
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	3301      	adds	r3, #1
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dbd1      	blt.n	8002162 <MPU6050_GyroCalibration+0x4e>
	}

	for(int i = 0; i < 3; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e013      	b.n	80021ec <MPU6050_GyroCalibration+0xd8>
	{
		temp[i] = temp[i]/loop;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	3330      	adds	r3, #48	; 0x30
 80021ca:	443b      	add	r3, r7
 80021cc:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80021d0:	461a      	mov	r2, r3
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021d8:	b21a      	sxth	r2, r3
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	3330      	adds	r3, #48	; 0x30
 80021e0:	443b      	add	r3, r7
 80021e2:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 3; i++)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	dde8      	ble.n	80021c4 <MPU6050_GyroCalibration+0xb0>
	}
	MPU6050_getAllGyroOffset(gyroOffset);
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff55 	bl	80020a6 <MPU6050_getAllGyroOffset>

	gyroOffset[0] += temp[0]*gyroFSR/gyroOffsetFSR;
 80021fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002200:	b29a      	uxth	r2, r3
 8002202:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002206:	89f9      	ldrh	r1, [r7, #14]
 8002208:	fb03 f101 	mul.w	r1, r3, r1
 800220c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002210:	fb91 f3f3 	sdiv	r3, r1, r3
 8002214:	b29b      	uxth	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b29b      	uxth	r3, r3
 800221a:	b21b      	sxth	r3, r3
 800221c:	823b      	strh	r3, [r7, #16]
	gyroOffset[1] += temp[1]*gyroFSR/gyroOffsetFSR;
 800221e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002222:	b29a      	uxth	r2, r3
 8002224:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002228:	89f9      	ldrh	r1, [r7, #14]
 800222a:	fb03 f101 	mul.w	r1, r3, r1
 800222e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002232:	fb91 f3f3 	sdiv	r3, r1, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	b21b      	sxth	r3, r3
 800223e:	827b      	strh	r3, [r7, #18]
	gyroOffset[2] -= temp[2]*gyroFSR/gyroOffsetFSR;
 8002240:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002244:	b29a      	uxth	r2, r3
 8002246:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800224a:	89f9      	ldrh	r1, [r7, #14]
 800224c:	fb03 f101 	mul.w	r1, r3, r1
 8002250:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002254:	fb91 f3f3 	sdiv	r3, r1, r3
 8002258:	b29b      	uxth	r3, r3
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	b21b      	sxth	r3, r3
 8002260:	82bb      	strh	r3, [r7, #20]

	MPU6050_setAllGyroOffset(gyroOffset);
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff37 	bl	80020da <MPU6050_setAllGyroOffset>

	/**************** SECOND STEP CALIBRATION ******************/
	while(1)
	{
		MPU6050_readDMPYaw();
 800226c:	f7ff fd0c 	bl	8001c88 <MPU6050_readDMPYaw>
		if(MPU6050_GyroContinuosCalibration(observationTime, threshold)) break;
 8002270:	ed97 0a00 	vldr	s0, [r7]
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f80f 	bl	8002298 <MPU6050_GyroContinuosCalibration>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d103      	bne.n	8002288 <MPU6050_GyroCalibration+0x174>
		delay_ms(100);
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	f003 fd73 	bl	8005d6c <HAL_Delay>
		MPU6050_readDMPYaw();
 8002286:	e7f1      	b.n	800226c <MPU6050_GyroCalibration+0x158>
		if(MPU6050_GyroContinuosCalibration(observationTime, threshold)) break;
 8002288:	bf00      	nop
	}
//	mpu_reset_fifo();
//	mpu_reset_dmp();
}
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	; 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000298 	.word	0x20000298

08002298 <MPU6050_GyroContinuosCalibration>:

int MPU6050_GyroContinuosCalibration(int observationTime, float threshold) //only Yaw
{
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	b091      	sub	sp, #68	; 0x44
 800229c:	af08      	add	r7, sp, #32
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	ed87 0a02 	vstr	s0, [r7, #8]
	static float startYaw;
	static float gyroDriftRate = 0;
	int currentOffset;
	static int offset;
	int timeSpent;
	motionStatus = MPU6050_getMotionStatus(); // 0: moving, 1 : no movement
 80022a4:	f7ff fe62 	bl	8001f6c <MPU6050_getMotionStatus>
 80022a8:	4603      	mov	r3, r0
 80022aa:	77fb      	strb	r3, [r7, #31]

	if(motionStatus && !previoustMotionStatus)
 80022ac:	7ffb      	ldrb	r3, [r7, #31]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d011      	beq.n	80022d6 <MPU6050_GyroContinuosCalibration+0x3e>
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <MPU6050_GyroContinuosCalibration+0x188>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <MPU6050_GyroContinuosCalibration+0x3e>
	{
		startTime = getTick();
 80022ba:	f003 fd4b 	bl	8005d54 <HAL_GetTick>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b58      	ldr	r3, [pc, #352]	; (8002424 <MPU6050_GyroContinuosCalibration+0x18c>)
 80022c4:	601a      	str	r2, [r3, #0]
		startYaw = MPU6050_YawUncorected;
 80022c6:	4b58      	ldr	r3, [pc, #352]	; (8002428 <MPU6050_GyroContinuosCalibration+0x190>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <MPU6050_GyroContinuosCalibration+0x194>)
 80022cc:	6013      	str	r3, [r2, #0]
		gyroDriftRate = 0;
 80022ce:	4b58      	ldr	r3, [pc, #352]	; (8002430 <MPU6050_GyroContinuosCalibration+0x198>)
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
	}
	timeSpent = (getTick() - startTime);
 80022d6:	f003 fd3d 	bl	8005d54 <HAL_GetTick>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a51      	ldr	r2, [pc, #324]	; (8002424 <MPU6050_GyroContinuosCalibration+0x18c>)
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
	if(motionStatus && timeSpent > observationTime)
 80022e4:	7ffb      	ldrb	r3, [r7, #31]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d055      	beq.n	8002396 <MPU6050_GyroContinuosCalibration+0xfe>
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dd51      	ble.n	8002396 <MPU6050_GyroContinuosCalibration+0xfe>
	{
		gyroDriftRate = (MPU6050_YawUncorected - startYaw)/timeSpent*1000;
 80022f2:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <MPU6050_GyroContinuosCalibration+0x190>)
 80022f4:	ed93 7a00 	vldr	s14, [r3]
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <MPU6050_GyroContinuosCalibration+0x194>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002310:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002434 <MPU6050_GyroContinuosCalibration+0x19c>
 8002314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002318:	4b45      	ldr	r3, [pc, #276]	; (8002430 <MPU6050_GyroContinuosCalibration+0x198>)
 800231a:	edc3 7a00 	vstr	s15, [r3]
		currentOffset = MPU6050_getZGyroOffset();
 800231e:	f7ff fe93 	bl	8002048 <MPU6050_getZGyroOffset>
 8002322:	4603      	mov	r3, r0
 8002324:	617b      	str	r3, [r7, #20]
		offset = currentOffset - round((float)gyroDriftRate*32.7675);
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7fe f904 	bl	8000534 <__aeabi_i2d>
 800232c:	4604      	mov	r4, r0
 800232e:	460d      	mov	r5, r1
 8002330:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <MPU6050_GyroContinuosCalibration+0x198>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f90f 	bl	8000558 <__aeabi_f2d>
 800233a:	a337      	add	r3, pc, #220	; (adr r3, 8002418 <MPU6050_GyroContinuosCalibration+0x180>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f962 	bl	8000608 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	ec43 2b17 	vmov	d7, r2, r3
 800234c:	eeb0 0a47 	vmov.f32	s0, s14
 8002350:	eef0 0a67 	vmov.f32	s1, s15
 8002354:	f008 fc46 	bl	800abe4 <round>
 8002358:	ec53 2b10 	vmov	r2, r3, d0
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fd ff9a 	bl	8000298 <__aeabi_dsub>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fbfc 	bl	8000b68 <__aeabi_d2iz>
 8002370:	4603      	mov	r3, r0
 8002372:	4a31      	ldr	r2, [pc, #196]	; (8002438 <MPU6050_GyroContinuosCalibration+0x1a0>)
 8002374:	6013      	str	r3, [r2, #0]
		MPU6050_setZGyroOffset(offset);
 8002376:	4b30      	ldr	r3, [pc, #192]	; (8002438 <MPU6050_GyroContinuosCalibration+0x1a0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b21b      	sxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe79 	bl	8002074 <MPU6050_setZGyroOffset>
		startTime = getTick();
 8002382:	f003 fce7 	bl	8005d54 <HAL_GetTick>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <MPU6050_GyroContinuosCalibration+0x18c>)
 800238c:	601a      	str	r2, [r3, #0]
		startYaw = MPU6050_YawUncorected;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <MPU6050_GyroContinuosCalibration+0x190>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a26      	ldr	r2, [pc, #152]	; (800242c <MPU6050_GyroContinuosCalibration+0x194>)
 8002394:	6013      	str	r3, [r2, #0]
	}

	printf("yaw: %.1f ms:%d startTime:%li timeSpent:%d dr:%.3f offset:%d\n", MPU6050_Yaw, motionStatus, startTime, timeSpent, gyroDriftRate, offset);
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <MPU6050_GyroContinuosCalibration+0x1a4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8dc 	bl	8000558 <__aeabi_f2d>
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
 80023a4:	7ffe      	ldrb	r6, [r7, #31]
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MPU6050_GyroContinuosCalibration+0x18c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <MPU6050_GyroContinuosCalibration+0x198>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8d1 	bl	8000558 <__aeabi_f2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	491f      	ldr	r1, [pc, #124]	; (8002438 <MPU6050_GyroContinuosCalibration+0x1a0>)
 80023bc:	6809      	ldr	r1, [r1, #0]
 80023be:	9106      	str	r1, [sp, #24]
 80023c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	9600      	str	r6, [sp, #0]
 80023ce:	4622      	mov	r2, r4
 80023d0:	462b      	mov	r3, r5
 80023d2:	481b      	ldr	r0, [pc, #108]	; (8002440 <MPU6050_GyroContinuosCalibration+0x1a8>)
 80023d4:	f006 fb50 	bl	8008a78 <iprintf>
	previoustMotionStatus = motionStatus;
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <MPU6050_GyroContinuosCalibration+0x188>)
 80023da:	7ffb      	ldrb	r3, [r7, #31]
 80023dc:	7013      	strb	r3, [r2, #0]

	if(gyroDriftRate != 0 && fabs(gyroDriftRate) < threshold) return 1;
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <MPU6050_GyroContinuosCalibration+0x198>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d00d      	beq.n	800240a <MPU6050_GyroContinuosCalibration+0x172>
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <MPU6050_GyroContinuosCalibration+0x198>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	eef0 7ae7 	vabs.f32	s15, s15
 80023f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80023fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	dd01      	ble.n	800240a <MPU6050_GyroContinuosCalibration+0x172>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <MPU6050_GyroContinuosCalibration+0x174>
	return 0;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3724      	adds	r7, #36	; 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	70a3d70a 	.word	0x70a3d70a
 800241c:	4040623d 	.word	0x4040623d
 8002420:	200002fa 	.word	0x200002fa
 8002424:	200002fc 	.word	0x200002fc
 8002428:	200002bc 	.word	0x200002bc
 800242c:	20000300 	.word	0x20000300
 8002430:	20000304 	.word	0x20000304
 8002434:	447a0000 	.word	0x447a0000
 8002438:	20000308 	.word	0x20000308
 800243c:	200002b0 	.word	0x200002b0
 8002440:	0800ba18 	.word	0x0800ba18

08002444 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <set_int_enable+0xb0>)
 8002450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01c      	beq.n	8002492 <set_int_enable+0x4e>
        if (enable)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800245e:	2302      	movs	r3, #2
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e001      	b.n	8002468 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <set_int_enable+0xb0>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	7818      	ldrb	r0, [r3, #0]
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <set_int_enable+0xb0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	7bd9      	ldrb	r1, [r3, #15]
 8002474:	f107 030f 	add.w	r3, r7, #15
 8002478:	2201      	movs	r2, #1
 800247a:	f7fe fe7f 	bl	800117c <i2cWrite>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <set_int_enable+0x46>
            return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002488:	e030      	b.n	80024ec <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <set_int_enable+0xb0>)
 800248e:	745a      	strb	r2, [r3, #17]
 8002490:	e02b      	b.n	80024ea <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <set_int_enable+0xb0>)
 8002494:	7a9b      	ldrb	r3, [r3, #10]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <set_int_enable+0x5c>
            return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249e:	e025      	b.n	80024ec <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <set_int_enable+0x6e>
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <set_int_enable+0xb0>)
 80024a8:	7c5b      	ldrb	r3, [r3, #17]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <set_int_enable+0x6e>
            return 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e01c      	b.n	80024ec <set_int_enable+0xa8>
        if (enable)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e001      	b.n	80024c2 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <set_int_enable+0xb0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	7818      	ldrb	r0, [r3, #0]
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <set_int_enable+0xb0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	7bd9      	ldrb	r1, [r3, #15]
 80024ce:	f107 030f 	add.w	r3, r7, #15
 80024d2:	2201      	movs	r2, #1
 80024d4:	f7fe fe52 	bl	800117c <i2cWrite>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <set_int_enable+0xa0>
            return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e2:	e003      	b.n	80024ec <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <set_int_enable+0xb0>)
 80024e8:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000010 	.word	0x20000010

080024f8 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <mpu_init+0x1fc>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	7818      	ldrb	r0, [r3, #0]
 8002508:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <mpu_init+0x1fc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	7c99      	ldrb	r1, [r3, #18]
 800250e:	463b      	mov	r3, r7
 8002510:	2201      	movs	r2, #1
 8002512:	f7fe fe33 	bl	800117c <i2cWrite>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <mpu_init+0x2a>
        return -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002520:	e0e4      	b.n	80026ec <mpu_init+0x1f4>
    delay_ms(100);
 8002522:	2064      	movs	r0, #100	; 0x64
 8002524:	f003 fc22 	bl	8005d6c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 800252c:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <mpu_init+0x1fc>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	7818      	ldrb	r0, [r3, #0]
 8002532:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <mpu_init+0x1fc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	7c99      	ldrb	r1, [r3, #18]
 8002538:	463b      	mov	r3, r7
 800253a:	2201      	movs	r2, #1
 800253c:	f7fe fe1e 	bl	800117c <i2cWrite>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <mpu_init+0x54>
        return -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254a:	e0cf      	b.n	80026ec <mpu_init+0x1f4>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 800254c:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <mpu_init+0x1fc>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	7818      	ldrb	r0, [r3, #0]
 8002552:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <mpu_init+0x1fc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	7d99      	ldrb	r1, [r3, #22]
 8002558:	463b      	mov	r3, r7
 800255a:	2206      	movs	r2, #6
 800255c:	f7fe fe32 	bl	80011c4 <i2cRead>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <mpu_init+0x74>
        return -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256a:	e0bf      	b.n	80026ec <mpu_init+0x1f4>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800256c:	797b      	ldrb	r3, [r7, #5]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	b25b      	sxtb	r3, r3
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	b25a      	sxtb	r2, r3
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	b25b      	sxtb	r3, r3
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	b25b      	sxtb	r3, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8002592:	4313      	orrs	r3, r2
 8002594:	b25b      	sxtb	r3, r3
 8002596:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <mpu_init+0xc8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d103      	bne.n	80025ac <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <mpu_init+0x1fc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	74da      	strb	r2, [r3, #19]
 80025aa:	e02d      	b.n	8002608 <mpu_init+0x110>
        else if (rev == 2)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d103      	bne.n	80025ba <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <mpu_init+0x1fc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	74da      	strb	r2, [r3, #19]
 80025b8:	e026      	b.n	8002608 <mpu_init+0x110>
        else {
            //log_e("Unsupported software product rev %d.\n",rev);
            return -1;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025be:	e095      	b.n	80026ec <mpu_init+0x1f4>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <mpu_init+0x1fc>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	7818      	ldrb	r0, [r3, #0]
 80025c6:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <mpu_init+0x1fc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	78d9      	ldrb	r1, [r3, #3]
 80025cc:	463b      	mov	r3, r7
 80025ce:	2201      	movs	r2, #1
 80025d0:	f7fe fdf8 	bl	80011c4 <i2cRead>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <mpu_init+0xe8>
            return -1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025de:	e085      	b.n	80026ec <mpu_init+0x1f4>
        rev = data[0] & 0x0F;
 80025e0:	783b      	ldrb	r3, [r7, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <mpu_init+0xfc>
            //log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
            return -1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f2:	e07b      	b.n	80026ec <mpu_init+0x1f4>
        } else if (rev == 4) {
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d103      	bne.n	8002602 <mpu_init+0x10a>
            //log_i("Half sensitivity part found.\r\n");
            st.chip_cfg.accel_half = 1;
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <mpu_init+0x1fc>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	74da      	strb	r2, [r3, #19]
 8002600:	e002      	b.n	8002608 <mpu_init+0x110>
        } else
            st.chip_cfg.accel_half = 0;
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <mpu_init+0x1fc>)
 8002604:	2200      	movs	r2, #0
 8002606:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <mpu_init+0x1fc>)
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <mpu_init+0x1fc>)
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8002614:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <mpu_init+0x1fc>)
 8002616:	22ff      	movs	r2, #255	; 0xff
 8002618:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <mpu_init+0x1fc>)
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <mpu_init+0x1fc>)
 8002622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002626:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8002628:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <mpu_init+0x1fc>)
 800262a:	22ff      	movs	r2, #255	; 0xff
 800262c:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <mpu_init+0x1fc>)
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <mpu_init+0x1fc>)
 8002636:	2201      	movs	r2, #1
 8002638:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800263a:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <mpu_init+0x1fc>)
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <mpu_init+0x1fc>)
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <mpu_init+0x1fc>)
 800264c:	2200      	movs	r2, #0
 800264e:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <mpu_init+0x1fc>)
 8002652:	2200      	movs	r2, #0
 8002654:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8002656:	220c      	movs	r2, #12
 8002658:	2100      	movs	r1, #0
 800265a:	4827      	ldr	r0, [pc, #156]	; (80026f8 <mpu_init+0x200>)
 800265c:	f005 fd9a 	bl	8008194 <memset>
    st.chip_cfg.dmp_on = 0;
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <mpu_init+0x1fc>)
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <mpu_init+0x1fc>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <mpu_init+0x1fc>)
 8002672:	2200      	movs	r2, #0
 8002674:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8002676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800267a:	f000 f9ed 	bl	8002a58 <mpu_set_gyro_fsr>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <mpu_init+0x192>
        return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002688:	e030      	b.n	80026ec <mpu_init+0x1f4>
    if (mpu_set_accel_fsr(2))
 800268a:	2002      	movs	r0, #2
 800268c:	f000 fa72 	bl	8002b74 <mpu_set_accel_fsr>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <mpu_init+0x1a4>
        return -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269a:	e027      	b.n	80026ec <mpu_init+0x1f4>
    if (mpu_set_lpf(42))
 800269c:	202a      	movs	r0, #42	; 0x2a
 800269e:	f000 fb0f 	bl	8002cc0 <mpu_set_lpf>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <mpu_init+0x1b6>
        return -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ac:	e01e      	b.n	80026ec <mpu_init+0x1f4>
    if (mpu_set_sample_rate(50))
 80026ae:	2032      	movs	r0, #50	; 0x32
 80026b0:	f000 fb6e 	bl	8002d90 <mpu_set_sample_rate>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <mpu_init+0x1c8>
        return -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026be:	e015      	b.n	80026ec <mpu_init+0x1f4>
    if (mpu_configure_fifo(0))
 80026c0:	2000      	movs	r0, #0
 80026c2:	f000 fc53 	bl	8002f6c <mpu_configure_fifo>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <mpu_init+0x1da>
        return -1;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d0:	e00c      	b.n	80026ec <mpu_init+0x1f4>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 80026d2:	2000      	movs	r0, #0
 80026d4:	f000 fd9e 	bl	8003214 <mpu_set_bypass>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <mpu_init+0x1ec>
        return -1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e2:	e003      	b.n	80026ec <mpu_init+0x1f4>
#endif

    mpu_set_sensors(0);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 fc93 	bl	8003010 <mpu_set_sensors>
    return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000010 	.word	0x20000010
 80026f8:	20000026 	.word	0x20000026

080026fc <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b28      	cmp	r3, #40	; 0x28
 800270a:	d902      	bls.n	8002712 <mpu_lp_accel_mode+0x16>
        return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002710:	e06a      	b.n	80027e8 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11c      	bne.n	8002752 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8002718:	2000      	movs	r0, #0
 800271a:	f000 fe41 	bl	80033a0 <mpu_set_int_latched>
        tmp[0] = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8002722:	2307      	movs	r3, #7
 8002724:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	7818      	ldrb	r0, [r3, #0]
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	7c99      	ldrb	r1, [r3, #18]
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	2202      	movs	r2, #2
 8002738:	f7fe fd20 	bl	800117c <i2cWrite>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <mpu_lp_accel_mode+0x4c>
            return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002746:	e04f      	b.n	80027e8 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 800274a:	2200      	movs	r2, #0
 800274c:	751a      	strb	r2, [r3, #20]
        return 0;
 800274e:	2300      	movs	r3, #0
 8002750:	e04a      	b.n	80027e8 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8002752:	2001      	movs	r0, #1
 8002754:	f000 fe24 	bl	80033a0 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8002758:	2320      	movs	r3, #32
 800275a:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8002762:	2300      	movs	r3, #0
 8002764:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002766:	2005      	movs	r0, #5
 8002768:	f000 faaa 	bl	8002cc0 <mpu_set_lpf>
 800276c:	e016      	b.n	800279c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d805      	bhi.n	8002780 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8002774:	2301      	movs	r3, #1
 8002776:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002778:	2005      	movs	r0, #5
 800277a:	f000 faa1 	bl	8002cc0 <mpu_set_lpf>
 800277e:	e00d      	b.n	800279c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2b14      	cmp	r3, #20
 8002784:	d805      	bhi.n	8002792 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8002786:	2302      	movs	r3, #2
 8002788:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800278a:	200a      	movs	r0, #10
 800278c:	f000 fa98 	bl	8002cc0 <mpu_set_lpf>
 8002790:	e004      	b.n	800279c <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8002792:	2303      	movs	r3, #3
 8002794:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8002796:	2014      	movs	r0, #20
 8002798:	f000 fa92 	bl	8002cc0 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800279c:	7b7b      	ldrb	r3, [r7, #13]
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	f043 0307 	orr.w	r3, r3, #7
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	7818      	ldrb	r0, [r3, #0]
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	7c99      	ldrb	r1, [r3, #18]
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	2202      	movs	r2, #2
 80027be:	f7fe fcdd 	bl	800117c <i2cWrite>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <mpu_lp_accel_mode+0xd2>
        return -1;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027cc:	e00c      	b.n	80027e8 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 80027d0:	2208      	movs	r2, #8
 80027d2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <mpu_lp_accel_mode+0xf4>)
 80027dc:	2201      	movs	r2, #1
 80027de:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 fbc3 	bl	8002f6c <mpu_configure_fifo>

    return 0;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000010 	.word	0x20000010

080027f4 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80027fa:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80027fc:	7a9b      	ldrb	r3, [r3, #10]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <mpu_reset_fifo+0x14>
        return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002806:	e0eb      	b.n	80029e0 <mpu_reset_fifo+0x1ec>

    data = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800280c:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	7818      	ldrb	r0, [r3, #0]
 8002812:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	7bd9      	ldrb	r1, [r3, #15]
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	2201      	movs	r2, #1
 800281c:	f7fe fcae 	bl	800117c <i2cWrite>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <mpu_reset_fifo+0x38>
        return -1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282a:	e0d9      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800282c:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	7818      	ldrb	r0, [r3, #0]
 8002832:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	7959      	ldrb	r1, [r3, #5]
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	2201      	movs	r2, #1
 800283c:	f7fe fc9e 	bl	800117c <i2cWrite>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <mpu_reset_fifo+0x58>
        return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800284a:	e0c9      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800284c:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	7818      	ldrb	r0, [r3, #0]
 8002852:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	7919      	ldrb	r1, [r3, #4]
 8002858:	1dfb      	adds	r3, r7, #7
 800285a:	2201      	movs	r2, #1
 800285c:	f7fe fc8e 	bl	800117c <i2cWrite>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <mpu_reset_fifo+0x78>
        return -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800286a:	e0b9      	b.n	80029e0 <mpu_reset_fifo+0x1ec>

    if (st.chip_cfg.dmp_on) {
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800286e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d059      	beq.n	800292a <mpu_reset_fifo+0x136>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8002876:	230c      	movs	r3, #12
 8002878:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800287a:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	7818      	ldrb	r0, [r3, #0]
 8002880:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	7919      	ldrb	r1, [r3, #4]
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	2201      	movs	r2, #1
 800288a:	f7fe fc77 	bl	800117c <i2cWrite>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <mpu_reset_fifo+0xa6>
            return -1;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002898:	e0a2      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800289a:	23c0      	movs	r3, #192	; 0xc0
 800289c:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80028a0:	7a9b      	ldrb	r3, [r3, #10]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <mpu_reset_fifo+0xc0>
            data |= BIT_AUX_IF_EN;
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f043 0320 	orr.w	r3, r3, #32
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	7818      	ldrb	r0, [r3, #0]
 80028ba:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	7919      	ldrb	r1, [r3, #4]
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	2201      	movs	r2, #1
 80028c4:	f7fe fc5a 	bl	800117c <i2cWrite>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <mpu_reset_fifo+0xe0>
            return -1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d2:	e085      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.int_enable)
 80028d4:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80028d6:	7c5b      	ldrb	r3, [r3, #17]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <mpu_reset_fifo+0xee>
            data = BIT_DMP_INT_EN;
 80028dc:	2302      	movs	r3, #2
 80028de:	71fb      	strb	r3, [r7, #7]
 80028e0:	e001      	b.n	80028e6 <mpu_reset_fifo+0xf2>
        else
            data = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80028e6:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	7818      	ldrb	r0, [r3, #0]
 80028ec:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	7bd9      	ldrb	r1, [r3, #15]
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	2201      	movs	r2, #1
 80028f6:	f7fe fc41 	bl	800117c <i2cWrite>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <mpu_reset_fifo+0x112>
            return -1;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002904:	e06c      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
        data = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	7818      	ldrb	r0, [r3, #0]
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	7959      	ldrb	r1, [r3, #5]
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	2201      	movs	r2, #1
 800291a:	f7fe fc2f 	bl	800117c <i2cWrite>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05c      	beq.n	80029de <mpu_reset_fifo+0x1ea>
            return -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002928:	e05a      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
    } else {
        data = BIT_FIFO_RST;
 800292a:	2304      	movs	r3, #4
 800292c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	7818      	ldrb	r0, [r3, #0]
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	7919      	ldrb	r1, [r3, #4]
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	2201      	movs	r2, #1
 800293e:	f7fe fc1d 	bl	800117c <i2cWrite>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <mpu_reset_fifo+0x15a>
            return -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800294c:	e048      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002950:	7c9b      	ldrb	r3, [r3, #18]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <mpu_reset_fifo+0x16e>
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002958:	7a9b      	ldrb	r3, [r3, #10]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <mpu_reset_fifo+0x174>
            data = BIT_FIFO_EN;
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	e001      	b.n	800296c <mpu_reset_fifo+0x178>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8002968:	2360      	movs	r3, #96	; 0x60
 800296a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	7818      	ldrb	r0, [r3, #0]
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	7919      	ldrb	r1, [r3, #4]
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	2201      	movs	r2, #1
 800297c:	f7fe fbfe 	bl	800117c <i2cWrite>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <mpu_reset_fifo+0x198>
            return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800298a:	e029      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
    
        if (st.chip_cfg.int_enable)
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 800298e:	7c5b      	ldrb	r3, [r3, #17]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <mpu_reset_fifo+0x1a6>
            data = BIT_DATA_RDY_EN;
 8002994:	2301      	movs	r3, #1
 8002996:	71fb      	strb	r3, [r7, #7]
 8002998:	e001      	b.n	800299e <mpu_reset_fifo+0x1aa>
        else
            data = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	7818      	ldrb	r0, [r3, #0]
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	7bd9      	ldrb	r1, [r3, #15]
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	2201      	movs	r2, #1
 80029ae:	f7fe fbe5 	bl	800117c <i2cWrite>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <mpu_reset_fifo+0x1ca>
            return -1;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029bc:	e010      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	7818      	ldrb	r0, [r3, #0]
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <mpu_reset_fifo+0x1f4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	7959      	ldrb	r1, [r3, #5]
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <mpu_reset_fifo+0x1f8>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	f7fe fbd5 	bl	800117c <i2cWrite>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <mpu_reset_fifo+0x1ea>
            return -1;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029dc:	e000      	b.n	80029e0 <mpu_reset_fifo+0x1ec>
    }
    return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000010 	.word	0x20000010
 80029ec:	20000020 	.word	0x20000020

080029f0 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <mpu_get_gyro_fsr+0x64>)
 80029fa:	7a1b      	ldrb	r3, [r3, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d81e      	bhi.n	8002a3e <mpu_get_gyro_fsr+0x4e>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <mpu_get_gyro_fsr+0x18>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a21 	.word	0x08002a21
 8002a10:	08002a2b 	.word	0x08002a2b
 8002a14:	08002a35 	.word	0x08002a35
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	22fa      	movs	r2, #250	; 0xfa
 8002a1c:	801a      	strh	r2, [r3, #0]
        break;
 8002a1e:	e012      	b.n	8002a46 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a26:	801a      	strh	r2, [r3, #0]
        break;
 8002a28:	e00d      	b.n	8002a46 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a30:	801a      	strh	r2, [r3, #0]
        break;
 8002a32:	e008      	b.n	8002a46 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a3a:	801a      	strh	r2, [r3, #0]
        break;
 8002a3c:	e003      	b.n	8002a46 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	801a      	strh	r2, [r3, #0]
        break;
 8002a44:	bf00      	nop
    }
    return 0;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20000010 	.word	0x20000010

08002a58 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <mpu_set_gyro_fsr+0xa4>)
 8002a64:	7a9b      	ldrb	r3, [r3, #10]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <mpu_set_gyro_fsr+0x18>
        return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6e:	e041      	b.n	8002af4 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a76:	d017      	beq.n	8002aa8 <mpu_set_gyro_fsr+0x50>
 8002a78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a7c:	dc17      	bgt.n	8002aae <mpu_set_gyro_fsr+0x56>
 8002a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a82:	d00e      	beq.n	8002aa2 <mpu_set_gyro_fsr+0x4a>
 8002a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a88:	dc11      	bgt.n	8002aae <mpu_set_gyro_fsr+0x56>
 8002a8a:	2bfa      	cmp	r3, #250	; 0xfa
 8002a8c:	d003      	beq.n	8002a96 <mpu_set_gyro_fsr+0x3e>
 8002a8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a92:	d003      	beq.n	8002a9c <mpu_set_gyro_fsr+0x44>
 8002a94:	e00b      	b.n	8002aae <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
        break;
 8002a9a:	e00b      	b.n	8002ab4 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa0:	e008      	b.n	8002ab4 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa6:	e005      	b.n	8002ab4 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002aa8:	2318      	movs	r3, #24
 8002aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8002aac:	e002      	b.n	8002ab4 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ab2:	e01f      	b.n	8002af4 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <mpu_set_gyro_fsr+0xa4>)
 8002ab6:	7a1a      	ldrb	r2, [r3, #8]
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d101      	bne.n	8002ac6 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e016      	b.n	8002af4 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <mpu_set_gyro_fsr+0xa4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	7818      	ldrb	r0, [r3, #0]
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <mpu_set_gyro_fsr+0xa4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	7999      	ldrb	r1, [r3, #6]
 8002ad2:	f107 030f 	add.w	r3, r7, #15
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f7fe fb50 	bl	800117c <i2cWrite>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <mpu_set_gyro_fsr+0x90>
        return -1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ae6:	e005      	b.n	8002af4 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	08db      	lsrs	r3, r3, #3
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b03      	ldr	r3, [pc, #12]	; (8002afc <mpu_set_gyro_fsr+0xa4>)
 8002af0:	721a      	strb	r2, [r3, #8]
    return 0;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000010 	.word	0x20000010

08002b00 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <mpu_get_accel_fsr+0x70>)
 8002b0a:	7a5b      	ldrb	r3, [r3, #9]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d81b      	bhi.n	8002b48 <mpu_get_accel_fsr+0x48>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <mpu_get_accel_fsr+0x18>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b31 	.word	0x08002b31
 8002b20:	08002b39 	.word	0x08002b39
 8002b24:	08002b41 	.word	0x08002b41
    case INV_FSR_2G:
        fsr[0] = 2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
        break;
 8002b2e:	e00e      	b.n	8002b4e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2204      	movs	r2, #4
 8002b34:	701a      	strb	r2, [r3, #0]
        break;
 8002b36:	e00a      	b.n	8002b4e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	701a      	strb	r2, [r3, #0]
        break;
 8002b3e:	e006      	b.n	8002b4e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2210      	movs	r2, #16
 8002b44:	701a      	strb	r2, [r3, #0]
        break;
 8002b46:	e002      	b.n	8002b4e <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4c:	e00a      	b.n	8002b64 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <mpu_get_accel_fsr+0x70>)
 8002b50:	7cdb      	ldrb	r3, [r3, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	701a      	strb	r2, [r3, #0]
    return 0;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000010 	.word	0x20000010

08002b74 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <mpu_set_accel_fsr+0xcc>)
 8002b80:	7a9b      	ldrb	r3, [r3, #10]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <mpu_set_accel_fsr+0x18>
        return -1;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b8a:	e054      	b.n	8002c36 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	3b02      	subs	r3, #2
 8002b90:	2b0e      	cmp	r3, #14
 8002b92:	d82d      	bhi.n	8002bf0 <mpu_set_accel_fsr+0x7c>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <mpu_set_accel_fsr+0x28>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd9 	.word	0x08002bd9
 8002ba0:	08002bf1 	.word	0x08002bf1
 8002ba4:	08002bdf 	.word	0x08002bdf
 8002ba8:	08002bf1 	.word	0x08002bf1
 8002bac:	08002bf1 	.word	0x08002bf1
 8002bb0:	08002bf1 	.word	0x08002bf1
 8002bb4:	08002be5 	.word	0x08002be5
 8002bb8:	08002bf1 	.word	0x08002bf1
 8002bbc:	08002bf1 	.word	0x08002bf1
 8002bc0:	08002bf1 	.word	0x08002bf1
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002bf1 	.word	0x08002bf1
 8002bcc:	08002bf1 	.word	0x08002bf1
 8002bd0:	08002bf1 	.word	0x08002bf1
 8002bd4:	08002beb 	.word	0x08002beb
    case 2:
        data = INV_FSR_2G << 3;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
        break;
 8002bdc:	e00b      	b.n	8002bf6 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002bde:	2308      	movs	r3, #8
 8002be0:	73fb      	strb	r3, [r7, #15]
        break;
 8002be2:	e008      	b.n	8002bf6 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002be4:	2310      	movs	r3, #16
 8002be6:	73fb      	strb	r3, [r7, #15]
        break;
 8002be8:	e005      	b.n	8002bf6 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8002bea:	2318      	movs	r3, #24
 8002bec:	73fb      	strb	r3, [r7, #15]
        break;
 8002bee:	e002      	b.n	8002bf6 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf4:	e01f      	b.n	8002c36 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <mpu_set_accel_fsr+0xcc>)
 8002bf8:	7a5a      	ldrb	r2, [r3, #9]
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d101      	bne.n	8002c08 <mpu_set_accel_fsr+0x94>
        return 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e016      	b.n	8002c36 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <mpu_set_accel_fsr+0xcc>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	7818      	ldrb	r0, [r3, #0]
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <mpu_set_accel_fsr+0xcc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	79d9      	ldrb	r1, [r3, #7]
 8002c14:	f107 030f 	add.w	r3, r7, #15
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f7fe faaf 	bl	800117c <i2cWrite>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <mpu_set_accel_fsr+0xb6>
        return -1;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c28:	e005      	b.n	8002c36 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <mpu_set_accel_fsr+0xcc>)
 8002c32:	725a      	strb	r2, [r3, #9]
    return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000010 	.word	0x20000010

08002c44 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <mpu_get_lpf+0x78>)
 8002c4e:	7adb      	ldrb	r3, [r3, #11]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d826      	bhi.n	8002ca4 <mpu_get_lpf+0x60>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <mpu_get_lpf+0x18>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c75 	.word	0x08002c75
 8002c60:	08002c7d 	.word	0x08002c7d
 8002c64:	08002c85 	.word	0x08002c85
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002c95 	.word	0x08002c95
 8002c70:	08002c9d 	.word	0x08002c9d
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	22bc      	movs	r2, #188	; 0xbc
 8002c78:	801a      	strh	r2, [r3, #0]
        break;
 8002c7a:	e017      	b.n	8002cac <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2262      	movs	r2, #98	; 0x62
 8002c80:	801a      	strh	r2, [r3, #0]
        break;
 8002c82:	e013      	b.n	8002cac <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	222a      	movs	r2, #42	; 0x2a
 8002c88:	801a      	strh	r2, [r3, #0]
        break;
 8002c8a:	e00f      	b.n	8002cac <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2214      	movs	r2, #20
 8002c90:	801a      	strh	r2, [r3, #0]
        break;
 8002c92:	e00b      	b.n	8002cac <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	220a      	movs	r2, #10
 8002c98:	801a      	strh	r2, [r3, #0]
        break;
 8002c9a:	e007      	b.n	8002cac <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2205      	movs	r2, #5
 8002ca0:	801a      	strh	r2, [r3, #0]
        break;
 8002ca2:	e003      	b.n	8002cac <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	801a      	strh	r2, [r3, #0]
        break;
 8002caa:	bf00      	nop
    }
    return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <mpu_set_lpf+0x98>)
 8002ccc:	7a9b      	ldrb	r3, [r3, #10]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <mpu_set_lpf+0x18>
        return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd6:	e03b      	b.n	8002d50 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	2bbb      	cmp	r3, #187	; 0xbb
 8002cdc:	d902      	bls.n	8002ce4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e019      	b.n	8002d18 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	2b61      	cmp	r3, #97	; 0x61
 8002ce8:	d902      	bls.n	8002cf0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8002cea:	2302      	movs	r3, #2
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e013      	b.n	8002d18 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2b29      	cmp	r3, #41	; 0x29
 8002cf4:	d902      	bls.n	8002cfc <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e00d      	b.n	8002d18 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b13      	cmp	r3, #19
 8002d00:	d902      	bls.n	8002d08 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002d02:	2304      	movs	r3, #4
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	e007      	b.n	8002d18 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	d902      	bls.n	8002d14 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8002d0e:	2305      	movs	r3, #5
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e001      	b.n	8002d18 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8002d14:	2306      	movs	r3, #6
 8002d16:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <mpu_set_lpf+0x98>)
 8002d1a:	7ada      	ldrb	r2, [r3, #11]
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d101      	bne.n	8002d26 <mpu_set_lpf+0x66>
        return 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e014      	b.n	8002d50 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <mpu_set_lpf+0x98>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	7818      	ldrb	r0, [r3, #0]
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <mpu_set_lpf+0x98>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	7899      	ldrb	r1, [r3, #2]
 8002d32:	f107 030f 	add.w	r3, r7, #15
 8002d36:	2201      	movs	r2, #1
 8002d38:	f7fe fa20 	bl	800117c <i2cWrite>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <mpu_set_lpf+0x88>
        return -1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d46:	e003      	b.n	8002d50 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <mpu_set_lpf+0x98>)
 8002d4c:	72da      	strb	r2, [r3, #11]
    return 0;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000010 	.word	0x20000010

08002d5c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <mpu_get_sample_rate+0x30>)
 8002d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <mpu_get_sample_rate+0x18>
        return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d72:	e004      	b.n	8002d7e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <mpu_get_sample_rate+0x30>)
 8002d76:	89da      	ldrh	r2, [r3, #14]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	801a      	strh	r2, [r3, #0]
    return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000010 	.word	0x20000010

08002d90 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002d9c:	7a9b      	ldrb	r3, [r3, #10]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <mpu_set_sample_rate+0x18>
        return -1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002da6:	e053      	b.n	8002e50 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <mpu_set_sample_rate+0x28>
        return -1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db6:	e04b      	b.n	8002e50 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002dba:	7d1b      	ldrb	r3, [r3, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <mpu_set_sample_rate+0x4a>
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	2b28      	cmp	r3, #40	; 0x28
 8002dca:	d806      	bhi.n	8002dda <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fc93 	bl	80026fc <mpu_lp_accel_mode>
                return 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e03a      	b.n	8002e50 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff fc8e 	bl	80026fc <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d802      	bhi.n	8002dec <mpu_set_sample_rate+0x5c>
            rate = 4;
 8002de6:	2304      	movs	r3, #4
 8002de8:	80fb      	strh	r3, [r7, #6]
 8002dea:	e006      	b.n	8002dfa <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df2:	d902      	bls.n	8002dfa <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8002df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e00:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	7818      	ldrb	r0, [r3, #0]
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	7859      	ldrb	r1, [r3, #1]
 8002e18:	f107 030f 	add.w	r3, r7, #15
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f7fe f9ad 	bl	800117c <i2cWrite>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <mpu_set_sample_rate+0x9e>
            return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e2c:	e010      	b.n	8002e50 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	3301      	adds	r3, #1
 8002e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002e3e:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <mpu_set_sample_rate+0xc8>)
 8002e42:	89db      	ldrh	r3, [r3, #14]
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff39 	bl	8002cc0 <mpu_set_lpf>
        return 0;
 8002e4e:	2300      	movs	r3, #0
    }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000010 	.word	0x20000010

08002e5c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <mpu_get_gyro_sens+0x5c>)
 8002e66:	7a1b      	ldrb	r3, [r3, #8]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d81b      	bhi.n	8002ea4 <mpu_get_gyro_sens+0x48>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <mpu_get_gyro_sens+0x18>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e95 	.word	0x08002e95
 8002e80:	08002e9d 	.word	0x08002e9d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <mpu_get_gyro_sens+0x60>)
 8002e88:	601a      	str	r2, [r3, #0]
        break;
 8002e8a:	e00e      	b.n	8002eaa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <mpu_get_gyro_sens+0x64>)
 8002e90:	601a      	str	r2, [r3, #0]
        break;
 8002e92:	e00a      	b.n	8002eaa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <mpu_get_gyro_sens+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
        break;
 8002e9a:	e006      	b.n	8002eaa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <mpu_get_gyro_sens+0x6c>)
 8002ea0:	601a      	str	r2, [r3, #0]
        break;
 8002ea2:	e002      	b.n	8002eaa <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea8:	e000      	b.n	8002eac <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	20000010 	.word	0x20000010
 8002ebc:	43030000 	.word	0x43030000
 8002ec0:	42830000 	.word	0x42830000
 8002ec4:	42033333 	.word	0x42033333
 8002ec8:	41833333 	.word	0x41833333

08002ecc <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <mpu_get_accel_sens+0x78>)
 8002ed6:	7a5b      	ldrb	r3, [r3, #9]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d81f      	bhi.n	8002f1c <mpu_get_accel_sens+0x50>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <mpu_get_accel_sens+0x18>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002eff 	.word	0x08002eff
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	08002f13 	.word	0x08002f13
    case INV_FSR_2G:
        sens[0] = 16384;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002efa:	801a      	strh	r2, [r3, #0]
        break;
 8002efc:	e011      	b.n	8002f22 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f641 729c 	movw	r2, #8092	; 0x1f9c
 8002f04:	801a      	strh	r2, [r3, #0]
        break;
 8002f06:	e00c      	b.n	8002f22 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f0e:	801a      	strh	r2, [r3, #0]
        break;
 8002f10:	e007      	b.n	8002f22 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f18:	801a      	strh	r2, [r3, #0]
        break;
 8002f1a:	e002      	b.n	8002f22 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f20:	e00a      	b.n	8002f38 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <mpu_get_accel_sens+0x78>)
 8002f24:	7cdb      	ldrb	r3, [r3, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	801a      	strh	r2, [r3, #0]
    return 0;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	20000010 	.word	0x20000010

08002f48 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <mpu_get_fifo_config+0x20>)
 8002f52:	7c1a      	ldrb	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	701a      	strb	r2, [r3, #0]
    return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000010 	.word	0x20000010

08002f6c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <mpu_configure_fifo+0xa0>)
 8002f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <mpu_configure_fifo+0x24>
        return 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e038      	b.n	8003002 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <mpu_configure_fifo+0xa0>)
 8002f92:	7a9b      	ldrb	r3, [r3, #10]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <mpu_configure_fifo+0x32>
            return -1;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f9c:	e031      	b.n	8003002 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <mpu_configure_fifo+0xa0>)
 8002fa0:	7c1b      	ldrb	r3, [r3, #16]
 8002fa2:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <mpu_configure_fifo+0xa0>)
 8002fa6:	7a9a      	ldrb	r2, [r3, #10]
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <mpu_configure_fifo+0xa0>)
 8002fb0:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <mpu_configure_fifo+0xa0>)
 8002fb4:	7c1b      	ldrb	r3, [r3, #16]
 8002fb6:	79fa      	ldrb	r2, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d003      	beq.n	8002fc4 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e001      	b.n	8002fc8 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <mpu_configure_fifo+0x6a>
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <mpu_configure_fifo+0xa0>)
 8002fd0:	7d1b      	ldrb	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f7ff fa34 	bl	8002444 <set_int_enable>
 8002fdc:	e002      	b.n	8002fe4 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7ff fa30 	bl	8002444 <set_int_enable>
        if (sensors) {
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8002fea:	f7ff fc03 	bl	80027f4 <mpu_reset_fifo>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8002ff4:	4a05      	ldr	r2, [pc, #20]	; (800300c <mpu_configure_fifo+0xa0>)
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	7413      	strb	r3, [r2, #16]
                return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffe:	e000      	b.n	8003002 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000010 	.word	0x20000010

08003010 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e007      	b.n	800303a <mpu_set_sensors+0x2a>
    else if (sensors)
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <mpu_set_sensors+0x26>
        data = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	e001      	b.n	800303a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8003036:	2340      	movs	r3, #64	; 0x40
 8003038:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <mpu_set_sensors+0x108>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	7818      	ldrb	r0, [r3, #0]
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <mpu_set_sensors+0x108>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	7c99      	ldrb	r1, [r3, #18]
 8003046:	f107 030f 	add.w	r3, r7, #15
 800304a:	2201      	movs	r2, #1
 800304c:	f7fe f896 	bl	800117c <i2cWrite>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8003056:	4b30      	ldr	r3, [pc, #192]	; (8003118 <mpu_set_sensors+0x108>)
 8003058:	2200      	movs	r2, #0
 800305a:	729a      	strb	r2, [r3, #10]
        return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003060:	e056      	b.n	8003110 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <mpu_set_sensors+0x108>)
 800306c:	731a      	strb	r2, [r3, #12]

    data = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	b2db      	uxtb	r3, r3
 8003084:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	b2db      	uxtb	r3, r3
 8003098:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <mpu_set_sensors+0x108>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	7818      	ldrb	r0, [r3, #0]
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <mpu_set_sensors+0x108>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	7cd9      	ldrb	r1, [r3, #19]
 80030ce:	f107 030f 	add.w	r3, r7, #15
 80030d2:	2201      	movs	r2, #1
 80030d4:	f7fe f852 	bl	800117c <i2cWrite>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <mpu_set_sensors+0x108>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	729a      	strb	r2, [r3, #10]
        return -1;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e8:	e012      	b.n	8003110 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <mpu_set_sensors+0xec>
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d002      	beq.n	80030fc <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f000 f952 	bl	80033a0 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80030fc:	4a06      	ldr	r2, [pc, #24]	; (8003118 <mpu_set_sensors+0x108>)
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <mpu_set_sensors+0x108>)
 8003104:	2200      	movs	r2, #0
 8003106:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8003108:	2032      	movs	r0, #50	; 0x32
 800310a:	f002 fe2f 	bl	8005d6c <HAL_Delay>
    return 0;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000010 	.word	0x20000010

0800311c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    int fifo_count;
    if (!st.chip_cfg.dmp_on)
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 800312c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <mpu_read_fifo_stream+0x1e>
        return -1;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003138:	e065      	b.n	8003206 <mpu_read_fifo_stream+0xea>
    if (!st.chip_cfg.sensors)
 800313a:	4b35      	ldr	r3, [pc, #212]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 800313c:	7a9b      	ldrb	r3, [r3, #10]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <mpu_read_fifo_stream+0x2c>
        return -1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003146:	e05e      	b.n	8003206 <mpu_read_fifo_stream+0xea>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	7818      	ldrb	r0, [r3, #0]
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	7a99      	ldrb	r1, [r3, #10]
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	2202      	movs	r2, #2
 800315a:	f7fe f833 	bl	80011c4 <i2cRead>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <mpu_read_fifo_stream+0x4e>
        return -1;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003168:	e04d      	b.n	8003206 <mpu_read_fifo_stream+0xea>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800316a:	7c3b      	ldrb	r3, [r7, #16]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	7c7a      	ldrb	r2, [r7, #17]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
    if (fifo_count < length) {
 8003174:	89fb      	ldrh	r3, [r7, #14]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	429a      	cmp	r2, r3
 800317a:	da05      	bge.n	8003188 <mpu_read_fifo_stream+0x6c>
        more[0] = 0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
        return -1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003186:	e03e      	b.n	8003206 <mpu_read_fifo_stream+0xea>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8003188:	4b21      	ldr	r3, [pc, #132]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	885b      	ldrh	r3, [r3, #2]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4293      	cmp	r3, r2
 8003198:	dd1a      	ble.n	80031d0 <mpu_read_fifo_stream+0xb4>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	7818      	ldrb	r0, [r3, #0]
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	7c59      	ldrb	r1, [r3, #17]
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	2201      	movs	r2, #1
 80031ac:	f7fe f80a 	bl	80011c4 <i2cRead>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <mpu_read_fifo_stream+0xa0>
            return -1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ba:	e024      	b.n	8003206 <mpu_read_fifo_stream+0xea>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 80031bc:	7c3b      	ldrb	r3, [r7, #16]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <mpu_read_fifo_stream+0xb4>
            mpu_reset_fifo();
 80031c6:	f7ff fb15 	bl	80027f4 <mpu_reset_fifo>
            return -2;
 80031ca:	f06f 0301 	mvn.w	r3, #1
 80031ce:	e01a      	b.n	8003206 <mpu_read_fifo_stream+0xea>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	7818      	ldrb	r0, [r3, #0]
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <mpu_read_fifo_stream+0xf4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	7ad9      	ldrb	r1, [r3, #11]
 80031dc:	89fb      	ldrh	r3, [r7, #14]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f7fd ffef 	bl	80011c4 <i2cRead>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <mpu_read_fifo_stream+0xd6>
        return -1;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f0:	e009      	b.n	8003206 <mpu_read_fifo_stream+0xea>
    more[0] = fifo_count / length - 1;
 80031f2:	89fb      	ldrh	r3, [r7, #14]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	701a      	strb	r2, [r3, #0]
    return 0;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000010 	.word	0x20000010

08003214 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <mpu_set_bypass+0x188>)
 8003220:	7c9b      	ldrb	r3, [r3, #18]
 8003222:	79fa      	ldrb	r2, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d101      	bne.n	800322c <mpu_set_bypass+0x18>
        return 0;
 8003228:	2300      	movs	r3, #0
 800322a:	e0b2      	b.n	8003392 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d050      	beq.n	80032d4 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003232:	4b5a      	ldr	r3, [pc, #360]	; (800339c <mpu_set_bypass+0x188>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	7818      	ldrb	r0, [r3, #0]
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <mpu_set_bypass+0x188>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	7919      	ldrb	r1, [r3, #4]
 800323e:	f107 030f 	add.w	r3, r7, #15
 8003242:	2201      	movs	r2, #1
 8003244:	f7fd ffbe 	bl	80011c4 <i2cRead>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <mpu_set_bypass+0x40>
            return -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003252:	e09e      	b.n	8003392 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	f023 0320 	bic.w	r3, r3, #32
 800325a:	b2db      	uxtb	r3, r3
 800325c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <mpu_set_bypass+0x188>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	7818      	ldrb	r0, [r3, #0]
 8003264:	4b4d      	ldr	r3, [pc, #308]	; (800339c <mpu_set_bypass+0x188>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	7919      	ldrb	r1, [r3, #4]
 800326a:	f107 030f 	add.w	r3, r7, #15
 800326e:	2201      	movs	r2, #1
 8003270:	f7fd ff84 	bl	800117c <i2cWrite>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <mpu_set_bypass+0x6c>
            return -1;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800327e:	e088      	b.n	8003392 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003280:	2003      	movs	r0, #3
 8003282:	f002 fd73 	bl	8005d6c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8003286:	2302      	movs	r3, #2
 8003288:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800328a:	4b44      	ldr	r3, [pc, #272]	; (800339c <mpu_set_bypass+0x188>)
 800328c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800329a:	b2db      	uxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <mpu_set_bypass+0x188>)
 80032a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80032b2:	4b3a      	ldr	r3, [pc, #232]	; (800339c <mpu_set_bypass+0x188>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	7818      	ldrb	r0, [r3, #0]
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <mpu_set_bypass+0x188>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	7d19      	ldrb	r1, [r3, #20]
 80032be:	f107 030f 	add.w	r3, r7, #15
 80032c2:	2201      	movs	r2, #1
 80032c4:	f7fd ff5a 	bl	800117c <i2cWrite>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d05d      	beq.n	800338a <mpu_set_bypass+0x176>
            return -1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d2:	e05e      	b.n	8003392 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <mpu_set_bypass+0x188>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	7818      	ldrb	r0, [r3, #0]
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <mpu_set_bypass+0x188>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	7919      	ldrb	r1, [r3, #4]
 80032e0:	f107 030f 	add.w	r3, r7, #15
 80032e4:	2201      	movs	r2, #1
 80032e6:	f7fd ff6d 	bl	80011c4 <i2cRead>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <mpu_set_bypass+0xe2>
            return -1;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f4:	e04d      	b.n	8003392 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <mpu_set_bypass+0x188>)
 80032f8:	7a9b      	ldrb	r3, [r3, #10]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	f043 0320 	orr.w	r3, r3, #32
 8003308:	b2db      	uxtb	r3, r3
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	e004      	b.n	8003318 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	f023 0320 	bic.w	r3, r3, #32
 8003314:	b2db      	uxtb	r3, r3
 8003316:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <mpu_set_bypass+0x188>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	7818      	ldrb	r0, [r3, #0]
 800331e:	4b1f      	ldr	r3, [pc, #124]	; (800339c <mpu_set_bypass+0x188>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	7919      	ldrb	r1, [r3, #4]
 8003324:	f107 030f 	add.w	r3, r7, #15
 8003328:	2201      	movs	r2, #1
 800332a:	f7fd ff27 	bl	800117c <i2cWrite>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <mpu_set_bypass+0x126>
            return -1;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003338:	e02b      	b.n	8003392 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800333a:	2003      	movs	r0, #3
 800333c:	f002 fd16 	bl	8005d6c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8003340:	4b16      	ldr	r3, [pc, #88]	; (800339c <mpu_set_bypass+0x188>)
 8003342:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e001      	b.n	8003354 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <mpu_set_bypass+0x188>)
 8003356:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003364:	b2db      	uxtb	r3, r3
 8003366:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <mpu_set_bypass+0x188>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	7818      	ldrb	r0, [r3, #0]
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <mpu_set_bypass+0x188>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	7d19      	ldrb	r1, [r3, #20]
 8003374:	f107 030f 	add.w	r3, r7, #15
 8003378:	2201      	movs	r2, #1
 800337a:	f7fd feff 	bl	800117c <i2cWrite>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <mpu_set_bypass+0x176>
            return -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003388:	e003      	b.n	8003392 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <mpu_set_bypass+0x188>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	7493      	strb	r3, [r2, #18]
    return 0;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000010 	.word	0x20000010

080033a0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <mpu_set_int_latched+0x84>)
 80033ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80033b0:	79fa      	ldrb	r2, [r7, #7]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d101      	bne.n	80033ba <mpu_set_int_latched+0x1a>
        return 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e030      	b.n	800341c <mpu_set_int_latched+0x7c>

    if (enable)
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80033c0:	2330      	movs	r3, #48	; 0x30
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <mpu_set_int_latched+0x84>)
 80033cc:	7c9b      	ldrb	r3, [r3, #18]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <mpu_set_int_latched+0x84>)
 80033de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <mpu_set_int_latched+0x84>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	7818      	ldrb	r0, [r3, #0]
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <mpu_set_int_latched+0x84>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	7d19      	ldrb	r1, [r3, #20]
 80033fc:	f107 030f 	add.w	r3, r7, #15
 8003400:	2201      	movs	r2, #1
 8003402:	f7fd febb 	bl	800117c <i2cWrite>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <mpu_set_int_latched+0x72>
        return -1;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003410:	e004      	b.n	800341c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <mpu_set_int_latched+0x84>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000010 	.word	0x20000010

08003428 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <get_accel_prod_shift+0x110>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	7818      	ldrb	r0, [r3, #0]
 8003436:	f107 0310 	add.w	r3, r7, #16
 800343a:	2204      	movs	r2, #4
 800343c:	210d      	movs	r1, #13
 800343e:	f7fd fec1 	bl	80011c4 <i2cRead>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <get_accel_prod_shift+0x24>
        return 0x07;
 8003448:	2307      	movs	r3, #7
 800344a:	e071      	b.n	8003530 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800344c:	7c3b      	ldrb	r3, [r7, #16]
 800344e:	10db      	asrs	r3, r3, #3
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f003 031c 	and.w	r3, r3, #28
 8003456:	b25a      	sxtb	r2, r3
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	111b      	asrs	r3, r3, #4
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	b25b      	sxtb	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b25b      	sxtb	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800346c:	7c7b      	ldrb	r3, [r7, #17]
 800346e:	10db      	asrs	r3, r3, #3
 8003470:	b25b      	sxtb	r3, r3
 8003472:	f003 031c 	and.w	r3, r3, #28
 8003476:	b25a      	sxtb	r2, r3
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	109b      	asrs	r3, r3, #2
 800347c:	b25b      	sxtb	r3, r3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	b25b      	sxtb	r3, r3
 8003484:	4313      	orrs	r3, r2
 8003486:	b25b      	sxtb	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800348c:	7cbb      	ldrb	r3, [r7, #18]
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	b25b      	sxtb	r3, r3
 8003492:	f003 031c 	and.w	r3, r3, #28
 8003496:	b25a      	sxtb	r2, r3
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	b25b      	sxtb	r3, r3
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
 80034ae:	e03b      	b.n	8003528 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	3318      	adds	r3, #24
 80034b4:	443b      	add	r3, r7
 80034b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
            continue;
 80034cc:	e029      	b.n	8003522 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <get_accel_prod_shift+0x114>)
 80034d8:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80034da:	e00f      	b.n	80034fc <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003540 <get_accel_prod_shift+0x118>
 80034f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f8:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	f103 0218 	add.w	r2, r3, #24
 8003502:	443a      	add	r2, r7
 8003504:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003508:	3a01      	subs	r2, #1
 800350a:	b2d1      	uxtb	r1, r2
 800350c:	f103 0218 	add.w	r2, r3, #24
 8003510:	443a      	add	r2, r7
 8003512:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8003516:	3318      	adds	r3, #24
 8003518:	443b      	add	r3, r7
 800351a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1dc      	bne.n	80034dc <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	3301      	adds	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d9c0      	bls.n	80034b0 <get_accel_prod_shift+0x88>
    }
    return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000010 	.word	0x20000010
 800353c:	3eae147b 	.word	0x3eae147b
 8003540:	3f845a1d 	.word	0x3f845a1d

08003544 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff66 	bl	8003428 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	e063      	b.n	800362a <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	440b      	add	r3, r1
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bfb8      	it	lt
 800357c:	425b      	neglt	r3, r3
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003586:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800363c <accel_self_test+0xf8>
 800358a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3328      	adds	r3, #40	; 0x28
 8003598:	443b      	add	r3, r7
 800359a:	3b1c      	subs	r3, #28
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d023      	beq.n	80035f2 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	443b      	add	r3, r7
 80035b2:	3b1c      	subs	r3, #28
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80035bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035c8:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 80035cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d0:	eef0 7ae7 	vabs.f32	s15, s15
 80035d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003640 <accel_self_test+0xfc>
 80035d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	dd20      	ble.n	8003624 <accel_self_test+0xe0>
                result |= 1 << jj;
 80035e2:	2201      	movs	r2, #1
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	6a3a      	ldr	r2, [r7, #32]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	e018      	b.n	8003624 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 80035f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003644 <accel_self_test+0x100>
 80035f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80035fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	d408      	bmi.n	8003616 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8003604:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003648 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8003608:	edd7 7a07 	vldr	s15, [r7, #28]
 800360c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003614:	dd06      	ble.n	8003624 <accel_self_test+0xe0>
            result |= 1 << jj;
 8003616:	2201      	movs	r2, #1
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	4313      	orrs	r3, r2
 8003622:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	3301      	adds	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b02      	cmp	r3, #2
 800362e:	dd98      	ble.n	8003562 <accel_self_test+0x1e>
    }

    return result;
 8003630:	6a3b      	ldr	r3, [r7, #32]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	47800000 	.word	0x47800000
 8003640:	3e0f5c29 	.word	0x3e0f5c29
 8003644:	3e99999a 	.word	0x3e99999a
 8003648:	3f733333 	.word	0x3f733333

0800364c <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800365a:	4b55      	ldr	r3, [pc, #340]	; (80037b0 <gyro_self_test+0x164>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	7818      	ldrb	r0, [r3, #0]
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	2203      	movs	r2, #3
 8003666:	210d      	movs	r1, #13
 8003668:	f7fd fdac 	bl	80011c4 <i2cRead>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <gyro_self_test+0x2a>
        return 0x07;
 8003672:	2307      	movs	r3, #7
 8003674:	e097      	b.n	80037a6 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 8003676:	7a3b      	ldrb	r3, [r7, #8]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	b2db      	uxtb	r3, r3
 800367e:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8003680:	7a7b      	ldrb	r3, [r7, #9]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	b2db      	uxtb	r3, r3
 8003688:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 800368a:	7abb      	ldrb	r3, [r7, #10]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	b2db      	uxtb	r3, r3
 8003692:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e080      	b.n	800379c <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	440b      	add	r3, r1
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bfb8      	it	lt
 80036b4:	425b      	neglt	r3, r3
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80037b4 <gyro_self_test+0x168>
 80036c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036c6:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80036ca:	f107 0208 	add.w	r2, r7, #8
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d045      	beq.n	8003764 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 80036d8:	eddf 7a37 	vldr	s15, [pc, #220]	; 80037b8 <gyro_self_test+0x16c>
 80036dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036e0:	eddf 6a36 	vldr	s13, [pc, #216]	; 80037bc <gyro_self_test+0x170>
 80036e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036e8:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80036ec:	e007      	b.n	80036fe <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 80036ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80037c0 <gyro_self_test+0x174>
 80036f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036fa:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80036fe:	f107 0208 	add.w	r2, r7, #8
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	b2d9      	uxtb	r1, r3
 800370c:	f107 0208 	add.w	r2, r7, #8
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	460a      	mov	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	f107 0208 	add.w	r2, r7, #8
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e3      	bne.n	80036ee <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8003726:	edd7 6a04 	vldr	s13, [r7, #16]
 800372a:	ed97 7a05 	vldr	s14, [r7, #20]
 800372e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800373a:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800373e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003742:	eef0 7ae7 	vabs.f32	s15, s15
 8003746:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80037c4 <gyro_self_test+0x178>
 800374a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	dd20      	ble.n	8003796 <gyro_self_test+0x14a>
                result |= 1 << jj;
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e018      	b.n	8003796 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8003764:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003768:	edd7 7a04 	vldr	s15, [r7, #16]
 800376c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003774:	d408      	bmi.n	8003788 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 8003776:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80037c8 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 800377a:	edd7 7a04 	vldr	s15, [r7, #16]
 800377e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	dd06      	ble.n	8003796 <gyro_self_test+0x14a>
            result |= 1 << jj;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3301      	adds	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	f77f af7b 	ble.w	800369a <gyro_self_test+0x4e>
    }
    return result;
 80037a4:	69bb      	ldr	r3, [r7, #24]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000010 	.word	0x20000010
 80037b4:	47800000 	.word	0x47800000
 80037b8:	00000083 	.word	0x00000083
 80037bc:	454cb000 	.word	0x454cb000
 80037c0:	3f85e354 	.word	0x3f85e354
 80037c4:	3e0f5c29 	.word	0x3e0f5c29
 80037c8:	42d20000 	.word	0x42d20000

080037cc <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80037cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d0:	b0b8      	sub	sp, #224	; 0xe0
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 80037d8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80037dc:	4613      	mov	r3, r2
 80037de:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 80037ee:	4ba5      	ldr	r3, [pc, #660]	; (8003a84 <get_st_biases+0x2b8>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	7818      	ldrb	r0, [r3, #0]
 80037f4:	4ba3      	ldr	r3, [pc, #652]	; (8003a84 <get_st_biases+0x2b8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	7c99      	ldrb	r1, [r3, #18]
 80037fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037fe:	2202      	movs	r2, #2
 8003800:	f7fd fcbc 	bl	800117c <i2cWrite>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <get_st_biases+0x44>
        return -1;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380e:	e34b      	b.n	8003ea8 <get_st_biases+0x6dc>
    delay_ms(200);
 8003810:	20c8      	movs	r0, #200	; 0xc8
 8003812:	f002 faab 	bl	8005d6c <HAL_Delay>
    data[0] = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800381c:	4b99      	ldr	r3, [pc, #612]	; (8003a84 <get_st_biases+0x2b8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	7818      	ldrb	r0, [r3, #0]
 8003822:	4b98      	ldr	r3, [pc, #608]	; (8003a84 <get_st_biases+0x2b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	7bd9      	ldrb	r1, [r3, #15]
 8003828:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800382c:	2201      	movs	r2, #1
 800382e:	f7fd fca5 	bl	800117c <i2cWrite>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <get_st_biases+0x72>
        return -1;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800383c:	e334      	b.n	8003ea8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800383e:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <get_st_biases+0x2b8>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	7818      	ldrb	r0, [r3, #0]
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <get_st_biases+0x2b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	7959      	ldrb	r1, [r3, #5]
 800384a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800384e:	2201      	movs	r2, #1
 8003850:	f7fd fc94 	bl	800117c <i2cWrite>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <get_st_biases+0x94>
        return -1;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800385e:	e323      	b.n	8003ea8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003860:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <get_st_biases+0x2b8>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	7818      	ldrb	r0, [r3, #0]
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <get_st_biases+0x2b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	7c99      	ldrb	r1, [r3, #18]
 800386c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003870:	2201      	movs	r2, #1
 8003872:	f7fd fc83 	bl	800117c <i2cWrite>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <get_st_biases+0xb6>
        return -1;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003880:	e312      	b.n	8003ea8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003882:	4b80      	ldr	r3, [pc, #512]	; (8003a84 <get_st_biases+0x2b8>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	7818      	ldrb	r0, [r3, #0]
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <get_st_biases+0x2b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	7dd9      	ldrb	r1, [r3, #23]
 800388e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003892:	2201      	movs	r2, #1
 8003894:	f7fd fc72 	bl	800117c <i2cWrite>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <get_st_biases+0xd8>
        return -1;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038a2:	e301      	b.n	8003ea8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80038a4:	4b77      	ldr	r3, [pc, #476]	; (8003a84 <get_st_biases+0x2b8>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	7818      	ldrb	r0, [r3, #0]
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <get_st_biases+0x2b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	7919      	ldrb	r1, [r3, #4]
 80038b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038b4:	2201      	movs	r2, #1
 80038b6:	f7fd fc61 	bl	800117c <i2cWrite>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <get_st_biases+0xfa>
        return -1;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c4:	e2f0      	b.n	8003ea8 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 80038c6:	230c      	movs	r3, #12
 80038c8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80038cc:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <get_st_biases+0x2b8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	7818      	ldrb	r0, [r3, #0]
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <get_st_biases+0x2b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	7919      	ldrb	r1, [r3, #4]
 80038d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038dc:	2201      	movs	r2, #1
 80038de:	f7fd fc4d 	bl	800117c <i2cWrite>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <get_st_biases+0x122>
        return -1;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ec:	e2dc      	b.n	8003ea8 <get_st_biases+0x6dc>
    delay_ms(15);
 80038ee:	200f      	movs	r0, #15
 80038f0:	f002 fa3c 	bl	8005d6c <HAL_Delay>
    data[0] = st.test->reg_lpf;
 80038f4:	4b63      	ldr	r3, [pc, #396]	; (8003a84 <get_st_biases+0x2b8>)
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	7a5b      	ldrb	r3, [r3, #9]
 80038fa:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <get_st_biases+0x2b8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	7818      	ldrb	r0, [r3, #0]
 8003904:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <get_st_biases+0x2b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	7899      	ldrb	r1, [r3, #2]
 800390a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800390e:	2201      	movs	r2, #1
 8003910:	f7fd fc34 	bl	800117c <i2cWrite>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <get_st_biases+0x154>
        return -1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391e:	e2c3      	b.n	8003ea8 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8003920:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <get_st_biases+0x2b8>)
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	7a1b      	ldrb	r3, [r3, #8]
 8003926:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800392a:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <get_st_biases+0x2b8>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	7818      	ldrb	r0, [r3, #0]
 8003930:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <get_st_biases+0x2b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	7859      	ldrb	r1, [r3, #1]
 8003936:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800393a:	2201      	movs	r2, #1
 800393c:	f7fd fc1e 	bl	800117c <i2cWrite>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <get_st_biases+0x180>
        return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800394a:	e2ad      	b.n	8003ea8 <get_st_biases+0x6dc>
    if (hw_test)
 800394c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <get_st_biases+0x2b8>)
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	7a9b      	ldrb	r3, [r3, #10]
 800395a:	f063 031f 	orn	r3, r3, #31
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8003964:	e004      	b.n	8003970 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <get_st_biases+0x2b8>)
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	7a9b      	ldrb	r3, [r3, #10]
 800396c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003970:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <get_st_biases+0x2b8>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	7818      	ldrb	r0, [r3, #0]
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <get_st_biases+0x2b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	7999      	ldrb	r1, [r3, #6]
 800397c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003980:	2201      	movs	r2, #1
 8003982:	f7fd fbfb 	bl	800117c <i2cWrite>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <get_st_biases+0x1c6>
        return -1;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003990:	e28a      	b.n	8003ea8 <get_st_biases+0x6dc>

    if (hw_test)
 8003992:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800399a:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <get_st_biases+0x2b8>)
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	7adb      	ldrb	r3, [r3, #11]
 80039a0:	f063 031f 	orn	r3, r3, #31
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 80039aa:	e002      	b.n	80039b2 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 80039ac:	2318      	movs	r3, #24
 80039ae:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <get_st_biases+0x2b8>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	7818      	ldrb	r0, [r3, #0]
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <get_st_biases+0x2b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	79d9      	ldrb	r1, [r3, #7]
 80039be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039c2:	2201      	movs	r2, #1
 80039c4:	f7fd fbda 	bl	800117c <i2cWrite>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <get_st_biases+0x208>
        return -1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039d2:	e269      	b.n	8003ea8 <get_st_biases+0x6dc>
    if (hw_test)
 80039d4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <get_st_biases+0x216>
        delay_ms(200);
 80039dc:	20c8      	movs	r0, #200	; 0xc8
 80039de:	f002 f9c5 	bl	8005d6c <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <get_st_biases+0x2b8>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	7818      	ldrb	r0, [r3, #0]
 80039ee:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <get_st_biases+0x2b8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	7919      	ldrb	r1, [r3, #4]
 80039f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039f8:	2201      	movs	r2, #1
 80039fa:	f7fd fbbf 	bl	800117c <i2cWrite>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <get_st_biases+0x23e>
        return -1;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a08:	e24e      	b.n	8003ea8 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8003a0a:	2378      	movs	r3, #120	; 0x78
 8003a0c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003a10:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <get_st_biases+0x2b8>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	7818      	ldrb	r0, [r3, #0]
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <get_st_biases+0x2b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	7959      	ldrb	r1, [r3, #5]
 8003a1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a20:	2201      	movs	r2, #1
 8003a22:	f7fd fbab 	bl	800117c <i2cWrite>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <get_st_biases+0x266>
        return -1;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a30:	e23a      	b.n	8003ea8 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8003a32:	2332      	movs	r3, #50	; 0x32
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 f999 	bl	8005d6c <HAL_Delay>
    data[0] = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <get_st_biases+0x2b8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	7818      	ldrb	r0, [r3, #0]
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <get_st_biases+0x2b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	7959      	ldrb	r1, [r3, #5]
 8003a4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a50:	2201      	movs	r2, #1
 8003a52:	f7fd fb93 	bl	800117c <i2cWrite>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <get_st_biases+0x296>
        return -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a60:	e222      	b.n	8003ea8 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <get_st_biases+0x2b8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	7818      	ldrb	r0, [r3, #0]
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <get_st_biases+0x2b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	7a99      	ldrb	r1, [r3, #10]
 8003a6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a72:	2202      	movs	r2, #2
 8003a74:	f7fd fba6 	bl	80011c4 <i2cRead>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <get_st_biases+0x2bc>
        return -1;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a82:	e211      	b.n	8003ea8 <get_st_biases+0x6dc>
 8003a84:	20000010 	.word	0x20000010

    fifo_count = (data[0] << 8) | data[1];
 8003a88:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	b21a      	sxth	r2, r3
 8003a90:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003a94:	b21b      	sxth	r3, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8003a9e:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <get_st_biases+0x34c>)
 8003aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8003ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ab4:	f103 0108 	add.w	r1, r3, #8
 8003ab8:	2300      	movs	r3, #0
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ac0:	1d1a      	adds	r2, r3, #4
 8003ac2:	680b      	ldr	r3, [r1, #0]
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003acc:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8003ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ad2:	f103 0108 	add.w	r1, r3, #8
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	600b      	str	r3, [r1, #0]
 8003ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	680b      	ldr	r3, [r1, #0]
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003aea:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003af2:	e0a0      	b.n	8003c36 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <get_st_biases+0x350>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	7818      	ldrb	r0, [r3, #0]
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <get_st_biases+0x350>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	7ad9      	ldrb	r1, [r3, #11]
 8003b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b04:	220c      	movs	r2, #12
 8003b06:	f7fd fb5d 	bl	80011c4 <i2cRead>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <get_st_biases+0x354>
            return -1;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b14:	e1c8      	b.n	8003ea8 <get_st_biases+0x6dc>
 8003b16:	bf00      	nop
 8003b18:	aaaaaaab 	.word	0xaaaaaaab
 8003b1c:	20000010 	.word	0x20000010
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8003b20:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	b21a      	sxth	r2, r3
 8003b28:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8003b36:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	b21a      	sxth	r2, r3
 8003b3e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b21b      	sxth	r3, r3
 8003b48:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8003b4c:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	b21a      	sxth	r2, r3
 8003b54:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 8003b62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8003b6c:	441a      	add	r2, r3
 8003b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b72:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8003b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b78:	3304      	adds	r3, #4
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8003b80:	4618      	mov	r0, r3
 8003b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	180b      	adds	r3, r1, r0
 8003b8a:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8003b8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b90:	3308      	adds	r3, #8
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b9e:	f103 0208 	add.w	r2, r3, #8
 8003ba2:	180b      	adds	r3, r1, r0
 8003ba4:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8003ba6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	b21a      	sxth	r2, r3
 8003bae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003bb2:	b21b      	sxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b21b      	sxth	r3, r3
 8003bb8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8003bbc:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	b21a      	sxth	r2, r3
 8003bc4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8003bd2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	b21a      	sxth	r2, r3
 8003bda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003bde:	b21b      	sxth	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b21b      	sxth	r3, r3
 8003be4:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 8003be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8003bf2:	441a      	add	r2, r3
 8003bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bf8:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8003bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bfe:	3304      	adds	r3, #4
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8003c06:	4618      	mov	r0, r3
 8003c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c0c:	1d1a      	adds	r2, r3, #4
 8003c0e:	180b      	adds	r3, r1, r0
 8003c10:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8003c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c16:	3308      	adds	r3, #8
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c24:	f103 0208 	add.w	r2, r3, #8
 8003c28:	180b      	adds	r3, r1, r0
 8003c2a:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8003c2c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003c30:	3301      	adds	r3, #1
 8003c32:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003c36:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003c3a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	f4ff af58 	bcc.w	8003af4 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8003c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	17da      	asrs	r2, r3, #31
 8003c4c:	461c      	mov	r4, r3
 8003c4e:	4615      	mov	r5, r2
 8003c50:	1423      	asrs	r3, r4, #16
 8003c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c56:	0423      	lsls	r3, r4, #16
 8003c58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c5c:	2283      	movs	r2, #131	; 0x83
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c68:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003c6c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003c70:	f7fc fff2 	bl	8000c58 <__aeabi_ldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c8a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003c8e:	f7fc ffe3 	bl	8000c58 <__aeabi_ldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9a:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8003c9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	17da      	asrs	r2, r3, #31
 8003ca6:	4698      	mov	r8, r3
 8003ca8:	4691      	mov	r9, r2
 8003caa:	ea4f 4328 	mov.w	r3, r8, asr #16
 8003cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003cb2:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8003cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cba:	2283      	movs	r2, #131	; 0x83
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cc6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003cca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003cce:	f7fc ffc3 	bl	8000c58 <__aeabi_ldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003cde:	2200      	movs	r2, #0
 8003ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ce4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003ce8:	f7fc ffb6 	bl	8000c58 <__aeabi_ldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cf8:	1d1a      	adds	r2, r3, #4
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8003cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d02:	3308      	adds	r3, #8
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	17da      	asrs	r2, r3, #31
 8003d08:	469a      	mov	sl, r3
 8003d0a:	4693      	mov	fp, r2
 8003d0c:	ea4f 432a 	mov.w	r3, sl, asr #16
 8003d10:	677b      	str	r3, [r7, #116]	; 0x74
 8003d12:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8003d16:	673b      	str	r3, [r7, #112]	; 0x70
 8003d18:	2283      	movs	r2, #131	; 0x83
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d20:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003d24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d28:	f7fc ff96 	bl	8000c58 <__aeabi_ldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d38:	2200      	movs	r2, #0
 8003d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003d3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d42:	f7fc ff89 	bl	8000c58 <__aeabi_ldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d52:	f103 0208 	add.w	r2, r3, #8
 8003d56:	4603      	mov	r3, r0
 8003d58:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8003d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	17da      	asrs	r2, r3, #31
 8003d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d64:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	141b      	asrs	r3, r3, #16
 8003d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d70:	460b      	mov	r3, r1
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	653b      	str	r3, [r7, #80]	; 0x50
 8003d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d84:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d88:	f7fc ff66 	bl	8000c58 <__aeabi_ldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d98:	2200      	movs	r2, #0
 8003d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d9c:	647a      	str	r2, [r7, #68]	; 0x44
 8003d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003da2:	f7fc ff59 	bl	8000c58 <__aeabi_ldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dae:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8003db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003db4:	3304      	adds	r3, #4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	17da      	asrs	r2, r3, #31
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dbe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	141b      	asrs	r3, r3, #16
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	460b      	mov	r3, r1
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ddc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003de0:	f7fc ff3a 	bl	8000c58 <__aeabi_ldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003df0:	2200      	movs	r2, #0
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	627a      	str	r2, [r7, #36]	; 0x24
 8003df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfa:	f7fc ff2d 	bl	8000c58 <__aeabi_ldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8003e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e14:	3308      	adds	r3, #8
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	17da      	asrs	r2, r3, #31
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	61fa      	str	r2, [r7, #28]
 8003e1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e22:	460b      	mov	r3, r1
 8003e24:	141b      	asrs	r3, r3, #16
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e32:	2300      	movs	r3, #0
 8003e34:	60ba      	str	r2, [r7, #8]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e40:	f7fc ff0a 	bl	8000c58 <__aeabi_ldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003e50:	2200      	movs	r2, #0
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e5a:	f7fc fefd 	bl	8000c58 <__aeabi_ldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8003e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e74:	3308      	adds	r3, #8
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	dd0a      	ble.n	8003e92 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 8003e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e80:	3308      	adds	r3, #8
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e88:	3308      	adds	r3, #8
 8003e8a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e009      	b.n	8003ea6 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 8003e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e96:	3308      	adds	r3, #8
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003ea4:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	37e0      	adds	r7, #224	; 0xe0
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop

08003eb4 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08e      	sub	sp, #56	; 0x38
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8003ec4:	4b64      	ldr	r3, [pc, #400]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f000 f9e6 	bl	80042a0 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003eda:	e002      	b.n	8003ee2 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fd82 	bl	80029f0 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8003eec:	f107 030f 	add.w	r3, r7, #15
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fe05 	bl	8002b00 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fea2 	bl	8002c44 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8003f00:	f107 030a 	add.w	r3, r7, #10
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe ff29 	bl	8002d5c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8003f0a:	4b53      	ldr	r3, [pc, #332]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003f0c:	7a9b      	ldrb	r3, [r3, #10]
 8003f0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8003f12:	f107 030e 	add.w	r3, r7, #14
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff f816 	bl	8002f48 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f20:	e00a      	b.n	8003f38 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8003f22:	2200      	movs	r2, #0
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fc50 	bl	80037cc <get_st_biases>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	3301      	adds	r3, #1
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	dbef      	blt.n	8003f22 <mpu_run_self_test+0x6e>
 8003f42:	e000      	b.n	8003f46 <mpu_run_self_test+0x92>
            break;
 8003f44:	bf00      	nop
    if (ii == tries) {
 8003f46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d102      	bne.n	8003f56 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003f54:	e045      	b.n	8003fe2 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5a:	e00d      	b.n	8003f78 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8003f5c:	f107 0110 	add.w	r1, r7, #16
 8003f60:	f107 031c 	add.w	r3, r7, #28
 8003f64:	2201      	movs	r2, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fc30 	bl	80037cc <get_st_biases>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	3301      	adds	r3, #1
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
 8003f78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	dbec      	blt.n	8003f5c <mpu_run_self_test+0xa8>
 8003f82:	e000      	b.n	8003f86 <mpu_run_self_test+0xd2>
            break;
 8003f84:	bf00      	nop
    if (ii == tries) {
 8003f86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d102      	bne.n	8003f96 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003f94:	e025      	b.n	8003fe2 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8003f96:	f107 0310 	add.w	r3, r7, #16
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6838      	ldr	r0, [r7, #0]
 8003f9e:	f7ff fad1 	bl	8003544 <accel_self_test>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fb4c 	bl	800364c <gyro_self_test>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 8003fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <mpu_run_self_test+0x11a>
        result |= 0x01;
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 8003fce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fde:	e000      	b.n	8003fe2 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003fe0:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003fe4:	22ff      	movs	r2, #255	; 0xff
 8003fe6:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003fea:	22ff      	movs	r2, #255	; 0xff
 8003fec:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ffa:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <mpu_run_self_test+0x1a4>)
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <mpu_run_self_test+0x1a4>)
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <mpu_run_self_test+0x1a4>)
 800400a:	2201      	movs	r2, #1
 800400c:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800400e:	89bb      	ldrh	r3, [r7, #12]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fd21 	bl	8002a58 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fdab 	bl	8002b74 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fe4d 	bl	8002cc0 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe feb1 	bl	8002d90 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800402e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe ffec 	bl	8003010 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe ff96 	bl	8002f6c <mpu_configure_fifo>

    if (dmp_was_on)
 8004040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 8004048:	2001      	movs	r0, #1
 800404a:	f000 f929 	bl	80042a0 <mpu_set_dmp_state>

    return result;
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004050:	4618      	mov	r0, r3
 8004052:	3738      	adds	r7, #56	; 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000010 	.word	0x20000010

0800405c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	603a      	str	r2, [r7, #0]
 8004066:	80fb      	strh	r3, [r7, #6]
 8004068:	460b      	mov	r3, r1
 800406a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <mpu_write_mem+0x1c>
        return -1;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004076:	e03d      	b.n	80040f4 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004078:	4b20      	ldr	r3, [pc, #128]	; (80040fc <mpu_write_mem+0xa0>)
 800407a:	7a9b      	ldrb	r3, [r3, #10]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <mpu_write_mem+0x2a>
        return -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004084:	e036      	b.n	80040f4 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8004096:	7b7b      	ldrb	r3, [r7, #13]
 8004098:	461a      	mov	r2, r3
 800409a:	88bb      	ldrh	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <mpu_write_mem+0xa0>)
 80040a0:	6852      	ldr	r2, [r2, #4]
 80040a2:	8952      	ldrh	r2, [r2, #10]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	dd02      	ble.n	80040ae <mpu_write_mem+0x52>
        return -1;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040ac:	e022      	b.n	80040f4 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <mpu_write_mem+0xa0>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	7818      	ldrb	r0, [r3, #0]
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <mpu_write_mem+0xa0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	7e19      	ldrb	r1, [r3, #24]
 80040ba:	f107 030c 	add.w	r3, r7, #12
 80040be:	2202      	movs	r2, #2
 80040c0:	f7fd f85c 	bl	800117c <i2cWrite>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <mpu_write_mem+0x74>
        return -1;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040ce:	e011      	b.n	80040f4 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <mpu_write_mem+0xa0>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	7818      	ldrb	r0, [r3, #0]
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <mpu_write_mem+0xa0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	7d59      	ldrb	r1, [r3, #21]
 80040dc:	88bb      	ldrh	r3, [r7, #4]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f7fd f84b 	bl	800117c <i2cWrite>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <mpu_write_mem+0x96>
        return -1;
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f0:	e000      	b.n	80040f4 <mpu_write_mem+0x98>
    return 0;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000010 	.word	0x20000010

08004100 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	603a      	str	r2, [r7, #0]
 800410a:	80fb      	strh	r3, [r7, #6]
 800410c:	460b      	mov	r3, r1
 800410e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <mpu_read_mem+0x1c>
        return -1;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800411a:	e03d      	b.n	8004198 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <mpu_read_mem+0xa0>)
 800411e:	7a9b      	ldrb	r3, [r3, #10]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <mpu_read_mem+0x2a>
        return -1;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004128:	e036      	b.n	8004198 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	b29b      	uxth	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800413a:	7b7b      	ldrb	r3, [r7, #13]
 800413c:	461a      	mov	r2, r3
 800413e:	88bb      	ldrh	r3, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <mpu_read_mem+0xa0>)
 8004144:	6852      	ldr	r2, [r2, #4]
 8004146:	8952      	ldrh	r2, [r2, #10]
 8004148:	4293      	cmp	r3, r2
 800414a:	dd02      	ble.n	8004152 <mpu_read_mem+0x52>
        return -1;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004150:	e022      	b.n	8004198 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004152:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <mpu_read_mem+0xa0>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	7818      	ldrb	r0, [r3, #0]
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <mpu_read_mem+0xa0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	7e19      	ldrb	r1, [r3, #24]
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	2202      	movs	r2, #2
 8004164:	f7fd f80a 	bl	800117c <i2cWrite>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <mpu_read_mem+0x74>
        return -1;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004172:	e011      	b.n	8004198 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <mpu_read_mem+0xa0>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	7818      	ldrb	r0, [r3, #0]
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <mpu_read_mem+0xa0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	7d59      	ldrb	r1, [r3, #21]
 8004180:	88bb      	ldrh	r3, [r7, #4]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f7fd f81d 	bl	80011c4 <i2cRead>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <mpu_read_mem+0x96>
        return -1;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004194:	e000      	b.n	8004198 <mpu_read_mem+0x98>
    return 0;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000010 	.word	0x20000010

080041a4 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	4611      	mov	r1, r2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	81fb      	strh	r3, [r7, #14]
 80041b4:	460b      	mov	r3, r1
 80041b6:	81bb      	strh	r3, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 80041bc:	4b37      	ldr	r3, [pc, #220]	; (800429c <mpu_load_firmware+0xf8>)
 80041be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ca:	e062      	b.n	8004292 <mpu_load_firmware+0xee>

    if (!firmware)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <mpu_load_firmware+0x34>
        return -1;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041d6:	e05c      	b.n	8004292 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80041d8:	2300      	movs	r3, #0
 80041da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041dc:	e034      	b.n	8004248 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 80041de:	89fa      	ldrh	r2, [r7, #14]
 80041e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	bfa8      	it	ge
 80041e8:	2310      	movge	r3, #16
 80041ea:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80041ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	441a      	add	r2, r3
 80041f2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80041f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff30 	bl	800405c <mpu_write_mem>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <mpu_load_firmware+0x64>
            return -1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004206:	e044      	b.n	8004292 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8004208:	f107 0214 	add.w	r2, r7, #20
 800420c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800420e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff75 	bl	8004100 <mpu_read_mem>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <mpu_load_firmware+0x7e>
            return -1;
 800421c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004220:	e037      	b.n	8004292 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8004222:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4413      	add	r3, r2
 8004228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800422a:	f107 0114 	add.w	r1, r7, #20
 800422e:	4618      	mov	r0, r3
 8004230:	f003 ff92 	bl	8008158 <memcmp>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <mpu_load_firmware+0x9c>
            return -2;
 800423a:	f06f 0301 	mvn.w	r3, #1
 800423e:	e028      	b.n	8004292 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004240:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004244:	4413      	add	r3, r2
 8004246:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004248:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	429a      	cmp	r2, r3
 800424e:	d3c6      	bcc.n	80041de <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8004250:	89bb      	ldrh	r3, [r7, #12]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800425a:	89bb      	ldrh	r3, [r7, #12]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <mpu_load_firmware+0xf8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	7818      	ldrb	r0, [r3, #0]
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <mpu_load_firmware+0xf8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	7e99      	ldrb	r1, [r3, #26]
 800426c:	f107 0310 	add.w	r3, r7, #16
 8004270:	2202      	movs	r2, #2
 8004272:	f7fc ff83 	bl	800117c <i2cWrite>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <mpu_load_firmware+0xde>
        return -1;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004280:	e007      	b.n	8004292 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <mpu_load_firmware+0xf8>)
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <mpu_load_firmware+0xf8>)
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3728      	adds	r7, #40	; 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000010 	.word	0x20000010

080042a0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 80042aa:	4b26      	ldr	r3, [pc, #152]	; (8004344 <mpu_set_dmp_state+0xa4>)
 80042ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042b0:	79fa      	ldrb	r2, [r7, #7]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d101      	bne.n	80042ba <mpu_set_dmp_state+0x1a>
        return 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e040      	b.n	800433c <mpu_set_dmp_state+0x9c>

    if (enable) {
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d027      	beq.n	8004310 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <mpu_set_dmp_state+0xa4>)
 80042c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <mpu_set_dmp_state+0x30>
            return -1;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ce:	e035      	b.n	800433c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7fe f8b7 	bl	8002444 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fe ff9c 	bl	8003214 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <mpu_set_dmp_state+0xa4>)
 80042de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fd55 	bl	8002d90 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <mpu_set_dmp_state+0xa4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	7818      	ldrb	r0, [r3, #0]
 80042f0:	f107 030f 	add.w	r3, r7, #15
 80042f4:	2201      	movs	r2, #1
 80042f6:	2123      	movs	r1, #35	; 0x23
 80042f8:	f7fc ff40 	bl	800117c <i2cWrite>
        st.chip_cfg.dmp_on = 1;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <mpu_set_dmp_state+0xa4>)
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8004304:	2001      	movs	r0, #1
 8004306:	f7fe f89d 	bl	8002444 <set_int_enable>
        mpu_reset_fifo();
 800430a:	f7fe fa73 	bl	80027f4 <mpu_reset_fifo>
 800430e:	e014      	b.n	800433a <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8004310:	2000      	movs	r0, #0
 8004312:	f7fe f897 	bl	8002444 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <mpu_set_dmp_state+0xa4>)
 8004318:	7c1b      	ldrb	r3, [r3, #16]
 800431a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <mpu_set_dmp_state+0xa4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	7818      	ldrb	r0, [r3, #0]
 8004322:	f107 030f 	add.w	r3, r7, #15
 8004326:	2201      	movs	r2, #1
 8004328:	2123      	movs	r1, #35	; 0x23
 800432a:	f7fc ff27 	bl	800117c <i2cWrite>
        st.chip_cfg.dmp_on = 0;
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <mpu_set_dmp_state+0xa4>)
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8004336:	f7fe fa5d 	bl	80027f4 <mpu_reset_fifo>
    }
    return 0;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000010 	.word	0x20000010

08004348 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8004360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004364:	23c8      	movs	r3, #200	; 0xc8
 8004366:	4904      	ldr	r1, [pc, #16]	; (8004378 <dmp_load_motion_driver_firmware+0x1c>)
 8004368:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800436c:	f7ff ff1a 	bl	80041a4 <mpu_load_firmware>
 8004370:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8004372:	4618      	mov	r0, r3
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	0800bb58 	.word	0x0800bb58

0800437c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8004386:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <dmp_set_orientation+0x1c4>)
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	4611      	mov	r1, r2
 8004390:	8019      	strh	r1, [r3, #0]
 8004392:	3302      	adds	r3, #2
 8004394:	0c12      	lsrs	r2, r2, #16
 8004396:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8004398:	4a6a      	ldr	r2, [pc, #424]	; (8004544 <dmp_set_orientation+0x1c8>)
 800439a:	f107 0310 	add.w	r3, r7, #16
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	4611      	mov	r1, r2
 80043a2:	8019      	strh	r1, [r3, #0]
 80043a4:	3302      	adds	r3, #2
 80043a6:	0c12      	lsrs	r2, r2, #16
 80043a8:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 80043aa:	4a67      	ldr	r2, [pc, #412]	; (8004548 <dmp_set_orientation+0x1cc>)
 80043ac:	f107 030c 	add.w	r3, r7, #12
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	4611      	mov	r1, r2
 80043b4:	8019      	strh	r1, [r3, #0]
 80043b6:	3302      	adds	r3, #2
 80043b8:	0c12      	lsrs	r2, r2, #16
 80043ba:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 80043bc:	4a63      	ldr	r2, [pc, #396]	; (800454c <dmp_set_orientation+0x1d0>)
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4611      	mov	r1, r2
 80043c6:	8019      	strh	r1, [r3, #0]
 80043c8:	3302      	adds	r3, #2
 80043ca:	0c12      	lsrs	r2, r2, #16
 80043cc:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	3320      	adds	r3, #32
 80043d6:	443b      	add	r3, r7
 80043d8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80043dc:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	3320      	adds	r3, #32
 80043ea:	443b      	add	r3, r7
 80043ec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80043f0:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	3320      	adds	r3, #32
 80043fe:	443b      	add	r3, r7
 8004400:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004404:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	3320      	adds	r3, #32
 800440e:	443b      	add	r3, r7
 8004410:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004414:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	08db      	lsrs	r3, r3, #3
 800441a:	b29b      	uxth	r3, r3
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	3320      	adds	r3, #32
 8004422:	443b      	add	r3, r7
 8004424:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004428:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	b29b      	uxth	r3, r3
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	3320      	adds	r3, #32
 8004436:	443b      	add	r3, r7
 8004438:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800443c:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800443e:	f107 031c 	add.w	r3, r7, #28
 8004442:	461a      	mov	r2, r3
 8004444:	2103      	movs	r1, #3
 8004446:	f240 4026 	movw	r0, #1062	; 0x426
 800444a:	f7ff fe07 	bl	800405c <mpu_write_mem>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <dmp_set_orientation+0xde>
        return -1;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004458:	e06e      	b.n	8004538 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800445a:	f107 0318 	add.w	r3, r7, #24
 800445e:	461a      	mov	r2, r3
 8004460:	2103      	movs	r1, #3
 8004462:	f240 402a 	movw	r0, #1066	; 0x42a
 8004466:	f7ff fdf9 	bl	800405c <mpu_write_mem>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <dmp_set_orientation+0xfa>
        return -1;
 8004470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004474:	e060      	b.n	8004538 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	f107 020c 	add.w	r2, r7, #12
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	4611      	mov	r1, r2
 8004482:	8019      	strh	r1, [r3, #0]
 8004484:	3302      	adds	r3, #2
 8004486:	0c12      	lsrs	r2, r2, #16
 8004488:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800448a:	f107 0318 	add.w	r3, r7, #24
 800448e:	f107 0208 	add.w	r2, r7, #8
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	4611      	mov	r1, r2
 8004496:	8019      	strh	r1, [r3, #0]
 8004498:	3302      	adds	r3, #2
 800449a:	0c12      	lsrs	r2, r2, #16
 800449c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 80044a8:	7f3b      	ldrb	r3, [r7, #28]
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 80044b2:	7e3b      	ldrb	r3, [r7, #24]
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80044c6:	7f7b      	ldrb	r3, [r7, #29]
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80044d0:	7e7b      	ldrb	r3, [r7, #25]
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80044e4:	7fbb      	ldrb	r3, [r7, #30]
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80044ee:	7ebb      	ldrb	r3, [r7, #26]
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80044f8:	f107 031c 	add.w	r3, r7, #28
 80044fc:	461a      	mov	r2, r3
 80044fe:	2103      	movs	r1, #3
 8004500:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8004504:	f7ff fdaa 	bl	800405c <mpu_write_mem>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <dmp_set_orientation+0x198>
        return -1;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004512:	e011      	b.n	8004538 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8004514:	f107 0318 	add.w	r3, r7, #24
 8004518:	461a      	mov	r2, r3
 800451a:	2103      	movs	r1, #3
 800451c:	f240 4031 	movw	r0, #1073	; 0x431
 8004520:	f7ff fd9c 	bl	800405c <mpu_write_mem>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <dmp_set_orientation+0x1b4>
        return -1;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452e:	e003      	b.n	8004538 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8004530:	4a07      	ldr	r2, [pc, #28]	; (8004550 <dmp_set_orientation+0x1d4>)
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	8113      	strh	r3, [r2, #8]
    return 0;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	0800ba58 	.word	0x0800ba58
 8004544:	0800ba5c 	.word	0x0800ba5c
 8004548:	0800ba60 	.word	0x0800ba60
 800454c:	0800ba64 	.word	0x0800ba64
 8004550:	2000030c 	.word	0x2000030c

08004554 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8004554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004558:	b08c      	sub	sp, #48	; 0x30
 800455a:	af00      	add	r7, sp, #0
 800455c:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800455e:	4b80      	ldr	r3, [pc, #512]	; (8004760 <dmp_set_gyro_bias+0x20c>)
 8004560:	891b      	ldrh	r3, [r3, #8]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 8004570:	4b7b      	ldr	r3, [pc, #492]	; (8004760 <dmp_set_gyro_bias+0x20c>)
 8004572:	891b      	ldrh	r3, [r3, #8]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	425b      	negs	r3, r3
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8004582:	4b77      	ldr	r3, [pc, #476]	; (8004760 <dmp_set_gyro_bias+0x20c>)
 8004584:	891b      	ldrh	r3, [r3, #8]
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	b29b      	uxth	r3, r3
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 8004598:	4b71      	ldr	r3, [pc, #452]	; (8004760 <dmp_set_gyro_bias+0x20c>)
 800459a:	891b      	ldrh	r3, [r3, #8]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	425b      	negs	r3, r3
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80045aa:	4b6d      	ldr	r3, [pc, #436]	; (8004760 <dmp_set_gyro_bias+0x20c>)
 80045ac:	891b      	ldrh	r3, [r3, #8]
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 80045c0:	4b67      	ldr	r3, [pc, #412]	; (8004760 <dmp_set_gyro_bias+0x20c>)
 80045c2:	891b      	ldrh	r3, [r3, #8]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	425b      	negs	r3, r3
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	17da      	asrs	r2, r3, #31
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	617a      	str	r2, [r7, #20]
 80045da:	4b62      	ldr	r3, [pc, #392]	; (8004764 <dmp_set_gyro_bias+0x210>)
 80045dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045e0:	460a      	mov	r2, r1
 80045e2:	fb03 f202 	mul.w	r2, r3, r2
 80045e6:	2300      	movs	r3, #0
 80045e8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80045ec:	4601      	mov	r1, r0
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	4a5b      	ldr	r2, [pc, #364]	; (8004764 <dmp_set_gyro_bias+0x210>)
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	fba1 ab02 	umull	sl, fp, r1, r2
 80045fc:	445b      	add	r3, fp
 80045fe:	469b      	mov	fp, r3
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800460c:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8004610:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8004614:	4613      	mov	r3, r2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	17da      	asrs	r2, r3, #31
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	60fa      	str	r2, [r7, #12]
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <dmp_set_gyro_bias+0x210>)
 8004622:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004626:	465a      	mov	r2, fp
 8004628:	fb03 f202 	mul.w	r2, r3, r2
 800462c:	2300      	movs	r3, #0
 800462e:	4651      	mov	r1, sl
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	4a4b      	ldr	r2, [pc, #300]	; (8004764 <dmp_set_gyro_bias+0x210>)
 8004638:	4651      	mov	r1, sl
 800463a:	fba1 8902 	umull	r8, r9, r1, r2
 800463e:	444b      	add	r3, r9
 8004640:	4699      	mov	r9, r3
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800464e:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8004652:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8004656:	4613      	mov	r3, r2
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	17da      	asrs	r2, r3, #31
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	4b40      	ldr	r3, [pc, #256]	; (8004764 <dmp_set_gyro_bias+0x210>)
 8004664:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004668:	464a      	mov	r2, r9
 800466a:	fb03 f202 	mul.w	r2, r3, r2
 800466e:	2300      	movs	r3, #0
 8004670:	4641      	mov	r1, r8
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	4a3a      	ldr	r2, [pc, #232]	; (8004764 <dmp_set_gyro_bias+0x210>)
 800467a:	4641      	mov	r1, r8
 800467c:	fba1 4502 	umull	r4, r5, r1, r2
 8004680:	442b      	add	r3, r5
 8004682:	461d      	mov	r5, r3
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	0fa2      	lsrs	r2, r4, #30
 800468e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004692:	17ab      	asrs	r3, r5, #30
 8004694:	4613      	mov	r3, r2
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	161b      	asrs	r3, r3, #24
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	141b      	asrs	r3, r3, #16
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	121b      	asrs	r3, r3, #8
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 80046be:	f107 0320 	add.w	r3, r7, #32
 80046c2:	461a      	mov	r2, r3
 80046c4:	2104      	movs	r1, #4
 80046c6:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 80046ca:	f7ff fcc7 	bl	800405c <mpu_write_mem>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <dmp_set_gyro_bias+0x186>
        return -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046d8:	e03c      	b.n	8004754 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	161b      	asrs	r3, r3, #24
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	141b      	asrs	r3, r3, #16
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	121b      	asrs	r3, r3, #8
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8004700:	f107 0320 	add.w	r3, r7, #32
 8004704:	461a      	mov	r2, r3
 8004706:	2104      	movs	r1, #4
 8004708:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 800470c:	f7ff fca6 	bl	800405c <mpu_write_mem>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <dmp_set_gyro_bias+0x1c8>
        return -1;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800471a:	e01b      	b.n	8004754 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	161b      	asrs	r3, r3, #24
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	141b      	asrs	r3, r3, #16
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	121b      	asrs	r3, r3, #8
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8004742:	f107 0320 	add.w	r3, r7, #32
 8004746:	461a      	mov	r2, r3
 8004748:	2104      	movs	r1, #4
 800474a:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 800474e:	f7ff fc85 	bl	800405c <mpu_write_mem>
 8004752:	4603      	mov	r3, r0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3730      	adds	r7, #48	; 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	2000030c 	.word	0x2000030c
 8004764:	02cae309 	.word	0x02cae309

08004768 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b094      	sub	sp, #80	; 0x50
 800476e:	af00      	add	r7, sp, #0
 8004770:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8004772:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fba8 	bl	8002ecc <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 800477c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2200      	movs	r2, #0
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	69f9      	ldr	r1, [r7, #28]
 8004790:	03cb      	lsls	r3, r1, #15
 8004792:	69b9      	ldr	r1, [r7, #24]
 8004794:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	03ca      	lsls	r2, r1, #15
 800479c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 80047a0:	4b71      	ldr	r3, [pc, #452]	; (8004968 <dmp_set_accel_bias+0x200>)
 80047a2:	891b      	ldrh	r3, [r3, #8]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	4413      	add	r3, r2
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <dmp_set_accel_bias+0x200>)
 80047b4:	891b      	ldrh	r3, [r3, #8]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	425b      	negs	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <dmp_set_accel_bias+0x200>)
 80047c6:	891b      	ldrh	r3, [r3, #8]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	4413      	add	r3, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <dmp_set_accel_bias+0x200>)
 80047dc:	891b      	ldrh	r3, [r3, #8]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80047e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e8:	425b      	negs	r3, r3
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80047ec:	4b5e      	ldr	r3, [pc, #376]	; (8004968 <dmp_set_accel_bias+0x200>)
 80047ee:	891b      	ldrh	r3, [r3, #8]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	4413      	add	r3, r2
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 8004802:	4b59      	ldr	r3, [pc, #356]	; (8004968 <dmp_set_accel_bias+0x200>)
 8004804:	891b      	ldrh	r3, [r3, #8]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 800480e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004810:	425b      	negs	r3, r3
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	17da      	asrs	r2, r3, #31
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	617a      	str	r2, [r7, #20]
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004822:	460a      	mov	r2, r1
 8004824:	fb02 f203 	mul.w	r2, r2, r3
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800482e:	4601      	mov	r1, r0
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	fba2 ab01 	umull	sl, fp, r2, r1
 800483e:	445b      	add	r3, fp
 8004840:	469b      	mov	fp, r3
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800484e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8004852:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8004856:	4613      	mov	r3, r2
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 800485a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485c:	17da      	asrs	r2, r3, #31
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	60fa      	str	r2, [r7, #12]
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004868:	465a      	mov	r2, fp
 800486a:	fb02 f203 	mul.w	r2, r2, r3
 800486e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004870:	4651      	mov	r1, sl
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487a:	4651      	mov	r1, sl
 800487c:	fba2 8901 	umull	r8, r9, r2, r1
 8004880:	444b      	add	r3, r9
 8004882:	4699      	mov	r9, r3
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8004890:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8004894:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8004898:	4613      	mov	r3, r2
 800489a:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 800489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489e:	17da      	asrs	r2, r3, #31
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a6:	e9d7 8900 	ldrd	r8, r9, [r7]
 80048aa:	464a      	mov	r2, r9
 80048ac:	fb02 f203 	mul.w	r2, r2, r3
 80048b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b2:	4641      	mov	r1, r8
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048bc:	4641      	mov	r1, r8
 80048be:	fba2 4501 	umull	r4, r5, r2, r1
 80048c2:	442b      	add	r3, r5
 80048c4:	461d      	mov	r5, r3
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	0fa2      	lsrs	r2, r4, #30
 80048d0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80048d4:	17ab      	asrs	r3, r5, #30
 80048d6:	4613      	mov	r3, r2
 80048d8:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	161b      	asrs	r3, r3, #24
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	141b      	asrs	r3, r3, #16
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80048ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f0:	121b      	asrs	r3, r3, #8
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	161b      	asrs	r3, r3, #24
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800490a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490c:	141b      	asrs	r3, r3, #16
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8004914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004916:	121b      	asrs	r3, r3, #8
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8004926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004928:	161b      	asrs	r3, r3, #24
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8004930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004932:	141b      	asrs	r3, r3, #16
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	121b      	asrs	r3, r3, #8
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800494c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004950:	461a      	mov	r2, r3
 8004952:	210c      	movs	r1, #12
 8004954:	f44f 7025 	mov.w	r0, #660	; 0x294
 8004958:	f7ff fb80 	bl	800405c <mpu_write_mem>
 800495c:	4603      	mov	r3, r0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3750      	adds	r7, #80	; 0x50
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004968:	2000030c 	.word	0x2000030c

0800496c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8004976:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <dmp_set_fifo_rate+0x88>)
 8004978:	f107 0310 	add.w	r3, r7, #16
 800497c:	ca07      	ldmia	r2, {r0, r1, r2}
 800497e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	2bc8      	cmp	r3, #200	; 0xc8
 8004986:	d902      	bls.n	800498e <dmp_set_fifo_rate+0x22>
        return -1;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800498c:	e02e      	b.n	80049ec <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	22c8      	movs	r2, #200	; 0xc8
 8004992:	fb92 f3f3 	sdiv	r3, r2, r3
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800499c:	8bfb      	ldrh	r3, [r7, #30]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	461a      	mov	r2, r3
 80049b2:	2102      	movs	r1, #2
 80049b4:	f240 2016 	movw	r0, #534	; 0x216
 80049b8:	f7ff fb50 	bl	800405c <mpu_write_mem>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <dmp_set_fifo_rate+0x5c>
        return -1;
 80049c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c6:	e011      	b.n	80049ec <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80049c8:	f107 0310 	add.w	r3, r7, #16
 80049cc:	461a      	mov	r2, r3
 80049ce:	210c      	movs	r1, #12
 80049d0:	f640 20c1 	movw	r0, #2753	; 0xac1
 80049d4:	f7ff fb42 	bl	800405c <mpu_write_mem>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <dmp_set_fifo_rate+0x78>
        return -1;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049e2:	e003      	b.n	80049ec <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <dmp_set_fifo_rate+0x8c>)
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	8193      	strh	r3, [r2, #12]
    return 0;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	0800ba68 	.word	0x0800ba68
 80049f8:	2000030c 	.word	0x2000030c

080049fc <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	460a      	mov	r2, r1
 8004a06:	71fb      	strb	r3, [r7, #7]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <dmp_set_tap_thresh+0x22>
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a1c:	d902      	bls.n	8004a24 <dmp_set_tap_thresh+0x28>
        return -1;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a22:	e10b      	b.n	8004c3c <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8004a24:	88bb      	ldrh	r3, [r7, #4]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a2e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004c44 <dmp_set_tap_thresh+0x248>
 8004a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a36:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8004a3a:	f107 030b 	add.w	r3, r7, #11
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe f85e 	bl	8002b00 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	3b02      	subs	r3, #2
 8004a48:	2b0e      	cmp	r3, #14
 8004a4a:	d87d      	bhi.n	8004b48 <dmp_set_tap_thresh+0x14c>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <dmp_set_tap_thresh+0x58>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a91 	.word	0x08004a91
 8004a58:	08004b49 	.word	0x08004b49
 8004a5c:	08004abf 	.word	0x08004abf
 8004a60:	08004b49 	.word	0x08004b49
 8004a64:	08004b49 	.word	0x08004b49
 8004a68:	08004b49 	.word	0x08004b49
 8004a6c:	08004aed 	.word	0x08004aed
 8004a70:	08004b49 	.word	0x08004b49
 8004a74:	08004b49 	.word	0x08004b49
 8004a78:	08004b49 	.word	0x08004b49
 8004a7c:	08004b49 	.word	0x08004b49
 8004a80:	08004b49 	.word	0x08004b49
 8004a84:	08004b49 	.word	0x08004b49
 8004a88:	08004b49 	.word	0x08004b49
 8004a8c:	08004b1b 	.word	0x08004b1b
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8004a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a94:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004c48 <dmp_set_tap_thresh+0x24c>
 8004a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa0:	ee17 3a90 	vmov	r3, s15
 8004aa4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8004aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aaa:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004c4c <dmp_set_tap_thresh+0x250>
 8004aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab6:	ee17 3a90 	vmov	r3, s15
 8004aba:	82bb      	strh	r3, [r7, #20]
        break;
 8004abc:	e047      	b.n	8004b4e <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ac2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004c50 <dmp_set_tap_thresh+0x254>
 8004ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ace:	ee17 3a90 	vmov	r3, s15
 8004ad2:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ad8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004c54 <dmp_set_tap_thresh+0x258>
 8004adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae4:	ee17 3a90 	vmov	r3, s15
 8004ae8:	82bb      	strh	r3, [r7, #20]
        break;
 8004aea:	e030      	b.n	8004b4e <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8004aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8004af0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004c58 <dmp_set_tap_thresh+0x25c>
 8004af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afc:	ee17 3a90 	vmov	r3, s15
 8004b00:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8004b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b06:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004c5c <dmp_set_tap_thresh+0x260>
 8004b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b12:	ee17 3a90 	vmov	r3, s15
 8004b16:	82bb      	strh	r3, [r7, #20]
        break;
 8004b18:	e019      	b.n	8004b4e <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8004b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b1e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004c60 <dmp_set_tap_thresh+0x264>
 8004b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 3a90 	vmov	r3, s15
 8004b2e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b34:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004c64 <dmp_set_tap_thresh+0x268>
 8004b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	ee17 3a90 	vmov	r3, s15
 8004b44:	82bb      	strh	r3, [r7, #20]
        break;
 8004b46:	e002      	b.n	8004b4e <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b4c:	e076      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8004b4e:	8afb      	ldrh	r3, [r7, #22]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8004b5e:	8abb      	ldrh	r3, [r7, #20]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8004b68:	8abb      	ldrh	r3, [r7, #20]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2102      	movs	r1, #2
 8004b80:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8004b84:	f7ff fa6a 	bl	800405c <mpu_write_mem>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <dmp_set_tap_thresh+0x198>
            return -1;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b92:	e053      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004b94:	f107 030c 	add.w	r3, r7, #12
 8004b98:	3302      	adds	r3, #2
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	f44f 7092 	mov.w	r0, #292	; 0x124
 8004ba2:	f7ff fa5b 	bl	800405c <mpu_write_mem>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <dmp_set_tap_thresh+0x1b6>
            return -1;
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bb0:	e044      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01c      	beq.n	8004bf6 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8004bbc:	f107 030c 	add.w	r3, r7, #12
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2102      	movs	r1, #2
 8004bc4:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004bc8:	f7ff fa48 	bl	800405c <mpu_write_mem>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd6:	e031      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004bd8:	f107 030c 	add.w	r3, r7, #12
 8004bdc:	3302      	adds	r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	2102      	movs	r1, #2
 8004be2:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004be6:	f7ff fa39 	bl	800405c <mpu_write_mem>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bf4:	e022      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01c      	beq.n	8004c3a <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	461a      	mov	r2, r3
 8004c06:	2102      	movs	r1, #2
 8004c08:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8004c0c:	f7ff fa26 	bl	800405c <mpu_write_mem>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <dmp_set_tap_thresh+0x220>
            return -1;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c1a:	e00f      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	3302      	adds	r3, #2
 8004c22:	461a      	mov	r2, r3
 8004c24:	2102      	movs	r1, #2
 8004c26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c2a:	f7ff fa17 	bl	800405c <mpu_write_mem>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <dmp_set_tap_thresh+0x23e>
            return -1;
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c38:	e000      	b.n	8004c3c <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	43480000 	.word	0x43480000
 8004c48:	46800000 	.word	0x46800000
 8004c4c:	46400000 	.word	0x46400000
 8004c50:	46000000 	.word	0x46000000
 8004c54:	45c00000 	.word	0x45c00000
 8004c58:	45800000 	.word	0x45800000
 8004c5c:	45400000 	.word	0x45400000
 8004c60:	45000000 	.word	0x45000000
 8004c64:	44c00000 	.word	0x44c00000

08004c68 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	f043 030c 	orr.w	r3, r3, #12
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	f043 0303 	orr.w	r3, r3, #3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8004cb2:	f107 030f 	add.w	r3, r7, #15
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2101      	movs	r1, #1
 8004cba:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8004cbe:	f7ff f9cd 	bl	800405c <mpu_write_mem>
 8004cc2:	4603      	mov	r3, r0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <dmp_set_tap_count+0x16>
        min_taps = 1;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	71fb      	strb	r3, [r7, #7]
 8004ce0:	e004      	b.n	8004cec <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d901      	bls.n	8004cec <dmp_set_tap_count+0x20>
        min_taps = 4;
 8004ce8:	2304      	movs	r3, #4
 8004cea:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8004cf4:	f107 030f 	add.w	r3, r7, #15
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	f240 104f 	movw	r0, #335	; 0x14f
 8004d00:	f7ff f9ac 	bl	800405c <mpu_write_mem>
 8004d04:	4603      	mov	r3, r0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <dmp_set_tap_time+0x40>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004d26:	89fb      	ldrh	r3, [r7, #14]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8004d42:	f7ff f98b 	bl	800405c <mpu_write_mem>
 8004d46:	4603      	mov	r3, r0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	cccccccd 	.word	0xcccccccd

08004d54 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	4a0c      	ldr	r2, [pc, #48]	; (8004d94 <dmp_set_tap_time_multi+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004d6a:	89fb      	ldrh	r3, [r7, #14]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2102      	movs	r1, #2
 8004d82:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8004d86:	f7ff f969 	bl	800405c <mpu_write_mem>
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	cccccccd 	.word	0xcccccccd

08004d98 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <dmp_set_shake_reject_thresh+0x5c>)
 8004da8:	fb82 1203 	smull	r1, r2, r2, r3
 8004dac:	1192      	asrs	r2, r2, #6
 8004dae:	17db      	asrs	r3, r3, #31
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	161b      	asrs	r3, r3, #24
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	141b      	asrs	r3, r3, #16
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	121b      	asrs	r3, r3, #8
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004dd8:	f107 0308 	add.w	r3, r7, #8
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2104      	movs	r1, #4
 8004de0:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8004de4:	f7ff f93a 	bl	800405c <mpu_write_mem>
 8004de8:	4603      	mov	r3, r0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	10624dd3 	.word	0x10624dd3

08004df8 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <dmp_set_shake_reject_time+0x40>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	089b      	lsrs	r3, r3, #2
 8004e0c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	461a      	mov	r2, r3
 8004e24:	2102      	movs	r1, #2
 8004e26:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8004e2a:	f7ff f917 	bl	800405c <mpu_write_mem>
 8004e2e:	4603      	mov	r3, r0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	cccccccd 	.word	0xcccccccd

08004e3c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	4a0c      	ldr	r2, [pc, #48]	; (8004e7c <dmp_set_shake_reject_timeout+0x40>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	0a1b      	lsrs	r3, r3, #8
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8004e62:	f107 030c 	add.w	r3, r7, #12
 8004e66:	461a      	mov	r2, r3
 8004e68:	2102      	movs	r1, #2
 8004e6a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004e6e:	f7ff f8f5 	bl	800405c <mpu_write_mem>
 8004e72:	4603      	mov	r3, r0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	cccccccd 	.word	0xcccccccd

08004e80 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8004e8e:	23ca      	movs	r3, #202	; 0xca
 8004e90:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8004e92:	23e3      	movs	r3, #227	; 0xe3
 8004e94:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8004e96:	2309      	movs	r3, #9
 8004e98:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	2068      	movs	r0, #104	; 0x68
 8004ea4:	f7ff f8da 	bl	800405c <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8004ea8:	23a3      	movs	r3, #163	; 0xa3
 8004eaa:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d006      	beq.n	8004ec4 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8004eb6:	23c0      	movs	r3, #192	; 0xc0
 8004eb8:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8004eba:	23c8      	movs	r3, #200	; 0xc8
 8004ebc:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8004ebe:	23c2      	movs	r3, #194	; 0xc2
 8004ec0:	73fb      	strb	r3, [r7, #15]
 8004ec2:	e005      	b.n	8004ed0 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8004ec4:	23a3      	movs	r3, #163	; 0xa3
 8004ec6:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8004ec8:	23a3      	movs	r3, #163	; 0xa3
 8004eca:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8004ecc:	23a3      	movs	r3, #163	; 0xa3
 8004ece:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d006      	beq.n	8004ee8 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8004eda:	23c4      	movs	r3, #196	; 0xc4
 8004edc:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8004ede:	23cc      	movs	r3, #204	; 0xcc
 8004ee0:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8004ee2:	23c6      	movs	r3, #198	; 0xc6
 8004ee4:	74bb      	strb	r3, [r7, #18]
 8004ee6:	e005      	b.n	8004ef4 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8004ee8:	23a3      	movs	r3, #163	; 0xa3
 8004eea:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8004eec:	23a3      	movs	r3, #163	; 0xa3
 8004eee:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8004ef0:	23a3      	movs	r3, #163	; 0xa3
 8004ef2:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8004ef4:	23a3      	movs	r3, #163	; 0xa3
 8004ef6:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8004ef8:	23a3      	movs	r3, #163	; 0xa3
 8004efa:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8004efc:	23a3      	movs	r3, #163	; 0xa3
 8004efe:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	461a      	mov	r2, r3
 8004f06:	210a      	movs	r1, #10
 8004f08:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8004f0c:	f7ff f8a6 	bl	800405c <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	733b      	strb	r3, [r7, #12]
 8004f1e:	e001      	b.n	8004f24 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8004f20:	23d8      	movs	r3, #216	; 0xd8
 8004f22:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	f640 20b6 	movw	r0, #2742	; 0xab6
 8004f30:	f7ff f894 	bl	800405c <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f000 f8c6 	bl	80050d0 <dmp_enable_gyro_cal>
 8004f44:	e002      	b.n	8004f4c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004f46:	2000      	movs	r0, #0
 8004f48:	f000 f8c2 	bl	80050d0 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01d      	beq.n	8004f92 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8004f60:	23b2      	movs	r3, #178	; 0xb2
 8004f62:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004f64:	238b      	movs	r3, #139	; 0x8b
 8004f66:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004f68:	23b6      	movs	r3, #182	; 0xb6
 8004f6a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004f6c:	239b      	movs	r3, #155	; 0x9b
 8004f6e:	73fb      	strb	r3, [r7, #15]
 8004f70:	e007      	b.n	8004f82 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8004f72:	23b0      	movs	r3, #176	; 0xb0
 8004f74:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004f7a:	23b4      	movs	r3, #180	; 0xb4
 8004f7c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8004f7e:	2390      	movs	r3, #144	; 0x90
 8004f80:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8004f82:	f107 030c 	add.w	r3, r7, #12
 8004f86:	461a      	mov	r2, r3
 8004f88:	2104      	movs	r1, #4
 8004f8a:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8004f8e:	f7ff f865 	bl	800405c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d025      	beq.n	8004fe8 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004f9c:	23f8      	movs	r3, #248	; 0xf8
 8004f9e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004fa0:	f107 030c 	add.w	r3, r7, #12
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004fac:	f7ff f856 	bl	800405c <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004fb0:	21fa      	movs	r1, #250	; 0xfa
 8004fb2:	2007      	movs	r0, #7
 8004fb4:	f7ff fd22 	bl	80049fc <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004fb8:	2007      	movs	r0, #7
 8004fba:	f7ff fe55 	bl	8004c68 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7ff fe84 	bl	8004ccc <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004fc4:	2064      	movs	r0, #100	; 0x64
 8004fc6:	f7ff fea3 	bl	8004d10 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8004fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fce:	f7ff fec1 	bl	8004d54 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004fd2:	21c8      	movs	r1, #200	; 0xc8
 8004fd4:	483c      	ldr	r0, [pc, #240]	; (80050c8 <dmp_enable_feature+0x248>)
 8004fd6:	f7ff fedf 	bl	8004d98 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8004fda:	2028      	movs	r0, #40	; 0x28
 8004fdc:	f7ff ff0c 	bl	8004df8 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004fe0:	200a      	movs	r0, #10
 8004fe2:	f7ff ff2b 	bl	8004e3c <dmp_set_shake_reject_timeout>
 8004fe6:	e009      	b.n	8004ffc <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004fe8:	23d8      	movs	r3, #216	; 0xd8
 8004fea:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004ff8:	f7ff f830 	bl	800405c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8005006:	23d9      	movs	r3, #217	; 0xd9
 8005008:	733b      	strb	r3, [r7, #12]
 800500a:	e001      	b.n	8005010 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800500c:	23d8      	movs	r3, #216	; 0xd8
 800500e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	461a      	mov	r2, r3
 8005016:	2101      	movs	r1, #1
 8005018:	f240 703d 	movw	r0, #1853	; 0x73d
 800501c:	f7ff f81e 	bl	800405c <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800502a:	2001      	movs	r0, #1
 800502c:	f000 f880 	bl	8005130 <dmp_enable_lp_quat>
 8005030:	e002      	b.n	8005038 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8005032:	2000      	movs	r0, #0
 8005034:	f000 f87c 	bl	8005130 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8005042:	2001      	movs	r0, #1
 8005044:	f000 f89b 	bl	800517e <dmp_enable_6x_lp_quat>
 8005048:	e002      	b.n	8005050 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800504a:	2000      	movs	r0, #0
 800504c:	f000 f897 	bl	800517e <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	f043 0308 	orr.w	r3, r3, #8
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <dmp_enable_feature+0x24c>)
 800505a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800505c:	f7fd fbca 	bl	80027f4 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8005060:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <dmp_enable_feature+0x24c>)
 8005062:	2200      	movs	r2, #0
 8005064:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8005070:	4b16      	ldr	r3, [pc, #88]	; (80050cc <dmp_enable_feature+0x24c>)
 8005072:	7b9b      	ldrb	r3, [r3, #14]
 8005074:	3306      	adds	r3, #6
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <dmp_enable_feature+0x24c>)
 800507a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <dmp_enable_feature+0x24c>)
 8005088:	7b9b      	ldrb	r3, [r3, #14]
 800508a:	3306      	adds	r3, #6
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <dmp_enable_feature+0x24c>)
 8005090:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	f003 0314 	and.w	r3, r3, #20
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <dmp_enable_feature+0x24c>)
 800509e:	7b9b      	ldrb	r3, [r3, #14]
 80050a0:	3310      	adds	r3, #16
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <dmp_enable_feature+0x24c>)
 80050a6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <dmp_enable_feature+0x24c>)
 80050b4:	7b9b      	ldrb	r3, [r3, #14]
 80050b6:	3304      	adds	r3, #4
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <dmp_enable_feature+0x24c>)
 80050bc:	739a      	strb	r2, [r3, #14]

    return 0;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	02cae309 	.word	0x02cae309
 80050cc:	2000030c 	.word	0x2000030c

080050d0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00f      	beq.n	8005100 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80050e0:	4a11      	ldr	r2, [pc, #68]	; (8005128 <dmp_enable_gyro_cal+0x58>)
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80050e8:	c303      	stmia	r3!, {r0, r1}
 80050ea:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	461a      	mov	r2, r3
 80050f2:	2109      	movs	r1, #9
 80050f4:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80050f8:	f7fe ffb0 	bl	800405c <mpu_write_mem>
 80050fc:	4603      	mov	r3, r0
 80050fe:	e00e      	b.n	800511e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <dmp_enable_gyro_cal+0x5c>)
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	ca07      	ldmia	r2, {r0, r1, r2}
 8005108:	c303      	stmia	r3!, {r0, r1}
 800510a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	461a      	mov	r2, r3
 8005112:	2109      	movs	r1, #9
 8005114:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8005118:	f7fe ffa0 	bl	800405c <mpu_write_mem>
 800511c:	4603      	mov	r3, r0
    }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	0800ba74 	.word	0x0800ba74
 800512c:	0800ba80 	.word	0x0800ba80

08005130 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8005140:	23c0      	movs	r3, #192	; 0xc0
 8005142:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8005144:	23c2      	movs	r3, #194	; 0xc2
 8005146:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8005148:	23c4      	movs	r3, #196	; 0xc4
 800514a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800514c:	23c6      	movs	r3, #198	; 0xc6
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e006      	b.n	8005160 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8005152:	f107 030c 	add.w	r3, r7, #12
 8005156:	2204      	movs	r2, #4
 8005158:	218b      	movs	r1, #139	; 0x8b
 800515a:	4618      	mov	r0, r3
 800515c:	f003 f81a 	bl	8008194 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	461a      	mov	r2, r3
 8005166:	2104      	movs	r1, #4
 8005168:	f640 2098 	movw	r0, #2712	; 0xa98
 800516c:	f7fe ff76 	bl	800405c <mpu_write_mem>

    return mpu_reset_fifo();
 8005170:	f7fd fb40 	bl	80027f4 <mpu_reset_fifo>
 8005174:	4603      	mov	r3, r0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	4603      	mov	r3, r0
 8005186:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800518e:	2320      	movs	r3, #32
 8005190:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8005192:	2328      	movs	r3, #40	; 0x28
 8005194:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8005196:	2330      	movs	r3, #48	; 0x30
 8005198:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800519a:	2338      	movs	r3, #56	; 0x38
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e006      	b.n	80051ae <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 80051a0:	f107 030c 	add.w	r3, r7, #12
 80051a4:	2204      	movs	r2, #4
 80051a6:	21a3      	movs	r1, #163	; 0xa3
 80051a8:	4618      	mov	r0, r3
 80051aa:	f002 fff3 	bl	8008194 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	461a      	mov	r2, r3
 80051b4:	2104      	movs	r1, #4
 80051b6:	f640 209e 	movw	r0, #2718	; 0xa9e
 80051ba:	f7fe ff4f 	bl	800405c <mpu_write_mem>

    return mpu_reset_fifo();
 80051be:	f7fd fb19 	bl	80027f4 <mpu_reset_fifo>
 80051c2:	4603      	mov	r3, r0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3303      	adds	r3, #3
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051de:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3303      	adds	r3, #3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ea:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3301      	adds	r3, #1
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d012      	beq.n	8005220 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80051fa:	7bbb      	ldrb	r3, [r7, #14]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3301      	adds	r3, #1
 800520a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <decode_gesture+0x84>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <decode_gesture+0x84>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	7b39      	ldrb	r1, [r7, #12]
 800521a:	7b7a      	ldrb	r2, [r7, #13]
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3301      	adds	r3, #1
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <decode_gesture+0x84>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <decode_gesture+0x84>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	0992      	lsrs	r2, r2, #6
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
    }

    return 0;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2000030c 	.word	0x2000030c

08005254 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b092      	sub	sp, #72	; 0x48
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    sensors[0] = 0;
 8005268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526a:	2200      	movs	r2, #0
 800526c:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800526e:	4bae      	ldr	r3, [pc, #696]	; (8005528 <dmp_read_fifo+0x2d4>)
 8005270:	7b9b      	ldrb	r3, [r3, #14]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f107 0120 	add.w	r1, r7, #32
 8005278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd ff4e 	bl	800311c <mpu_read_fifo_stream>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <dmp_read_fifo+0x38>
        return -1;
 8005286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800528a:	e148      	b.n	800551e <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800528c:	4ba6      	ldr	r3, [pc, #664]	; (8005528 <dmp_read_fifo+0x2d4>)
 800528e:	895b      	ldrh	r3, [r3, #10]
 8005290:	f003 0314 	and.w	r3, r3, #20
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 808a 	beq.w	80053ae <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800529a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800529e:	061a      	lsls	r2, r3, #24
 80052a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80052a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80052ac:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80052ae:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80052b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80052b4:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80052ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052be:	061a      	lsls	r2, r3, #24
 80052c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80052c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052cc:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80052ce:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80052d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d4:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80052da:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80052dc:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80052de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052e2:	061a      	lsls	r2, r3, #24
 80052e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80052ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80052f0:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80052f2:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80052f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052f8:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80052fe:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005300:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005302:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005306:	061a      	lsls	r2, r3, #24
 8005308:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005310:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005314:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005316:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800531c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005322:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005324:	601a      	str	r2, [r3, #0]
        ii += 16;
 8005326:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800532a:	3310      	adds	r3, #16
 800532c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	141b      	asrs	r3, r3, #16
 8005336:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	141b      	asrs	r3, r3, #16
 8005340:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3308      	adds	r3, #8
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	141b      	asrs	r3, r3, #16
 800534a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	330c      	adds	r3, #12
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	141b      	asrs	r3, r3, #16
 8005354:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	fb03 f202 	mul.w	r2, r3, r2
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6979      	ldr	r1, [r7, #20]
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	69b9      	ldr	r1, [r7, #24]
 800536c:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8005370:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	69f9      	ldr	r1, [r7, #28]
 8005376:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800537a:	4413      	add	r3, r2
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800537e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005380:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005384:	db03      	blt.n	800538e <dmp_read_fifo+0x13a>
 8005386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005388:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 800538c:	dd07      	ble.n	800539e <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800538e:	f7fd fa31 	bl	80027f4 <mpu_reset_fifo>
            sensors[0] = 0;
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	2200      	movs	r2, #0
 8005396:	801a      	strh	r2, [r3, #0]
            return -1;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539c:	e0bf      	b.n	800551e <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800539e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a8:	b21a      	sxth	r2, r3
 80053aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ac:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80053ae:	4b5e      	ldr	r3, [pc, #376]	; (8005528 <dmp_read_fifo+0x2d4>)
 80053b0:	895b      	ldrh	r3, [r3, #10]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04c      	beq.n	8005454 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80053ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053be:	3348      	adds	r3, #72	; 0x48
 80053c0:	443b      	add	r3, r7
 80053c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	b21a      	sxth	r2, r3
 80053ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053ce:	3301      	adds	r3, #1
 80053d0:	3348      	adds	r3, #72	; 0x48
 80053d2:	443b      	add	r3, r7
 80053d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053d8:	b21b      	sxth	r3, r3
 80053da:	4313      	orrs	r3, r2
 80053dc:	b21a      	sxth	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80053e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053e6:	3302      	adds	r3, #2
 80053e8:	3348      	adds	r3, #72	; 0x48
 80053ea:	443b      	add	r3, r7
 80053ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	b219      	sxth	r1, r3
 80053f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053f8:	3303      	adds	r3, #3
 80053fa:	3348      	adds	r3, #72	; 0x48
 80053fc:	443b      	add	r3, r7
 80053fe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005402:	b21a      	sxth	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	3302      	adds	r3, #2
 8005408:	430a      	orrs	r2, r1
 800540a:	b212      	sxth	r2, r2
 800540c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800540e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005412:	3304      	adds	r3, #4
 8005414:	3348      	adds	r3, #72	; 0x48
 8005416:	443b      	add	r3, r7
 8005418:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	b219      	sxth	r1, r3
 8005420:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005424:	3305      	adds	r3, #5
 8005426:	3348      	adds	r3, #72	; 0x48
 8005428:	443b      	add	r3, r7
 800542a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800542e:	b21a      	sxth	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3304      	adds	r3, #4
 8005434:	430a      	orrs	r2, r1
 8005436:	b212      	sxth	r2, r2
 8005438:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800543a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800543e:	3306      	adds	r3, #6
 8005440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8005444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800544a:	f043 0308 	orr.w	r3, r3, #8
 800544e:	b21a      	sxth	r2, r3
 8005450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005452:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8005454:	4b34      	ldr	r3, [pc, #208]	; (8005528 <dmp_read_fifo+0x2d4>)
 8005456:	895b      	ldrh	r3, [r3, #10]
 8005458:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800545c:	2b00      	cmp	r3, #0
 800545e:	d04c      	beq.n	80054fa <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8005460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005464:	3348      	adds	r3, #72	; 0x48
 8005466:	443b      	add	r3, r7
 8005468:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	b21a      	sxth	r2, r3
 8005470:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005474:	3301      	adds	r3, #1
 8005476:	3348      	adds	r3, #72	; 0x48
 8005478:	443b      	add	r3, r7
 800547a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800547e:	b21b      	sxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b21a      	sxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8005488:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800548c:	3302      	adds	r3, #2
 800548e:	3348      	adds	r3, #72	; 0x48
 8005490:	443b      	add	r3, r7
 8005492:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	b219      	sxth	r1, r3
 800549a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800549e:	3303      	adds	r3, #3
 80054a0:	3348      	adds	r3, #72	; 0x48
 80054a2:	443b      	add	r3, r7
 80054a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054a8:	b21a      	sxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3302      	adds	r3, #2
 80054ae:	430a      	orrs	r2, r1
 80054b0:	b212      	sxth	r2, r2
 80054b2:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80054b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054b8:	3304      	adds	r3, #4
 80054ba:	3348      	adds	r3, #72	; 0x48
 80054bc:	443b      	add	r3, r7
 80054be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	b219      	sxth	r1, r3
 80054c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054ca:	3305      	adds	r3, #5
 80054cc:	3348      	adds	r3, #72	; 0x48
 80054ce:	443b      	add	r3, r7
 80054d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054d4:	b21a      	sxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3304      	adds	r3, #4
 80054da:	430a      	orrs	r2, r1
 80054dc:	b212      	sxth	r2, r2
 80054de:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80054e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054e4:	3306      	adds	r3, #6
 80054e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054f0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80054f4:	b21a      	sxth	r2, r3
 80054f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f8:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <dmp_read_fifo+0x2d4>)
 80054fc:	895b      	ldrh	r3, [r3, #10]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8005506:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800550a:	f107 0220 	add.w	r2, r7, #32
 800550e:	4413      	add	r3, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fe5b 	bl	80051cc <decode_gesture>

    myget_ms(timestamp);
 8005516:	6838      	ldr	r0, [r7, #0]
 8005518:	f7fe ff16 	bl	8004348 <myget_ms>
    return 0;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3748      	adds	r7, #72	; 0x48
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	2000030c 	.word	0x2000030c

0800552c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005532:	f107 030c 	add.w	r3, r7, #12
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	609a      	str	r2, [r3, #8]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	4b20      	ldr	r3, [pc, #128]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <MX_GPIO_Init+0x9c>)
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	6313      	str	r3, [r2, #48]	; 0x30
 8005552:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <MX_GPIO_Init+0x9c>)
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	6313      	str	r3, [r2, #48]	; 0x30
 800558a:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <MX_GPIO_Init+0x9c>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8005596:	2200      	movs	r2, #0
 8005598:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800559c:	480b      	ldr	r0, [pc, #44]	; (80055cc <MX_GPIO_Init+0xa0>)
 800559e:	f000 feb7 	bl	8006310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80055a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80055a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055a8:	2301      	movs	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055b4:	f107 030c 	add.w	r3, r7, #12
 80055b8:	4619      	mov	r1, r3
 80055ba:	4804      	ldr	r0, [pc, #16]	; (80055cc <MX_GPIO_Init+0xa0>)
 80055bc:	f000 fd0c 	bl	8005fd8 <HAL_GPIO_Init>

}
 80055c0:	bf00      	nop
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40020c00 	.word	0x40020c00

080055d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <MX_I2C1_Init+0x50>)
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <MX_I2C1_Init+0x54>)
 80055d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <MX_I2C1_Init+0x50>)
 80055dc:	4a12      	ldr	r2, [pc, #72]	; (8005628 <MX_I2C1_Init+0x58>)
 80055de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <MX_I2C1_Init+0x50>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <MX_I2C1_Init+0x50>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <MX_I2C1_Init+0x50>)
 80055ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <MX_I2C1_Init+0x50>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <MX_I2C1_Init+0x50>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <MX_I2C1_Init+0x50>)
 8005602:	2200      	movs	r2, #0
 8005604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <MX_I2C1_Init+0x50>)
 8005608:	2200      	movs	r2, #0
 800560a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800560c:	4804      	ldr	r0, [pc, #16]	; (8005620 <MX_I2C1_Init+0x50>)
 800560e:	f000 fe99 	bl	8006344 <HAL_I2C_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005618:	f000 f9a0 	bl	800595c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	2000031c 	.word	0x2000031c
 8005624:	40005400 	.word	0x40005400
 8005628:	00061a80 	.word	0x00061a80

0800562c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <HAL_I2C_MspInit+0x84>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d12b      	bne.n	80056a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <HAL_I2C_MspInit+0x88>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <HAL_I2C_MspInit+0x88>)
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	6313      	str	r3, [r2, #48]	; 0x30
 800565e:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <HAL_I2C_MspInit+0x88>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800566a:	23c0      	movs	r3, #192	; 0xc0
 800566c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800566e:	2312      	movs	r3, #18
 8005670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005676:	2303      	movs	r3, #3
 8005678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800567a:	2304      	movs	r3, #4
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567e:	f107 0314 	add.w	r3, r7, #20
 8005682:	4619      	mov	r1, r3
 8005684:	480c      	ldr	r0, [pc, #48]	; (80056b8 <HAL_I2C_MspInit+0x8c>)
 8005686:	f000 fca7 	bl	8005fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_I2C_MspInit+0x88>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <HAL_I2C_MspInit+0x88>)
 8005694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005698:	6413      	str	r3, [r2, #64]	; 0x40
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_I2C_MspInit+0x88>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80056a6:	bf00      	nop
 80056a8:	3728      	adds	r7, #40	; 0x28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40005400 	.word	0x40005400
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40020400 	.word	0x40020400

080056bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80056c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80056c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d013      	beq.n	80056fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80056d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80056d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80056dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80056e4:	e000      	b.n	80056e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80056e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80056e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f9      	beq.n	80056e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80056f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80056fc:	687b      	ldr	r3, [r7, #4]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b093      	sub	sp, #76	; 0x4c
 8005710:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005712:	f000 fab9 	bl	8005c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005716:	f000 f873 	bl	8005800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800571a:	f7ff ff07 	bl	800552c <MX_GPIO_Init>
  MX_I2C1_Init();
 800571e:	f7ff ff57 	bl	80055d0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005722:	f000 fa3b 	bl	8005b9c <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  IIC_Init(hi2c1);
 8005726:	4c2a      	ldr	r4, [pc, #168]	; (80057d0 <main+0xc4>)
 8005728:	4668      	mov	r0, sp
 800572a:	f104 0310 	add.w	r3, r4, #16
 800572e:	2244      	movs	r2, #68	; 0x44
 8005730:	4619      	mov	r1, r3
 8005732:	f002 fd21 	bl	8008178 <memcpy>
 8005736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800573a:	f7fb fc5f 	bl	8000ffc <IIC_Init>
  IIC_InitLockupRecover(GPIOB, 		//scl
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <main+0xc8>)
 8005742:	2140      	movs	r1, #64	; 0x40
 8005744:	4823      	ldr	r0, [pc, #140]	; (80057d4 <main+0xc8>)
 8005746:	f7fb fc71 	bl	800102c <IIC_InitLockupRecover>
		  	  	  	  	GPIO_PIN_6, //scl
						GPIOB, 		//sda
						GPIO_PIN_7);//sda
  IIC_LockupRecover();
 800574a:	f7fb fc91 	bl	8001070 <IIC_LockupRecover>

  printf("\n\rMPU6050 is initializing....\n\r");
 800574e:	4822      	ldr	r0, [pc, #136]	; (80057d8 <main+0xcc>)
 8005750:	f003 f992 	bl	8008a78 <iprintf>
  MPU6050_initialize();
 8005754:	f7fc f811 	bl	800177a <MPU6050_initialize>
  printf("\n\rMPU6050 has been initialized....\n\r");
 8005758:	4820      	ldr	r0, [pc, #128]	; (80057dc <main+0xd0>)
 800575a:	f003 f98d 	bl	8008a78 <iprintf>
  MPU6050_DMPInit();
 800575e:	f7fc f841 	bl	80017e4 <MPU6050_DMPInit>
  dmp_enable_gyro_cal(0);
 8005762:	2000      	movs	r0, #0
 8005764:	f7ff fcb4 	bl	80050d0 <dmp_enable_gyro_cal>
//  MPU6050_setYawCorrectorRate(-0.00415); // put the drifting rate of Yaw to be corrected
  MPU6050_GyroCalibration(1000, 0.01);
 8005768:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80057e0 <main+0xd4>
 800576c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005770:	f7fc fcd0 	bl	8002114 <MPU6050_GyroCalibration>
//  MPU6050_setZGyroOffset(-33);
//  IICwriteBits(0xD0, MPU6050_RA_ZG_OFFS_USRL, 0,1,0);

  printf("Gyro Calibrated!!!!!!!!!!");
 8005774:	481b      	ldr	r0, [pc, #108]	; (80057e4 <main+0xd8>)
 8005776:	f003 f97f 	bl	8008a78 <iprintf>
  HAL_Delay(2000);
 800577a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800577e:	f000 faf5 	bl	8005d6c <HAL_Delay>

  ZDur = MPU6050_getZeroMotionDetectionDuration();
 8005782:	f7fc fbd5 	bl	8001f30 <MPU6050_getZeroMotionDetectionDuration>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <main+0xdc>)
 800578c:	601a      	str	r2, [r3, #0]
  ZTh = MPU6050_getZeroMotionDetectionThreshold();
 800578e:	f7fc fbb1 	bl	8001ef4 <MPU6050_getZeroMotionDetectionThreshold>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	4b15      	ldr	r3, [pc, #84]	; (80057ec <main+0xe0>)
 8005798:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim11);
 800579a:	4815      	ldr	r0, [pc, #84]	; (80057f0 <main+0xe4>)
 800579c:	f002 fa8c 	bl	8007cb8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  gyroOffsetZ = MPU6050_getZGyroOffset();
 80057a0:	f7fc fc52 	bl	8002048 <MPU6050_getZGyroOffset>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <main+0xe8>)
 80057aa:	601a      	str	r2, [r3, #0]
//	  IICreadByte(0x68, MPU6050_RA_USER_CTRL, &control);
	  yaw = MPU6050_readDMPYaw();
 80057ac:	f7fc fa6c 	bl	8001c88 <MPU6050_readDMPYaw>
 80057b0:	eef0 7a40 	vmov.f32	s15, s0
 80057b4:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <main+0xec>)
 80057b6:	edc3 7a00 	vstr	s15, [r3]
	  MPU6050_GyroContinuosCalibration(10000, 0);
 80057ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80057fc <main+0xf0>
 80057be:	f242 7010 	movw	r0, #10000	; 0x2710
 80057c2:	f7fc fd69 	bl	8002298 <MPU6050_GyroContinuosCalibration>
	  HAL_Delay(100);
 80057c6:	2064      	movs	r0, #100	; 0x64
 80057c8:	f000 fad0 	bl	8005d6c <HAL_Delay>
	  gyroOffsetZ = MPU6050_getZGyroOffset();
 80057cc:	e7e8      	b.n	80057a0 <main+0x94>
 80057ce:	bf00      	nop
 80057d0:	2000031c 	.word	0x2000031c
 80057d4:	40020400 	.word	0x40020400
 80057d8:	0800baa4 	.word	0x0800baa4
 80057dc:	0800bac4 	.word	0x0800bac4
 80057e0:	3c23d70a 	.word	0x3c23d70a
 80057e4:	0800baec 	.word	0x0800baec
 80057e8:	20000378 	.word	0x20000378
 80057ec:	20000374 	.word	0x20000374
 80057f0:	20000388 	.word	0x20000388
 80057f4:	20000380 	.word	0x20000380
 80057f8:	2000037c 	.word	0x2000037c
 80057fc:	00000000 	.word	0x00000000

08005800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b094      	sub	sp, #80	; 0x50
 8005804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005806:	f107 0320 	add.w	r3, r7, #32
 800580a:	2230      	movs	r2, #48	; 0x30
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f002 fcc0 	bl	8008194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	609a      	str	r2, [r3, #8]
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	4b28      	ldr	r3, [pc, #160]	; (80058cc <SystemClock_Config+0xcc>)
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	4a27      	ldr	r2, [pc, #156]	; (80058cc <SystemClock_Config+0xcc>)
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6413      	str	r3, [r2, #64]	; 0x40
 8005834:	4b25      	ldr	r3, [pc, #148]	; (80058cc <SystemClock_Config+0xcc>)
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005840:	2300      	movs	r3, #0
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <SystemClock_Config+0xd0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <SystemClock_Config+0xd0>)
 800584a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <SystemClock_Config+0xd0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800585c:	2301      	movs	r3, #1
 800585e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005866:	2302      	movs	r3, #2
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800586a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005870:	2304      	movs	r3, #4
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005874:	2364      	movs	r3, #100	; 0x64
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005878:	2302      	movs	r3, #2
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800587c:	2304      	movs	r3, #4
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005880:	f107 0320 	add.w	r3, r7, #32
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fd1d 	bl	80072c4 <HAL_RCC_OscConfig>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005890:	f000 f864 	bl	800595c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005894:	230f      	movs	r3, #15
 8005896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005898:	2302      	movs	r3, #2
 800589a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80058aa:	f107 030c 	add.w	r3, r7, #12
 80058ae:	2103      	movs	r1, #3
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 ff7f 	bl	80077b4 <HAL_RCC_ClockConfig>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80058bc:	f000 f84e 	bl	800595c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80058c0:	f002 f85e 	bl	8007980 <HAL_RCC_EnableCSS>
}
 80058c4:	bf00      	nop
 80058c6:	3750      	adds	r7, #80	; 0x50
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40007000 	.word	0x40007000

080058d4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e009      	b.n	80058fa <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	60ba      	str	r2, [r7, #8]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fee4 	bl	80056bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	3301      	adds	r3, #1
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	429a      	cmp	r2, r3
 8005900:	dbf1      	blt.n	80058e6 <_write+0x12>
	}
	return len;
 8005902:	687b      	ldr	r3, [r7, #4]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d115      	bne.n	8005948 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		cnt11++;
 800591c:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005924:	6013      	str	r3, [r2, #0]

		if(cnt11%1000 == 0)
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800592c:	fb83 1302 	smull	r1, r3, r3, r2
 8005930:	1199      	asrs	r1, r3, #6
 8005932:	17d3      	asrs	r3, r2, #31
 8005934:	1acb      	subs	r3, r1, r3
 8005936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
//			MPU6050_getDriftingRate(&pr, &rr, &yr);		// it uses to check drifting rate
			MPU6050_updateAngleCorrector();
 8005944:	f7fc faa2 	bl	8001e8c <MPU6050_updateAngleCorrector>
		}
	}
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000388 	.word	0x20000388
 8005954:	20000370 	.word	0x20000370
 8005958:	10624dd3 	.word	0x10624dd3

0800595c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005960:	b672      	cpsid	i
}
 8005962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005964:	e7fe      	b.n	8005964 <Error_Handler+0x8>
	...

08005968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <HAL_MspInit+0x4c>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <HAL_MspInit+0x4c>)
 8005978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800597c:	6453      	str	r3, [r2, #68]	; 0x44
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <HAL_MspInit+0x4c>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <HAL_MspInit+0x4c>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <HAL_MspInit+0x4c>)
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_MspInit+0x4c>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40023800 	.word	0x40023800

080059b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80059bc:	f002 f912 	bl	8007be4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059c0:	e7fe      	b.n	80059c0 <NMI_Handler+0x8>

080059c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059c6:	e7fe      	b.n	80059c6 <HardFault_Handler+0x4>

080059c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059cc:	e7fe      	b.n	80059cc <MemManage_Handler+0x4>

080059ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059ce:	b480      	push	{r7}
 80059d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059d2:	e7fe      	b.n	80059d2 <BusFault_Handler+0x4>

080059d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059d8:	e7fe      	b.n	80059d8 <UsageFault_Handler+0x4>

080059da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059de:	bf00      	nop
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059f6:	b480      	push	{r7}
 80059f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a08:	f000 f990 	bl	8005d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a0c:	bf00      	nop
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005a14:	4802      	ldr	r0, [pc, #8]	; (8005a20 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005a16:	f002 f9b1 	bl	8007d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005a1a:	bf00      	nop
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000388 	.word	0x20000388

08005a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
	return 1;
 8005a28:	2301      	movs	r3, #1
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_kill>:

int _kill(int pid, int sig)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a3e:	f002 fb61 	bl	8008104 <__errno>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2216      	movs	r2, #22
 8005a46:	601a      	str	r2, [r3, #0]
	return -1;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <_exit>:

void _exit (int status)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ffe7 	bl	8005a34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a66:	e7fe      	b.n	8005a66 <_exit+0x12>

08005a68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e00a      	b.n	8005a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a7a:	f3af 8000 	nop.w
 8005a7e:	4601      	mov	r1, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	60ba      	str	r2, [r7, #8]
 8005a86:	b2ca      	uxtb	r2, r1
 8005a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	dbf0      	blt.n	8005a7a <_read+0x12>
	}

return len;
 8005a98:	687b      	ldr	r3, [r7, #4]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
	return -1;
 8005aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005aca:	605a      	str	r2, [r3, #4]
	return 0;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <_isatty>:

int _isatty(int file)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
	return 1;
 8005ae2:	2301      	movs	r3, #1
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
	return 0;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <_sbrk+0x5c>)
 8005b16:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <_sbrk+0x60>)
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b20:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <_sbrk+0x64>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <_sbrk+0x64>)
 8005b2a:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <_sbrk+0x68>)
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <_sbrk+0x64>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d207      	bcs.n	8005b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b3c:	f002 fae2 	bl	8008104 <__errno>
 8005b40:	4603      	mov	r3, r0
 8005b42:	220c      	movs	r2, #12
 8005b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b4a:	e009      	b.n	8005b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <_sbrk+0x64>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <_sbrk+0x64>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <_sbrk+0x64>)
 8005b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20020000 	.word	0x20020000
 8005b6c:	00000400 	.word	0x00000400
 8005b70:	20000384 	.word	0x20000384
 8005b74:	200003e8 	.word	0x200003e8

08005b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <SystemInit+0x20>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	4a05      	ldr	r2, [pc, #20]	; (8005b98 <SystemInit+0x20>)
 8005b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	e000ed00 	.word	0xe000ed00

08005b9c <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005ba2:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <MX_TIM11_Init+0x44>)
 8005ba4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005ba8:	2263      	movs	r2, #99	; 0x63
 8005baa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005bb8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005bc6:	4805      	ldr	r0, [pc, #20]	; (8005bdc <MX_TIM11_Init+0x40>)
 8005bc8:	f002 f827 	bl	8007c1a <HAL_TIM_Base_Init>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005bd2:	f7ff fec3 	bl	800595c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005bd6:	bf00      	nop
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000388 	.word	0x20000388
 8005be0:	40014800 	.word	0x40014800

08005be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <HAL_TIM_Base_MspInit+0x48>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d115      	bne.n	8005c22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <HAL_TIM_Base_MspInit+0x4c>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <HAL_TIM_Base_MspInit+0x4c>)
 8005c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c04:	6453      	str	r3, [r2, #68]	; 0x44
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <HAL_TIM_Base_MspInit+0x4c>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	201a      	movs	r0, #26
 8005c18:	f000 f9a7 	bl	8005f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005c1c:	201a      	movs	r0, #26
 8005c1e:	f000 f9c0 	bl	8005fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	40023800 	.word	0x40023800

08005c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c38:	480d      	ldr	r0, [pc, #52]	; (8005c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c3a:	490e      	ldr	r1, [pc, #56]	; (8005c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c3c:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c40:	e002      	b.n	8005c48 <LoopCopyDataInit>

08005c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c46:	3304      	adds	r3, #4

08005c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c4c:	d3f9      	bcc.n	8005c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c4e:	4a0b      	ldr	r2, [pc, #44]	; (8005c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c50:	4c0b      	ldr	r4, [pc, #44]	; (8005c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c54:	e001      	b.n	8005c5a <LoopFillZerobss>

08005c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c58:	3204      	adds	r2, #4

08005c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c5c:	d3fb      	bcc.n	8005c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c5e:	f7ff ff8b 	bl	8005b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c62:	f002 fa55 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c66:	f7ff fd51 	bl	800570c <main>
  bx  lr    
 8005c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c74:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005c78:	0800cbd8 	.word	0x0800cbd8
  ldr r2, =_sbss
 8005c7c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005c80:	200003e4 	.word	0x200003e4

08005c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c84:	e7fe      	b.n	8005c84 <ADC_IRQHandler>
	...

08005c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_Init+0x40>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <HAL_Init+0x40>)
 8005c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_Init+0x40>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <HAL_Init+0x40>)
 8005c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ca4:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_Init+0x40>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a07      	ldr	r2, [pc, #28]	; (8005cc8 <HAL_Init+0x40>)
 8005caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	f000 f94f 	bl	8005f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cb6:	200f      	movs	r0, #15
 8005cb8:	f000 f808 	bl	8005ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cbc:	f7ff fe54 	bl	8005968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00

08005ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_InitTick+0x54>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <HAL_InitTick+0x58>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f967 	bl	8005fbe <HAL_SYSTICK_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e00e      	b.n	8005d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b0f      	cmp	r3, #15
 8005cfe:	d80a      	bhi.n	8005d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d00:	2200      	movs	r2, #0
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d08:	f000 f92f 	bl	8005f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d0c:	4a06      	ldr	r2, [pc, #24]	; (8005d28 <HAL_InitTick+0x5c>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	2000003c 	.word	0x2000003c
 8005d24:	20000044 	.word	0x20000044
 8005d28:	20000040 	.word	0x20000040

08005d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_IncTick+0x20>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_IncTick+0x24>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <HAL_IncTick+0x24>)
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000044 	.word	0x20000044
 8005d50:	200003d0 	.word	0x200003d0

08005d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return uwTick;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_GetTick+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	200003d0 	.word	0x200003d0

08005d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d74:	f7ff ffee 	bl	8005d54 <HAL_GetTick>
 8005d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d84:	d005      	beq.n	8005d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <HAL_Delay+0x44>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d92:	bf00      	nop
 8005d94:	f7ff ffde 	bl	8005d54 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d8f7      	bhi.n	8005d94 <HAL_Delay+0x28>
  {
  }
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000044 	.word	0x20000044

08005db4 <__NVIC_SetPriorityGrouping>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005de6:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <__NVIC_SetPriorityGrouping+0x44>)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	60d3      	str	r3, [r2, #12]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	e000ed00 	.word	0xe000ed00

08005dfc <__NVIC_GetPriorityGrouping>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <__NVIC_GetPriorityGrouping+0x18>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	0a1b      	lsrs	r3, r3, #8
 8005e06:	f003 0307 	and.w	r3, r3, #7
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <__NVIC_EnableIRQ>:
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db0b      	blt.n	8005e42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	f003 021f 	and.w	r2, r3, #31
 8005e30:	4907      	ldr	r1, [pc, #28]	; (8005e50 <__NVIC_EnableIRQ+0x38>)
 8005e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2001      	movs	r0, #1
 8005e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	e000e100 	.word	0xe000e100

08005e54 <__NVIC_SetPriority>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	6039      	str	r1, [r7, #0]
 8005e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	db0a      	blt.n	8005e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	490c      	ldr	r1, [pc, #48]	; (8005ea0 <__NVIC_SetPriority+0x4c>)
 8005e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e72:	0112      	lsls	r2, r2, #4
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	440b      	add	r3, r1
 8005e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e7c:	e00a      	b.n	8005e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	4908      	ldr	r1, [pc, #32]	; (8005ea4 <__NVIC_SetPriority+0x50>)
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	3b04      	subs	r3, #4
 8005e8c:	0112      	lsls	r2, r2, #4
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	440b      	add	r3, r1
 8005e92:	761a      	strb	r2, [r3, #24]
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000e100 	.word	0xe000e100
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <NVIC_EncodePriority>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f1c3 0307 	rsb	r3, r3, #7
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	bf28      	it	cs
 8005ec6:	2304      	movcs	r3, #4
 8005ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	2b06      	cmp	r3, #6
 8005ed0:	d902      	bls.n	8005ed8 <NVIC_EncodePriority+0x30>
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3b03      	subs	r3, #3
 8005ed6:	e000      	b.n	8005eda <NVIC_EncodePriority+0x32>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43da      	mvns	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	401a      	ands	r2, r3
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	43d9      	mvns	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f00:	4313      	orrs	r3, r2
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3724      	adds	r7, #36	; 0x24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <SysTick_Config>:
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f20:	d301      	bcc.n	8005f26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005f22:	2301      	movs	r3, #1
 8005f24:	e00f      	b.n	8005f46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <SysTick_Config+0x40>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f2e:	210f      	movs	r1, #15
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f34:	f7ff ff8e 	bl	8005e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <SysTick_Config+0x40>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <SysTick_Config+0x40>)
 8005f40:	2207      	movs	r2, #7
 8005f42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000e010 	.word	0xe000e010

08005f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff ff29 	bl	8005db4 <__NVIC_SetPriorityGrouping>
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	4603      	mov	r3, r0
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f7c:	f7ff ff3e 	bl	8005dfc <__NVIC_GetPriorityGrouping>
 8005f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f7ff ff8e 	bl	8005ea8 <NVIC_EncodePriority>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff5d 	bl	8005e54 <__NVIC_SetPriority>
}
 8005f9a:	bf00      	nop
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	4603      	mov	r3, r0
 8005faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff ff31 	bl	8005e18 <__NVIC_EnableIRQ>
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ffa2 	bl	8005f10 <SysTick_Config>
 8005fcc:	4603      	mov	r3, r0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e159      	b.n	80062a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4013      	ands	r3, r2
 8006006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	429a      	cmp	r2, r3
 800600e:	f040 8148 	bne.w	80062a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b01      	cmp	r3, #1
 800601c:	d005      	beq.n	800602a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006026:	2b02      	cmp	r3, #2
 8006028:	d130      	bne.n	800608c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	2203      	movs	r2, #3
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	43db      	mvns	r3, r3
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4013      	ands	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4313      	orrs	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006060:	2201      	movs	r2, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 0201 	and.w	r2, r3, #1
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4313      	orrs	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b03      	cmp	r3, #3
 8006096:	d017      	beq.n	80060c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	2203      	movs	r2, #3
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d123      	bne.n	800611c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	08da      	lsrs	r2, r3, #3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3208      	adds	r2, #8
 80060dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	220f      	movs	r2, #15
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	08da      	lsrs	r2, r3, #3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3208      	adds	r2, #8
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	2203      	movs	r2, #3
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 0203 	and.w	r2, r3, #3
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a2 	beq.w	80062a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	4b57      	ldr	r3, [pc, #348]	; (80062c0 <HAL_GPIO_Init+0x2e8>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	4a56      	ldr	r2, [pc, #344]	; (80062c0 <HAL_GPIO_Init+0x2e8>)
 8006168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800616c:	6453      	str	r3, [r2, #68]	; 0x44
 800616e:	4b54      	ldr	r3, [pc, #336]	; (80062c0 <HAL_GPIO_Init+0x2e8>)
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800617a:	4a52      	ldr	r2, [pc, #328]	; (80062c4 <HAL_GPIO_Init+0x2ec>)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	089b      	lsrs	r3, r3, #2
 8006180:	3302      	adds	r3, #2
 8006182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	220f      	movs	r2, #15
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a49      	ldr	r2, [pc, #292]	; (80062c8 <HAL_GPIO_Init+0x2f0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d019      	beq.n	80061da <HAL_GPIO_Init+0x202>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a48      	ldr	r2, [pc, #288]	; (80062cc <HAL_GPIO_Init+0x2f4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_GPIO_Init+0x1fe>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a47      	ldr	r2, [pc, #284]	; (80062d0 <HAL_GPIO_Init+0x2f8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00d      	beq.n	80061d2 <HAL_GPIO_Init+0x1fa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a46      	ldr	r2, [pc, #280]	; (80062d4 <HAL_GPIO_Init+0x2fc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <HAL_GPIO_Init+0x1f6>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a45      	ldr	r2, [pc, #276]	; (80062d8 <HAL_GPIO_Init+0x300>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <HAL_GPIO_Init+0x1f2>
 80061c6:	2304      	movs	r3, #4
 80061c8:	e008      	b.n	80061dc <HAL_GPIO_Init+0x204>
 80061ca:	2307      	movs	r3, #7
 80061cc:	e006      	b.n	80061dc <HAL_GPIO_Init+0x204>
 80061ce:	2303      	movs	r3, #3
 80061d0:	e004      	b.n	80061dc <HAL_GPIO_Init+0x204>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e002      	b.n	80061dc <HAL_GPIO_Init+0x204>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <HAL_GPIO_Init+0x204>
 80061da:	2300      	movs	r3, #0
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	f002 0203 	and.w	r2, r2, #3
 80061e2:	0092      	lsls	r2, r2, #2
 80061e4:	4093      	lsls	r3, r2
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061ec:	4935      	ldr	r1, [pc, #212]	; (80062c4 <HAL_GPIO_Init+0x2ec>)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	3302      	adds	r3, #2
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061fa:	4b38      	ldr	r3, [pc, #224]	; (80062dc <HAL_GPIO_Init+0x304>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800621e:	4a2f      	ldr	r2, [pc, #188]	; (80062dc <HAL_GPIO_Init+0x304>)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006224:	4b2d      	ldr	r3, [pc, #180]	; (80062dc <HAL_GPIO_Init+0x304>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	43db      	mvns	r3, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4013      	ands	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006248:	4a24      	ldr	r2, [pc, #144]	; (80062dc <HAL_GPIO_Init+0x304>)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800624e:	4b23      	ldr	r3, [pc, #140]	; (80062dc <HAL_GPIO_Init+0x304>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006272:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_GPIO_Init+0x304>)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006278:	4b18      	ldr	r3, [pc, #96]	; (80062dc <HAL_GPIO_Init+0x304>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800629c:	4a0f      	ldr	r2, [pc, #60]	; (80062dc <HAL_GPIO_Init+0x304>)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	3301      	adds	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	2b0f      	cmp	r3, #15
 80062ac:	f67f aea2 	bls.w	8005ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3724      	adds	r7, #36	; 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40013800 	.word	0x40013800
 80062c8:	40020000 	.word	0x40020000
 80062cc:	40020400 	.word	0x40020400
 80062d0:	40020800 	.word	0x40020800
 80062d4:	40020c00 	.word	0x40020c00
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40013c00 	.word	0x40013c00

080062e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	e001      	b.n	8006302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	807b      	strh	r3, [r7, #2]
 800631c:	4613      	mov	r3, r2
 800631e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006320:	787b      	ldrb	r3, [r7, #1]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800632c:	e003      	b.n	8006336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800632e:	887b      	ldrh	r3, [r7, #2]
 8006330:	041a      	lsls	r2, r3, #16
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	619a      	str	r2, [r3, #24]
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e12b      	b.n	80065ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff f95e 	bl	800562c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2224      	movs	r2, #36	; 0x24
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063a8:	f001 fc08 	bl	8007bbc <HAL_RCC_GetPCLK1Freq>
 80063ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4a81      	ldr	r2, [pc, #516]	; (80065b8 <HAL_I2C_Init+0x274>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d807      	bhi.n	80063c8 <HAL_I2C_Init+0x84>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a80      	ldr	r2, [pc, #512]	; (80065bc <HAL_I2C_Init+0x278>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	bf94      	ite	ls
 80063c0:	2301      	movls	r3, #1
 80063c2:	2300      	movhi	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e006      	b.n	80063d6 <HAL_I2C_Init+0x92>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a7d      	ldr	r2, [pc, #500]	; (80065c0 <HAL_I2C_Init+0x27c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	bf94      	ite	ls
 80063d0:	2301      	movls	r3, #1
 80063d2:	2300      	movhi	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e0e7      	b.n	80065ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a78      	ldr	r2, [pc, #480]	; (80065c4 <HAL_I2C_Init+0x280>)
 80063e2:	fba2 2303 	umull	r2, r3, r2, r3
 80063e6:	0c9b      	lsrs	r3, r3, #18
 80063e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a6a      	ldr	r2, [pc, #424]	; (80065b8 <HAL_I2C_Init+0x274>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d802      	bhi.n	8006418 <HAL_I2C_Init+0xd4>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	3301      	adds	r3, #1
 8006416:	e009      	b.n	800642c <HAL_I2C_Init+0xe8>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	4a69      	ldr	r2, [pc, #420]	; (80065c8 <HAL_I2C_Init+0x284>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	099b      	lsrs	r3, r3, #6
 800642a:	3301      	adds	r3, #1
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	430b      	orrs	r3, r1
 8006432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800643e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	495c      	ldr	r1, [pc, #368]	; (80065b8 <HAL_I2C_Init+0x274>)
 8006448:	428b      	cmp	r3, r1
 800644a:	d819      	bhi.n	8006480 <HAL_I2C_Init+0x13c>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1e59      	subs	r1, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	fbb1 f3f3 	udiv	r3, r1, r3
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006460:	400b      	ands	r3, r1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_I2C_Init+0x138>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1e59      	subs	r1, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	fbb1 f3f3 	udiv	r3, r1, r3
 8006474:	3301      	adds	r3, #1
 8006476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647a:	e051      	b.n	8006520 <HAL_I2C_Init+0x1dc>
 800647c:	2304      	movs	r3, #4
 800647e:	e04f      	b.n	8006520 <HAL_I2C_Init+0x1dc>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d111      	bne.n	80064ac <HAL_I2C_Init+0x168>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	1e58      	subs	r0, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6859      	ldr	r1, [r3, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	440b      	add	r3, r1
 8006496:	fbb0 f3f3 	udiv	r3, r0, r3
 800649a:	3301      	adds	r3, #1
 800649c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e012      	b.n	80064d2 <HAL_I2C_Init+0x18e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1e58      	subs	r0, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6859      	ldr	r1, [r3, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	0099      	lsls	r1, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	fbb0 f3f3 	udiv	r3, r0, r3
 80064c2:	3301      	adds	r3, #1
 80064c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_I2C_Init+0x196>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e022      	b.n	8006520 <HAL_I2C_Init+0x1dc>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10e      	bne.n	8006500 <HAL_I2C_Init+0x1bc>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1e58      	subs	r0, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6859      	ldr	r1, [r3, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	440b      	add	r3, r1
 80064f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f4:	3301      	adds	r3, #1
 80064f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fe:	e00f      	b.n	8006520 <HAL_I2C_Init+0x1dc>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1e58      	subs	r0, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	0099      	lsls	r1, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	fbb0 f3f3 	udiv	r3, r0, r3
 8006516:	3301      	adds	r3, #1
 8006518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	6809      	ldr	r1, [r1, #0]
 8006524:	4313      	orrs	r3, r2
 8006526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69da      	ldr	r2, [r3, #28]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800654e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6911      	ldr	r1, [r2, #16]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	68d2      	ldr	r2, [r2, #12]
 800655a:	4311      	orrs	r1, r2
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	430b      	orrs	r3, r1
 8006562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695a      	ldr	r2, [r3, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	000186a0 	.word	0x000186a0
 80065bc:	001e847f 	.word	0x001e847f
 80065c0:	003d08ff 	.word	0x003d08ff
 80065c4:	431bde83 	.word	0x431bde83
 80065c8:	10624dd3 	.word	0x10624dd3

080065cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	4608      	mov	r0, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	4603      	mov	r3, r0
 80065dc:	817b      	strh	r3, [r7, #10]
 80065de:	460b      	mov	r3, r1
 80065e0:	813b      	strh	r3, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065e6:	f7ff fbb5 	bl	8005d54 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	f040 80d9 	bne.w	80067ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	2319      	movs	r3, #25
 8006600:	2201      	movs	r2, #1
 8006602:	496d      	ldr	r1, [pc, #436]	; (80067b8 <HAL_I2C_Mem_Write+0x1ec>)
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fc7f 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
 8006612:	e0cc      	b.n	80067ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_I2C_Mem_Write+0x56>
 800661e:	2302      	movs	r3, #2
 8006620:	e0c5      	b.n	80067ae <HAL_I2C_Mem_Write+0x1e2>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	d007      	beq.n	8006648 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2221      	movs	r2, #33	; 0x21
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a4d      	ldr	r2, [pc, #308]	; (80067bc <HAL_I2C_Mem_Write+0x1f0>)
 8006688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800668a:	88f8      	ldrh	r0, [r7, #6]
 800668c:	893a      	ldrh	r2, [r7, #8]
 800668e:	8979      	ldrh	r1, [r7, #10]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	4603      	mov	r3, r0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fab6 	bl	8006c0c <I2C_RequestMemoryWrite>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d052      	beq.n	800674c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e081      	b.n	80067ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fd00 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d107      	bne.n	80066d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e06b      	b.n	80067ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b04      	cmp	r3, #4
 8006712:	d11b      	bne.n	800674c <HAL_I2C_Mem_Write+0x180>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d017      	beq.n	800674c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1aa      	bne.n	80066aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fcec 	bl	8007136 <I2C_WaitOnBTFFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00d      	beq.n	8006780 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	2b04      	cmp	r3, #4
 800676a:	d107      	bne.n	800677c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e016      	b.n	80067ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e000      	b.n	80067ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
  }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	00100002 	.word	0x00100002
 80067bc:	ffff0000 	.word	0xffff0000

080067c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	; 0x30
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	817b      	strh	r3, [r7, #10]
 80067d2:	460b      	mov	r3, r1
 80067d4:	813b      	strh	r3, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067da:	f7ff fabb 	bl	8005d54 <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	f040 8208 	bne.w	8006bfe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	2319      	movs	r3, #25
 80067f4:	2201      	movs	r2, #1
 80067f6:	497b      	ldr	r1, [pc, #492]	; (80069e4 <HAL_I2C_Mem_Read+0x224>)
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fb85 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006804:	2302      	movs	r3, #2
 8006806:	e1fb      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_I2C_Mem_Read+0x56>
 8006812:	2302      	movs	r3, #2
 8006814:	e1f4      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d007      	beq.n	800683c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800684a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2222      	movs	r2, #34	; 0x22
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800686c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4a5b      	ldr	r2, [pc, #364]	; (80069e8 <HAL_I2C_Mem_Read+0x228>)
 800687c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800687e:	88f8      	ldrh	r0, [r7, #6]
 8006880:	893a      	ldrh	r2, [r7, #8]
 8006882:	8979      	ldrh	r1, [r7, #10]
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4603      	mov	r3, r0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fa52 	bl	8006d38 <I2C_RequestMemoryRead>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e1b0      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d113      	bne.n	80068ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a6:	2300      	movs	r3, #0
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e184      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d11b      	bne.n	800690e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	e164      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	2b02      	cmp	r3, #2
 8006914:	d11b      	bne.n	800694e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006924:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	e144      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006964:	e138      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696a:	2b03      	cmp	r3, #3
 800696c:	f200 80f1 	bhi.w	8006b52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006974:	2b01      	cmp	r3, #1
 8006976:	d123      	bne.n	80069c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fc1b 	bl	80071b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e139      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069be:	e10b      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d14e      	bne.n	8006a66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	2200      	movs	r2, #0
 80069d0:	4906      	ldr	r1, [pc, #24]	; (80069ec <HAL_I2C_Mem_Read+0x22c>)
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fa98 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e10e      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
 80069e2:	bf00      	nop
 80069e4:	00100002 	.word	0x00100002
 80069e8:	ffff0000 	.word	0xffff0000
 80069ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a64:	e0b8      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4966      	ldr	r1, [pc, #408]	; (8006c08 <HAL_I2C_Mem_Read+0x448>)
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 fa49 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e0bf      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	2200      	movs	r2, #0
 8006aca:	494f      	ldr	r1, [pc, #316]	; (8006c08 <HAL_I2C_Mem_Read+0x448>)
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fa1b 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e091      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b50:	e042      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fb2e 	bl	80071b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e04c      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d118      	bne.n	8006bd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f aec2 	bne.w	8006966 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e000      	b.n	8006c00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
  }
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3728      	adds	r7, #40	; 0x28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	00010004 	.word	0x00010004

08006c0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	4608      	mov	r0, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	817b      	strh	r3, [r7, #10]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	813b      	strh	r3, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f960 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5c:	d103      	bne.n	8006c66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e05f      	b.n	8006d2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c6a:	897b      	ldrh	r3, [r7, #10]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	6a3a      	ldr	r2, [r7, #32]
 8006c7e:	492d      	ldr	r1, [pc, #180]	; (8006d34 <I2C_RequestMemoryWrite+0x128>)
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f998 	bl	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e04c      	b.n	8006d2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca8:	6a39      	ldr	r1, [r7, #32]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fa02 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d107      	bne.n	8006cce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e02b      	b.n	8006d2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd8:	893b      	ldrh	r3, [r7, #8]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	611a      	str	r2, [r3, #16]
 8006ce2:	e021      	b.n	8006d28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ce4:	893b      	ldrh	r3, [r7, #8]
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf4:	6a39      	ldr	r1, [r7, #32]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f9dc 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d107      	bne.n	8006d1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e005      	b.n	8006d2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d1e:	893b      	ldrh	r3, [r7, #8]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	00010002 	.word	0x00010002

08006d38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	817b      	strh	r3, [r7, #10]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	813b      	strh	r3, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f8c2 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d98:	d103      	bne.n	8006da2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e0aa      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006da6:	897b      	ldrh	r3, [r7, #10]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	6a3a      	ldr	r2, [r7, #32]
 8006dba:	4952      	ldr	r1, [pc, #328]	; (8006f04 <I2C_RequestMemoryRead+0x1cc>)
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f8fa 	bl	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e097      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de4:	6a39      	ldr	r1, [r7, #32]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f964 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00d      	beq.n	8006e0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d107      	bne.n	8006e0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e076      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d105      	bne.n	8006e20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e14:	893b      	ldrh	r3, [r7, #8]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	611a      	str	r2, [r3, #16]
 8006e1e:	e021      	b.n	8006e64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e20:	893b      	ldrh	r3, [r7, #8]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e30:	6a39      	ldr	r1, [r7, #32]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f93e 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00d      	beq.n	8006e5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d107      	bne.n	8006e56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e050      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e5a:	893b      	ldrh	r3, [r7, #8]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e66:	6a39      	ldr	r1, [r7, #32]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f923 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00d      	beq.n	8006e90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d107      	bne.n	8006e8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e035      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f82b 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00d      	beq.n	8006ed4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec6:	d103      	bne.n	8006ed0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e013      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ed4:	897b      	ldrh	r3, [r7, #10]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	6a3a      	ldr	r2, [r7, #32]
 8006ee8:	4906      	ldr	r1, [pc, #24]	; (8006f04 <I2C_RequestMemoryRead+0x1cc>)
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 f863 	bl	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	00010002 	.word	0x00010002

08006f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f18:	e025      	b.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f20:	d021      	beq.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f22:	f7fe ff17 	bl	8005d54 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d116      	bne.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f043 0220 	orr.w	r2, r3, #32
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e023      	b.n	8006fae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10d      	bne.n	8006f8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	43da      	mvns	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	e00c      	b.n	8006fa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	43da      	mvns	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d0b6      	beq.n	8006f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fc4:	e051      	b.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd4:	d123      	bne.n	800701e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f043 0204 	orr.w	r2, r3, #4
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e046      	b.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d021      	beq.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fe fe95 	bl	8005d54 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d116      	bne.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e020      	b.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10c      	bne.n	800708e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	43da      	mvns	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e00b      	b.n	80070a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	43da      	mvns	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d18d      	bne.n	8006fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070c0:	e02d      	b.n	800711e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f8ce 	bl	8007264 <I2C_IsAcknowledgeFailed>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e02d      	b.n	800712e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d8:	d021      	beq.n	800711e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fe fe3b 	bl	8005d54 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d116      	bne.n	800711e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e007      	b.n	800712e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007128:	2b80      	cmp	r3, #128	; 0x80
 800712a:	d1ca      	bne.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007142:	e02d      	b.n	80071a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f88d 	bl	8007264 <I2C_IsAcknowledgeFailed>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e02d      	b.n	80071b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800715a:	d021      	beq.n	80071a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715c:	f7fe fdfa 	bl	8005d54 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d116      	bne.n	80071a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e007      	b.n	80071b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d1ca      	bne.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c4:	e042      	b.n	800724c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d119      	bne.n	8007208 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0210 	mvn.w	r2, #16
 80071dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e029      	b.n	800725c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007208:	f7fe fda4 	bl	8005d54 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	429a      	cmp	r2, r3
 8007216:	d302      	bcc.n	800721e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d116      	bne.n	800724c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	f043 0220 	orr.w	r2, r3, #32
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e007      	b.n	800725c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d1b5      	bne.n	80071c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727a:	d11b      	bne.n	80072b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007284:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	f043 0204 	orr.w	r2, r3, #4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e000      	b.n	80072b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e267      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d075      	beq.n	80073ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072e2:	4b88      	ldr	r3, [pc, #544]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 030c 	and.w	r3, r3, #12
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d00c      	beq.n	8007308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ee:	4b85      	ldr	r3, [pc, #532]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072f6:	2b08      	cmp	r3, #8
 80072f8:	d112      	bne.n	8007320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fa:	4b82      	ldr	r3, [pc, #520]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007306:	d10b      	bne.n	8007320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007308:	4b7e      	ldr	r3, [pc, #504]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d05b      	beq.n	80073cc <HAL_RCC_OscConfig+0x108>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d157      	bne.n	80073cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e242      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007328:	d106      	bne.n	8007338 <HAL_RCC_OscConfig+0x74>
 800732a:	4b76      	ldr	r3, [pc, #472]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a75      	ldr	r2, [pc, #468]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e01d      	b.n	8007374 <HAL_RCC_OscConfig+0xb0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007340:	d10c      	bne.n	800735c <HAL_RCC_OscConfig+0x98>
 8007342:	4b70      	ldr	r3, [pc, #448]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a6f      	ldr	r2, [pc, #444]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	4b6d      	ldr	r3, [pc, #436]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a6c      	ldr	r2, [pc, #432]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e00b      	b.n	8007374 <HAL_RCC_OscConfig+0xb0>
 800735c:	4b69      	ldr	r3, [pc, #420]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a68      	ldr	r2, [pc, #416]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	4b66      	ldr	r3, [pc, #408]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a65      	ldr	r2, [pc, #404]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 800736e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d013      	beq.n	80073a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737c:	f7fe fcea 	bl	8005d54 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007384:	f7fe fce6 	bl	8005d54 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b64      	cmp	r3, #100	; 0x64
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e207      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007396:	4b5b      	ldr	r3, [pc, #364]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f0      	beq.n	8007384 <HAL_RCC_OscConfig+0xc0>
 80073a2:	e014      	b.n	80073ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a4:	f7fe fcd6 	bl	8005d54 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073ac:	f7fe fcd2 	bl	8005d54 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	; 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e1f3      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073be:	4b51      	ldr	r3, [pc, #324]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCC_OscConfig+0xe8>
 80073ca:	e000      	b.n	80073ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d063      	beq.n	80074a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073da:	4b4a      	ldr	r3, [pc, #296]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 030c 	and.w	r3, r3, #12
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00b      	beq.n	80073fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073e6:	4b47      	ldr	r3, [pc, #284]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d11c      	bne.n	800742c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073f2:	4b44      	ldr	r3, [pc, #272]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d116      	bne.n	800742c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073fe:	4b41      	ldr	r3, [pc, #260]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_RCC_OscConfig+0x152>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d001      	beq.n	8007416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e1c7      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007416:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4937      	ldr	r1, [pc, #220]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007426:	4313      	orrs	r3, r2
 8007428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800742a:	e03a      	b.n	80074a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d020      	beq.n	8007476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007434:	4b34      	ldr	r3, [pc, #208]	; (8007508 <HAL_RCC_OscConfig+0x244>)
 8007436:	2201      	movs	r2, #1
 8007438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743a:	f7fe fc8b 	bl	8005d54 <HAL_GetTick>
 800743e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007440:	e008      	b.n	8007454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007442:	f7fe fc87 	bl	8005d54 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e1a8      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007454:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0f0      	beq.n	8007442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007460:	4b28      	ldr	r3, [pc, #160]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	4925      	ldr	r1, [pc, #148]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007470:	4313      	orrs	r3, r2
 8007472:	600b      	str	r3, [r1, #0]
 8007474:	e015      	b.n	80074a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <HAL_RCC_OscConfig+0x244>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747c:	f7fe fc6a 	bl	8005d54 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007484:	f7fe fc66 	bl	8005d54 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e187      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007496:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d036      	beq.n	800751c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d016      	beq.n	80074e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <HAL_RCC_OscConfig+0x248>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074bc:	f7fe fc4a 	bl	8005d54 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c4:	f7fe fc46 	bl	8005d54 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e167      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d6:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <HAL_RCC_OscConfig+0x240>)
 80074d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0f0      	beq.n	80074c4 <HAL_RCC_OscConfig+0x200>
 80074e2:	e01b      	b.n	800751c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074e4:	4b09      	ldr	r3, [pc, #36]	; (800750c <HAL_RCC_OscConfig+0x248>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ea:	f7fe fc33 	bl	8005d54 <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f0:	e00e      	b.n	8007510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f2:	f7fe fc2f 	bl	8005d54 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d907      	bls.n	8007510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e150      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
 8007504:	40023800 	.word	0x40023800
 8007508:	42470000 	.word	0x42470000
 800750c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007510:	4b88      	ldr	r3, [pc, #544]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1ea      	bne.n	80074f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8097 	beq.w	8007658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800752a:	2300      	movs	r3, #0
 800752c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800752e:	4b81      	ldr	r3, [pc, #516]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10f      	bne.n	800755a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	4b7d      	ldr	r3, [pc, #500]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	4a7c      	ldr	r2, [pc, #496]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007548:	6413      	str	r3, [r2, #64]	; 0x40
 800754a:	4b7a      	ldr	r3, [pc, #488]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007556:	2301      	movs	r3, #1
 8007558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755a:	4b77      	ldr	r3, [pc, #476]	; (8007738 <HAL_RCC_OscConfig+0x474>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007562:	2b00      	cmp	r3, #0
 8007564:	d118      	bne.n	8007598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007566:	4b74      	ldr	r3, [pc, #464]	; (8007738 <HAL_RCC_OscConfig+0x474>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a73      	ldr	r2, [pc, #460]	; (8007738 <HAL_RCC_OscConfig+0x474>)
 800756c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007572:	f7fe fbef 	bl	8005d54 <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800757a:	f7fe fbeb 	bl	8005d54 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e10c      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800758c:	4b6a      	ldr	r3, [pc, #424]	; (8007738 <HAL_RCC_OscConfig+0x474>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f0      	beq.n	800757a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d106      	bne.n	80075ae <HAL_RCC_OscConfig+0x2ea>
 80075a0:	4b64      	ldr	r3, [pc, #400]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a63      	ldr	r2, [pc, #396]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	e01c      	b.n	80075e8 <HAL_RCC_OscConfig+0x324>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x30c>
 80075b6:	4b5f      	ldr	r3, [pc, #380]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a5e      	ldr	r2, [pc, #376]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075bc:	f043 0304 	orr.w	r3, r3, #4
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
 80075c2:	4b5c      	ldr	r3, [pc, #368]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	4a5b      	ldr	r2, [pc, #364]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70
 80075ce:	e00b      	b.n	80075e8 <HAL_RCC_OscConfig+0x324>
 80075d0:	4b58      	ldr	r3, [pc, #352]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	4a57      	ldr	r2, [pc, #348]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	6713      	str	r3, [r2, #112]	; 0x70
 80075dc:	4b55      	ldr	r3, [pc, #340]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a54      	ldr	r2, [pc, #336]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80075e2:	f023 0304 	bic.w	r3, r3, #4
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d015      	beq.n	800761c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f0:	f7fe fbb0 	bl	8005d54 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f6:	e00a      	b.n	800760e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075f8:	f7fe fbac 	bl	8005d54 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	f241 3288 	movw	r2, #5000	; 0x1388
 8007606:	4293      	cmp	r3, r2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e0cb      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800760e:	4b49      	ldr	r3, [pc, #292]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0ee      	beq.n	80075f8 <HAL_RCC_OscConfig+0x334>
 800761a:	e014      	b.n	8007646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800761c:	f7fe fb9a 	bl	8005d54 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007622:	e00a      	b.n	800763a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007624:	f7fe fb96 	bl	8005d54 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e0b5      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 800763c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1ee      	bne.n	8007624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d105      	bne.n	8007658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800764c:	4b39      	ldr	r3, [pc, #228]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	4a38      	ldr	r2, [pc, #224]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80a1 	beq.w	80077a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007662:	4b34      	ldr	r3, [pc, #208]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b08      	cmp	r3, #8
 800766c:	d05c      	beq.n	8007728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d141      	bne.n	80076fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007676:	4b31      	ldr	r3, [pc, #196]	; (800773c <HAL_RCC_OscConfig+0x478>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fe fb6a 	bl	8005d54 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007684:	f7fe fb66 	bl	8005d54 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e087      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007696:	4b27      	ldr	r3, [pc, #156]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	019b      	lsls	r3, r3, #6
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	3b01      	subs	r3, #1
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	061b      	lsls	r3, r3, #24
 80076c6:	491b      	ldr	r1, [pc, #108]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076cc:	4b1b      	ldr	r3, [pc, #108]	; (800773c <HAL_RCC_OscConfig+0x478>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d2:	f7fe fb3f 	bl	8005d54 <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076da:	f7fe fb3b 	bl	8005d54 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e05c      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ec:	4b11      	ldr	r3, [pc, #68]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0f0      	beq.n	80076da <HAL_RCC_OscConfig+0x416>
 80076f8:	e054      	b.n	80077a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076fa:	4b10      	ldr	r3, [pc, #64]	; (800773c <HAL_RCC_OscConfig+0x478>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007700:	f7fe fb28 	bl	8005d54 <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007708:	f7fe fb24 	bl	8005d54 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e045      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771a:	4b06      	ldr	r3, [pc, #24]	; (8007734 <HAL_RCC_OscConfig+0x470>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f0      	bne.n	8007708 <HAL_RCC_OscConfig+0x444>
 8007726:	e03d      	b.n	80077a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d107      	bne.n	8007740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e038      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
 8007734:	40023800 	.word	0x40023800
 8007738:	40007000 	.word	0x40007000
 800773c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <HAL_RCC_OscConfig+0x4ec>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d028      	beq.n	80077a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007758:	429a      	cmp	r2, r3
 800775a:	d121      	bne.n	80077a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007766:	429a      	cmp	r2, r3
 8007768:	d11a      	bne.n	80077a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007778:	4293      	cmp	r3, r2
 800777a:	d111      	bne.n	80077a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	3b01      	subs	r3, #1
 800778a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800778c:	429a      	cmp	r2, r3
 800778e:	d107      	bne.n	80077a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800779c:	429a      	cmp	r2, r3
 800779e:	d001      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e000      	b.n	80077a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40023800 	.word	0x40023800

080077b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0cc      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077c8:	4b68      	ldr	r3, [pc, #416]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d90c      	bls.n	80077f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d6:	4b65      	ldr	r3, [pc, #404]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077de:	4b63      	ldr	r3, [pc, #396]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d001      	beq.n	80077f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0b8      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d020      	beq.n	800783e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007808:	4b59      	ldr	r3, [pc, #356]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a58      	ldr	r2, [pc, #352]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007820:	4b53      	ldr	r3, [pc, #332]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	4a52      	ldr	r2, [pc, #328]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800782a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800782c:	4b50      	ldr	r3, [pc, #320]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	494d      	ldr	r1, [pc, #308]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	4313      	orrs	r3, r2
 800783c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d044      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d107      	bne.n	8007862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007852:	4b47      	ldr	r3, [pc, #284]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d119      	bne.n	8007892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e07f      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d003      	beq.n	8007872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800786e:	2b03      	cmp	r3, #3
 8007870:	d107      	bne.n	8007882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007872:	4b3f      	ldr	r3, [pc, #252]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e06f      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007882:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e067      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007892:	4b37      	ldr	r3, [pc, #220]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f023 0203 	bic.w	r2, r3, #3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4934      	ldr	r1, [pc, #208]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078a4:	f7fe fa56 	bl	8005d54 <HAL_GetTick>
 80078a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078aa:	e00a      	b.n	80078c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ac:	f7fe fa52 	bl	8005d54 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e04f      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c2:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 020c 	and.w	r2, r3, #12
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d1eb      	bne.n	80078ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078d4:	4b25      	ldr	r3, [pc, #148]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d20c      	bcs.n	80078fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e2:	4b22      	ldr	r3, [pc, #136]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ea:	4b20      	ldr	r3, [pc, #128]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d001      	beq.n	80078fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e032      	b.n	8007962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007908:	4b19      	ldr	r3, [pc, #100]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	4916      	ldr	r1, [pc, #88]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007916:	4313      	orrs	r3, r2
 8007918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007926:	4b12      	ldr	r3, [pc, #72]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	490e      	ldr	r1, [pc, #56]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800793a:	f000 f82d 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 800793e:	4602      	mov	r2, r0
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	490a      	ldr	r1, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x1c0>)
 800794c:	5ccb      	ldrb	r3, [r1, r3]
 800794e:	fa22 f303 	lsr.w	r3, r2, r3
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <HAL_RCC_ClockConfig+0x1c4>)
 8007954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <HAL_RCC_ClockConfig+0x1c8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe f9b6 	bl	8005ccc <HAL_InitTick>

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40023c00 	.word	0x40023c00
 8007970:	40023800 	.word	0x40023800
 8007974:	0800c750 	.word	0x0800c750
 8007978:	2000003c 	.word	0x2000003c
 800797c:	20000040 	.word	0x20000040

08007980 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007984:	4b03      	ldr	r3, [pc, #12]	; (8007994 <HAL_RCC_EnableCSS+0x14>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
}
 800798a:	bf00      	nop
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	4247004c 	.word	0x4247004c

08007998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800799c:	b094      	sub	sp, #80	; 0x50
 800799e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	647b      	str	r3, [r7, #68]	; 0x44
 80079a4:	2300      	movs	r3, #0
 80079a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a8:	2300      	movs	r3, #0
 80079aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b0:	4b79      	ldr	r3, [pc, #484]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 030c 	and.w	r3, r3, #12
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d00d      	beq.n	80079d8 <HAL_RCC_GetSysClockFreq+0x40>
 80079bc:	2b08      	cmp	r3, #8
 80079be:	f200 80e1 	bhi.w	8007b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_RCC_GetSysClockFreq+0x34>
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d003      	beq.n	80079d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ca:	e0db      	b.n	8007b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079cc:	4b73      	ldr	r3, [pc, #460]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80079ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079d0:	e0db      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079d2:	4b73      	ldr	r3, [pc, #460]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80079d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079d6:	e0d8      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079d8:	4b6f      	ldr	r3, [pc, #444]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079e2:	4b6d      	ldr	r3, [pc, #436]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d063      	beq.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ee:	4b6a      	ldr	r3, [pc, #424]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	099b      	lsrs	r3, r3, #6
 80079f4:	2200      	movs	r2, #0
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
 8007a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	f04f 0000 	mov.w	r0, #0
 8007a12:	f04f 0100 	mov.w	r1, #0
 8007a16:	0159      	lsls	r1, r3, #5
 8007a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a1c:	0150      	lsls	r0, r2, #5
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4621      	mov	r1, r4
 8007a24:	1a51      	subs	r1, r2, r1
 8007a26:	6139      	str	r1, [r7, #16]
 8007a28:	4629      	mov	r1, r5
 8007a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	018b      	lsls	r3, r1, #6
 8007a40:	4651      	mov	r1, sl
 8007a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a46:	4651      	mov	r1, sl
 8007a48:	018a      	lsls	r2, r1, #6
 8007a4a:	4651      	mov	r1, sl
 8007a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a50:	4659      	mov	r1, fp
 8007a52:	eb63 0901 	sbc.w	r9, r3, r1
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a6a:	4690      	mov	r8, r2
 8007a6c:	4699      	mov	r9, r3
 8007a6e:	4623      	mov	r3, r4
 8007a70:	eb18 0303 	adds.w	r3, r8, r3
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	462b      	mov	r3, r5
 8007a78:	eb49 0303 	adc.w	r3, r9, r3
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	024b      	lsls	r3, r1, #9
 8007a8e:	4621      	mov	r1, r4
 8007a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a94:	4621      	mov	r1, r4
 8007a96:	024a      	lsls	r2, r1, #9
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aa8:	f7f9 f926 	bl	8000cf8 <__aeabi_uldivmod>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab4:	e058      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ab6:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	2200      	movs	r2, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ac6:	623b      	str	r3, [r7, #32]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
 8007acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f04f 0100 	mov.w	r1, #0
 8007adc:	0159      	lsls	r1, r3, #5
 8007ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae2:	0150      	lsls	r0, r2, #5
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4641      	mov	r1, r8
 8007aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8007aee:	4649      	mov	r1, r9
 8007af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b08:	ebb2 040a 	subs.w	r4, r2, sl
 8007b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	f04f 0300 	mov.w	r3, #0
 8007b18:	00eb      	lsls	r3, r5, #3
 8007b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b1e:	00e2      	lsls	r2, r4, #3
 8007b20:	4614      	mov	r4, r2
 8007b22:	461d      	mov	r5, r3
 8007b24:	4643      	mov	r3, r8
 8007b26:	18e3      	adds	r3, r4, r3
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	eb45 0303 	adc.w	r3, r5, r3
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b3e:	4629      	mov	r1, r5
 8007b40:	028b      	lsls	r3, r1, #10
 8007b42:	4621      	mov	r1, r4
 8007b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b48:	4621      	mov	r1, r4
 8007b4a:	028a      	lsls	r2, r1, #10
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b52:	2200      	movs	r2, #0
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	61fa      	str	r2, [r7, #28]
 8007b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b5c:	f7f9 f8cc 	bl	8000cf8 <__aeabi_uldivmod>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4613      	mov	r3, r2
 8007b66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	3301      	adds	r3, #1
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b82:	e002      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3750      	adds	r7, #80	; 0x50
 8007b90:	46bd      	mov	sp, r7
 8007b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	00f42400 	.word	0x00f42400
 8007ba0:	007a1200 	.word	0x007a1200

08007ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007baa:	681b      	ldr	r3, [r3, #0]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	2000003c 	.word	0x2000003c

08007bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bc0:	f7ff fff0 	bl	8007ba4 <HAL_RCC_GetHCLKFreq>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	0a9b      	lsrs	r3, r3, #10
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	4903      	ldr	r1, [pc, #12]	; (8007be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bd2:	5ccb      	ldrb	r3, [r1, r3]
 8007bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	0800c760 	.word	0x0800c760

08007be4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b80      	cmp	r3, #128	; 0x80
 8007bf2:	d104      	bne.n	8007bfe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007bf4:	f000 f80a 	bl	8007c0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007bfa:	2280      	movs	r2, #128	; 0x80
 8007bfc:	701a      	strb	r2, [r3, #0]
  }
}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40023800 	.word	0x40023800
 8007c08:	4002380e 	.word	0x4002380e

08007c0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e041      	b.n	8007cb0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fd ffcf 	bl	8005be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4619      	mov	r1, r3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	f000 f9bf 	bl	8007fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d001      	beq.n	8007cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e044      	b.n	8007d5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1e      	ldr	r2, [pc, #120]	; (8007d68 <HAL_TIM_Base_Start_IT+0xb0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d018      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x6c>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfa:	d013      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x6c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1a      	ldr	r2, [pc, #104]	; (8007d6c <HAL_TIM_Base_Start_IT+0xb4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00e      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x6c>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a19      	ldr	r2, [pc, #100]	; (8007d70 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d009      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x6c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <HAL_TIM_Base_Start_IT+0xbc>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d004      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x6c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d111      	bne.n	8007d48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b06      	cmp	r3, #6
 8007d34:	d010      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0201 	orr.w	r2, r2, #1
 8007d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d46:	e007      	b.n	8007d58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40014000 	.word	0x40014000

08007d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d122      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0202 	mvn.w	r2, #2
 8007da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f8ee 	bl	8007fa0 <HAL_TIM_IC_CaptureCallback>
 8007dc4:	e005      	b.n	8007dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f8e0 	bl	8007f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f8f1 	bl	8007fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d122      	bne.n	8007e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d11b      	bne.n	8007e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0204 	mvn.w	r2, #4
 8007dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8c4 	bl	8007fa0 <HAL_TIM_IC_CaptureCallback>
 8007e18:	e005      	b.n	8007e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f8b6 	bl	8007f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f8c7 	bl	8007fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d122      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d11b      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0208 	mvn.w	r2, #8
 8007e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f89a 	bl	8007fa0 <HAL_TIM_IC_CaptureCallback>
 8007e6c:	e005      	b.n	8007e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f88c 	bl	8007f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f89d 	bl	8007fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0310 	and.w	r3, r3, #16
 8007e8a:	2b10      	cmp	r3, #16
 8007e8c:	d122      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0310 	and.w	r3, r3, #16
 8007e98:	2b10      	cmp	r3, #16
 8007e9a:	d11b      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0210 	mvn.w	r2, #16
 8007ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f870 	bl	8007fa0 <HAL_TIM_IC_CaptureCallback>
 8007ec0:	e005      	b.n	8007ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f862 	bl	8007f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f873 	bl	8007fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0201 	mvn.w	r2, #1
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fd fd06 	bl	800590c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0a:	2b80      	cmp	r3, #128	; 0x80
 8007f0c:	d10e      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b80      	cmp	r3, #128	; 0x80
 8007f1a:	d107      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f8e2 	bl	80080f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d10e      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d107      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f838 	bl	8007fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d10e      	bne.n	8007f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d107      	bne.n	8007f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0220 	mvn.w	r2, #32
 8007f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f8ac 	bl	80080dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a34      	ldr	r2, [pc, #208]	; (80080c0 <TIM_Base_SetConfig+0xe4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00f      	beq.n	8008014 <TIM_Base_SetConfig+0x38>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffa:	d00b      	beq.n	8008014 <TIM_Base_SetConfig+0x38>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a31      	ldr	r2, [pc, #196]	; (80080c4 <TIM_Base_SetConfig+0xe8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d007      	beq.n	8008014 <TIM_Base_SetConfig+0x38>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a30      	ldr	r2, [pc, #192]	; (80080c8 <TIM_Base_SetConfig+0xec>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_Base_SetConfig+0x38>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a2f      	ldr	r2, [pc, #188]	; (80080cc <TIM_Base_SetConfig+0xf0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d108      	bne.n	8008026 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a25      	ldr	r2, [pc, #148]	; (80080c0 <TIM_Base_SetConfig+0xe4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01b      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008034:	d017      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a22      	ldr	r2, [pc, #136]	; (80080c4 <TIM_Base_SetConfig+0xe8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <TIM_Base_SetConfig+0xec>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00f      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a20      	ldr	r2, [pc, #128]	; (80080cc <TIM_Base_SetConfig+0xf0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00b      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <TIM_Base_SetConfig+0xf4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d007      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1e      	ldr	r2, [pc, #120]	; (80080d4 <TIM_Base_SetConfig+0xf8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d003      	beq.n	8008066 <TIM_Base_SetConfig+0x8a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <TIM_Base_SetConfig+0xfc>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d108      	bne.n	8008078 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800806c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a08      	ldr	r2, [pc, #32]	; (80080c0 <TIM_Base_SetConfig+0xe4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d103      	bne.n	80080ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	691a      	ldr	r2, [r3, #16]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	615a      	str	r2, [r3, #20]
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40014000 	.word	0x40014000
 80080d4:	40014400 	.word	0x40014400
 80080d8:	40014800 	.word	0x40014800

080080dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	; (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000048 	.word	0x20000048

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	4d0d      	ldr	r5, [pc, #52]	; (8008148 <__libc_init_array+0x38>)
 8008114:	4c0d      	ldr	r4, [pc, #52]	; (800814c <__libc_init_array+0x3c>)
 8008116:	1b64      	subs	r4, r4, r5
 8008118:	10a4      	asrs	r4, r4, #2
 800811a:	2600      	movs	r6, #0
 800811c:	42a6      	cmp	r6, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	4d0b      	ldr	r5, [pc, #44]	; (8008150 <__libc_init_array+0x40>)
 8008122:	4c0c      	ldr	r4, [pc, #48]	; (8008154 <__libc_init_array+0x44>)
 8008124:	f003 fc60 	bl	800b9e8 <_init>
 8008128:	1b64      	subs	r4, r4, r5
 800812a:	10a4      	asrs	r4, r4, #2
 800812c:	2600      	movs	r6, #0
 800812e:	42a6      	cmp	r6, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f855 3b04 	ldr.w	r3, [r5], #4
 8008138:	4798      	blx	r3
 800813a:	3601      	adds	r6, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008142:	4798      	blx	r3
 8008144:	3601      	adds	r6, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	0800cbd0 	.word	0x0800cbd0
 800814c:	0800cbd0 	.word	0x0800cbd0
 8008150:	0800cbd0 	.word	0x0800cbd0
 8008154:	0800cbd4 	.word	0x0800cbd4

08008158 <memcmp>:
 8008158:	b510      	push	{r4, lr}
 800815a:	3901      	subs	r1, #1
 800815c:	4402      	add	r2, r0
 800815e:	4290      	cmp	r0, r2
 8008160:	d101      	bne.n	8008166 <memcmp+0xe>
 8008162:	2000      	movs	r0, #0
 8008164:	e005      	b.n	8008172 <memcmp+0x1a>
 8008166:	7803      	ldrb	r3, [r0, #0]
 8008168:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800816c:	42a3      	cmp	r3, r4
 800816e:	d001      	beq.n	8008174 <memcmp+0x1c>
 8008170:	1b18      	subs	r0, r3, r4
 8008172:	bd10      	pop	{r4, pc}
 8008174:	3001      	adds	r0, #1
 8008176:	e7f2      	b.n	800815e <memcmp+0x6>

08008178 <memcpy>:
 8008178:	440a      	add	r2, r1
 800817a:	4291      	cmp	r1, r2
 800817c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008180:	d100      	bne.n	8008184 <memcpy+0xc>
 8008182:	4770      	bx	lr
 8008184:	b510      	push	{r4, lr}
 8008186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800818a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800818e:	4291      	cmp	r1, r2
 8008190:	d1f9      	bne.n	8008186 <memcpy+0xe>
 8008192:	bd10      	pop	{r4, pc}

08008194 <memset>:
 8008194:	4402      	add	r2, r0
 8008196:	4603      	mov	r3, r0
 8008198:	4293      	cmp	r3, r2
 800819a:	d100      	bne.n	800819e <memset+0xa>
 800819c:	4770      	bx	lr
 800819e:	f803 1b01 	strb.w	r1, [r3], #1
 80081a2:	e7f9      	b.n	8008198 <memset+0x4>

080081a4 <__cvt>:
 80081a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	ec55 4b10 	vmov	r4, r5, d0
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	460e      	mov	r6, r1
 80081b0:	4619      	mov	r1, r3
 80081b2:	462b      	mov	r3, r5
 80081b4:	bfbb      	ittet	lt
 80081b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081ba:	461d      	movlt	r5, r3
 80081bc:	2300      	movge	r3, #0
 80081be:	232d      	movlt	r3, #45	; 0x2d
 80081c0:	700b      	strb	r3, [r1, #0]
 80081c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081c8:	4691      	mov	r9, r2
 80081ca:	f023 0820 	bic.w	r8, r3, #32
 80081ce:	bfbc      	itt	lt
 80081d0:	4622      	movlt	r2, r4
 80081d2:	4614      	movlt	r4, r2
 80081d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081d8:	d005      	beq.n	80081e6 <__cvt+0x42>
 80081da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081de:	d100      	bne.n	80081e2 <__cvt+0x3e>
 80081e0:	3601      	adds	r6, #1
 80081e2:	2102      	movs	r1, #2
 80081e4:	e000      	b.n	80081e8 <__cvt+0x44>
 80081e6:	2103      	movs	r1, #3
 80081e8:	ab03      	add	r3, sp, #12
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	ab02      	add	r3, sp, #8
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	ec45 4b10 	vmov	d0, r4, r5
 80081f4:	4653      	mov	r3, sl
 80081f6:	4632      	mov	r2, r6
 80081f8:	f000 fce2 	bl	8008bc0 <_dtoa_r>
 80081fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008200:	4607      	mov	r7, r0
 8008202:	d102      	bne.n	800820a <__cvt+0x66>
 8008204:	f019 0f01 	tst.w	r9, #1
 8008208:	d022      	beq.n	8008250 <__cvt+0xac>
 800820a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800820e:	eb07 0906 	add.w	r9, r7, r6
 8008212:	d110      	bne.n	8008236 <__cvt+0x92>
 8008214:	783b      	ldrb	r3, [r7, #0]
 8008216:	2b30      	cmp	r3, #48	; 0x30
 8008218:	d10a      	bne.n	8008230 <__cvt+0x8c>
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 8008226:	b918      	cbnz	r0, 8008230 <__cvt+0x8c>
 8008228:	f1c6 0601 	rsb	r6, r6, #1
 800822c:	f8ca 6000 	str.w	r6, [sl]
 8008230:	f8da 3000 	ldr.w	r3, [sl]
 8008234:	4499      	add	r9, r3
 8008236:	2200      	movs	r2, #0
 8008238:	2300      	movs	r3, #0
 800823a:	4620      	mov	r0, r4
 800823c:	4629      	mov	r1, r5
 800823e:	f7f8 fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008242:	b108      	cbz	r0, 8008248 <__cvt+0xa4>
 8008244:	f8cd 900c 	str.w	r9, [sp, #12]
 8008248:	2230      	movs	r2, #48	; 0x30
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	454b      	cmp	r3, r9
 800824e:	d307      	bcc.n	8008260 <__cvt+0xbc>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008254:	1bdb      	subs	r3, r3, r7
 8008256:	4638      	mov	r0, r7
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	b004      	add	sp, #16
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	1c59      	adds	r1, r3, #1
 8008262:	9103      	str	r1, [sp, #12]
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e7f0      	b.n	800824a <__cvt+0xa6>

08008268 <__exponent>:
 8008268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800826a:	4603      	mov	r3, r0
 800826c:	2900      	cmp	r1, #0
 800826e:	bfb8      	it	lt
 8008270:	4249      	neglt	r1, r1
 8008272:	f803 2b02 	strb.w	r2, [r3], #2
 8008276:	bfb4      	ite	lt
 8008278:	222d      	movlt	r2, #45	; 0x2d
 800827a:	222b      	movge	r2, #43	; 0x2b
 800827c:	2909      	cmp	r1, #9
 800827e:	7042      	strb	r2, [r0, #1]
 8008280:	dd2a      	ble.n	80082d8 <__exponent+0x70>
 8008282:	f10d 0407 	add.w	r4, sp, #7
 8008286:	46a4      	mov	ip, r4
 8008288:	270a      	movs	r7, #10
 800828a:	46a6      	mov	lr, r4
 800828c:	460a      	mov	r2, r1
 800828e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008292:	fb07 1516 	mls	r5, r7, r6, r1
 8008296:	3530      	adds	r5, #48	; 0x30
 8008298:	2a63      	cmp	r2, #99	; 0x63
 800829a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800829e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082a2:	4631      	mov	r1, r6
 80082a4:	dcf1      	bgt.n	800828a <__exponent+0x22>
 80082a6:	3130      	adds	r1, #48	; 0x30
 80082a8:	f1ae 0502 	sub.w	r5, lr, #2
 80082ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082b0:	1c44      	adds	r4, r0, #1
 80082b2:	4629      	mov	r1, r5
 80082b4:	4561      	cmp	r1, ip
 80082b6:	d30a      	bcc.n	80082ce <__exponent+0x66>
 80082b8:	f10d 0209 	add.w	r2, sp, #9
 80082bc:	eba2 020e 	sub.w	r2, r2, lr
 80082c0:	4565      	cmp	r5, ip
 80082c2:	bf88      	it	hi
 80082c4:	2200      	movhi	r2, #0
 80082c6:	4413      	add	r3, r2
 80082c8:	1a18      	subs	r0, r3, r0
 80082ca:	b003      	add	sp, #12
 80082cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082d6:	e7ed      	b.n	80082b4 <__exponent+0x4c>
 80082d8:	2330      	movs	r3, #48	; 0x30
 80082da:	3130      	adds	r1, #48	; 0x30
 80082dc:	7083      	strb	r3, [r0, #2]
 80082de:	70c1      	strb	r1, [r0, #3]
 80082e0:	1d03      	adds	r3, r0, #4
 80082e2:	e7f1      	b.n	80082c8 <__exponent+0x60>

080082e4 <_printf_float>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	ed2d 8b02 	vpush	{d8}
 80082ec:	b08d      	sub	sp, #52	; 0x34
 80082ee:	460c      	mov	r4, r1
 80082f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082f4:	4616      	mov	r6, r2
 80082f6:	461f      	mov	r7, r3
 80082f8:	4605      	mov	r5, r0
 80082fa:	f001 fb45 	bl	8009988 <_localeconv_r>
 80082fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008302:	4650      	mov	r0, sl
 8008304:	f7f7 ff6c 	bl	80001e0 <strlen>
 8008308:	2300      	movs	r3, #0
 800830a:	930a      	str	r3, [sp, #40]	; 0x28
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	9305      	str	r3, [sp, #20]
 8008310:	f8d8 3000 	ldr.w	r3, [r8]
 8008314:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008318:	3307      	adds	r3, #7
 800831a:	f023 0307 	bic.w	r3, r3, #7
 800831e:	f103 0208 	add.w	r2, r3, #8
 8008322:	f8c8 2000 	str.w	r2, [r8]
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800832e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	f8cd 8018 	str.w	r8, [sp, #24]
 800833c:	ee08 0a10 	vmov	s16, r0
 8008340:	4b9f      	ldr	r3, [pc, #636]	; (80085c0 <_printf_float+0x2dc>)
 8008342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800834a:	f7f8 fbf7 	bl	8000b3c <__aeabi_dcmpun>
 800834e:	bb88      	cbnz	r0, 80083b4 <_printf_float+0xd0>
 8008350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008354:	4b9a      	ldr	r3, [pc, #616]	; (80085c0 <_printf_float+0x2dc>)
 8008356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800835a:	f7f8 fbd1 	bl	8000b00 <__aeabi_dcmple>
 800835e:	bb48      	cbnz	r0, 80083b4 <_printf_float+0xd0>
 8008360:	2200      	movs	r2, #0
 8008362:	2300      	movs	r3, #0
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f8 fbc0 	bl	8000aec <__aeabi_dcmplt>
 800836c:	b110      	cbz	r0, 8008374 <_printf_float+0x90>
 800836e:	232d      	movs	r3, #45	; 0x2d
 8008370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008374:	4b93      	ldr	r3, [pc, #588]	; (80085c4 <_printf_float+0x2e0>)
 8008376:	4894      	ldr	r0, [pc, #592]	; (80085c8 <_printf_float+0x2e4>)
 8008378:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800837c:	bf94      	ite	ls
 800837e:	4698      	movls	r8, r3
 8008380:	4680      	movhi	r8, r0
 8008382:	2303      	movs	r3, #3
 8008384:	6123      	str	r3, [r4, #16]
 8008386:	9b05      	ldr	r3, [sp, #20]
 8008388:	f023 0204 	bic.w	r2, r3, #4
 800838c:	6022      	str	r2, [r4, #0]
 800838e:	f04f 0900 	mov.w	r9, #0
 8008392:	9700      	str	r7, [sp, #0]
 8008394:	4633      	mov	r3, r6
 8008396:	aa0b      	add	r2, sp, #44	; 0x2c
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f000 f9d8 	bl	8008750 <_printf_common>
 80083a0:	3001      	adds	r0, #1
 80083a2:	f040 8090 	bne.w	80084c6 <_printf_float+0x1e2>
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083aa:	b00d      	add	sp, #52	; 0x34
 80083ac:	ecbd 8b02 	vpop	{d8}
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	4642      	mov	r2, r8
 80083b6:	464b      	mov	r3, r9
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f8 fbbe 	bl	8000b3c <__aeabi_dcmpun>
 80083c0:	b140      	cbz	r0, 80083d4 <_printf_float+0xf0>
 80083c2:	464b      	mov	r3, r9
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfbc      	itt	lt
 80083c8:	232d      	movlt	r3, #45	; 0x2d
 80083ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083ce:	487f      	ldr	r0, [pc, #508]	; (80085cc <_printf_float+0x2e8>)
 80083d0:	4b7f      	ldr	r3, [pc, #508]	; (80085d0 <_printf_float+0x2ec>)
 80083d2:	e7d1      	b.n	8008378 <_printf_float+0x94>
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083da:	9206      	str	r2, [sp, #24]
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	d13f      	bne.n	8008460 <_printf_float+0x17c>
 80083e0:	2306      	movs	r3, #6
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	6861      	ldr	r1, [r4, #4]
 80083e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083ec:	2300      	movs	r3, #0
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	ab0a      	add	r3, sp, #40	; 0x28
 80083f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083f6:	ab09      	add	r3, sp, #36	; 0x24
 80083f8:	ec49 8b10 	vmov	d0, r8, r9
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008404:	4628      	mov	r0, r5
 8008406:	f7ff fecd 	bl	80081a4 <__cvt>
 800840a:	9b06      	ldr	r3, [sp, #24]
 800840c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840e:	2b47      	cmp	r3, #71	; 0x47
 8008410:	4680      	mov	r8, r0
 8008412:	d108      	bne.n	8008426 <_printf_float+0x142>
 8008414:	1cc8      	adds	r0, r1, #3
 8008416:	db02      	blt.n	800841e <_printf_float+0x13a>
 8008418:	6863      	ldr	r3, [r4, #4]
 800841a:	4299      	cmp	r1, r3
 800841c:	dd41      	ble.n	80084a2 <_printf_float+0x1be>
 800841e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008422:	fa5f fb8b 	uxtb.w	fp, fp
 8008426:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800842a:	d820      	bhi.n	800846e <_printf_float+0x18a>
 800842c:	3901      	subs	r1, #1
 800842e:	465a      	mov	r2, fp
 8008430:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008434:	9109      	str	r1, [sp, #36]	; 0x24
 8008436:	f7ff ff17 	bl	8008268 <__exponent>
 800843a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800843c:	1813      	adds	r3, r2, r0
 800843e:	2a01      	cmp	r2, #1
 8008440:	4681      	mov	r9, r0
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	dc02      	bgt.n	800844c <_printf_float+0x168>
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	07d2      	lsls	r2, r2, #31
 800844a:	d501      	bpl.n	8008450 <_printf_float+0x16c>
 800844c:	3301      	adds	r3, #1
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008454:	2b00      	cmp	r3, #0
 8008456:	d09c      	beq.n	8008392 <_printf_float+0xae>
 8008458:	232d      	movs	r3, #45	; 0x2d
 800845a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800845e:	e798      	b.n	8008392 <_printf_float+0xae>
 8008460:	9a06      	ldr	r2, [sp, #24]
 8008462:	2a47      	cmp	r2, #71	; 0x47
 8008464:	d1be      	bne.n	80083e4 <_printf_float+0x100>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1bc      	bne.n	80083e4 <_printf_float+0x100>
 800846a:	2301      	movs	r3, #1
 800846c:	e7b9      	b.n	80083e2 <_printf_float+0xfe>
 800846e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008472:	d118      	bne.n	80084a6 <_printf_float+0x1c2>
 8008474:	2900      	cmp	r1, #0
 8008476:	6863      	ldr	r3, [r4, #4]
 8008478:	dd0b      	ble.n	8008492 <_printf_float+0x1ae>
 800847a:	6121      	str	r1, [r4, #16]
 800847c:	b913      	cbnz	r3, 8008484 <_printf_float+0x1a0>
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	07d0      	lsls	r0, r2, #31
 8008482:	d502      	bpl.n	800848a <_printf_float+0x1a6>
 8008484:	3301      	adds	r3, #1
 8008486:	440b      	add	r3, r1
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	65a1      	str	r1, [r4, #88]	; 0x58
 800848c:	f04f 0900 	mov.w	r9, #0
 8008490:	e7de      	b.n	8008450 <_printf_float+0x16c>
 8008492:	b913      	cbnz	r3, 800849a <_printf_float+0x1b6>
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	07d2      	lsls	r2, r2, #31
 8008498:	d501      	bpl.n	800849e <_printf_float+0x1ba>
 800849a:	3302      	adds	r3, #2
 800849c:	e7f4      	b.n	8008488 <_printf_float+0x1a4>
 800849e:	2301      	movs	r3, #1
 80084a0:	e7f2      	b.n	8008488 <_printf_float+0x1a4>
 80084a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a8:	4299      	cmp	r1, r3
 80084aa:	db05      	blt.n	80084b8 <_printf_float+0x1d4>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	6121      	str	r1, [r4, #16]
 80084b0:	07d8      	lsls	r0, r3, #31
 80084b2:	d5ea      	bpl.n	800848a <_printf_float+0x1a6>
 80084b4:	1c4b      	adds	r3, r1, #1
 80084b6:	e7e7      	b.n	8008488 <_printf_float+0x1a4>
 80084b8:	2900      	cmp	r1, #0
 80084ba:	bfd4      	ite	le
 80084bc:	f1c1 0202 	rsble	r2, r1, #2
 80084c0:	2201      	movgt	r2, #1
 80084c2:	4413      	add	r3, r2
 80084c4:	e7e0      	b.n	8008488 <_printf_float+0x1a4>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	055a      	lsls	r2, r3, #21
 80084ca:	d407      	bmi.n	80084dc <_printf_float+0x1f8>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	4642      	mov	r2, r8
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	d12c      	bne.n	8008534 <_printf_float+0x250>
 80084da:	e764      	b.n	80083a6 <_printf_float+0xc2>
 80084dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084e0:	f240 80e0 	bls.w	80086a4 <_printf_float+0x3c0>
 80084e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084e8:	2200      	movs	r2, #0
 80084ea:	2300      	movs	r3, #0
 80084ec:	f7f8 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d034      	beq.n	800855e <_printf_float+0x27a>
 80084f4:	4a37      	ldr	r2, [pc, #220]	; (80085d4 <_printf_float+0x2f0>)
 80084f6:	2301      	movs	r3, #1
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f af51 	beq.w	80083a6 <_printf_float+0xc2>
 8008504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008508:	429a      	cmp	r2, r3
 800850a:	db02      	blt.n	8008512 <_printf_float+0x22e>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	07d8      	lsls	r0, r3, #31
 8008510:	d510      	bpl.n	8008534 <_printf_float+0x250>
 8008512:	ee18 3a10 	vmov	r3, s16
 8008516:	4652      	mov	r2, sl
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	f43f af41 	beq.w	80083a6 <_printf_float+0xc2>
 8008524:	f04f 0800 	mov.w	r8, #0
 8008528:	f104 091a 	add.w	r9, r4, #26
 800852c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852e:	3b01      	subs	r3, #1
 8008530:	4543      	cmp	r3, r8
 8008532:	dc09      	bgt.n	8008548 <_printf_float+0x264>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	079b      	lsls	r3, r3, #30
 8008538:	f100 8105 	bmi.w	8008746 <_printf_float+0x462>
 800853c:	68e0      	ldr	r0, [r4, #12]
 800853e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008540:	4298      	cmp	r0, r3
 8008542:	bfb8      	it	lt
 8008544:	4618      	movlt	r0, r3
 8008546:	e730      	b.n	80083aa <_printf_float+0xc6>
 8008548:	2301      	movs	r3, #1
 800854a:	464a      	mov	r2, r9
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	f43f af27 	beq.w	80083a6 <_printf_float+0xc2>
 8008558:	f108 0801 	add.w	r8, r8, #1
 800855c:	e7e6      	b.n	800852c <_printf_float+0x248>
 800855e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	dc39      	bgt.n	80085d8 <_printf_float+0x2f4>
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <_printf_float+0x2f0>)
 8008566:	2301      	movs	r3, #1
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af19 	beq.w	80083a6 <_printf_float+0xc2>
 8008574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008578:	4313      	orrs	r3, r2
 800857a:	d102      	bne.n	8008582 <_printf_float+0x29e>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	07d9      	lsls	r1, r3, #31
 8008580:	d5d8      	bpl.n	8008534 <_printf_float+0x250>
 8008582:	ee18 3a10 	vmov	r3, s16
 8008586:	4652      	mov	r2, sl
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f af09 	beq.w	80083a6 <_printf_float+0xc2>
 8008594:	f04f 0900 	mov.w	r9, #0
 8008598:	f104 0a1a 	add.w	sl, r4, #26
 800859c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859e:	425b      	negs	r3, r3
 80085a0:	454b      	cmp	r3, r9
 80085a2:	dc01      	bgt.n	80085a8 <_printf_float+0x2c4>
 80085a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a6:	e792      	b.n	80084ce <_printf_float+0x1ea>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4652      	mov	r2, sl
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f aef7 	beq.w	80083a6 <_printf_float+0xc2>
 80085b8:	f109 0901 	add.w	r9, r9, #1
 80085bc:	e7ee      	b.n	800859c <_printf_float+0x2b8>
 80085be:	bf00      	nop
 80085c0:	7fefffff 	.word	0x7fefffff
 80085c4:	0800c76c 	.word	0x0800c76c
 80085c8:	0800c770 	.word	0x0800c770
 80085cc:	0800c778 	.word	0x0800c778
 80085d0:	0800c774 	.word	0x0800c774
 80085d4:	0800c77c 	.word	0x0800c77c
 80085d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085dc:	429a      	cmp	r2, r3
 80085de:	bfa8      	it	ge
 80085e0:	461a      	movge	r2, r3
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	4691      	mov	r9, r2
 80085e6:	dc37      	bgt.n	8008658 <_printf_float+0x374>
 80085e8:	f04f 0b00 	mov.w	fp, #0
 80085ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085f0:	f104 021a 	add.w	r2, r4, #26
 80085f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	eba3 0309 	sub.w	r3, r3, r9
 80085fc:	455b      	cmp	r3, fp
 80085fe:	dc33      	bgt.n	8008668 <_printf_float+0x384>
 8008600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008604:	429a      	cmp	r2, r3
 8008606:	db3b      	blt.n	8008680 <_printf_float+0x39c>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	07da      	lsls	r2, r3, #31
 800860c:	d438      	bmi.n	8008680 <_printf_float+0x39c>
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	9a05      	ldr	r2, [sp, #20]
 8008612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008614:	1a9a      	subs	r2, r3, r2
 8008616:	eba3 0901 	sub.w	r9, r3, r1
 800861a:	4591      	cmp	r9, r2
 800861c:	bfa8      	it	ge
 800861e:	4691      	movge	r9, r2
 8008620:	f1b9 0f00 	cmp.w	r9, #0
 8008624:	dc35      	bgt.n	8008692 <_printf_float+0x3ae>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800862e:	f104 0a1a 	add.w	sl, r4, #26
 8008632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	eba3 0309 	sub.w	r3, r3, r9
 800863c:	4543      	cmp	r3, r8
 800863e:	f77f af79 	ble.w	8008534 <_printf_float+0x250>
 8008642:	2301      	movs	r3, #1
 8008644:	4652      	mov	r2, sl
 8008646:	4631      	mov	r1, r6
 8008648:	4628      	mov	r0, r5
 800864a:	47b8      	blx	r7
 800864c:	3001      	adds	r0, #1
 800864e:	f43f aeaa 	beq.w	80083a6 <_printf_float+0xc2>
 8008652:	f108 0801 	add.w	r8, r8, #1
 8008656:	e7ec      	b.n	8008632 <_printf_float+0x34e>
 8008658:	4613      	mov	r3, r2
 800865a:	4631      	mov	r1, r6
 800865c:	4642      	mov	r2, r8
 800865e:	4628      	mov	r0, r5
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	d1c0      	bne.n	80085e8 <_printf_float+0x304>
 8008666:	e69e      	b.n	80083a6 <_printf_float+0xc2>
 8008668:	2301      	movs	r3, #1
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	9205      	str	r2, [sp, #20]
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	f43f ae97 	beq.w	80083a6 <_printf_float+0xc2>
 8008678:	9a05      	ldr	r2, [sp, #20]
 800867a:	f10b 0b01 	add.w	fp, fp, #1
 800867e:	e7b9      	b.n	80085f4 <_printf_float+0x310>
 8008680:	ee18 3a10 	vmov	r3, s16
 8008684:	4652      	mov	r2, sl
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	d1be      	bne.n	800860e <_printf_float+0x32a>
 8008690:	e689      	b.n	80083a6 <_printf_float+0xc2>
 8008692:	9a05      	ldr	r2, [sp, #20]
 8008694:	464b      	mov	r3, r9
 8008696:	4442      	add	r2, r8
 8008698:	4631      	mov	r1, r6
 800869a:	4628      	mov	r0, r5
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	d1c1      	bne.n	8008626 <_printf_float+0x342>
 80086a2:	e680      	b.n	80083a6 <_printf_float+0xc2>
 80086a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a6:	2a01      	cmp	r2, #1
 80086a8:	dc01      	bgt.n	80086ae <_printf_float+0x3ca>
 80086aa:	07db      	lsls	r3, r3, #31
 80086ac:	d538      	bpl.n	8008720 <_printf_float+0x43c>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4642      	mov	r2, r8
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	f43f ae74 	beq.w	80083a6 <_printf_float+0xc2>
 80086be:	ee18 3a10 	vmov	r3, s16
 80086c2:	4652      	mov	r2, sl
 80086c4:	4631      	mov	r1, r6
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	f43f ae6b 	beq.w	80083a6 <_printf_float+0xc2>
 80086d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	f7f8 f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80086dc:	b9d8      	cbnz	r0, 8008716 <_printf_float+0x432>
 80086de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e0:	f108 0201 	add.w	r2, r8, #1
 80086e4:	3b01      	subs	r3, #1
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d10e      	bne.n	800870e <_printf_float+0x42a>
 80086f0:	e659      	b.n	80083a6 <_printf_float+0xc2>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4652      	mov	r2, sl
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	f43f ae52 	beq.w	80083a6 <_printf_float+0xc2>
 8008702:	f108 0801 	add.w	r8, r8, #1
 8008706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008708:	3b01      	subs	r3, #1
 800870a:	4543      	cmp	r3, r8
 800870c:	dcf1      	bgt.n	80086f2 <_printf_float+0x40e>
 800870e:	464b      	mov	r3, r9
 8008710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008714:	e6dc      	b.n	80084d0 <_printf_float+0x1ec>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	f104 0a1a 	add.w	sl, r4, #26
 800871e:	e7f2      	b.n	8008706 <_printf_float+0x422>
 8008720:	2301      	movs	r3, #1
 8008722:	4642      	mov	r2, r8
 8008724:	e7df      	b.n	80086e6 <_printf_float+0x402>
 8008726:	2301      	movs	r3, #1
 8008728:	464a      	mov	r2, r9
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f ae38 	beq.w	80083a6 <_printf_float+0xc2>
 8008736:	f108 0801 	add.w	r8, r8, #1
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	4543      	cmp	r3, r8
 8008742:	dcf0      	bgt.n	8008726 <_printf_float+0x442>
 8008744:	e6fa      	b.n	800853c <_printf_float+0x258>
 8008746:	f04f 0800 	mov.w	r8, #0
 800874a:	f104 0919 	add.w	r9, r4, #25
 800874e:	e7f4      	b.n	800873a <_printf_float+0x456>

08008750 <_printf_common>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	4616      	mov	r6, r2
 8008756:	4699      	mov	r9, r3
 8008758:	688a      	ldr	r2, [r1, #8]
 800875a:	690b      	ldr	r3, [r1, #16]
 800875c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008760:	4293      	cmp	r3, r2
 8008762:	bfb8      	it	lt
 8008764:	4613      	movlt	r3, r2
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800876c:	4607      	mov	r7, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b10a      	cbz	r2, 8008776 <_printf_common+0x26>
 8008772:	3301      	adds	r3, #1
 8008774:	6033      	str	r3, [r6, #0]
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	0699      	lsls	r1, r3, #26
 800877a:	bf42      	ittt	mi
 800877c:	6833      	ldrmi	r3, [r6, #0]
 800877e:	3302      	addmi	r3, #2
 8008780:	6033      	strmi	r3, [r6, #0]
 8008782:	6825      	ldr	r5, [r4, #0]
 8008784:	f015 0506 	ands.w	r5, r5, #6
 8008788:	d106      	bne.n	8008798 <_printf_common+0x48>
 800878a:	f104 0a19 	add.w	sl, r4, #25
 800878e:	68e3      	ldr	r3, [r4, #12]
 8008790:	6832      	ldr	r2, [r6, #0]
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	42ab      	cmp	r3, r5
 8008796:	dc26      	bgt.n	80087e6 <_printf_common+0x96>
 8008798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800879c:	1e13      	subs	r3, r2, #0
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	bf18      	it	ne
 80087a2:	2301      	movne	r3, #1
 80087a4:	0692      	lsls	r2, r2, #26
 80087a6:	d42b      	bmi.n	8008800 <_printf_common+0xb0>
 80087a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087ac:	4649      	mov	r1, r9
 80087ae:	4638      	mov	r0, r7
 80087b0:	47c0      	blx	r8
 80087b2:	3001      	adds	r0, #1
 80087b4:	d01e      	beq.n	80087f4 <_printf_common+0xa4>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	68e5      	ldr	r5, [r4, #12]
 80087ba:	6832      	ldr	r2, [r6, #0]
 80087bc:	f003 0306 	and.w	r3, r3, #6
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	bf08      	it	eq
 80087c4:	1aad      	subeq	r5, r5, r2
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	bf0c      	ite	eq
 80087cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d0:	2500      	movne	r5, #0
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bfc4      	itt	gt
 80087d6:	1a9b      	subgt	r3, r3, r2
 80087d8:	18ed      	addgt	r5, r5, r3
 80087da:	2600      	movs	r6, #0
 80087dc:	341a      	adds	r4, #26
 80087de:	42b5      	cmp	r5, r6
 80087e0:	d11a      	bne.n	8008818 <_printf_common+0xc8>
 80087e2:	2000      	movs	r0, #0
 80087e4:	e008      	b.n	80087f8 <_printf_common+0xa8>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4652      	mov	r2, sl
 80087ea:	4649      	mov	r1, r9
 80087ec:	4638      	mov	r0, r7
 80087ee:	47c0      	blx	r8
 80087f0:	3001      	adds	r0, #1
 80087f2:	d103      	bne.n	80087fc <_printf_common+0xac>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fc:	3501      	adds	r5, #1
 80087fe:	e7c6      	b.n	800878e <_printf_common+0x3e>
 8008800:	18e1      	adds	r1, r4, r3
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	2030      	movs	r0, #48	; 0x30
 8008806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800880a:	4422      	add	r2, r4
 800880c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008814:	3302      	adds	r3, #2
 8008816:	e7c7      	b.n	80087a8 <_printf_common+0x58>
 8008818:	2301      	movs	r3, #1
 800881a:	4622      	mov	r2, r4
 800881c:	4649      	mov	r1, r9
 800881e:	4638      	mov	r0, r7
 8008820:	47c0      	blx	r8
 8008822:	3001      	adds	r0, #1
 8008824:	d0e6      	beq.n	80087f4 <_printf_common+0xa4>
 8008826:	3601      	adds	r6, #1
 8008828:	e7d9      	b.n	80087de <_printf_common+0x8e>
	...

0800882c <_printf_i>:
 800882c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008830:	7e0f      	ldrb	r7, [r1, #24]
 8008832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008834:	2f78      	cmp	r7, #120	; 0x78
 8008836:	4691      	mov	r9, r2
 8008838:	4680      	mov	r8, r0
 800883a:	460c      	mov	r4, r1
 800883c:	469a      	mov	sl, r3
 800883e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008842:	d807      	bhi.n	8008854 <_printf_i+0x28>
 8008844:	2f62      	cmp	r7, #98	; 0x62
 8008846:	d80a      	bhi.n	800885e <_printf_i+0x32>
 8008848:	2f00      	cmp	r7, #0
 800884a:	f000 80d8 	beq.w	80089fe <_printf_i+0x1d2>
 800884e:	2f58      	cmp	r7, #88	; 0x58
 8008850:	f000 80a3 	beq.w	800899a <_printf_i+0x16e>
 8008854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800885c:	e03a      	b.n	80088d4 <_printf_i+0xa8>
 800885e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008862:	2b15      	cmp	r3, #21
 8008864:	d8f6      	bhi.n	8008854 <_printf_i+0x28>
 8008866:	a101      	add	r1, pc, #4	; (adr r1, 800886c <_printf_i+0x40>)
 8008868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800886c:	080088c5 	.word	0x080088c5
 8008870:	080088d9 	.word	0x080088d9
 8008874:	08008855 	.word	0x08008855
 8008878:	08008855 	.word	0x08008855
 800887c:	08008855 	.word	0x08008855
 8008880:	08008855 	.word	0x08008855
 8008884:	080088d9 	.word	0x080088d9
 8008888:	08008855 	.word	0x08008855
 800888c:	08008855 	.word	0x08008855
 8008890:	08008855 	.word	0x08008855
 8008894:	08008855 	.word	0x08008855
 8008898:	080089e5 	.word	0x080089e5
 800889c:	08008909 	.word	0x08008909
 80088a0:	080089c7 	.word	0x080089c7
 80088a4:	08008855 	.word	0x08008855
 80088a8:	08008855 	.word	0x08008855
 80088ac:	08008a07 	.word	0x08008a07
 80088b0:	08008855 	.word	0x08008855
 80088b4:	08008909 	.word	0x08008909
 80088b8:	08008855 	.word	0x08008855
 80088bc:	08008855 	.word	0x08008855
 80088c0:	080089cf 	.word	0x080089cf
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	602a      	str	r2, [r5, #0]
 80088cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088d4:	2301      	movs	r3, #1
 80088d6:	e0a3      	b.n	8008a20 <_printf_i+0x1f4>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	6829      	ldr	r1, [r5, #0]
 80088dc:	0606      	lsls	r6, r0, #24
 80088de:	f101 0304 	add.w	r3, r1, #4
 80088e2:	d50a      	bpl.n	80088fa <_printf_i+0xce>
 80088e4:	680e      	ldr	r6, [r1, #0]
 80088e6:	602b      	str	r3, [r5, #0]
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	da03      	bge.n	80088f4 <_printf_i+0xc8>
 80088ec:	232d      	movs	r3, #45	; 0x2d
 80088ee:	4276      	negs	r6, r6
 80088f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f4:	485e      	ldr	r0, [pc, #376]	; (8008a70 <_printf_i+0x244>)
 80088f6:	230a      	movs	r3, #10
 80088f8:	e019      	b.n	800892e <_printf_i+0x102>
 80088fa:	680e      	ldr	r6, [r1, #0]
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008902:	bf18      	it	ne
 8008904:	b236      	sxthne	r6, r6
 8008906:	e7ef      	b.n	80088e8 <_printf_i+0xbc>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	6820      	ldr	r0, [r4, #0]
 800890c:	1d19      	adds	r1, r3, #4
 800890e:	6029      	str	r1, [r5, #0]
 8008910:	0601      	lsls	r1, r0, #24
 8008912:	d501      	bpl.n	8008918 <_printf_i+0xec>
 8008914:	681e      	ldr	r6, [r3, #0]
 8008916:	e002      	b.n	800891e <_printf_i+0xf2>
 8008918:	0646      	lsls	r6, r0, #25
 800891a:	d5fb      	bpl.n	8008914 <_printf_i+0xe8>
 800891c:	881e      	ldrh	r6, [r3, #0]
 800891e:	4854      	ldr	r0, [pc, #336]	; (8008a70 <_printf_i+0x244>)
 8008920:	2f6f      	cmp	r7, #111	; 0x6f
 8008922:	bf0c      	ite	eq
 8008924:	2308      	moveq	r3, #8
 8008926:	230a      	movne	r3, #10
 8008928:	2100      	movs	r1, #0
 800892a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800892e:	6865      	ldr	r5, [r4, #4]
 8008930:	60a5      	str	r5, [r4, #8]
 8008932:	2d00      	cmp	r5, #0
 8008934:	bfa2      	ittt	ge
 8008936:	6821      	ldrge	r1, [r4, #0]
 8008938:	f021 0104 	bicge.w	r1, r1, #4
 800893c:	6021      	strge	r1, [r4, #0]
 800893e:	b90e      	cbnz	r6, 8008944 <_printf_i+0x118>
 8008940:	2d00      	cmp	r5, #0
 8008942:	d04d      	beq.n	80089e0 <_printf_i+0x1b4>
 8008944:	4615      	mov	r5, r2
 8008946:	fbb6 f1f3 	udiv	r1, r6, r3
 800894a:	fb03 6711 	mls	r7, r3, r1, r6
 800894e:	5dc7      	ldrb	r7, [r0, r7]
 8008950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008954:	4637      	mov	r7, r6
 8008956:	42bb      	cmp	r3, r7
 8008958:	460e      	mov	r6, r1
 800895a:	d9f4      	bls.n	8008946 <_printf_i+0x11a>
 800895c:	2b08      	cmp	r3, #8
 800895e:	d10b      	bne.n	8008978 <_printf_i+0x14c>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	07de      	lsls	r6, r3, #31
 8008964:	d508      	bpl.n	8008978 <_printf_i+0x14c>
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	6861      	ldr	r1, [r4, #4]
 800896a:	4299      	cmp	r1, r3
 800896c:	bfde      	ittt	le
 800896e:	2330      	movle	r3, #48	; 0x30
 8008970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008974:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008978:	1b52      	subs	r2, r2, r5
 800897a:	6122      	str	r2, [r4, #16]
 800897c:	f8cd a000 	str.w	sl, [sp]
 8008980:	464b      	mov	r3, r9
 8008982:	aa03      	add	r2, sp, #12
 8008984:	4621      	mov	r1, r4
 8008986:	4640      	mov	r0, r8
 8008988:	f7ff fee2 	bl	8008750 <_printf_common>
 800898c:	3001      	adds	r0, #1
 800898e:	d14c      	bne.n	8008a2a <_printf_i+0x1fe>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008994:	b004      	add	sp, #16
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	4835      	ldr	r0, [pc, #212]	; (8008a70 <_printf_i+0x244>)
 800899c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089a0:	6829      	ldr	r1, [r5, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80089a8:	6029      	str	r1, [r5, #0]
 80089aa:	061d      	lsls	r5, r3, #24
 80089ac:	d514      	bpl.n	80089d8 <_printf_i+0x1ac>
 80089ae:	07df      	lsls	r7, r3, #31
 80089b0:	bf44      	itt	mi
 80089b2:	f043 0320 	orrmi.w	r3, r3, #32
 80089b6:	6023      	strmi	r3, [r4, #0]
 80089b8:	b91e      	cbnz	r6, 80089c2 <_printf_i+0x196>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f023 0320 	bic.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	2310      	movs	r3, #16
 80089c4:	e7b0      	b.n	8008928 <_printf_i+0xfc>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	f043 0320 	orr.w	r3, r3, #32
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	2378      	movs	r3, #120	; 0x78
 80089d0:	4828      	ldr	r0, [pc, #160]	; (8008a74 <_printf_i+0x248>)
 80089d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089d6:	e7e3      	b.n	80089a0 <_printf_i+0x174>
 80089d8:	0659      	lsls	r1, r3, #25
 80089da:	bf48      	it	mi
 80089dc:	b2b6      	uxthmi	r6, r6
 80089de:	e7e6      	b.n	80089ae <_printf_i+0x182>
 80089e0:	4615      	mov	r5, r2
 80089e2:	e7bb      	b.n	800895c <_printf_i+0x130>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	6826      	ldr	r6, [r4, #0]
 80089e8:	6961      	ldr	r1, [r4, #20]
 80089ea:	1d18      	adds	r0, r3, #4
 80089ec:	6028      	str	r0, [r5, #0]
 80089ee:	0635      	lsls	r5, r6, #24
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	d501      	bpl.n	80089f8 <_printf_i+0x1cc>
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	e002      	b.n	80089fe <_printf_i+0x1d2>
 80089f8:	0670      	lsls	r0, r6, #25
 80089fa:	d5fb      	bpl.n	80089f4 <_printf_i+0x1c8>
 80089fc:	8019      	strh	r1, [r3, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	4615      	mov	r5, r2
 8008a04:	e7ba      	b.n	800897c <_printf_i+0x150>
 8008a06:	682b      	ldr	r3, [r5, #0]
 8008a08:	1d1a      	adds	r2, r3, #4
 8008a0a:	602a      	str	r2, [r5, #0]
 8008a0c:	681d      	ldr	r5, [r3, #0]
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	2100      	movs	r1, #0
 8008a12:	4628      	mov	r0, r5
 8008a14:	f7f7 fbec 	bl	80001f0 <memchr>
 8008a18:	b108      	cbz	r0, 8008a1e <_printf_i+0x1f2>
 8008a1a:	1b40      	subs	r0, r0, r5
 8008a1c:	6060      	str	r0, [r4, #4]
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	2300      	movs	r3, #0
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a28:	e7a8      	b.n	800897c <_printf_i+0x150>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4640      	mov	r0, r8
 8008a32:	47d0      	blx	sl
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0ab      	beq.n	8008990 <_printf_i+0x164>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	d413      	bmi.n	8008a66 <_printf_i+0x23a>
 8008a3e:	68e0      	ldr	r0, [r4, #12]
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	4298      	cmp	r0, r3
 8008a44:	bfb8      	it	lt
 8008a46:	4618      	movlt	r0, r3
 8008a48:	e7a4      	b.n	8008994 <_printf_i+0x168>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	47d0      	blx	sl
 8008a54:	3001      	adds	r0, #1
 8008a56:	d09b      	beq.n	8008990 <_printf_i+0x164>
 8008a58:	3501      	adds	r5, #1
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	9903      	ldr	r1, [sp, #12]
 8008a5e:	1a5b      	subs	r3, r3, r1
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dcf2      	bgt.n	8008a4a <_printf_i+0x21e>
 8008a64:	e7eb      	b.n	8008a3e <_printf_i+0x212>
 8008a66:	2500      	movs	r5, #0
 8008a68:	f104 0619 	add.w	r6, r4, #25
 8008a6c:	e7f5      	b.n	8008a5a <_printf_i+0x22e>
 8008a6e:	bf00      	nop
 8008a70:	0800c77e 	.word	0x0800c77e
 8008a74:	0800c78f 	.word	0x0800c78f

08008a78 <iprintf>:
 8008a78:	b40f      	push	{r0, r1, r2, r3}
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <iprintf+0x2c>)
 8008a7c:	b513      	push	{r0, r1, r4, lr}
 8008a7e:	681c      	ldr	r4, [r3, #0]
 8008a80:	b124      	cbz	r4, 8008a8c <iprintf+0x14>
 8008a82:	69a3      	ldr	r3, [r4, #24]
 8008a84:	b913      	cbnz	r3, 8008a8c <iprintf+0x14>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fee0 	bl	800984c <__sinit>
 8008a8c:	ab05      	add	r3, sp, #20
 8008a8e:	9a04      	ldr	r2, [sp, #16]
 8008a90:	68a1      	ldr	r1, [r4, #8]
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	4620      	mov	r0, r4
 8008a96:	f001 fc2b 	bl	800a2f0 <_vfiprintf_r>
 8008a9a:	b002      	add	sp, #8
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	b004      	add	sp, #16
 8008aa2:	4770      	bx	lr
 8008aa4:	20000048 	.word	0x20000048

08008aa8 <quorem>:
 8008aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	6903      	ldr	r3, [r0, #16]
 8008aae:	690c      	ldr	r4, [r1, #16]
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	f2c0 8081 	blt.w	8008bba <quorem+0x112>
 8008ab8:	3c01      	subs	r4, #1
 8008aba:	f101 0814 	add.w	r8, r1, #20
 8008abe:	f100 0514 	add.w	r5, r0, #20
 8008ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ad8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008adc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ae0:	d331      	bcc.n	8008b46 <quorem+0x9e>
 8008ae2:	f04f 0e00 	mov.w	lr, #0
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	46ac      	mov	ip, r5
 8008aea:	46f2      	mov	sl, lr
 8008aec:	f850 2b04 	ldr.w	r2, [r0], #4
 8008af0:	b293      	uxth	r3, r2
 8008af2:	fb06 e303 	mla	r3, r6, r3, lr
 8008af6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	ebaa 0303 	sub.w	r3, sl, r3
 8008b00:	f8dc a000 	ldr.w	sl, [ip]
 8008b04:	0c12      	lsrs	r2, r2, #16
 8008b06:	fa13 f38a 	uxtah	r3, r3, sl
 8008b0a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	9b00      	ldr	r3, [sp, #0]
 8008b12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b16:	b292      	uxth	r2, r2
 8008b18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b20:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b24:	4581      	cmp	r9, r0
 8008b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b2a:	f84c 3b04 	str.w	r3, [ip], #4
 8008b2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b32:	d2db      	bcs.n	8008aec <quorem+0x44>
 8008b34:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b38:	b92b      	cbnz	r3, 8008b46 <quorem+0x9e>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	3b04      	subs	r3, #4
 8008b3e:	429d      	cmp	r5, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	d32e      	bcc.n	8008ba2 <quorem+0xfa>
 8008b44:	613c      	str	r4, [r7, #16]
 8008b46:	4638      	mov	r0, r7
 8008b48:	f001 f9b0 	bl	8009eac <__mcmp>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	db24      	blt.n	8008b9a <quorem+0xf2>
 8008b50:	3601      	adds	r6, #1
 8008b52:	4628      	mov	r0, r5
 8008b54:	f04f 0c00 	mov.w	ip, #0
 8008b58:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b5c:	f8d0 e000 	ldr.w	lr, [r0]
 8008b60:	b293      	uxth	r3, r2
 8008b62:	ebac 0303 	sub.w	r3, ip, r3
 8008b66:	0c12      	lsrs	r2, r2, #16
 8008b68:	fa13 f38e 	uxtah	r3, r3, lr
 8008b6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b7a:	45c1      	cmp	r9, r8
 8008b7c:	f840 3b04 	str.w	r3, [r0], #4
 8008b80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b84:	d2e8      	bcs.n	8008b58 <quorem+0xb0>
 8008b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b8e:	b922      	cbnz	r2, 8008b9a <quorem+0xf2>
 8008b90:	3b04      	subs	r3, #4
 8008b92:	429d      	cmp	r5, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	d30a      	bcc.n	8008bae <quorem+0x106>
 8008b98:	613c      	str	r4, [r7, #16]
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	b003      	add	sp, #12
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	6812      	ldr	r2, [r2, #0]
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	2a00      	cmp	r2, #0
 8008ba8:	d1cc      	bne.n	8008b44 <quorem+0x9c>
 8008baa:	3c01      	subs	r4, #1
 8008bac:	e7c7      	b.n	8008b3e <quorem+0x96>
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	d1f0      	bne.n	8008b98 <quorem+0xf0>
 8008bb6:	3c01      	subs	r4, #1
 8008bb8:	e7eb      	b.n	8008b92 <quorem+0xea>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e7ee      	b.n	8008b9c <quorem+0xf4>
	...

08008bc0 <_dtoa_r>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	ed2d 8b04 	vpush	{d8-d9}
 8008bc8:	ec57 6b10 	vmov	r6, r7, d0
 8008bcc:	b093      	sub	sp, #76	; 0x4c
 8008bce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bd4:	9106      	str	r1, [sp, #24]
 8008bd6:	ee10 aa10 	vmov	sl, s0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bde:	930c      	str	r3, [sp, #48]	; 0x30
 8008be0:	46bb      	mov	fp, r7
 8008be2:	b975      	cbnz	r5, 8008c02 <_dtoa_r+0x42>
 8008be4:	2010      	movs	r0, #16
 8008be6:	f000 fed7 	bl	8009998 <malloc>
 8008bea:	4602      	mov	r2, r0
 8008bec:	6260      	str	r0, [r4, #36]	; 0x24
 8008bee:	b920      	cbnz	r0, 8008bfa <_dtoa_r+0x3a>
 8008bf0:	4ba7      	ldr	r3, [pc, #668]	; (8008e90 <_dtoa_r+0x2d0>)
 8008bf2:	21ea      	movs	r1, #234	; 0xea
 8008bf4:	48a7      	ldr	r0, [pc, #668]	; (8008e94 <_dtoa_r+0x2d4>)
 8008bf6:	f001 fdd1 	bl	800a79c <__assert_func>
 8008bfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bfe:	6005      	str	r5, [r0, #0]
 8008c00:	60c5      	str	r5, [r0, #12]
 8008c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c04:	6819      	ldr	r1, [r3, #0]
 8008c06:	b151      	cbz	r1, 8008c1e <_dtoa_r+0x5e>
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	604a      	str	r2, [r1, #4]
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	4093      	lsls	r3, r2
 8008c10:	608b      	str	r3, [r1, #8]
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 ff08 	bl	8009a28 <_Bfree>
 8008c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	1e3b      	subs	r3, r7, #0
 8008c20:	bfaa      	itet	ge
 8008c22:	2300      	movge	r3, #0
 8008c24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c28:	f8c8 3000 	strge.w	r3, [r8]
 8008c2c:	4b9a      	ldr	r3, [pc, #616]	; (8008e98 <_dtoa_r+0x2d8>)
 8008c2e:	bfbc      	itt	lt
 8008c30:	2201      	movlt	r2, #1
 8008c32:	f8c8 2000 	strlt.w	r2, [r8]
 8008c36:	ea33 030b 	bics.w	r3, r3, fp
 8008c3a:	d11b      	bne.n	8008c74 <_dtoa_r+0xb4>
 8008c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c48:	4333      	orrs	r3, r6
 8008c4a:	f000 8592 	beq.w	8009772 <_dtoa_r+0xbb2>
 8008c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c50:	b963      	cbnz	r3, 8008c6c <_dtoa_r+0xac>
 8008c52:	4b92      	ldr	r3, [pc, #584]	; (8008e9c <_dtoa_r+0x2dc>)
 8008c54:	e022      	b.n	8008c9c <_dtoa_r+0xdc>
 8008c56:	4b92      	ldr	r3, [pc, #584]	; (8008ea0 <_dtoa_r+0x2e0>)
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	9801      	ldr	r0, [sp, #4]
 8008c62:	b013      	add	sp, #76	; 0x4c
 8008c64:	ecbd 8b04 	vpop	{d8-d9}
 8008c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6c:	4b8b      	ldr	r3, [pc, #556]	; (8008e9c <_dtoa_r+0x2dc>)
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	3303      	adds	r3, #3
 8008c72:	e7f3      	b.n	8008c5c <_dtoa_r+0x9c>
 8008c74:	2200      	movs	r2, #0
 8008c76:	2300      	movs	r3, #0
 8008c78:	4650      	mov	r0, sl
 8008c7a:	4659      	mov	r1, fp
 8008c7c:	f7f7 ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c80:	ec4b ab19 	vmov	d9, sl, fp
 8008c84:	4680      	mov	r8, r0
 8008c86:	b158      	cbz	r0, 8008ca0 <_dtoa_r+0xe0>
 8008c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 856b 	beq.w	800976c <_dtoa_r+0xbac>
 8008c96:	4883      	ldr	r0, [pc, #524]	; (8008ea4 <_dtoa_r+0x2e4>)
 8008c98:	6018      	str	r0, [r3, #0]
 8008c9a:	1e43      	subs	r3, r0, #1
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	e7df      	b.n	8008c60 <_dtoa_r+0xa0>
 8008ca0:	ec4b ab10 	vmov	d0, sl, fp
 8008ca4:	aa10      	add	r2, sp, #64	; 0x40
 8008ca6:	a911      	add	r1, sp, #68	; 0x44
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 f9a5 	bl	8009ff8 <__d2b>
 8008cae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cb2:	ee08 0a10 	vmov	s16, r0
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	f000 8084 	beq.w	8008dc4 <_dtoa_r+0x204>
 8008cbc:	ee19 3a90 	vmov	r3, s19
 8008cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cc8:	4656      	mov	r6, sl
 8008cca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cd6:	4b74      	ldr	r3, [pc, #464]	; (8008ea8 <_dtoa_r+0x2e8>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 fadb 	bl	8000298 <__aeabi_dsub>
 8008ce2:	a365      	add	r3, pc, #404	; (adr r3, 8008e78 <_dtoa_r+0x2b8>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	f7f7 fc8e 	bl	8000608 <__aeabi_dmul>
 8008cec:	a364      	add	r3, pc, #400	; (adr r3, 8008e80 <_dtoa_r+0x2c0>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fad3 	bl	800029c <__adddf3>
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	460f      	mov	r7, r1
 8008cfc:	f7f7 fc1a 	bl	8000534 <__aeabi_i2d>
 8008d00:	a361      	add	r3, pc, #388	; (adr r3, 8008e88 <_dtoa_r+0x2c8>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fc7f 	bl	8000608 <__aeabi_dmul>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4630      	mov	r0, r6
 8008d10:	4639      	mov	r1, r7
 8008d12:	f7f7 fac3 	bl	800029c <__adddf3>
 8008d16:	4606      	mov	r6, r0
 8008d18:	460f      	mov	r7, r1
 8008d1a:	f7f7 ff25 	bl	8000b68 <__aeabi_d2iz>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	9000      	str	r0, [sp, #0]
 8008d22:	2300      	movs	r3, #0
 8008d24:	4630      	mov	r0, r6
 8008d26:	4639      	mov	r1, r7
 8008d28:	f7f7 fee0 	bl	8000aec <__aeabi_dcmplt>
 8008d2c:	b150      	cbz	r0, 8008d44 <_dtoa_r+0x184>
 8008d2e:	9800      	ldr	r0, [sp, #0]
 8008d30:	f7f7 fc00 	bl	8000534 <__aeabi_i2d>
 8008d34:	4632      	mov	r2, r6
 8008d36:	463b      	mov	r3, r7
 8008d38:	f7f7 fece 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d3c:	b910      	cbnz	r0, 8008d44 <_dtoa_r+0x184>
 8008d3e:	9b00      	ldr	r3, [sp, #0]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	2b16      	cmp	r3, #22
 8008d48:	d85a      	bhi.n	8008e00 <_dtoa_r+0x240>
 8008d4a:	9a00      	ldr	r2, [sp, #0]
 8008d4c:	4b57      	ldr	r3, [pc, #348]	; (8008eac <_dtoa_r+0x2ec>)
 8008d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	ec51 0b19 	vmov	r0, r1, d9
 8008d5a:	f7f7 fec7 	bl	8000aec <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d050      	beq.n	8008e04 <_dtoa_r+0x244>
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d6e:	1b5d      	subs	r5, r3, r5
 8008d70:	1e6b      	subs	r3, r5, #1
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	bf45      	ittet	mi
 8008d76:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d7a:	9304      	strmi	r3, [sp, #16]
 8008d7c:	2300      	movpl	r3, #0
 8008d7e:	2300      	movmi	r3, #0
 8008d80:	bf4c      	ite	mi
 8008d82:	9305      	strmi	r3, [sp, #20]
 8008d84:	9304      	strpl	r3, [sp, #16]
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	db3d      	blt.n	8008e08 <_dtoa_r+0x248>
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	9a00      	ldr	r2, [sp, #0]
 8008d90:	920a      	str	r2, [sp, #40]	; 0x28
 8008d92:	4413      	add	r3, r2
 8008d94:	9305      	str	r3, [sp, #20]
 8008d96:	2300      	movs	r3, #0
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	9b06      	ldr	r3, [sp, #24]
 8008d9c:	2b09      	cmp	r3, #9
 8008d9e:	f200 8089 	bhi.w	8008eb4 <_dtoa_r+0x2f4>
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	bfc4      	itt	gt
 8008da6:	3b04      	subgt	r3, #4
 8008da8:	9306      	strgt	r3, [sp, #24]
 8008daa:	9b06      	ldr	r3, [sp, #24]
 8008dac:	f1a3 0302 	sub.w	r3, r3, #2
 8008db0:	bfcc      	ite	gt
 8008db2:	2500      	movgt	r5, #0
 8008db4:	2501      	movle	r5, #1
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	f200 8087 	bhi.w	8008eca <_dtoa_r+0x30a>
 8008dbc:	e8df f003 	tbb	[pc, r3]
 8008dc0:	59383a2d 	.word	0x59383a2d
 8008dc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dc8:	441d      	add	r5, r3
 8008dca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	bfc1      	itttt	gt
 8008dd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dda:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008de2:	bfda      	itte	le
 8008de4:	f1c3 0320 	rsble	r3, r3, #32
 8008de8:	fa06 f003 	lslle.w	r0, r6, r3
 8008dec:	4318      	orrgt	r0, r3
 8008dee:	f7f7 fb91 	bl	8000514 <__aeabi_ui2d>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4606      	mov	r6, r0
 8008df6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008dfa:	3d01      	subs	r5, #1
 8008dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8008dfe:	e76a      	b.n	8008cd6 <_dtoa_r+0x116>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e7b2      	b.n	8008d6a <_dtoa_r+0x1aa>
 8008e04:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e06:	e7b1      	b.n	8008d6c <_dtoa_r+0x1ac>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	9a00      	ldr	r2, [sp, #0]
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	9304      	str	r3, [sp, #16]
 8008e10:	4253      	negs	r3, r2
 8008e12:	9307      	str	r3, [sp, #28]
 8008e14:	2300      	movs	r3, #0
 8008e16:	930a      	str	r3, [sp, #40]	; 0x28
 8008e18:	e7bf      	b.n	8008d9a <_dtoa_r+0x1da>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9308      	str	r3, [sp, #32]
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dc55      	bgt.n	8008ed0 <_dtoa_r+0x310>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e2e:	e00c      	b.n	8008e4a <_dtoa_r+0x28a>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e7f3      	b.n	8008e1c <_dtoa_r+0x25c>
 8008e34:	2300      	movs	r3, #0
 8008e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e38:	9308      	str	r3, [sp, #32]
 8008e3a:	9b00      	ldr	r3, [sp, #0]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	9302      	str	r3, [sp, #8]
 8008e40:	3301      	adds	r3, #1
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	bfb8      	it	lt
 8008e48:	2301      	movlt	r3, #1
 8008e4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	6042      	str	r2, [r0, #4]
 8008e50:	2204      	movs	r2, #4
 8008e52:	f102 0614 	add.w	r6, r2, #20
 8008e56:	429e      	cmp	r6, r3
 8008e58:	6841      	ldr	r1, [r0, #4]
 8008e5a:	d93d      	bls.n	8008ed8 <_dtoa_r+0x318>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 fda3 	bl	80099a8 <_Balloc>
 8008e62:	9001      	str	r0, [sp, #4]
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d13b      	bne.n	8008ee0 <_dtoa_r+0x320>
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <_dtoa_r+0x2f0>)
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e70:	e6c0      	b.n	8008bf4 <_dtoa_r+0x34>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e7df      	b.n	8008e36 <_dtoa_r+0x276>
 8008e76:	bf00      	nop
 8008e78:	636f4361 	.word	0x636f4361
 8008e7c:	3fd287a7 	.word	0x3fd287a7
 8008e80:	8b60c8b3 	.word	0x8b60c8b3
 8008e84:	3fc68a28 	.word	0x3fc68a28
 8008e88:	509f79fb 	.word	0x509f79fb
 8008e8c:	3fd34413 	.word	0x3fd34413
 8008e90:	0800c7ad 	.word	0x0800c7ad
 8008e94:	0800c7c4 	.word	0x0800c7c4
 8008e98:	7ff00000 	.word	0x7ff00000
 8008e9c:	0800c7a9 	.word	0x0800c7a9
 8008ea0:	0800c7a0 	.word	0x0800c7a0
 8008ea4:	0800c77d 	.word	0x0800c77d
 8008ea8:	3ff80000 	.word	0x3ff80000
 8008eac:	0800c918 	.word	0x0800c918
 8008eb0:	0800c81f 	.word	0x0800c81f
 8008eb4:	2501      	movs	r5, #1
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9306      	str	r3, [sp, #24]
 8008eba:	9508      	str	r5, [sp, #32]
 8008ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ec0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2312      	movs	r3, #18
 8008ec8:	e7b0      	b.n	8008e2c <_dtoa_r+0x26c>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	9308      	str	r3, [sp, #32]
 8008ece:	e7f5      	b.n	8008ebc <_dtoa_r+0x2fc>
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ed6:	e7b8      	b.n	8008e4a <_dtoa_r+0x28a>
 8008ed8:	3101      	adds	r1, #1
 8008eda:	6041      	str	r1, [r0, #4]
 8008edc:	0052      	lsls	r2, r2, #1
 8008ede:	e7b8      	b.n	8008e52 <_dtoa_r+0x292>
 8008ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee2:	9a01      	ldr	r2, [sp, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	2b0e      	cmp	r3, #14
 8008eea:	f200 809d 	bhi.w	8009028 <_dtoa_r+0x468>
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	f000 809a 	beq.w	8009028 <_dtoa_r+0x468>
 8008ef4:	9b00      	ldr	r3, [sp, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dd32      	ble.n	8008f60 <_dtoa_r+0x3a0>
 8008efa:	4ab7      	ldr	r2, [pc, #732]	; (80091d8 <_dtoa_r+0x618>)
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f08:	9b00      	ldr	r3, [sp, #0]
 8008f0a:	05d8      	lsls	r0, r3, #23
 8008f0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f10:	d516      	bpl.n	8008f40 <_dtoa_r+0x380>
 8008f12:	4bb2      	ldr	r3, [pc, #712]	; (80091dc <_dtoa_r+0x61c>)
 8008f14:	ec51 0b19 	vmov	r0, r1, d9
 8008f18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f1c:	f7f7 fc9e 	bl	800085c <__aeabi_ddiv>
 8008f20:	f007 070f 	and.w	r7, r7, #15
 8008f24:	4682      	mov	sl, r0
 8008f26:	468b      	mov	fp, r1
 8008f28:	2503      	movs	r5, #3
 8008f2a:	4eac      	ldr	r6, [pc, #688]	; (80091dc <_dtoa_r+0x61c>)
 8008f2c:	b957      	cbnz	r7, 8008f44 <_dtoa_r+0x384>
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	4650      	mov	r0, sl
 8008f34:	4659      	mov	r1, fp
 8008f36:	f7f7 fc91 	bl	800085c <__aeabi_ddiv>
 8008f3a:	4682      	mov	sl, r0
 8008f3c:	468b      	mov	fp, r1
 8008f3e:	e028      	b.n	8008f92 <_dtoa_r+0x3d2>
 8008f40:	2502      	movs	r5, #2
 8008f42:	e7f2      	b.n	8008f2a <_dtoa_r+0x36a>
 8008f44:	07f9      	lsls	r1, r7, #31
 8008f46:	d508      	bpl.n	8008f5a <_dtoa_r+0x39a>
 8008f48:	4640      	mov	r0, r8
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f50:	f7f7 fb5a 	bl	8000608 <__aeabi_dmul>
 8008f54:	3501      	adds	r5, #1
 8008f56:	4680      	mov	r8, r0
 8008f58:	4689      	mov	r9, r1
 8008f5a:	107f      	asrs	r7, r7, #1
 8008f5c:	3608      	adds	r6, #8
 8008f5e:	e7e5      	b.n	8008f2c <_dtoa_r+0x36c>
 8008f60:	f000 809b 	beq.w	800909a <_dtoa_r+0x4da>
 8008f64:	9b00      	ldr	r3, [sp, #0]
 8008f66:	4f9d      	ldr	r7, [pc, #628]	; (80091dc <_dtoa_r+0x61c>)
 8008f68:	425e      	negs	r6, r3
 8008f6a:	4b9b      	ldr	r3, [pc, #620]	; (80091d8 <_dtoa_r+0x618>)
 8008f6c:	f006 020f 	and.w	r2, r6, #15
 8008f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	ec51 0b19 	vmov	r0, r1, d9
 8008f7c:	f7f7 fb44 	bl	8000608 <__aeabi_dmul>
 8008f80:	1136      	asrs	r6, r6, #4
 8008f82:	4682      	mov	sl, r0
 8008f84:	468b      	mov	fp, r1
 8008f86:	2300      	movs	r3, #0
 8008f88:	2502      	movs	r5, #2
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d17a      	bne.n	8009084 <_dtoa_r+0x4c4>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1d3      	bne.n	8008f3a <_dtoa_r+0x37a>
 8008f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8082 	beq.w	800909e <_dtoa_r+0x4de>
 8008f9a:	4b91      	ldr	r3, [pc, #580]	; (80091e0 <_dtoa_r+0x620>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	f7f7 fda3 	bl	8000aec <__aeabi_dcmplt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d079      	beq.n	800909e <_dtoa_r+0x4de>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d076      	beq.n	800909e <_dtoa_r+0x4de>
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd36      	ble.n	8009024 <_dtoa_r+0x464>
 8008fb6:	9b00      	ldr	r3, [sp, #0]
 8008fb8:	4650      	mov	r0, sl
 8008fba:	4659      	mov	r1, fp
 8008fbc:	1e5f      	subs	r7, r3, #1
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4b88      	ldr	r3, [pc, #544]	; (80091e4 <_dtoa_r+0x624>)
 8008fc2:	f7f7 fb21 	bl	8000608 <__aeabi_dmul>
 8008fc6:	9e02      	ldr	r6, [sp, #8]
 8008fc8:	4682      	mov	sl, r0
 8008fca:	468b      	mov	fp, r1
 8008fcc:	3501      	adds	r5, #1
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7f7 fab0 	bl	8000534 <__aeabi_i2d>
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	f7f7 fb16 	bl	8000608 <__aeabi_dmul>
 8008fdc:	4b82      	ldr	r3, [pc, #520]	; (80091e8 <_dtoa_r+0x628>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f7f7 f95c 	bl	800029c <__adddf3>
 8008fe4:	46d0      	mov	r8, sl
 8008fe6:	46d9      	mov	r9, fp
 8008fe8:	4682      	mov	sl, r0
 8008fea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	d158      	bne.n	80090a4 <_dtoa_r+0x4e4>
 8008ff2:	4b7e      	ldr	r3, [pc, #504]	; (80091ec <_dtoa_r+0x62c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	f7f7 f94d 	bl	8000298 <__aeabi_dsub>
 8008ffe:	4652      	mov	r2, sl
 8009000:	465b      	mov	r3, fp
 8009002:	4680      	mov	r8, r0
 8009004:	4689      	mov	r9, r1
 8009006:	f7f7 fd8f 	bl	8000b28 <__aeabi_dcmpgt>
 800900a:	2800      	cmp	r0, #0
 800900c:	f040 8295 	bne.w	800953a <_dtoa_r+0x97a>
 8009010:	4652      	mov	r2, sl
 8009012:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009016:	4640      	mov	r0, r8
 8009018:	4649      	mov	r1, r9
 800901a:	f7f7 fd67 	bl	8000aec <__aeabi_dcmplt>
 800901e:	2800      	cmp	r0, #0
 8009020:	f040 8289 	bne.w	8009536 <_dtoa_r+0x976>
 8009024:	ec5b ab19 	vmov	sl, fp, d9
 8009028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800902a:	2b00      	cmp	r3, #0
 800902c:	f2c0 8148 	blt.w	80092c0 <_dtoa_r+0x700>
 8009030:	9a00      	ldr	r2, [sp, #0]
 8009032:	2a0e      	cmp	r2, #14
 8009034:	f300 8144 	bgt.w	80092c0 <_dtoa_r+0x700>
 8009038:	4b67      	ldr	r3, [pc, #412]	; (80091d8 <_dtoa_r+0x618>)
 800903a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800903e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	f280 80d5 	bge.w	80091f4 <_dtoa_r+0x634>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f300 80d1 	bgt.w	80091f4 <_dtoa_r+0x634>
 8009052:	f040 826f 	bne.w	8009534 <_dtoa_r+0x974>
 8009056:	4b65      	ldr	r3, [pc, #404]	; (80091ec <_dtoa_r+0x62c>)
 8009058:	2200      	movs	r2, #0
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 fad3 	bl	8000608 <__aeabi_dmul>
 8009062:	4652      	mov	r2, sl
 8009064:	465b      	mov	r3, fp
 8009066:	f7f7 fd55 	bl	8000b14 <__aeabi_dcmpge>
 800906a:	9e03      	ldr	r6, [sp, #12]
 800906c:	4637      	mov	r7, r6
 800906e:	2800      	cmp	r0, #0
 8009070:	f040 8245 	bne.w	80094fe <_dtoa_r+0x93e>
 8009074:	9d01      	ldr	r5, [sp, #4]
 8009076:	2331      	movs	r3, #49	; 0x31
 8009078:	f805 3b01 	strb.w	r3, [r5], #1
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	3301      	adds	r3, #1
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	e240      	b.n	8009506 <_dtoa_r+0x946>
 8009084:	07f2      	lsls	r2, r6, #31
 8009086:	d505      	bpl.n	8009094 <_dtoa_r+0x4d4>
 8009088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908c:	f7f7 fabc 	bl	8000608 <__aeabi_dmul>
 8009090:	3501      	adds	r5, #1
 8009092:	2301      	movs	r3, #1
 8009094:	1076      	asrs	r6, r6, #1
 8009096:	3708      	adds	r7, #8
 8009098:	e777      	b.n	8008f8a <_dtoa_r+0x3ca>
 800909a:	2502      	movs	r5, #2
 800909c:	e779      	b.n	8008f92 <_dtoa_r+0x3d2>
 800909e:	9f00      	ldr	r7, [sp, #0]
 80090a0:	9e03      	ldr	r6, [sp, #12]
 80090a2:	e794      	b.n	8008fce <_dtoa_r+0x40e>
 80090a4:	9901      	ldr	r1, [sp, #4]
 80090a6:	4b4c      	ldr	r3, [pc, #304]	; (80091d8 <_dtoa_r+0x618>)
 80090a8:	4431      	add	r1, r6
 80090aa:	910d      	str	r1, [sp, #52]	; 0x34
 80090ac:	9908      	ldr	r1, [sp, #32]
 80090ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d043      	beq.n	8009142 <_dtoa_r+0x582>
 80090ba:	494d      	ldr	r1, [pc, #308]	; (80091f0 <_dtoa_r+0x630>)
 80090bc:	2000      	movs	r0, #0
 80090be:	f7f7 fbcd 	bl	800085c <__aeabi_ddiv>
 80090c2:	4652      	mov	r2, sl
 80090c4:	465b      	mov	r3, fp
 80090c6:	f7f7 f8e7 	bl	8000298 <__aeabi_dsub>
 80090ca:	9d01      	ldr	r5, [sp, #4]
 80090cc:	4682      	mov	sl, r0
 80090ce:	468b      	mov	fp, r1
 80090d0:	4649      	mov	r1, r9
 80090d2:	4640      	mov	r0, r8
 80090d4:	f7f7 fd48 	bl	8000b68 <__aeabi_d2iz>
 80090d8:	4606      	mov	r6, r0
 80090da:	f7f7 fa2b 	bl	8000534 <__aeabi_i2d>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 f8d7 	bl	8000298 <__aeabi_dsub>
 80090ea:	3630      	adds	r6, #48	; 0x30
 80090ec:	f805 6b01 	strb.w	r6, [r5], #1
 80090f0:	4652      	mov	r2, sl
 80090f2:	465b      	mov	r3, fp
 80090f4:	4680      	mov	r8, r0
 80090f6:	4689      	mov	r9, r1
 80090f8:	f7f7 fcf8 	bl	8000aec <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d163      	bne.n	80091c8 <_dtoa_r+0x608>
 8009100:	4642      	mov	r2, r8
 8009102:	464b      	mov	r3, r9
 8009104:	4936      	ldr	r1, [pc, #216]	; (80091e0 <_dtoa_r+0x620>)
 8009106:	2000      	movs	r0, #0
 8009108:	f7f7 f8c6 	bl	8000298 <__aeabi_dsub>
 800910c:	4652      	mov	r2, sl
 800910e:	465b      	mov	r3, fp
 8009110:	f7f7 fcec 	bl	8000aec <__aeabi_dcmplt>
 8009114:	2800      	cmp	r0, #0
 8009116:	f040 80b5 	bne.w	8009284 <_dtoa_r+0x6c4>
 800911a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800911c:	429d      	cmp	r5, r3
 800911e:	d081      	beq.n	8009024 <_dtoa_r+0x464>
 8009120:	4b30      	ldr	r3, [pc, #192]	; (80091e4 <_dtoa_r+0x624>)
 8009122:	2200      	movs	r2, #0
 8009124:	4650      	mov	r0, sl
 8009126:	4659      	mov	r1, fp
 8009128:	f7f7 fa6e 	bl	8000608 <__aeabi_dmul>
 800912c:	4b2d      	ldr	r3, [pc, #180]	; (80091e4 <_dtoa_r+0x624>)
 800912e:	4682      	mov	sl, r0
 8009130:	468b      	mov	fp, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	2200      	movs	r2, #0
 8009138:	f7f7 fa66 	bl	8000608 <__aeabi_dmul>
 800913c:	4680      	mov	r8, r0
 800913e:	4689      	mov	r9, r1
 8009140:	e7c6      	b.n	80090d0 <_dtoa_r+0x510>
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	f7f7 fa5f 	bl	8000608 <__aeabi_dmul>
 800914a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800914c:	9d01      	ldr	r5, [sp, #4]
 800914e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009150:	4682      	mov	sl, r0
 8009152:	468b      	mov	fp, r1
 8009154:	4649      	mov	r1, r9
 8009156:	4640      	mov	r0, r8
 8009158:	f7f7 fd06 	bl	8000b68 <__aeabi_d2iz>
 800915c:	4606      	mov	r6, r0
 800915e:	f7f7 f9e9 	bl	8000534 <__aeabi_i2d>
 8009162:	3630      	adds	r6, #48	; 0x30
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4640      	mov	r0, r8
 800916a:	4649      	mov	r1, r9
 800916c:	f7f7 f894 	bl	8000298 <__aeabi_dsub>
 8009170:	f805 6b01 	strb.w	r6, [r5], #1
 8009174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009176:	429d      	cmp	r5, r3
 8009178:	4680      	mov	r8, r0
 800917a:	4689      	mov	r9, r1
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	d124      	bne.n	80091cc <_dtoa_r+0x60c>
 8009182:	4b1b      	ldr	r3, [pc, #108]	; (80091f0 <_dtoa_r+0x630>)
 8009184:	4650      	mov	r0, sl
 8009186:	4659      	mov	r1, fp
 8009188:	f7f7 f888 	bl	800029c <__adddf3>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4640      	mov	r0, r8
 8009192:	4649      	mov	r1, r9
 8009194:	f7f7 fcc8 	bl	8000b28 <__aeabi_dcmpgt>
 8009198:	2800      	cmp	r0, #0
 800919a:	d173      	bne.n	8009284 <_dtoa_r+0x6c4>
 800919c:	4652      	mov	r2, sl
 800919e:	465b      	mov	r3, fp
 80091a0:	4913      	ldr	r1, [pc, #76]	; (80091f0 <_dtoa_r+0x630>)
 80091a2:	2000      	movs	r0, #0
 80091a4:	f7f7 f878 	bl	8000298 <__aeabi_dsub>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4640      	mov	r0, r8
 80091ae:	4649      	mov	r1, r9
 80091b0:	f7f7 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f43f af35 	beq.w	8009024 <_dtoa_r+0x464>
 80091ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091bc:	1e6b      	subs	r3, r5, #1
 80091be:	930f      	str	r3, [sp, #60]	; 0x3c
 80091c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091c4:	2b30      	cmp	r3, #48	; 0x30
 80091c6:	d0f8      	beq.n	80091ba <_dtoa_r+0x5fa>
 80091c8:	9700      	str	r7, [sp, #0]
 80091ca:	e049      	b.n	8009260 <_dtoa_r+0x6a0>
 80091cc:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <_dtoa_r+0x624>)
 80091ce:	f7f7 fa1b 	bl	8000608 <__aeabi_dmul>
 80091d2:	4680      	mov	r8, r0
 80091d4:	4689      	mov	r9, r1
 80091d6:	e7bd      	b.n	8009154 <_dtoa_r+0x594>
 80091d8:	0800c918 	.word	0x0800c918
 80091dc:	0800c8f0 	.word	0x0800c8f0
 80091e0:	3ff00000 	.word	0x3ff00000
 80091e4:	40240000 	.word	0x40240000
 80091e8:	401c0000 	.word	0x401c0000
 80091ec:	40140000 	.word	0x40140000
 80091f0:	3fe00000 	.word	0x3fe00000
 80091f4:	9d01      	ldr	r5, [sp, #4]
 80091f6:	4656      	mov	r6, sl
 80091f8:	465f      	mov	r7, fp
 80091fa:	4642      	mov	r2, r8
 80091fc:	464b      	mov	r3, r9
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 fb2b 	bl	800085c <__aeabi_ddiv>
 8009206:	f7f7 fcaf 	bl	8000b68 <__aeabi_d2iz>
 800920a:	4682      	mov	sl, r0
 800920c:	f7f7 f992 	bl	8000534 <__aeabi_i2d>
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	f7f7 f9f8 	bl	8000608 <__aeabi_dmul>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009224:	f7f7 f838 	bl	8000298 <__aeabi_dsub>
 8009228:	f805 6b01 	strb.w	r6, [r5], #1
 800922c:	9e01      	ldr	r6, [sp, #4]
 800922e:	9f03      	ldr	r7, [sp, #12]
 8009230:	1bae      	subs	r6, r5, r6
 8009232:	42b7      	cmp	r7, r6
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	d135      	bne.n	80092a6 <_dtoa_r+0x6e6>
 800923a:	f7f7 f82f 	bl	800029c <__adddf3>
 800923e:	4642      	mov	r2, r8
 8009240:	464b      	mov	r3, r9
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	f7f7 fc6f 	bl	8000b28 <__aeabi_dcmpgt>
 800924a:	b9d0      	cbnz	r0, 8009282 <_dtoa_r+0x6c2>
 800924c:	4642      	mov	r2, r8
 800924e:	464b      	mov	r3, r9
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009258:	b110      	cbz	r0, 8009260 <_dtoa_r+0x6a0>
 800925a:	f01a 0f01 	tst.w	sl, #1
 800925e:	d110      	bne.n	8009282 <_dtoa_r+0x6c2>
 8009260:	4620      	mov	r0, r4
 8009262:	ee18 1a10 	vmov	r1, s16
 8009266:	f000 fbdf 	bl	8009a28 <_Bfree>
 800926a:	2300      	movs	r3, #0
 800926c:	9800      	ldr	r0, [sp, #0]
 800926e:	702b      	strb	r3, [r5, #0]
 8009270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009272:	3001      	adds	r0, #1
 8009274:	6018      	str	r0, [r3, #0]
 8009276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009278:	2b00      	cmp	r3, #0
 800927a:	f43f acf1 	beq.w	8008c60 <_dtoa_r+0xa0>
 800927e:	601d      	str	r5, [r3, #0]
 8009280:	e4ee      	b.n	8008c60 <_dtoa_r+0xa0>
 8009282:	9f00      	ldr	r7, [sp, #0]
 8009284:	462b      	mov	r3, r5
 8009286:	461d      	mov	r5, r3
 8009288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800928c:	2a39      	cmp	r2, #57	; 0x39
 800928e:	d106      	bne.n	800929e <_dtoa_r+0x6de>
 8009290:	9a01      	ldr	r2, [sp, #4]
 8009292:	429a      	cmp	r2, r3
 8009294:	d1f7      	bne.n	8009286 <_dtoa_r+0x6c6>
 8009296:	9901      	ldr	r1, [sp, #4]
 8009298:	2230      	movs	r2, #48	; 0x30
 800929a:	3701      	adds	r7, #1
 800929c:	700a      	strb	r2, [r1, #0]
 800929e:	781a      	ldrb	r2, [r3, #0]
 80092a0:	3201      	adds	r2, #1
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e790      	b.n	80091c8 <_dtoa_r+0x608>
 80092a6:	4ba6      	ldr	r3, [pc, #664]	; (8009540 <_dtoa_r+0x980>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f9ad 	bl	8000608 <__aeabi_dmul>
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	460f      	mov	r7, r1
 80092b6:	f7f7 fc0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d09d      	beq.n	80091fa <_dtoa_r+0x63a>
 80092be:	e7cf      	b.n	8009260 <_dtoa_r+0x6a0>
 80092c0:	9a08      	ldr	r2, [sp, #32]
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	f000 80d7 	beq.w	8009476 <_dtoa_r+0x8b6>
 80092c8:	9a06      	ldr	r2, [sp, #24]
 80092ca:	2a01      	cmp	r2, #1
 80092cc:	f300 80ba 	bgt.w	8009444 <_dtoa_r+0x884>
 80092d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	f000 80b2 	beq.w	800943c <_dtoa_r+0x87c>
 80092d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092dc:	9e07      	ldr	r6, [sp, #28]
 80092de:	9d04      	ldr	r5, [sp, #16]
 80092e0:	9a04      	ldr	r2, [sp, #16]
 80092e2:	441a      	add	r2, r3
 80092e4:	9204      	str	r2, [sp, #16]
 80092e6:	9a05      	ldr	r2, [sp, #20]
 80092e8:	2101      	movs	r1, #1
 80092ea:	441a      	add	r2, r3
 80092ec:	4620      	mov	r0, r4
 80092ee:	9205      	str	r2, [sp, #20]
 80092f0:	f000 fc52 	bl	8009b98 <__i2b>
 80092f4:	4607      	mov	r7, r0
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	dd0c      	ble.n	8009314 <_dtoa_r+0x754>
 80092fa:	9b05      	ldr	r3, [sp, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	dd09      	ble.n	8009314 <_dtoa_r+0x754>
 8009300:	42ab      	cmp	r3, r5
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	bfa8      	it	ge
 8009306:	462b      	movge	r3, r5
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	9204      	str	r2, [sp, #16]
 800930c:	9a05      	ldr	r2, [sp, #20]
 800930e:	1aed      	subs	r5, r5, r3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	9305      	str	r3, [sp, #20]
 8009314:	9b07      	ldr	r3, [sp, #28]
 8009316:	b31b      	cbz	r3, 8009360 <_dtoa_r+0x7a0>
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 80af 	beq.w	800947e <_dtoa_r+0x8be>
 8009320:	2e00      	cmp	r6, #0
 8009322:	dd13      	ble.n	800934c <_dtoa_r+0x78c>
 8009324:	4639      	mov	r1, r7
 8009326:	4632      	mov	r2, r6
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fcf5 	bl	8009d18 <__pow5mult>
 800932e:	ee18 2a10 	vmov	r2, s16
 8009332:	4601      	mov	r1, r0
 8009334:	4607      	mov	r7, r0
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fc44 	bl	8009bc4 <__multiply>
 800933c:	ee18 1a10 	vmov	r1, s16
 8009340:	4680      	mov	r8, r0
 8009342:	4620      	mov	r0, r4
 8009344:	f000 fb70 	bl	8009a28 <_Bfree>
 8009348:	ee08 8a10 	vmov	s16, r8
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	1b9a      	subs	r2, r3, r6
 8009350:	d006      	beq.n	8009360 <_dtoa_r+0x7a0>
 8009352:	ee18 1a10 	vmov	r1, s16
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fcde 	bl	8009d18 <__pow5mult>
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	2101      	movs	r1, #1
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fc18 	bl	8009b98 <__i2b>
 8009368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936a:	2b00      	cmp	r3, #0
 800936c:	4606      	mov	r6, r0
 800936e:	f340 8088 	ble.w	8009482 <_dtoa_r+0x8c2>
 8009372:	461a      	mov	r2, r3
 8009374:	4601      	mov	r1, r0
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fcce 	bl	8009d18 <__pow5mult>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	2b01      	cmp	r3, #1
 8009380:	4606      	mov	r6, r0
 8009382:	f340 8081 	ble.w	8009488 <_dtoa_r+0x8c8>
 8009386:	f04f 0800 	mov.w	r8, #0
 800938a:	6933      	ldr	r3, [r6, #16]
 800938c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009390:	6918      	ldr	r0, [r3, #16]
 8009392:	f000 fbb1 	bl	8009af8 <__hi0bits>
 8009396:	f1c0 0020 	rsb	r0, r0, #32
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	4418      	add	r0, r3
 800939e:	f010 001f 	ands.w	r0, r0, #31
 80093a2:	f000 8092 	beq.w	80094ca <_dtoa_r+0x90a>
 80093a6:	f1c0 0320 	rsb	r3, r0, #32
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	f340 808a 	ble.w	80094c4 <_dtoa_r+0x904>
 80093b0:	f1c0 001c 	rsb	r0, r0, #28
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	4403      	add	r3, r0
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	4403      	add	r3, r0
 80093be:	4405      	add	r5, r0
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	9b04      	ldr	r3, [sp, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dd07      	ble.n	80093d8 <_dtoa_r+0x818>
 80093c8:	ee18 1a10 	vmov	r1, s16
 80093cc:	461a      	mov	r2, r3
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 fcfc 	bl	8009dcc <__lshift>
 80093d4:	ee08 0a10 	vmov	s16, r0
 80093d8:	9b05      	ldr	r3, [sp, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dd05      	ble.n	80093ea <_dtoa_r+0x82a>
 80093de:	4631      	mov	r1, r6
 80093e0:	461a      	mov	r2, r3
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fcf2 	bl	8009dcc <__lshift>
 80093e8:	4606      	mov	r6, r0
 80093ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d06e      	beq.n	80094ce <_dtoa_r+0x90e>
 80093f0:	ee18 0a10 	vmov	r0, s16
 80093f4:	4631      	mov	r1, r6
 80093f6:	f000 fd59 	bl	8009eac <__mcmp>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	da67      	bge.n	80094ce <_dtoa_r+0x90e>
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	3b01      	subs	r3, #1
 8009402:	ee18 1a10 	vmov	r1, s16
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	220a      	movs	r2, #10
 800940a:	2300      	movs	r3, #0
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fb2d 	bl	8009a6c <__multadd>
 8009412:	9b08      	ldr	r3, [sp, #32]
 8009414:	ee08 0a10 	vmov	s16, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 81b1 	beq.w	8009780 <_dtoa_r+0xbc0>
 800941e:	2300      	movs	r3, #0
 8009420:	4639      	mov	r1, r7
 8009422:	220a      	movs	r2, #10
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fb21 	bl	8009a6c <__multadd>
 800942a:	9b02      	ldr	r3, [sp, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	4607      	mov	r7, r0
 8009430:	f300 808e 	bgt.w	8009550 <_dtoa_r+0x990>
 8009434:	9b06      	ldr	r3, [sp, #24]
 8009436:	2b02      	cmp	r3, #2
 8009438:	dc51      	bgt.n	80094de <_dtoa_r+0x91e>
 800943a:	e089      	b.n	8009550 <_dtoa_r+0x990>
 800943c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800943e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009442:	e74b      	b.n	80092dc <_dtoa_r+0x71c>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	1e5e      	subs	r6, r3, #1
 8009448:	9b07      	ldr	r3, [sp, #28]
 800944a:	42b3      	cmp	r3, r6
 800944c:	bfbf      	itttt	lt
 800944e:	9b07      	ldrlt	r3, [sp, #28]
 8009450:	9607      	strlt	r6, [sp, #28]
 8009452:	1af2      	sublt	r2, r6, r3
 8009454:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009456:	bfb6      	itet	lt
 8009458:	189b      	addlt	r3, r3, r2
 800945a:	1b9e      	subge	r6, r3, r6
 800945c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	bfb8      	it	lt
 8009462:	2600      	movlt	r6, #0
 8009464:	2b00      	cmp	r3, #0
 8009466:	bfb7      	itett	lt
 8009468:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800946c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009470:	1a9d      	sublt	r5, r3, r2
 8009472:	2300      	movlt	r3, #0
 8009474:	e734      	b.n	80092e0 <_dtoa_r+0x720>
 8009476:	9e07      	ldr	r6, [sp, #28]
 8009478:	9d04      	ldr	r5, [sp, #16]
 800947a:	9f08      	ldr	r7, [sp, #32]
 800947c:	e73b      	b.n	80092f6 <_dtoa_r+0x736>
 800947e:	9a07      	ldr	r2, [sp, #28]
 8009480:	e767      	b.n	8009352 <_dtoa_r+0x792>
 8009482:	9b06      	ldr	r3, [sp, #24]
 8009484:	2b01      	cmp	r3, #1
 8009486:	dc18      	bgt.n	80094ba <_dtoa_r+0x8fa>
 8009488:	f1ba 0f00 	cmp.w	sl, #0
 800948c:	d115      	bne.n	80094ba <_dtoa_r+0x8fa>
 800948e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009492:	b993      	cbnz	r3, 80094ba <_dtoa_r+0x8fa>
 8009494:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009498:	0d1b      	lsrs	r3, r3, #20
 800949a:	051b      	lsls	r3, r3, #20
 800949c:	b183      	cbz	r3, 80094c0 <_dtoa_r+0x900>
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	3301      	adds	r3, #1
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	9b05      	ldr	r3, [sp, #20]
 80094a6:	3301      	adds	r3, #1
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	f04f 0801 	mov.w	r8, #1
 80094ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f47f af6a 	bne.w	800938a <_dtoa_r+0x7ca>
 80094b6:	2001      	movs	r0, #1
 80094b8:	e76f      	b.n	800939a <_dtoa_r+0x7da>
 80094ba:	f04f 0800 	mov.w	r8, #0
 80094be:	e7f6      	b.n	80094ae <_dtoa_r+0x8ee>
 80094c0:	4698      	mov	r8, r3
 80094c2:	e7f4      	b.n	80094ae <_dtoa_r+0x8ee>
 80094c4:	f43f af7d 	beq.w	80093c2 <_dtoa_r+0x802>
 80094c8:	4618      	mov	r0, r3
 80094ca:	301c      	adds	r0, #28
 80094cc:	e772      	b.n	80093b4 <_dtoa_r+0x7f4>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	dc37      	bgt.n	8009544 <_dtoa_r+0x984>
 80094d4:	9b06      	ldr	r3, [sp, #24]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	dd34      	ble.n	8009544 <_dtoa_r+0x984>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	9302      	str	r3, [sp, #8]
 80094de:	9b02      	ldr	r3, [sp, #8]
 80094e0:	b96b      	cbnz	r3, 80094fe <_dtoa_r+0x93e>
 80094e2:	4631      	mov	r1, r6
 80094e4:	2205      	movs	r2, #5
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fac0 	bl	8009a6c <__multadd>
 80094ec:	4601      	mov	r1, r0
 80094ee:	4606      	mov	r6, r0
 80094f0:	ee18 0a10 	vmov	r0, s16
 80094f4:	f000 fcda 	bl	8009eac <__mcmp>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f73f adbb 	bgt.w	8009074 <_dtoa_r+0x4b4>
 80094fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009500:	9d01      	ldr	r5, [sp, #4]
 8009502:	43db      	mvns	r3, r3
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	f04f 0800 	mov.w	r8, #0
 800950a:	4631      	mov	r1, r6
 800950c:	4620      	mov	r0, r4
 800950e:	f000 fa8b 	bl	8009a28 <_Bfree>
 8009512:	2f00      	cmp	r7, #0
 8009514:	f43f aea4 	beq.w	8009260 <_dtoa_r+0x6a0>
 8009518:	f1b8 0f00 	cmp.w	r8, #0
 800951c:	d005      	beq.n	800952a <_dtoa_r+0x96a>
 800951e:	45b8      	cmp	r8, r7
 8009520:	d003      	beq.n	800952a <_dtoa_r+0x96a>
 8009522:	4641      	mov	r1, r8
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fa7f 	bl	8009a28 <_Bfree>
 800952a:	4639      	mov	r1, r7
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fa7b 	bl	8009a28 <_Bfree>
 8009532:	e695      	b.n	8009260 <_dtoa_r+0x6a0>
 8009534:	2600      	movs	r6, #0
 8009536:	4637      	mov	r7, r6
 8009538:	e7e1      	b.n	80094fe <_dtoa_r+0x93e>
 800953a:	9700      	str	r7, [sp, #0]
 800953c:	4637      	mov	r7, r6
 800953e:	e599      	b.n	8009074 <_dtoa_r+0x4b4>
 8009540:	40240000 	.word	0x40240000
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 80ca 	beq.w	80096e0 <_dtoa_r+0xb20>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	2d00      	cmp	r5, #0
 8009552:	dd05      	ble.n	8009560 <_dtoa_r+0x9a0>
 8009554:	4639      	mov	r1, r7
 8009556:	462a      	mov	r2, r5
 8009558:	4620      	mov	r0, r4
 800955a:	f000 fc37 	bl	8009dcc <__lshift>
 800955e:	4607      	mov	r7, r0
 8009560:	f1b8 0f00 	cmp.w	r8, #0
 8009564:	d05b      	beq.n	800961e <_dtoa_r+0xa5e>
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fa1d 	bl	80099a8 <_Balloc>
 800956e:	4605      	mov	r5, r0
 8009570:	b928      	cbnz	r0, 800957e <_dtoa_r+0x9be>
 8009572:	4b87      	ldr	r3, [pc, #540]	; (8009790 <_dtoa_r+0xbd0>)
 8009574:	4602      	mov	r2, r0
 8009576:	f240 21ea 	movw	r1, #746	; 0x2ea
 800957a:	f7ff bb3b 	b.w	8008bf4 <_dtoa_r+0x34>
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	3202      	adds	r2, #2
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	f107 010c 	add.w	r1, r7, #12
 8009588:	300c      	adds	r0, #12
 800958a:	f7fe fdf5 	bl	8008178 <memcpy>
 800958e:	2201      	movs	r2, #1
 8009590:	4629      	mov	r1, r5
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fc1a 	bl	8009dcc <__lshift>
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	f103 0901 	add.w	r9, r3, #1
 800959e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095a2:	4413      	add	r3, r2
 80095a4:	9305      	str	r3, [sp, #20]
 80095a6:	f00a 0301 	and.w	r3, sl, #1
 80095aa:	46b8      	mov	r8, r7
 80095ac:	9304      	str	r3, [sp, #16]
 80095ae:	4607      	mov	r7, r0
 80095b0:	4631      	mov	r1, r6
 80095b2:	ee18 0a10 	vmov	r0, s16
 80095b6:	f7ff fa77 	bl	8008aa8 <quorem>
 80095ba:	4641      	mov	r1, r8
 80095bc:	9002      	str	r0, [sp, #8]
 80095be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095c2:	ee18 0a10 	vmov	r0, s16
 80095c6:	f000 fc71 	bl	8009eac <__mcmp>
 80095ca:	463a      	mov	r2, r7
 80095cc:	9003      	str	r0, [sp, #12]
 80095ce:	4631      	mov	r1, r6
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fc87 	bl	8009ee4 <__mdiff>
 80095d6:	68c2      	ldr	r2, [r0, #12]
 80095d8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80095dc:	4605      	mov	r5, r0
 80095de:	bb02      	cbnz	r2, 8009622 <_dtoa_r+0xa62>
 80095e0:	4601      	mov	r1, r0
 80095e2:	ee18 0a10 	vmov	r0, s16
 80095e6:	f000 fc61 	bl	8009eac <__mcmp>
 80095ea:	4602      	mov	r2, r0
 80095ec:	4629      	mov	r1, r5
 80095ee:	4620      	mov	r0, r4
 80095f0:	9207      	str	r2, [sp, #28]
 80095f2:	f000 fa19 	bl	8009a28 <_Bfree>
 80095f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095fa:	ea43 0102 	orr.w	r1, r3, r2
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	430b      	orrs	r3, r1
 8009602:	464d      	mov	r5, r9
 8009604:	d10f      	bne.n	8009626 <_dtoa_r+0xa66>
 8009606:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800960a:	d02a      	beq.n	8009662 <_dtoa_r+0xaa2>
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	dd02      	ble.n	8009618 <_dtoa_r+0xa58>
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009618:	f88b a000 	strb.w	sl, [fp]
 800961c:	e775      	b.n	800950a <_dtoa_r+0x94a>
 800961e:	4638      	mov	r0, r7
 8009620:	e7ba      	b.n	8009598 <_dtoa_r+0x9d8>
 8009622:	2201      	movs	r2, #1
 8009624:	e7e2      	b.n	80095ec <_dtoa_r+0xa2c>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	db04      	blt.n	8009636 <_dtoa_r+0xa76>
 800962c:	9906      	ldr	r1, [sp, #24]
 800962e:	430b      	orrs	r3, r1
 8009630:	9904      	ldr	r1, [sp, #16]
 8009632:	430b      	orrs	r3, r1
 8009634:	d122      	bne.n	800967c <_dtoa_r+0xabc>
 8009636:	2a00      	cmp	r2, #0
 8009638:	ddee      	ble.n	8009618 <_dtoa_r+0xa58>
 800963a:	ee18 1a10 	vmov	r1, s16
 800963e:	2201      	movs	r2, #1
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fbc3 	bl	8009dcc <__lshift>
 8009646:	4631      	mov	r1, r6
 8009648:	ee08 0a10 	vmov	s16, r0
 800964c:	f000 fc2e 	bl	8009eac <__mcmp>
 8009650:	2800      	cmp	r0, #0
 8009652:	dc03      	bgt.n	800965c <_dtoa_r+0xa9c>
 8009654:	d1e0      	bne.n	8009618 <_dtoa_r+0xa58>
 8009656:	f01a 0f01 	tst.w	sl, #1
 800965a:	d0dd      	beq.n	8009618 <_dtoa_r+0xa58>
 800965c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009660:	d1d7      	bne.n	8009612 <_dtoa_r+0xa52>
 8009662:	2339      	movs	r3, #57	; 0x39
 8009664:	f88b 3000 	strb.w	r3, [fp]
 8009668:	462b      	mov	r3, r5
 800966a:	461d      	mov	r5, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009672:	2a39      	cmp	r2, #57	; 0x39
 8009674:	d071      	beq.n	800975a <_dtoa_r+0xb9a>
 8009676:	3201      	adds	r2, #1
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	e746      	b.n	800950a <_dtoa_r+0x94a>
 800967c:	2a00      	cmp	r2, #0
 800967e:	dd07      	ble.n	8009690 <_dtoa_r+0xad0>
 8009680:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009684:	d0ed      	beq.n	8009662 <_dtoa_r+0xaa2>
 8009686:	f10a 0301 	add.w	r3, sl, #1
 800968a:	f88b 3000 	strb.w	r3, [fp]
 800968e:	e73c      	b.n	800950a <_dtoa_r+0x94a>
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009696:	4599      	cmp	r9, r3
 8009698:	d047      	beq.n	800972a <_dtoa_r+0xb6a>
 800969a:	ee18 1a10 	vmov	r1, s16
 800969e:	2300      	movs	r3, #0
 80096a0:	220a      	movs	r2, #10
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f9e2 	bl	8009a6c <__multadd>
 80096a8:	45b8      	cmp	r8, r7
 80096aa:	ee08 0a10 	vmov	s16, r0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	f04f 020a 	mov.w	r2, #10
 80096b6:	4641      	mov	r1, r8
 80096b8:	4620      	mov	r0, r4
 80096ba:	d106      	bne.n	80096ca <_dtoa_r+0xb0a>
 80096bc:	f000 f9d6 	bl	8009a6c <__multadd>
 80096c0:	4680      	mov	r8, r0
 80096c2:	4607      	mov	r7, r0
 80096c4:	f109 0901 	add.w	r9, r9, #1
 80096c8:	e772      	b.n	80095b0 <_dtoa_r+0x9f0>
 80096ca:	f000 f9cf 	bl	8009a6c <__multadd>
 80096ce:	4639      	mov	r1, r7
 80096d0:	4680      	mov	r8, r0
 80096d2:	2300      	movs	r3, #0
 80096d4:	220a      	movs	r2, #10
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 f9c8 	bl	8009a6c <__multadd>
 80096dc:	4607      	mov	r7, r0
 80096de:	e7f1      	b.n	80096c4 <_dtoa_r+0xb04>
 80096e0:	9b03      	ldr	r3, [sp, #12]
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	9d01      	ldr	r5, [sp, #4]
 80096e6:	ee18 0a10 	vmov	r0, s16
 80096ea:	4631      	mov	r1, r6
 80096ec:	f7ff f9dc 	bl	8008aa8 <quorem>
 80096f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	f805 ab01 	strb.w	sl, [r5], #1
 80096fa:	1aea      	subs	r2, r5, r3
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	4293      	cmp	r3, r2
 8009700:	dd09      	ble.n	8009716 <_dtoa_r+0xb56>
 8009702:	ee18 1a10 	vmov	r1, s16
 8009706:	2300      	movs	r3, #0
 8009708:	220a      	movs	r2, #10
 800970a:	4620      	mov	r0, r4
 800970c:	f000 f9ae 	bl	8009a6c <__multadd>
 8009710:	ee08 0a10 	vmov	s16, r0
 8009714:	e7e7      	b.n	80096e6 <_dtoa_r+0xb26>
 8009716:	9b02      	ldr	r3, [sp, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	bfc8      	it	gt
 800971c:	461d      	movgt	r5, r3
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	bfd8      	it	le
 8009722:	2501      	movle	r5, #1
 8009724:	441d      	add	r5, r3
 8009726:	f04f 0800 	mov.w	r8, #0
 800972a:	ee18 1a10 	vmov	r1, s16
 800972e:	2201      	movs	r2, #1
 8009730:	4620      	mov	r0, r4
 8009732:	f000 fb4b 	bl	8009dcc <__lshift>
 8009736:	4631      	mov	r1, r6
 8009738:	ee08 0a10 	vmov	s16, r0
 800973c:	f000 fbb6 	bl	8009eac <__mcmp>
 8009740:	2800      	cmp	r0, #0
 8009742:	dc91      	bgt.n	8009668 <_dtoa_r+0xaa8>
 8009744:	d102      	bne.n	800974c <_dtoa_r+0xb8c>
 8009746:	f01a 0f01 	tst.w	sl, #1
 800974a:	d18d      	bne.n	8009668 <_dtoa_r+0xaa8>
 800974c:	462b      	mov	r3, r5
 800974e:	461d      	mov	r5, r3
 8009750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009754:	2a30      	cmp	r2, #48	; 0x30
 8009756:	d0fa      	beq.n	800974e <_dtoa_r+0xb8e>
 8009758:	e6d7      	b.n	800950a <_dtoa_r+0x94a>
 800975a:	9a01      	ldr	r2, [sp, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d184      	bne.n	800966a <_dtoa_r+0xaaa>
 8009760:	9b00      	ldr	r3, [sp, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	2331      	movs	r3, #49	; 0x31
 8009768:	7013      	strb	r3, [r2, #0]
 800976a:	e6ce      	b.n	800950a <_dtoa_r+0x94a>
 800976c:	4b09      	ldr	r3, [pc, #36]	; (8009794 <_dtoa_r+0xbd4>)
 800976e:	f7ff ba95 	b.w	8008c9c <_dtoa_r+0xdc>
 8009772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009774:	2b00      	cmp	r3, #0
 8009776:	f47f aa6e 	bne.w	8008c56 <_dtoa_r+0x96>
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <_dtoa_r+0xbd8>)
 800977c:	f7ff ba8e 	b.w	8008c9c <_dtoa_r+0xdc>
 8009780:	9b02      	ldr	r3, [sp, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	dcae      	bgt.n	80096e4 <_dtoa_r+0xb24>
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	2b02      	cmp	r3, #2
 800978a:	f73f aea8 	bgt.w	80094de <_dtoa_r+0x91e>
 800978e:	e7a9      	b.n	80096e4 <_dtoa_r+0xb24>
 8009790:	0800c81f 	.word	0x0800c81f
 8009794:	0800c77c 	.word	0x0800c77c
 8009798:	0800c7a0 	.word	0x0800c7a0

0800979c <std>:
 800979c:	2300      	movs	r3, #0
 800979e:	b510      	push	{r4, lr}
 80097a0:	4604      	mov	r4, r0
 80097a2:	e9c0 3300 	strd	r3, r3, [r0]
 80097a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097aa:	6083      	str	r3, [r0, #8]
 80097ac:	8181      	strh	r1, [r0, #12]
 80097ae:	6643      	str	r3, [r0, #100]	; 0x64
 80097b0:	81c2      	strh	r2, [r0, #14]
 80097b2:	6183      	str	r3, [r0, #24]
 80097b4:	4619      	mov	r1, r3
 80097b6:	2208      	movs	r2, #8
 80097b8:	305c      	adds	r0, #92	; 0x5c
 80097ba:	f7fe fceb 	bl	8008194 <memset>
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <std+0x38>)
 80097c0:	6263      	str	r3, [r4, #36]	; 0x24
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <std+0x3c>)
 80097c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097c6:	4b05      	ldr	r3, [pc, #20]	; (80097dc <std+0x40>)
 80097c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097ca:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <std+0x44>)
 80097cc:	6224      	str	r4, [r4, #32]
 80097ce:	6323      	str	r3, [r4, #48]	; 0x30
 80097d0:	bd10      	pop	{r4, pc}
 80097d2:	bf00      	nop
 80097d4:	0800a571 	.word	0x0800a571
 80097d8:	0800a593 	.word	0x0800a593
 80097dc:	0800a5cb 	.word	0x0800a5cb
 80097e0:	0800a5ef 	.word	0x0800a5ef

080097e4 <_cleanup_r>:
 80097e4:	4901      	ldr	r1, [pc, #4]	; (80097ec <_cleanup_r+0x8>)
 80097e6:	f000 b8af 	b.w	8009948 <_fwalk_reent>
 80097ea:	bf00      	nop
 80097ec:	0800a905 	.word	0x0800a905

080097f0 <__sfmoreglue>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	2268      	movs	r2, #104	; 0x68
 80097f4:	1e4d      	subs	r5, r1, #1
 80097f6:	4355      	muls	r5, r2
 80097f8:	460e      	mov	r6, r1
 80097fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097fe:	f000 fcd9 	bl	800a1b4 <_malloc_r>
 8009802:	4604      	mov	r4, r0
 8009804:	b140      	cbz	r0, 8009818 <__sfmoreglue+0x28>
 8009806:	2100      	movs	r1, #0
 8009808:	e9c0 1600 	strd	r1, r6, [r0]
 800980c:	300c      	adds	r0, #12
 800980e:	60a0      	str	r0, [r4, #8]
 8009810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009814:	f7fe fcbe 	bl	8008194 <memset>
 8009818:	4620      	mov	r0, r4
 800981a:	bd70      	pop	{r4, r5, r6, pc}

0800981c <__sfp_lock_acquire>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__sfp_lock_acquire+0x8>)
 800981e:	f000 b8b8 	b.w	8009992 <__retarget_lock_acquire_recursive>
 8009822:	bf00      	nop
 8009824:	200003d5 	.word	0x200003d5

08009828 <__sfp_lock_release>:
 8009828:	4801      	ldr	r0, [pc, #4]	; (8009830 <__sfp_lock_release+0x8>)
 800982a:	f000 b8b3 	b.w	8009994 <__retarget_lock_release_recursive>
 800982e:	bf00      	nop
 8009830:	200003d5 	.word	0x200003d5

08009834 <__sinit_lock_acquire>:
 8009834:	4801      	ldr	r0, [pc, #4]	; (800983c <__sinit_lock_acquire+0x8>)
 8009836:	f000 b8ac 	b.w	8009992 <__retarget_lock_acquire_recursive>
 800983a:	bf00      	nop
 800983c:	200003d6 	.word	0x200003d6

08009840 <__sinit_lock_release>:
 8009840:	4801      	ldr	r0, [pc, #4]	; (8009848 <__sinit_lock_release+0x8>)
 8009842:	f000 b8a7 	b.w	8009994 <__retarget_lock_release_recursive>
 8009846:	bf00      	nop
 8009848:	200003d6 	.word	0x200003d6

0800984c <__sinit>:
 800984c:	b510      	push	{r4, lr}
 800984e:	4604      	mov	r4, r0
 8009850:	f7ff fff0 	bl	8009834 <__sinit_lock_acquire>
 8009854:	69a3      	ldr	r3, [r4, #24]
 8009856:	b11b      	cbz	r3, 8009860 <__sinit+0x14>
 8009858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985c:	f7ff bff0 	b.w	8009840 <__sinit_lock_release>
 8009860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009864:	6523      	str	r3, [r4, #80]	; 0x50
 8009866:	4b13      	ldr	r3, [pc, #76]	; (80098b4 <__sinit+0x68>)
 8009868:	4a13      	ldr	r2, [pc, #76]	; (80098b8 <__sinit+0x6c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	62a2      	str	r2, [r4, #40]	; 0x28
 800986e:	42a3      	cmp	r3, r4
 8009870:	bf04      	itt	eq
 8009872:	2301      	moveq	r3, #1
 8009874:	61a3      	streq	r3, [r4, #24]
 8009876:	4620      	mov	r0, r4
 8009878:	f000 f820 	bl	80098bc <__sfp>
 800987c:	6060      	str	r0, [r4, #4]
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f81c 	bl	80098bc <__sfp>
 8009884:	60a0      	str	r0, [r4, #8]
 8009886:	4620      	mov	r0, r4
 8009888:	f000 f818 	bl	80098bc <__sfp>
 800988c:	2200      	movs	r2, #0
 800988e:	60e0      	str	r0, [r4, #12]
 8009890:	2104      	movs	r1, #4
 8009892:	6860      	ldr	r0, [r4, #4]
 8009894:	f7ff ff82 	bl	800979c <std>
 8009898:	68a0      	ldr	r0, [r4, #8]
 800989a:	2201      	movs	r2, #1
 800989c:	2109      	movs	r1, #9
 800989e:	f7ff ff7d 	bl	800979c <std>
 80098a2:	68e0      	ldr	r0, [r4, #12]
 80098a4:	2202      	movs	r2, #2
 80098a6:	2112      	movs	r1, #18
 80098a8:	f7ff ff78 	bl	800979c <std>
 80098ac:	2301      	movs	r3, #1
 80098ae:	61a3      	str	r3, [r4, #24]
 80098b0:	e7d2      	b.n	8009858 <__sinit+0xc>
 80098b2:	bf00      	nop
 80098b4:	0800c768 	.word	0x0800c768
 80098b8:	080097e5 	.word	0x080097e5

080098bc <__sfp>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	4607      	mov	r7, r0
 80098c0:	f7ff ffac 	bl	800981c <__sfp_lock_acquire>
 80098c4:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <__sfp+0x84>)
 80098c6:	681e      	ldr	r6, [r3, #0]
 80098c8:	69b3      	ldr	r3, [r6, #24]
 80098ca:	b913      	cbnz	r3, 80098d2 <__sfp+0x16>
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff ffbd 	bl	800984c <__sinit>
 80098d2:	3648      	adds	r6, #72	; 0x48
 80098d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098d8:	3b01      	subs	r3, #1
 80098da:	d503      	bpl.n	80098e4 <__sfp+0x28>
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	b30b      	cbz	r3, 8009924 <__sfp+0x68>
 80098e0:	6836      	ldr	r6, [r6, #0]
 80098e2:	e7f7      	b.n	80098d4 <__sfp+0x18>
 80098e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098e8:	b9d5      	cbnz	r5, 8009920 <__sfp+0x64>
 80098ea:	4b16      	ldr	r3, [pc, #88]	; (8009944 <__sfp+0x88>)
 80098ec:	60e3      	str	r3, [r4, #12]
 80098ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098f2:	6665      	str	r5, [r4, #100]	; 0x64
 80098f4:	f000 f84c 	bl	8009990 <__retarget_lock_init_recursive>
 80098f8:	f7ff ff96 	bl	8009828 <__sfp_lock_release>
 80098fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009904:	6025      	str	r5, [r4, #0]
 8009906:	61a5      	str	r5, [r4, #24]
 8009908:	2208      	movs	r2, #8
 800990a:	4629      	mov	r1, r5
 800990c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009910:	f7fe fc40 	bl	8008194 <memset>
 8009914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800991c:	4620      	mov	r0, r4
 800991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009920:	3468      	adds	r4, #104	; 0x68
 8009922:	e7d9      	b.n	80098d8 <__sfp+0x1c>
 8009924:	2104      	movs	r1, #4
 8009926:	4638      	mov	r0, r7
 8009928:	f7ff ff62 	bl	80097f0 <__sfmoreglue>
 800992c:	4604      	mov	r4, r0
 800992e:	6030      	str	r0, [r6, #0]
 8009930:	2800      	cmp	r0, #0
 8009932:	d1d5      	bne.n	80098e0 <__sfp+0x24>
 8009934:	f7ff ff78 	bl	8009828 <__sfp_lock_release>
 8009938:	230c      	movs	r3, #12
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	e7ee      	b.n	800991c <__sfp+0x60>
 800993e:	bf00      	nop
 8009940:	0800c768 	.word	0x0800c768
 8009944:	ffff0001 	.word	0xffff0001

08009948 <_fwalk_reent>:
 8009948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800994c:	4606      	mov	r6, r0
 800994e:	4688      	mov	r8, r1
 8009950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009954:	2700      	movs	r7, #0
 8009956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800995a:	f1b9 0901 	subs.w	r9, r9, #1
 800995e:	d505      	bpl.n	800996c <_fwalk_reent+0x24>
 8009960:	6824      	ldr	r4, [r4, #0]
 8009962:	2c00      	cmp	r4, #0
 8009964:	d1f7      	bne.n	8009956 <_fwalk_reent+0xe>
 8009966:	4638      	mov	r0, r7
 8009968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800996c:	89ab      	ldrh	r3, [r5, #12]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d907      	bls.n	8009982 <_fwalk_reent+0x3a>
 8009972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009976:	3301      	adds	r3, #1
 8009978:	d003      	beq.n	8009982 <_fwalk_reent+0x3a>
 800997a:	4629      	mov	r1, r5
 800997c:	4630      	mov	r0, r6
 800997e:	47c0      	blx	r8
 8009980:	4307      	orrs	r7, r0
 8009982:	3568      	adds	r5, #104	; 0x68
 8009984:	e7e9      	b.n	800995a <_fwalk_reent+0x12>
	...

08009988 <_localeconv_r>:
 8009988:	4800      	ldr	r0, [pc, #0]	; (800998c <_localeconv_r+0x4>)
 800998a:	4770      	bx	lr
 800998c:	2000019c 	.word	0x2000019c

08009990 <__retarget_lock_init_recursive>:
 8009990:	4770      	bx	lr

08009992 <__retarget_lock_acquire_recursive>:
 8009992:	4770      	bx	lr

08009994 <__retarget_lock_release_recursive>:
 8009994:	4770      	bx	lr
	...

08009998 <malloc>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <malloc+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f000 bc09 	b.w	800a1b4 <_malloc_r>
 80099a2:	bf00      	nop
 80099a4:	20000048 	.word	0x20000048

080099a8 <_Balloc>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099ac:	4604      	mov	r4, r0
 80099ae:	460d      	mov	r5, r1
 80099b0:	b976      	cbnz	r6, 80099d0 <_Balloc+0x28>
 80099b2:	2010      	movs	r0, #16
 80099b4:	f7ff fff0 	bl	8009998 <malloc>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6260      	str	r0, [r4, #36]	; 0x24
 80099bc:	b920      	cbnz	r0, 80099c8 <_Balloc+0x20>
 80099be:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <_Balloc+0x78>)
 80099c0:	4818      	ldr	r0, [pc, #96]	; (8009a24 <_Balloc+0x7c>)
 80099c2:	2166      	movs	r1, #102	; 0x66
 80099c4:	f000 feea 	bl	800a79c <__assert_func>
 80099c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099cc:	6006      	str	r6, [r0, #0]
 80099ce:	60c6      	str	r6, [r0, #12]
 80099d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099d2:	68f3      	ldr	r3, [r6, #12]
 80099d4:	b183      	cbz	r3, 80099f8 <_Balloc+0x50>
 80099d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099de:	b9b8      	cbnz	r0, 8009a10 <_Balloc+0x68>
 80099e0:	2101      	movs	r1, #1
 80099e2:	fa01 f605 	lsl.w	r6, r1, r5
 80099e6:	1d72      	adds	r2, r6, #5
 80099e8:	0092      	lsls	r2, r2, #2
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 fb60 	bl	800a0b0 <_calloc_r>
 80099f0:	b160      	cbz	r0, 8009a0c <_Balloc+0x64>
 80099f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099f6:	e00e      	b.n	8009a16 <_Balloc+0x6e>
 80099f8:	2221      	movs	r2, #33	; 0x21
 80099fa:	2104      	movs	r1, #4
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fb57 	bl	800a0b0 <_calloc_r>
 8009a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a04:	60f0      	str	r0, [r6, #12]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e4      	bne.n	80099d6 <_Balloc+0x2e>
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	6802      	ldr	r2, [r0, #0]
 8009a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a16:	2300      	movs	r3, #0
 8009a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a1c:	e7f7      	b.n	8009a0e <_Balloc+0x66>
 8009a1e:	bf00      	nop
 8009a20:	0800c7ad 	.word	0x0800c7ad
 8009a24:	0800c890 	.word	0x0800c890

08009a28 <_Bfree>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b976      	cbnz	r6, 8009a50 <_Bfree+0x28>
 8009a32:	2010      	movs	r0, #16
 8009a34:	f7ff ffb0 	bl	8009998 <malloc>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a3c:	b920      	cbnz	r0, 8009a48 <_Bfree+0x20>
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <_Bfree+0x3c>)
 8009a40:	4809      	ldr	r0, [pc, #36]	; (8009a68 <_Bfree+0x40>)
 8009a42:	218a      	movs	r1, #138	; 0x8a
 8009a44:	f000 feaa 	bl	800a79c <__assert_func>
 8009a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a4c:	6006      	str	r6, [r0, #0]
 8009a4e:	60c6      	str	r6, [r0, #12]
 8009a50:	b13c      	cbz	r4, 8009a62 <_Bfree+0x3a>
 8009a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a54:	6862      	ldr	r2, [r4, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a5c:	6021      	str	r1, [r4, #0]
 8009a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	0800c7ad 	.word	0x0800c7ad
 8009a68:	0800c890 	.word	0x0800c890

08009a6c <__multadd>:
 8009a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	690d      	ldr	r5, [r1, #16]
 8009a72:	4607      	mov	r7, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	461e      	mov	r6, r3
 8009a78:	f101 0c14 	add.w	ip, r1, #20
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a82:	b299      	uxth	r1, r3
 8009a84:	fb02 6101 	mla	r1, r2, r1, r6
 8009a88:	0c1e      	lsrs	r6, r3, #16
 8009a8a:	0c0b      	lsrs	r3, r1, #16
 8009a8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a90:	b289      	uxth	r1, r1
 8009a92:	3001      	adds	r0, #1
 8009a94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a98:	4285      	cmp	r5, r0
 8009a9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aa2:	dcec      	bgt.n	8009a7e <__multadd+0x12>
 8009aa4:	b30e      	cbz	r6, 8009aea <__multadd+0x7e>
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	dc19      	bgt.n	8009ae0 <__multadd+0x74>
 8009aac:	6861      	ldr	r1, [r4, #4]
 8009aae:	4638      	mov	r0, r7
 8009ab0:	3101      	adds	r1, #1
 8009ab2:	f7ff ff79 	bl	80099a8 <_Balloc>
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <__multadd+0x5a>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <__multadd+0x84>)
 8009abe:	480d      	ldr	r0, [pc, #52]	; (8009af4 <__multadd+0x88>)
 8009ac0:	21b5      	movs	r1, #181	; 0xb5
 8009ac2:	f000 fe6b 	bl	800a79c <__assert_func>
 8009ac6:	6922      	ldr	r2, [r4, #16]
 8009ac8:	3202      	adds	r2, #2
 8009aca:	f104 010c 	add.w	r1, r4, #12
 8009ace:	0092      	lsls	r2, r2, #2
 8009ad0:	300c      	adds	r0, #12
 8009ad2:	f7fe fb51 	bl	8008178 <memcpy>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4638      	mov	r0, r7
 8009ada:	f7ff ffa5 	bl	8009a28 <_Bfree>
 8009ade:	4644      	mov	r4, r8
 8009ae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	615e      	str	r6, [r3, #20]
 8009ae8:	6125      	str	r5, [r4, #16]
 8009aea:	4620      	mov	r0, r4
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	0800c81f 	.word	0x0800c81f
 8009af4:	0800c890 	.word	0x0800c890

08009af8 <__hi0bits>:
 8009af8:	0c03      	lsrs	r3, r0, #16
 8009afa:	041b      	lsls	r3, r3, #16
 8009afc:	b9d3      	cbnz	r3, 8009b34 <__hi0bits+0x3c>
 8009afe:	0400      	lsls	r0, r0, #16
 8009b00:	2310      	movs	r3, #16
 8009b02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b06:	bf04      	itt	eq
 8009b08:	0200      	lsleq	r0, r0, #8
 8009b0a:	3308      	addeq	r3, #8
 8009b0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b10:	bf04      	itt	eq
 8009b12:	0100      	lsleq	r0, r0, #4
 8009b14:	3304      	addeq	r3, #4
 8009b16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	0080      	lsleq	r0, r0, #2
 8009b1e:	3302      	addeq	r3, #2
 8009b20:	2800      	cmp	r0, #0
 8009b22:	db05      	blt.n	8009b30 <__hi0bits+0x38>
 8009b24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b28:	f103 0301 	add.w	r3, r3, #1
 8009b2c:	bf08      	it	eq
 8009b2e:	2320      	moveq	r3, #32
 8009b30:	4618      	mov	r0, r3
 8009b32:	4770      	bx	lr
 8009b34:	2300      	movs	r3, #0
 8009b36:	e7e4      	b.n	8009b02 <__hi0bits+0xa>

08009b38 <__lo0bits>:
 8009b38:	6803      	ldr	r3, [r0, #0]
 8009b3a:	f013 0207 	ands.w	r2, r3, #7
 8009b3e:	4601      	mov	r1, r0
 8009b40:	d00b      	beq.n	8009b5a <__lo0bits+0x22>
 8009b42:	07da      	lsls	r2, r3, #31
 8009b44:	d423      	bmi.n	8009b8e <__lo0bits+0x56>
 8009b46:	0798      	lsls	r0, r3, #30
 8009b48:	bf49      	itett	mi
 8009b4a:	085b      	lsrmi	r3, r3, #1
 8009b4c:	089b      	lsrpl	r3, r3, #2
 8009b4e:	2001      	movmi	r0, #1
 8009b50:	600b      	strmi	r3, [r1, #0]
 8009b52:	bf5c      	itt	pl
 8009b54:	600b      	strpl	r3, [r1, #0]
 8009b56:	2002      	movpl	r0, #2
 8009b58:	4770      	bx	lr
 8009b5a:	b298      	uxth	r0, r3
 8009b5c:	b9a8      	cbnz	r0, 8009b8a <__lo0bits+0x52>
 8009b5e:	0c1b      	lsrs	r3, r3, #16
 8009b60:	2010      	movs	r0, #16
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	b90a      	cbnz	r2, 8009b6a <__lo0bits+0x32>
 8009b66:	3008      	adds	r0, #8
 8009b68:	0a1b      	lsrs	r3, r3, #8
 8009b6a:	071a      	lsls	r2, r3, #28
 8009b6c:	bf04      	itt	eq
 8009b6e:	091b      	lsreq	r3, r3, #4
 8009b70:	3004      	addeq	r0, #4
 8009b72:	079a      	lsls	r2, r3, #30
 8009b74:	bf04      	itt	eq
 8009b76:	089b      	lsreq	r3, r3, #2
 8009b78:	3002      	addeq	r0, #2
 8009b7a:	07da      	lsls	r2, r3, #31
 8009b7c:	d403      	bmi.n	8009b86 <__lo0bits+0x4e>
 8009b7e:	085b      	lsrs	r3, r3, #1
 8009b80:	f100 0001 	add.w	r0, r0, #1
 8009b84:	d005      	beq.n	8009b92 <__lo0bits+0x5a>
 8009b86:	600b      	str	r3, [r1, #0]
 8009b88:	4770      	bx	lr
 8009b8a:	4610      	mov	r0, r2
 8009b8c:	e7e9      	b.n	8009b62 <__lo0bits+0x2a>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	4770      	bx	lr
 8009b92:	2020      	movs	r0, #32
 8009b94:	4770      	bx	lr
	...

08009b98 <__i2b>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	f7ff ff03 	bl	80099a8 <_Balloc>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	b928      	cbnz	r0, 8009bb2 <__i2b+0x1a>
 8009ba6:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <__i2b+0x24>)
 8009ba8:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <__i2b+0x28>)
 8009baa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bae:	f000 fdf5 	bl	800a79c <__assert_func>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	6144      	str	r4, [r0, #20]
 8009bb6:	6103      	str	r3, [r0, #16]
 8009bb8:	bd10      	pop	{r4, pc}
 8009bba:	bf00      	nop
 8009bbc:	0800c81f 	.word	0x0800c81f
 8009bc0:	0800c890 	.word	0x0800c890

08009bc4 <__multiply>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	4691      	mov	r9, r2
 8009bca:	690a      	ldr	r2, [r1, #16]
 8009bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	bfb8      	it	lt
 8009bd4:	460b      	movlt	r3, r1
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	bfbc      	itt	lt
 8009bda:	464c      	movlt	r4, r9
 8009bdc:	4699      	movlt	r9, r3
 8009bde:	6927      	ldr	r7, [r4, #16]
 8009be0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009be4:	68a3      	ldr	r3, [r4, #8]
 8009be6:	6861      	ldr	r1, [r4, #4]
 8009be8:	eb07 060a 	add.w	r6, r7, sl
 8009bec:	42b3      	cmp	r3, r6
 8009bee:	b085      	sub	sp, #20
 8009bf0:	bfb8      	it	lt
 8009bf2:	3101      	addlt	r1, #1
 8009bf4:	f7ff fed8 	bl	80099a8 <_Balloc>
 8009bf8:	b930      	cbnz	r0, 8009c08 <__multiply+0x44>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	4b44      	ldr	r3, [pc, #272]	; (8009d10 <__multiply+0x14c>)
 8009bfe:	4845      	ldr	r0, [pc, #276]	; (8009d14 <__multiply+0x150>)
 8009c00:	f240 115d 	movw	r1, #349	; 0x15d
 8009c04:	f000 fdca 	bl	800a79c <__assert_func>
 8009c08:	f100 0514 	add.w	r5, r0, #20
 8009c0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c10:	462b      	mov	r3, r5
 8009c12:	2200      	movs	r2, #0
 8009c14:	4543      	cmp	r3, r8
 8009c16:	d321      	bcc.n	8009c5c <__multiply+0x98>
 8009c18:	f104 0314 	add.w	r3, r4, #20
 8009c1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c20:	f109 0314 	add.w	r3, r9, #20
 8009c24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c28:	9202      	str	r2, [sp, #8]
 8009c2a:	1b3a      	subs	r2, r7, r4
 8009c2c:	3a15      	subs	r2, #21
 8009c2e:	f022 0203 	bic.w	r2, r2, #3
 8009c32:	3204      	adds	r2, #4
 8009c34:	f104 0115 	add.w	r1, r4, #21
 8009c38:	428f      	cmp	r7, r1
 8009c3a:	bf38      	it	cc
 8009c3c:	2204      	movcc	r2, #4
 8009c3e:	9201      	str	r2, [sp, #4]
 8009c40:	9a02      	ldr	r2, [sp, #8]
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d80c      	bhi.n	8009c62 <__multiply+0x9e>
 8009c48:	2e00      	cmp	r6, #0
 8009c4a:	dd03      	ble.n	8009c54 <__multiply+0x90>
 8009c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d05a      	beq.n	8009d0a <__multiply+0x146>
 8009c54:	6106      	str	r6, [r0, #16]
 8009c56:	b005      	add	sp, #20
 8009c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5c:	f843 2b04 	str.w	r2, [r3], #4
 8009c60:	e7d8      	b.n	8009c14 <__multiply+0x50>
 8009c62:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	d024      	beq.n	8009cb6 <__multiply+0xf2>
 8009c6c:	f104 0e14 	add.w	lr, r4, #20
 8009c70:	46a9      	mov	r9, r5
 8009c72:	f04f 0c00 	mov.w	ip, #0
 8009c76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c7a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c7e:	fa1f fb82 	uxth.w	fp, r2
 8009c82:	b289      	uxth	r1, r1
 8009c84:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c8c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c90:	4461      	add	r1, ip
 8009c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c96:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c9e:	b289      	uxth	r1, r1
 8009ca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ca4:	4577      	cmp	r7, lr
 8009ca6:	f849 1b04 	str.w	r1, [r9], #4
 8009caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cae:	d8e2      	bhi.n	8009c76 <__multiply+0xb2>
 8009cb0:	9a01      	ldr	r2, [sp, #4]
 8009cb2:	f845 c002 	str.w	ip, [r5, r2]
 8009cb6:	9a03      	ldr	r2, [sp, #12]
 8009cb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	f1b9 0f00 	cmp.w	r9, #0
 8009cc2:	d020      	beq.n	8009d06 <__multiply+0x142>
 8009cc4:	6829      	ldr	r1, [r5, #0]
 8009cc6:	f104 0c14 	add.w	ip, r4, #20
 8009cca:	46ae      	mov	lr, r5
 8009ccc:	f04f 0a00 	mov.w	sl, #0
 8009cd0:	f8bc b000 	ldrh.w	fp, [ip]
 8009cd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cd8:	fb09 220b 	mla	r2, r9, fp, r2
 8009cdc:	4492      	add	sl, r2
 8009cde:	b289      	uxth	r1, r1
 8009ce0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ce4:	f84e 1b04 	str.w	r1, [lr], #4
 8009ce8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cec:	f8be 1000 	ldrh.w	r1, [lr]
 8009cf0:	0c12      	lsrs	r2, r2, #16
 8009cf2:	fb09 1102 	mla	r1, r9, r2, r1
 8009cf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cfa:	4567      	cmp	r7, ip
 8009cfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d00:	d8e6      	bhi.n	8009cd0 <__multiply+0x10c>
 8009d02:	9a01      	ldr	r2, [sp, #4]
 8009d04:	50a9      	str	r1, [r5, r2]
 8009d06:	3504      	adds	r5, #4
 8009d08:	e79a      	b.n	8009c40 <__multiply+0x7c>
 8009d0a:	3e01      	subs	r6, #1
 8009d0c:	e79c      	b.n	8009c48 <__multiply+0x84>
 8009d0e:	bf00      	nop
 8009d10:	0800c81f 	.word	0x0800c81f
 8009d14:	0800c890 	.word	0x0800c890

08009d18 <__pow5mult>:
 8009d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	f012 0203 	ands.w	r2, r2, #3
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	d007      	beq.n	8009d38 <__pow5mult+0x20>
 8009d28:	4c25      	ldr	r4, [pc, #148]	; (8009dc0 <__pow5mult+0xa8>)
 8009d2a:	3a01      	subs	r2, #1
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d32:	f7ff fe9b 	bl	8009a6c <__multadd>
 8009d36:	4607      	mov	r7, r0
 8009d38:	10ad      	asrs	r5, r5, #2
 8009d3a:	d03d      	beq.n	8009db8 <__pow5mult+0xa0>
 8009d3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d3e:	b97c      	cbnz	r4, 8009d60 <__pow5mult+0x48>
 8009d40:	2010      	movs	r0, #16
 8009d42:	f7ff fe29 	bl	8009998 <malloc>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6270      	str	r0, [r6, #36]	; 0x24
 8009d4a:	b928      	cbnz	r0, 8009d58 <__pow5mult+0x40>
 8009d4c:	4b1d      	ldr	r3, [pc, #116]	; (8009dc4 <__pow5mult+0xac>)
 8009d4e:	481e      	ldr	r0, [pc, #120]	; (8009dc8 <__pow5mult+0xb0>)
 8009d50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d54:	f000 fd22 	bl	800a79c <__assert_func>
 8009d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d5c:	6004      	str	r4, [r0, #0]
 8009d5e:	60c4      	str	r4, [r0, #12]
 8009d60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d68:	b94c      	cbnz	r4, 8009d7e <__pow5mult+0x66>
 8009d6a:	f240 2171 	movw	r1, #625	; 0x271
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f7ff ff12 	bl	8009b98 <__i2b>
 8009d74:	2300      	movs	r3, #0
 8009d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	6003      	str	r3, [r0, #0]
 8009d7e:	f04f 0900 	mov.w	r9, #0
 8009d82:	07eb      	lsls	r3, r5, #31
 8009d84:	d50a      	bpl.n	8009d9c <__pow5mult+0x84>
 8009d86:	4639      	mov	r1, r7
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f7ff ff1a 	bl	8009bc4 <__multiply>
 8009d90:	4639      	mov	r1, r7
 8009d92:	4680      	mov	r8, r0
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff fe47 	bl	8009a28 <_Bfree>
 8009d9a:	4647      	mov	r7, r8
 8009d9c:	106d      	asrs	r5, r5, #1
 8009d9e:	d00b      	beq.n	8009db8 <__pow5mult+0xa0>
 8009da0:	6820      	ldr	r0, [r4, #0]
 8009da2:	b938      	cbnz	r0, 8009db4 <__pow5mult+0x9c>
 8009da4:	4622      	mov	r2, r4
 8009da6:	4621      	mov	r1, r4
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff ff0b 	bl	8009bc4 <__multiply>
 8009dae:	6020      	str	r0, [r4, #0]
 8009db0:	f8c0 9000 	str.w	r9, [r0]
 8009db4:	4604      	mov	r4, r0
 8009db6:	e7e4      	b.n	8009d82 <__pow5mult+0x6a>
 8009db8:	4638      	mov	r0, r7
 8009dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dbe:	bf00      	nop
 8009dc0:	0800c9e0 	.word	0x0800c9e0
 8009dc4:	0800c7ad 	.word	0x0800c7ad
 8009dc8:	0800c890 	.word	0x0800c890

08009dcc <__lshift>:
 8009dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	6849      	ldr	r1, [r1, #4]
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	4607      	mov	r7, r0
 8009dde:	4691      	mov	r9, r2
 8009de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009de4:	f108 0601 	add.w	r6, r8, #1
 8009de8:	42b3      	cmp	r3, r6
 8009dea:	db0b      	blt.n	8009e04 <__lshift+0x38>
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7ff fddb 	bl	80099a8 <_Balloc>
 8009df2:	4605      	mov	r5, r0
 8009df4:	b948      	cbnz	r0, 8009e0a <__lshift+0x3e>
 8009df6:	4602      	mov	r2, r0
 8009df8:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <__lshift+0xd8>)
 8009dfa:	482b      	ldr	r0, [pc, #172]	; (8009ea8 <__lshift+0xdc>)
 8009dfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e00:	f000 fccc 	bl	800a79c <__assert_func>
 8009e04:	3101      	adds	r1, #1
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	e7ee      	b.n	8009de8 <__lshift+0x1c>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f100 0114 	add.w	r1, r0, #20
 8009e10:	f100 0210 	add.w	r2, r0, #16
 8009e14:	4618      	mov	r0, r3
 8009e16:	4553      	cmp	r3, sl
 8009e18:	db37      	blt.n	8009e8a <__lshift+0xbe>
 8009e1a:	6920      	ldr	r0, [r4, #16]
 8009e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e20:	f104 0314 	add.w	r3, r4, #20
 8009e24:	f019 091f 	ands.w	r9, r9, #31
 8009e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e30:	d02f      	beq.n	8009e92 <__lshift+0xc6>
 8009e32:	f1c9 0e20 	rsb	lr, r9, #32
 8009e36:	468a      	mov	sl, r1
 8009e38:	f04f 0c00 	mov.w	ip, #0
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	fa02 f209 	lsl.w	r2, r2, r9
 8009e42:	ea42 020c 	orr.w	r2, r2, ip
 8009e46:	f84a 2b04 	str.w	r2, [sl], #4
 8009e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e4e:	4298      	cmp	r0, r3
 8009e50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e54:	d8f2      	bhi.n	8009e3c <__lshift+0x70>
 8009e56:	1b03      	subs	r3, r0, r4
 8009e58:	3b15      	subs	r3, #21
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	3304      	adds	r3, #4
 8009e60:	f104 0215 	add.w	r2, r4, #21
 8009e64:	4290      	cmp	r0, r2
 8009e66:	bf38      	it	cc
 8009e68:	2304      	movcc	r3, #4
 8009e6a:	f841 c003 	str.w	ip, [r1, r3]
 8009e6e:	f1bc 0f00 	cmp.w	ip, #0
 8009e72:	d001      	beq.n	8009e78 <__lshift+0xac>
 8009e74:	f108 0602 	add.w	r6, r8, #2
 8009e78:	3e01      	subs	r6, #1
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	612e      	str	r6, [r5, #16]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	f7ff fdd2 	bl	8009a28 <_Bfree>
 8009e84:	4628      	mov	r0, r5
 8009e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e8e:	3301      	adds	r3, #1
 8009e90:	e7c1      	b.n	8009e16 <__lshift+0x4a>
 8009e92:	3904      	subs	r1, #4
 8009e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e9c:	4298      	cmp	r0, r3
 8009e9e:	d8f9      	bhi.n	8009e94 <__lshift+0xc8>
 8009ea0:	e7ea      	b.n	8009e78 <__lshift+0xac>
 8009ea2:	bf00      	nop
 8009ea4:	0800c81f 	.word	0x0800c81f
 8009ea8:	0800c890 	.word	0x0800c890

08009eac <__mcmp>:
 8009eac:	b530      	push	{r4, r5, lr}
 8009eae:	6902      	ldr	r2, [r0, #16]
 8009eb0:	690c      	ldr	r4, [r1, #16]
 8009eb2:	1b12      	subs	r2, r2, r4
 8009eb4:	d10e      	bne.n	8009ed4 <__mcmp+0x28>
 8009eb6:	f100 0314 	add.w	r3, r0, #20
 8009eba:	3114      	adds	r1, #20
 8009ebc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ec0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ec4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ec8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ecc:	42a5      	cmp	r5, r4
 8009ece:	d003      	beq.n	8009ed8 <__mcmp+0x2c>
 8009ed0:	d305      	bcc.n	8009ede <__mcmp+0x32>
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	bd30      	pop	{r4, r5, pc}
 8009ed8:	4283      	cmp	r3, r0
 8009eda:	d3f3      	bcc.n	8009ec4 <__mcmp+0x18>
 8009edc:	e7fa      	b.n	8009ed4 <__mcmp+0x28>
 8009ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ee2:	e7f7      	b.n	8009ed4 <__mcmp+0x28>

08009ee4 <__mdiff>:
 8009ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	4606      	mov	r6, r0
 8009eec:	4611      	mov	r1, r2
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4690      	mov	r8, r2
 8009ef2:	f7ff ffdb 	bl	8009eac <__mcmp>
 8009ef6:	1e05      	subs	r5, r0, #0
 8009ef8:	d110      	bne.n	8009f1c <__mdiff+0x38>
 8009efa:	4629      	mov	r1, r5
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff fd53 	bl	80099a8 <_Balloc>
 8009f02:	b930      	cbnz	r0, 8009f12 <__mdiff+0x2e>
 8009f04:	4b3a      	ldr	r3, [pc, #232]	; (8009ff0 <__mdiff+0x10c>)
 8009f06:	4602      	mov	r2, r0
 8009f08:	f240 2132 	movw	r1, #562	; 0x232
 8009f0c:	4839      	ldr	r0, [pc, #228]	; (8009ff4 <__mdiff+0x110>)
 8009f0e:	f000 fc45 	bl	800a79c <__assert_func>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	bfa4      	itt	ge
 8009f1e:	4643      	movge	r3, r8
 8009f20:	46a0      	movge	r8, r4
 8009f22:	4630      	mov	r0, r6
 8009f24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f28:	bfa6      	itte	ge
 8009f2a:	461c      	movge	r4, r3
 8009f2c:	2500      	movge	r5, #0
 8009f2e:	2501      	movlt	r5, #1
 8009f30:	f7ff fd3a 	bl	80099a8 <_Balloc>
 8009f34:	b920      	cbnz	r0, 8009f40 <__mdiff+0x5c>
 8009f36:	4b2e      	ldr	r3, [pc, #184]	; (8009ff0 <__mdiff+0x10c>)
 8009f38:	4602      	mov	r2, r0
 8009f3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f3e:	e7e5      	b.n	8009f0c <__mdiff+0x28>
 8009f40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f44:	6926      	ldr	r6, [r4, #16]
 8009f46:	60c5      	str	r5, [r0, #12]
 8009f48:	f104 0914 	add.w	r9, r4, #20
 8009f4c:	f108 0514 	add.w	r5, r8, #20
 8009f50:	f100 0e14 	add.w	lr, r0, #20
 8009f54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f5c:	f108 0210 	add.w	r2, r8, #16
 8009f60:	46f2      	mov	sl, lr
 8009f62:	2100      	movs	r1, #0
 8009f64:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f6c:	fa1f f883 	uxth.w	r8, r3
 8009f70:	fa11 f18b 	uxtah	r1, r1, fp
 8009f74:	0c1b      	lsrs	r3, r3, #16
 8009f76:	eba1 0808 	sub.w	r8, r1, r8
 8009f7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f82:	fa1f f888 	uxth.w	r8, r8
 8009f86:	1419      	asrs	r1, r3, #16
 8009f88:	454e      	cmp	r6, r9
 8009f8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f8e:	f84a 3b04 	str.w	r3, [sl], #4
 8009f92:	d8e7      	bhi.n	8009f64 <__mdiff+0x80>
 8009f94:	1b33      	subs	r3, r6, r4
 8009f96:	3b15      	subs	r3, #21
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	3415      	adds	r4, #21
 8009fa0:	42a6      	cmp	r6, r4
 8009fa2:	bf38      	it	cc
 8009fa4:	2304      	movcc	r3, #4
 8009fa6:	441d      	add	r5, r3
 8009fa8:	4473      	add	r3, lr
 8009faa:	469e      	mov	lr, r3
 8009fac:	462e      	mov	r6, r5
 8009fae:	4566      	cmp	r6, ip
 8009fb0:	d30e      	bcc.n	8009fd0 <__mdiff+0xec>
 8009fb2:	f10c 0203 	add.w	r2, ip, #3
 8009fb6:	1b52      	subs	r2, r2, r5
 8009fb8:	f022 0203 	bic.w	r2, r2, #3
 8009fbc:	3d03      	subs	r5, #3
 8009fbe:	45ac      	cmp	ip, r5
 8009fc0:	bf38      	it	cc
 8009fc2:	2200      	movcc	r2, #0
 8009fc4:	441a      	add	r2, r3
 8009fc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fca:	b17b      	cbz	r3, 8009fec <__mdiff+0x108>
 8009fcc:	6107      	str	r7, [r0, #16]
 8009fce:	e7a3      	b.n	8009f18 <__mdiff+0x34>
 8009fd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fd4:	fa11 f288 	uxtah	r2, r1, r8
 8009fd8:	1414      	asrs	r4, r2, #16
 8009fda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fde:	b292      	uxth	r2, r2
 8009fe0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fe4:	f84e 2b04 	str.w	r2, [lr], #4
 8009fe8:	1421      	asrs	r1, r4, #16
 8009fea:	e7e0      	b.n	8009fae <__mdiff+0xca>
 8009fec:	3f01      	subs	r7, #1
 8009fee:	e7ea      	b.n	8009fc6 <__mdiff+0xe2>
 8009ff0:	0800c81f 	.word	0x0800c81f
 8009ff4:	0800c890 	.word	0x0800c890

08009ff8 <__d2b>:
 8009ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	4689      	mov	r9, r1
 8009ffe:	2101      	movs	r1, #1
 800a000:	ec57 6b10 	vmov	r6, r7, d0
 800a004:	4690      	mov	r8, r2
 800a006:	f7ff fccf 	bl	80099a8 <_Balloc>
 800a00a:	4604      	mov	r4, r0
 800a00c:	b930      	cbnz	r0, 800a01c <__d2b+0x24>
 800a00e:	4602      	mov	r2, r0
 800a010:	4b25      	ldr	r3, [pc, #148]	; (800a0a8 <__d2b+0xb0>)
 800a012:	4826      	ldr	r0, [pc, #152]	; (800a0ac <__d2b+0xb4>)
 800a014:	f240 310a 	movw	r1, #778	; 0x30a
 800a018:	f000 fbc0 	bl	800a79c <__assert_func>
 800a01c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a024:	bb35      	cbnz	r5, 800a074 <__d2b+0x7c>
 800a026:	2e00      	cmp	r6, #0
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	d028      	beq.n	800a07e <__d2b+0x86>
 800a02c:	4668      	mov	r0, sp
 800a02e:	9600      	str	r6, [sp, #0]
 800a030:	f7ff fd82 	bl	8009b38 <__lo0bits>
 800a034:	9900      	ldr	r1, [sp, #0]
 800a036:	b300      	cbz	r0, 800a07a <__d2b+0x82>
 800a038:	9a01      	ldr	r2, [sp, #4]
 800a03a:	f1c0 0320 	rsb	r3, r0, #32
 800a03e:	fa02 f303 	lsl.w	r3, r2, r3
 800a042:	430b      	orrs	r3, r1
 800a044:	40c2      	lsrs	r2, r0
 800a046:	6163      	str	r3, [r4, #20]
 800a048:	9201      	str	r2, [sp, #4]
 800a04a:	9b01      	ldr	r3, [sp, #4]
 800a04c:	61a3      	str	r3, [r4, #24]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bf14      	ite	ne
 800a052:	2202      	movne	r2, #2
 800a054:	2201      	moveq	r2, #1
 800a056:	6122      	str	r2, [r4, #16]
 800a058:	b1d5      	cbz	r5, 800a090 <__d2b+0x98>
 800a05a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a05e:	4405      	add	r5, r0
 800a060:	f8c9 5000 	str.w	r5, [r9]
 800a064:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a068:	f8c8 0000 	str.w	r0, [r8]
 800a06c:	4620      	mov	r0, r4
 800a06e:	b003      	add	sp, #12
 800a070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a078:	e7d5      	b.n	800a026 <__d2b+0x2e>
 800a07a:	6161      	str	r1, [r4, #20]
 800a07c:	e7e5      	b.n	800a04a <__d2b+0x52>
 800a07e:	a801      	add	r0, sp, #4
 800a080:	f7ff fd5a 	bl	8009b38 <__lo0bits>
 800a084:	9b01      	ldr	r3, [sp, #4]
 800a086:	6163      	str	r3, [r4, #20]
 800a088:	2201      	movs	r2, #1
 800a08a:	6122      	str	r2, [r4, #16]
 800a08c:	3020      	adds	r0, #32
 800a08e:	e7e3      	b.n	800a058 <__d2b+0x60>
 800a090:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a094:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a098:	f8c9 0000 	str.w	r0, [r9]
 800a09c:	6918      	ldr	r0, [r3, #16]
 800a09e:	f7ff fd2b 	bl	8009af8 <__hi0bits>
 800a0a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0a6:	e7df      	b.n	800a068 <__d2b+0x70>
 800a0a8:	0800c81f 	.word	0x0800c81f
 800a0ac:	0800c890 	.word	0x0800c890

0800a0b0 <_calloc_r>:
 800a0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b2:	fba1 2402 	umull	r2, r4, r1, r2
 800a0b6:	b94c      	cbnz	r4, 800a0cc <_calloc_r+0x1c>
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	9201      	str	r2, [sp, #4]
 800a0bc:	f000 f87a 	bl	800a1b4 <_malloc_r>
 800a0c0:	9a01      	ldr	r2, [sp, #4]
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	b930      	cbnz	r0, 800a0d4 <_calloc_r+0x24>
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	b003      	add	sp, #12
 800a0ca:	bd30      	pop	{r4, r5, pc}
 800a0cc:	220c      	movs	r2, #12
 800a0ce:	6002      	str	r2, [r0, #0]
 800a0d0:	2500      	movs	r5, #0
 800a0d2:	e7f8      	b.n	800a0c6 <_calloc_r+0x16>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7fe f85d 	bl	8008194 <memset>
 800a0da:	e7f4      	b.n	800a0c6 <_calloc_r+0x16>

0800a0dc <_free_r>:
 800a0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	d044      	beq.n	800a16c <_free_r+0x90>
 800a0e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e6:	9001      	str	r0, [sp, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a0ee:	bfb8      	it	lt
 800a0f0:	18e4      	addlt	r4, r4, r3
 800a0f2:	f000 fcdf 	bl	800aab4 <__malloc_lock>
 800a0f6:	4a1e      	ldr	r2, [pc, #120]	; (800a170 <_free_r+0x94>)
 800a0f8:	9801      	ldr	r0, [sp, #4]
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	b933      	cbnz	r3, 800a10c <_free_r+0x30>
 800a0fe:	6063      	str	r3, [r4, #4]
 800a100:	6014      	str	r4, [r2, #0]
 800a102:	b003      	add	sp, #12
 800a104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a108:	f000 bcda 	b.w	800aac0 <__malloc_unlock>
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	d908      	bls.n	800a122 <_free_r+0x46>
 800a110:	6825      	ldr	r5, [r4, #0]
 800a112:	1961      	adds	r1, r4, r5
 800a114:	428b      	cmp	r3, r1
 800a116:	bf01      	itttt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	1949      	addeq	r1, r1, r5
 800a11e:	6021      	streq	r1, [r4, #0]
 800a120:	e7ed      	b.n	800a0fe <_free_r+0x22>
 800a122:	461a      	mov	r2, r3
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	b10b      	cbz	r3, 800a12c <_free_r+0x50>
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d9fa      	bls.n	800a122 <_free_r+0x46>
 800a12c:	6811      	ldr	r1, [r2, #0]
 800a12e:	1855      	adds	r5, r2, r1
 800a130:	42a5      	cmp	r5, r4
 800a132:	d10b      	bne.n	800a14c <_free_r+0x70>
 800a134:	6824      	ldr	r4, [r4, #0]
 800a136:	4421      	add	r1, r4
 800a138:	1854      	adds	r4, r2, r1
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	6011      	str	r1, [r2, #0]
 800a13e:	d1e0      	bne.n	800a102 <_free_r+0x26>
 800a140:	681c      	ldr	r4, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	6053      	str	r3, [r2, #4]
 800a146:	4421      	add	r1, r4
 800a148:	6011      	str	r1, [r2, #0]
 800a14a:	e7da      	b.n	800a102 <_free_r+0x26>
 800a14c:	d902      	bls.n	800a154 <_free_r+0x78>
 800a14e:	230c      	movs	r3, #12
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	e7d6      	b.n	800a102 <_free_r+0x26>
 800a154:	6825      	ldr	r5, [r4, #0]
 800a156:	1961      	adds	r1, r4, r5
 800a158:	428b      	cmp	r3, r1
 800a15a:	bf04      	itt	eq
 800a15c:	6819      	ldreq	r1, [r3, #0]
 800a15e:	685b      	ldreq	r3, [r3, #4]
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	bf04      	itt	eq
 800a164:	1949      	addeq	r1, r1, r5
 800a166:	6021      	streq	r1, [r4, #0]
 800a168:	6054      	str	r4, [r2, #4]
 800a16a:	e7ca      	b.n	800a102 <_free_r+0x26>
 800a16c:	b003      	add	sp, #12
 800a16e:	bd30      	pop	{r4, r5, pc}
 800a170:	200003d8 	.word	0x200003d8

0800a174 <sbrk_aligned>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4e0e      	ldr	r6, [pc, #56]	; (800a1b0 <sbrk_aligned+0x3c>)
 800a178:	460c      	mov	r4, r1
 800a17a:	6831      	ldr	r1, [r6, #0]
 800a17c:	4605      	mov	r5, r0
 800a17e:	b911      	cbnz	r1, 800a186 <sbrk_aligned+0x12>
 800a180:	f000 f9e6 	bl	800a550 <_sbrk_r>
 800a184:	6030      	str	r0, [r6, #0]
 800a186:	4621      	mov	r1, r4
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 f9e1 	bl	800a550 <_sbrk_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	d00a      	beq.n	800a1a8 <sbrk_aligned+0x34>
 800a192:	1cc4      	adds	r4, r0, #3
 800a194:	f024 0403 	bic.w	r4, r4, #3
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d007      	beq.n	800a1ac <sbrk_aligned+0x38>
 800a19c:	1a21      	subs	r1, r4, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 f9d6 	bl	800a550 <_sbrk_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d101      	bne.n	800a1ac <sbrk_aligned+0x38>
 800a1a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	200003dc 	.word	0x200003dc

0800a1b4 <_malloc_r>:
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	1ccd      	adds	r5, r1, #3
 800a1ba:	f025 0503 	bic.w	r5, r5, #3
 800a1be:	3508      	adds	r5, #8
 800a1c0:	2d0c      	cmp	r5, #12
 800a1c2:	bf38      	it	cc
 800a1c4:	250c      	movcc	r5, #12
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	db01      	blt.n	800a1d0 <_malloc_r+0x1c>
 800a1cc:	42a9      	cmp	r1, r5
 800a1ce:	d905      	bls.n	800a1dc <_malloc_r+0x28>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1dc:	4e2e      	ldr	r6, [pc, #184]	; (800a298 <_malloc_r+0xe4>)
 800a1de:	f000 fc69 	bl	800aab4 <__malloc_lock>
 800a1e2:	6833      	ldr	r3, [r6, #0]
 800a1e4:	461c      	mov	r4, r3
 800a1e6:	bb34      	cbnz	r4, 800a236 <_malloc_r+0x82>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	f7ff ffc2 	bl	800a174 <sbrk_aligned>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	d14d      	bne.n	800a292 <_malloc_r+0xde>
 800a1f6:	6834      	ldr	r4, [r6, #0]
 800a1f8:	4626      	mov	r6, r4
 800a1fa:	2e00      	cmp	r6, #0
 800a1fc:	d140      	bne.n	800a280 <_malloc_r+0xcc>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	4631      	mov	r1, r6
 800a202:	4638      	mov	r0, r7
 800a204:	eb04 0803 	add.w	r8, r4, r3
 800a208:	f000 f9a2 	bl	800a550 <_sbrk_r>
 800a20c:	4580      	cmp	r8, r0
 800a20e:	d13a      	bne.n	800a286 <_malloc_r+0xd2>
 800a210:	6821      	ldr	r1, [r4, #0]
 800a212:	3503      	adds	r5, #3
 800a214:	1a6d      	subs	r5, r5, r1
 800a216:	f025 0503 	bic.w	r5, r5, #3
 800a21a:	3508      	adds	r5, #8
 800a21c:	2d0c      	cmp	r5, #12
 800a21e:	bf38      	it	cc
 800a220:	250c      	movcc	r5, #12
 800a222:	4629      	mov	r1, r5
 800a224:	4638      	mov	r0, r7
 800a226:	f7ff ffa5 	bl	800a174 <sbrk_aligned>
 800a22a:	3001      	adds	r0, #1
 800a22c:	d02b      	beq.n	800a286 <_malloc_r+0xd2>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	442b      	add	r3, r5
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	e00e      	b.n	800a254 <_malloc_r+0xa0>
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	1b52      	subs	r2, r2, r5
 800a23a:	d41e      	bmi.n	800a27a <_malloc_r+0xc6>
 800a23c:	2a0b      	cmp	r2, #11
 800a23e:	d916      	bls.n	800a26e <_malloc_r+0xba>
 800a240:	1961      	adds	r1, r4, r5
 800a242:	42a3      	cmp	r3, r4
 800a244:	6025      	str	r5, [r4, #0]
 800a246:	bf18      	it	ne
 800a248:	6059      	strne	r1, [r3, #4]
 800a24a:	6863      	ldr	r3, [r4, #4]
 800a24c:	bf08      	it	eq
 800a24e:	6031      	streq	r1, [r6, #0]
 800a250:	5162      	str	r2, [r4, r5]
 800a252:	604b      	str	r3, [r1, #4]
 800a254:	4638      	mov	r0, r7
 800a256:	f104 060b 	add.w	r6, r4, #11
 800a25a:	f000 fc31 	bl	800aac0 <__malloc_unlock>
 800a25e:	f026 0607 	bic.w	r6, r6, #7
 800a262:	1d23      	adds	r3, r4, #4
 800a264:	1af2      	subs	r2, r6, r3
 800a266:	d0b6      	beq.n	800a1d6 <_malloc_r+0x22>
 800a268:	1b9b      	subs	r3, r3, r6
 800a26a:	50a3      	str	r3, [r4, r2]
 800a26c:	e7b3      	b.n	800a1d6 <_malloc_r+0x22>
 800a26e:	6862      	ldr	r2, [r4, #4]
 800a270:	42a3      	cmp	r3, r4
 800a272:	bf0c      	ite	eq
 800a274:	6032      	streq	r2, [r6, #0]
 800a276:	605a      	strne	r2, [r3, #4]
 800a278:	e7ec      	b.n	800a254 <_malloc_r+0xa0>
 800a27a:	4623      	mov	r3, r4
 800a27c:	6864      	ldr	r4, [r4, #4]
 800a27e:	e7b2      	b.n	800a1e6 <_malloc_r+0x32>
 800a280:	4634      	mov	r4, r6
 800a282:	6876      	ldr	r6, [r6, #4]
 800a284:	e7b9      	b.n	800a1fa <_malloc_r+0x46>
 800a286:	230c      	movs	r3, #12
 800a288:	603b      	str	r3, [r7, #0]
 800a28a:	4638      	mov	r0, r7
 800a28c:	f000 fc18 	bl	800aac0 <__malloc_unlock>
 800a290:	e7a1      	b.n	800a1d6 <_malloc_r+0x22>
 800a292:	6025      	str	r5, [r4, #0]
 800a294:	e7de      	b.n	800a254 <_malloc_r+0xa0>
 800a296:	bf00      	nop
 800a298:	200003d8 	.word	0x200003d8

0800a29c <__sfputc_r>:
 800a29c:	6893      	ldr	r3, [r2, #8]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	b410      	push	{r4}
 800a2a4:	6093      	str	r3, [r2, #8]
 800a2a6:	da08      	bge.n	800a2ba <__sfputc_r+0x1e>
 800a2a8:	6994      	ldr	r4, [r2, #24]
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	db01      	blt.n	800a2b2 <__sfputc_r+0x16>
 800a2ae:	290a      	cmp	r1, #10
 800a2b0:	d103      	bne.n	800a2ba <__sfputc_r+0x1e>
 800a2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b6:	f000 b99f 	b.w	800a5f8 <__swbuf_r>
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	1c58      	adds	r0, r3, #1
 800a2be:	6010      	str	r0, [r2, #0]
 800a2c0:	7019      	strb	r1, [r3, #0]
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <__sfputs_r>:
 800a2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	18d5      	adds	r5, r2, r3
 800a2d4:	42ac      	cmp	r4, r5
 800a2d6:	d101      	bne.n	800a2dc <__sfputs_r+0x12>
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e007      	b.n	800a2ec <__sfputs_r+0x22>
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	463a      	mov	r2, r7
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f7ff ffda 	bl	800a29c <__sfputc_r>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d1f3      	bne.n	800a2d4 <__sfputs_r+0xa>
 800a2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2f0 <_vfiprintf_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	b09d      	sub	sp, #116	; 0x74
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	4698      	mov	r8, r3
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	b118      	cbz	r0, 800a308 <_vfiprintf_r+0x18>
 800a300:	6983      	ldr	r3, [r0, #24]
 800a302:	b90b      	cbnz	r3, 800a308 <_vfiprintf_r+0x18>
 800a304:	f7ff faa2 	bl	800984c <__sinit>
 800a308:	4b89      	ldr	r3, [pc, #548]	; (800a530 <_vfiprintf_r+0x240>)
 800a30a:	429d      	cmp	r5, r3
 800a30c:	d11b      	bne.n	800a346 <_vfiprintf_r+0x56>
 800a30e:	6875      	ldr	r5, [r6, #4]
 800a310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a312:	07d9      	lsls	r1, r3, #31
 800a314:	d405      	bmi.n	800a322 <_vfiprintf_r+0x32>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	059a      	lsls	r2, r3, #22
 800a31a:	d402      	bmi.n	800a322 <_vfiprintf_r+0x32>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f7ff fb38 	bl	8009992 <__retarget_lock_acquire_recursive>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	071b      	lsls	r3, r3, #28
 800a326:	d501      	bpl.n	800a32c <_vfiprintf_r+0x3c>
 800a328:	692b      	ldr	r3, [r5, #16]
 800a32a:	b9eb      	cbnz	r3, 800a368 <_vfiprintf_r+0x78>
 800a32c:	4629      	mov	r1, r5
 800a32e:	4630      	mov	r0, r6
 800a330:	f000 f9c6 	bl	800a6c0 <__swsetup_r>
 800a334:	b1c0      	cbz	r0, 800a368 <_vfiprintf_r+0x78>
 800a336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a338:	07dc      	lsls	r4, r3, #31
 800a33a:	d50e      	bpl.n	800a35a <_vfiprintf_r+0x6a>
 800a33c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a340:	b01d      	add	sp, #116	; 0x74
 800a342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a346:	4b7b      	ldr	r3, [pc, #492]	; (800a534 <_vfiprintf_r+0x244>)
 800a348:	429d      	cmp	r5, r3
 800a34a:	d101      	bne.n	800a350 <_vfiprintf_r+0x60>
 800a34c:	68b5      	ldr	r5, [r6, #8]
 800a34e:	e7df      	b.n	800a310 <_vfiprintf_r+0x20>
 800a350:	4b79      	ldr	r3, [pc, #484]	; (800a538 <_vfiprintf_r+0x248>)
 800a352:	429d      	cmp	r5, r3
 800a354:	bf08      	it	eq
 800a356:	68f5      	ldreq	r5, [r6, #12]
 800a358:	e7da      	b.n	800a310 <_vfiprintf_r+0x20>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	0598      	lsls	r0, r3, #22
 800a35e:	d4ed      	bmi.n	800a33c <_vfiprintf_r+0x4c>
 800a360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a362:	f7ff fb17 	bl	8009994 <__retarget_lock_release_recursive>
 800a366:	e7e9      	b.n	800a33c <_vfiprintf_r+0x4c>
 800a368:	2300      	movs	r3, #0
 800a36a:	9309      	str	r3, [sp, #36]	; 0x24
 800a36c:	2320      	movs	r3, #32
 800a36e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a372:	f8cd 800c 	str.w	r8, [sp, #12]
 800a376:	2330      	movs	r3, #48	; 0x30
 800a378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a53c <_vfiprintf_r+0x24c>
 800a37c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a380:	f04f 0901 	mov.w	r9, #1
 800a384:	4623      	mov	r3, r4
 800a386:	469a      	mov	sl, r3
 800a388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a38c:	b10a      	cbz	r2, 800a392 <_vfiprintf_r+0xa2>
 800a38e:	2a25      	cmp	r2, #37	; 0x25
 800a390:	d1f9      	bne.n	800a386 <_vfiprintf_r+0x96>
 800a392:	ebba 0b04 	subs.w	fp, sl, r4
 800a396:	d00b      	beq.n	800a3b0 <_vfiprintf_r+0xc0>
 800a398:	465b      	mov	r3, fp
 800a39a:	4622      	mov	r2, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7ff ff93 	bl	800a2ca <__sfputs_r>
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f000 80aa 	beq.w	800a4fe <_vfiprintf_r+0x20e>
 800a3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ac:	445a      	add	r2, fp
 800a3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 80a2 	beq.w	800a4fe <_vfiprintf_r+0x20e>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c4:	f10a 0a01 	add.w	sl, sl, #1
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	9307      	str	r3, [sp, #28]
 800a3cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d2:	4654      	mov	r4, sl
 800a3d4:	2205      	movs	r2, #5
 800a3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3da:	4858      	ldr	r0, [pc, #352]	; (800a53c <_vfiprintf_r+0x24c>)
 800a3dc:	f7f5 ff08 	bl	80001f0 <memchr>
 800a3e0:	9a04      	ldr	r2, [sp, #16]
 800a3e2:	b9d8      	cbnz	r0, 800a41c <_vfiprintf_r+0x12c>
 800a3e4:	06d1      	lsls	r1, r2, #27
 800a3e6:	bf44      	itt	mi
 800a3e8:	2320      	movmi	r3, #32
 800a3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ee:	0713      	lsls	r3, r2, #28
 800a3f0:	bf44      	itt	mi
 800a3f2:	232b      	movmi	r3, #43	; 0x2b
 800a3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fe:	d015      	beq.n	800a42c <_vfiprintf_r+0x13c>
 800a400:	9a07      	ldr	r2, [sp, #28]
 800a402:	4654      	mov	r4, sl
 800a404:	2000      	movs	r0, #0
 800a406:	f04f 0c0a 	mov.w	ip, #10
 800a40a:	4621      	mov	r1, r4
 800a40c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a410:	3b30      	subs	r3, #48	; 0x30
 800a412:	2b09      	cmp	r3, #9
 800a414:	d94e      	bls.n	800a4b4 <_vfiprintf_r+0x1c4>
 800a416:	b1b0      	cbz	r0, 800a446 <_vfiprintf_r+0x156>
 800a418:	9207      	str	r2, [sp, #28]
 800a41a:	e014      	b.n	800a446 <_vfiprintf_r+0x156>
 800a41c:	eba0 0308 	sub.w	r3, r0, r8
 800a420:	fa09 f303 	lsl.w	r3, r9, r3
 800a424:	4313      	orrs	r3, r2
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	46a2      	mov	sl, r4
 800a42a:	e7d2      	b.n	800a3d2 <_vfiprintf_r+0xe2>
 800a42c:	9b03      	ldr	r3, [sp, #12]
 800a42e:	1d19      	adds	r1, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	9103      	str	r1, [sp, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfbb      	ittet	lt
 800a438:	425b      	neglt	r3, r3
 800a43a:	f042 0202 	orrlt.w	r2, r2, #2
 800a43e:	9307      	strge	r3, [sp, #28]
 800a440:	9307      	strlt	r3, [sp, #28]
 800a442:	bfb8      	it	lt
 800a444:	9204      	strlt	r2, [sp, #16]
 800a446:	7823      	ldrb	r3, [r4, #0]
 800a448:	2b2e      	cmp	r3, #46	; 0x2e
 800a44a:	d10c      	bne.n	800a466 <_vfiprintf_r+0x176>
 800a44c:	7863      	ldrb	r3, [r4, #1]
 800a44e:	2b2a      	cmp	r3, #42	; 0x2a
 800a450:	d135      	bne.n	800a4be <_vfiprintf_r+0x1ce>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	1d1a      	adds	r2, r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	9203      	str	r2, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bfb8      	it	lt
 800a45e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a462:	3402      	adds	r4, #2
 800a464:	9305      	str	r3, [sp, #20]
 800a466:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a54c <_vfiprintf_r+0x25c>
 800a46a:	7821      	ldrb	r1, [r4, #0]
 800a46c:	2203      	movs	r2, #3
 800a46e:	4650      	mov	r0, sl
 800a470:	f7f5 febe 	bl	80001f0 <memchr>
 800a474:	b140      	cbz	r0, 800a488 <_vfiprintf_r+0x198>
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	eba0 000a 	sub.w	r0, r0, sl
 800a47c:	fa03 f000 	lsl.w	r0, r3, r0
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	4303      	orrs	r3, r0
 800a484:	3401      	adds	r4, #1
 800a486:	9304      	str	r3, [sp, #16]
 800a488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48c:	482c      	ldr	r0, [pc, #176]	; (800a540 <_vfiprintf_r+0x250>)
 800a48e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a492:	2206      	movs	r2, #6
 800a494:	f7f5 feac 	bl	80001f0 <memchr>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d03f      	beq.n	800a51c <_vfiprintf_r+0x22c>
 800a49c:	4b29      	ldr	r3, [pc, #164]	; (800a544 <_vfiprintf_r+0x254>)
 800a49e:	bb1b      	cbnz	r3, 800a4e8 <_vfiprintf_r+0x1f8>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	3307      	adds	r3, #7
 800a4a4:	f023 0307 	bic.w	r3, r3, #7
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	9303      	str	r3, [sp, #12]
 800a4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ae:	443b      	add	r3, r7
 800a4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b2:	e767      	b.n	800a384 <_vfiprintf_r+0x94>
 800a4b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	e7a5      	b.n	800a40a <_vfiprintf_r+0x11a>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	3401      	adds	r4, #1
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f04f 0c0a 	mov.w	ip, #10
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d0:	3a30      	subs	r2, #48	; 0x30
 800a4d2:	2a09      	cmp	r2, #9
 800a4d4:	d903      	bls.n	800a4de <_vfiprintf_r+0x1ee>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0c5      	beq.n	800a466 <_vfiprintf_r+0x176>
 800a4da:	9105      	str	r1, [sp, #20]
 800a4dc:	e7c3      	b.n	800a466 <_vfiprintf_r+0x176>
 800a4de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e7f0      	b.n	800a4ca <_vfiprintf_r+0x1da>
 800a4e8:	ab03      	add	r3, sp, #12
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	462a      	mov	r2, r5
 800a4ee:	4b16      	ldr	r3, [pc, #88]	; (800a548 <_vfiprintf_r+0x258>)
 800a4f0:	a904      	add	r1, sp, #16
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f7fd fef6 	bl	80082e4 <_printf_float>
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	1c78      	adds	r0, r7, #1
 800a4fc:	d1d6      	bne.n	800a4ac <_vfiprintf_r+0x1bc>
 800a4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a500:	07d9      	lsls	r1, r3, #31
 800a502:	d405      	bmi.n	800a510 <_vfiprintf_r+0x220>
 800a504:	89ab      	ldrh	r3, [r5, #12]
 800a506:	059a      	lsls	r2, r3, #22
 800a508:	d402      	bmi.n	800a510 <_vfiprintf_r+0x220>
 800a50a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a50c:	f7ff fa42 	bl	8009994 <__retarget_lock_release_recursive>
 800a510:	89ab      	ldrh	r3, [r5, #12]
 800a512:	065b      	lsls	r3, r3, #25
 800a514:	f53f af12 	bmi.w	800a33c <_vfiprintf_r+0x4c>
 800a518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a51a:	e711      	b.n	800a340 <_vfiprintf_r+0x50>
 800a51c:	ab03      	add	r3, sp, #12
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	462a      	mov	r2, r5
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <_vfiprintf_r+0x258>)
 800a524:	a904      	add	r1, sp, #16
 800a526:	4630      	mov	r0, r6
 800a528:	f7fe f980 	bl	800882c <_printf_i>
 800a52c:	e7e4      	b.n	800a4f8 <_vfiprintf_r+0x208>
 800a52e:	bf00      	nop
 800a530:	0800c850 	.word	0x0800c850
 800a534:	0800c870 	.word	0x0800c870
 800a538:	0800c830 	.word	0x0800c830
 800a53c:	0800c9ec 	.word	0x0800c9ec
 800a540:	0800c9f6 	.word	0x0800c9f6
 800a544:	080082e5 	.word	0x080082e5
 800a548:	0800a2cb 	.word	0x0800a2cb
 800a54c:	0800c9f2 	.word	0x0800c9f2

0800a550 <_sbrk_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d06      	ldr	r5, [pc, #24]	; (800a56c <_sbrk_r+0x1c>)
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	602b      	str	r3, [r5, #0]
 800a55c:	f7fb fad6 	bl	8005b0c <_sbrk>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_sbrk_r+0x1a>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_sbrk_r+0x1a>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	200003e0 	.word	0x200003e0

0800a570 <__sread>:
 800a570:	b510      	push	{r4, lr}
 800a572:	460c      	mov	r4, r1
 800a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a578:	f000 faa8 	bl	800aacc <_read_r>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	bfab      	itete	ge
 800a580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a582:	89a3      	ldrhlt	r3, [r4, #12]
 800a584:	181b      	addge	r3, r3, r0
 800a586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a58a:	bfac      	ite	ge
 800a58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a58e:	81a3      	strhlt	r3, [r4, #12]
 800a590:	bd10      	pop	{r4, pc}

0800a592 <__swrite>:
 800a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	461f      	mov	r7, r3
 800a598:	898b      	ldrh	r3, [r1, #12]
 800a59a:	05db      	lsls	r3, r3, #23
 800a59c:	4605      	mov	r5, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	d505      	bpl.n	800a5b0 <__swrite+0x1e>
 800a5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f000 f9f8 	bl	800a9a0 <_lseek_r>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	4632      	mov	r2, r6
 800a5be:	463b      	mov	r3, r7
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c6:	f000 b869 	b.w	800a69c <_write_r>

0800a5ca <__sseek>:
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d2:	f000 f9e5 	bl	800a9a0 <_lseek_r>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	bf15      	itete	ne
 800a5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5e6:	81a3      	strheq	r3, [r4, #12]
 800a5e8:	bf18      	it	ne
 800a5ea:	81a3      	strhne	r3, [r4, #12]
 800a5ec:	bd10      	pop	{r4, pc}

0800a5ee <__sclose>:
 800a5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f2:	f000 b8f1 	b.w	800a7d8 <_close_r>
	...

0800a5f8 <__swbuf_r>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	460e      	mov	r6, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	4605      	mov	r5, r0
 800a600:	b118      	cbz	r0, 800a60a <__swbuf_r+0x12>
 800a602:	6983      	ldr	r3, [r0, #24]
 800a604:	b90b      	cbnz	r3, 800a60a <__swbuf_r+0x12>
 800a606:	f7ff f921 	bl	800984c <__sinit>
 800a60a:	4b21      	ldr	r3, [pc, #132]	; (800a690 <__swbuf_r+0x98>)
 800a60c:	429c      	cmp	r4, r3
 800a60e:	d12b      	bne.n	800a668 <__swbuf_r+0x70>
 800a610:	686c      	ldr	r4, [r5, #4]
 800a612:	69a3      	ldr	r3, [r4, #24]
 800a614:	60a3      	str	r3, [r4, #8]
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	071a      	lsls	r2, r3, #28
 800a61a:	d52f      	bpl.n	800a67c <__swbuf_r+0x84>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	b36b      	cbz	r3, 800a67c <__swbuf_r+0x84>
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	6820      	ldr	r0, [r4, #0]
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	b2f6      	uxtb	r6, r6
 800a62a:	4283      	cmp	r3, r0
 800a62c:	4637      	mov	r7, r6
 800a62e:	dc04      	bgt.n	800a63a <__swbuf_r+0x42>
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f000 f966 	bl	800a904 <_fflush_r>
 800a638:	bb30      	cbnz	r0, 800a688 <__swbuf_r+0x90>
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	701e      	strb	r6, [r3, #0]
 800a648:	6963      	ldr	r3, [r4, #20]
 800a64a:	3001      	adds	r0, #1
 800a64c:	4283      	cmp	r3, r0
 800a64e:	d004      	beq.n	800a65a <__swbuf_r+0x62>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	07db      	lsls	r3, r3, #31
 800a654:	d506      	bpl.n	800a664 <__swbuf_r+0x6c>
 800a656:	2e0a      	cmp	r6, #10
 800a658:	d104      	bne.n	800a664 <__swbuf_r+0x6c>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f000 f951 	bl	800a904 <_fflush_r>
 800a662:	b988      	cbnz	r0, 800a688 <__swbuf_r+0x90>
 800a664:	4638      	mov	r0, r7
 800a666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <__swbuf_r+0x9c>)
 800a66a:	429c      	cmp	r4, r3
 800a66c:	d101      	bne.n	800a672 <__swbuf_r+0x7a>
 800a66e:	68ac      	ldr	r4, [r5, #8]
 800a670:	e7cf      	b.n	800a612 <__swbuf_r+0x1a>
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <__swbuf_r+0xa0>)
 800a674:	429c      	cmp	r4, r3
 800a676:	bf08      	it	eq
 800a678:	68ec      	ldreq	r4, [r5, #12]
 800a67a:	e7ca      	b.n	800a612 <__swbuf_r+0x1a>
 800a67c:	4621      	mov	r1, r4
 800a67e:	4628      	mov	r0, r5
 800a680:	f000 f81e 	bl	800a6c0 <__swsetup_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	d0cb      	beq.n	800a620 <__swbuf_r+0x28>
 800a688:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a68c:	e7ea      	b.n	800a664 <__swbuf_r+0x6c>
 800a68e:	bf00      	nop
 800a690:	0800c850 	.word	0x0800c850
 800a694:	0800c870 	.word	0x0800c870
 800a698:	0800c830 	.word	0x0800c830

0800a69c <_write_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d07      	ldr	r5, [pc, #28]	; (800a6bc <_write_r+0x20>)
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	602a      	str	r2, [r5, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f7fb f912 	bl	80058d4 <_write>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d102      	bne.n	800a6ba <_write_r+0x1e>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b103      	cbz	r3, 800a6ba <_write_r+0x1e>
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	200003e0 	.word	0x200003e0

0800a6c0 <__swsetup_r>:
 800a6c0:	4b32      	ldr	r3, [pc, #200]	; (800a78c <__swsetup_r+0xcc>)
 800a6c2:	b570      	push	{r4, r5, r6, lr}
 800a6c4:	681d      	ldr	r5, [r3, #0]
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	b125      	cbz	r5, 800a6d6 <__swsetup_r+0x16>
 800a6cc:	69ab      	ldr	r3, [r5, #24]
 800a6ce:	b913      	cbnz	r3, 800a6d6 <__swsetup_r+0x16>
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7ff f8bb 	bl	800984c <__sinit>
 800a6d6:	4b2e      	ldr	r3, [pc, #184]	; (800a790 <__swsetup_r+0xd0>)
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	d10f      	bne.n	800a6fc <__swsetup_r+0x3c>
 800a6dc:	686c      	ldr	r4, [r5, #4]
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e4:	0719      	lsls	r1, r3, #28
 800a6e6:	d42c      	bmi.n	800a742 <__swsetup_r+0x82>
 800a6e8:	06dd      	lsls	r5, r3, #27
 800a6ea:	d411      	bmi.n	800a710 <__swsetup_r+0x50>
 800a6ec:	2309      	movs	r3, #9
 800a6ee:	6033      	str	r3, [r6, #0]
 800a6f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6fa:	e03e      	b.n	800a77a <__swsetup_r+0xba>
 800a6fc:	4b25      	ldr	r3, [pc, #148]	; (800a794 <__swsetup_r+0xd4>)
 800a6fe:	429c      	cmp	r4, r3
 800a700:	d101      	bne.n	800a706 <__swsetup_r+0x46>
 800a702:	68ac      	ldr	r4, [r5, #8]
 800a704:	e7eb      	b.n	800a6de <__swsetup_r+0x1e>
 800a706:	4b24      	ldr	r3, [pc, #144]	; (800a798 <__swsetup_r+0xd8>)
 800a708:	429c      	cmp	r4, r3
 800a70a:	bf08      	it	eq
 800a70c:	68ec      	ldreq	r4, [r5, #12]
 800a70e:	e7e6      	b.n	800a6de <__swsetup_r+0x1e>
 800a710:	0758      	lsls	r0, r3, #29
 800a712:	d512      	bpl.n	800a73a <__swsetup_r+0x7a>
 800a714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a716:	b141      	cbz	r1, 800a72a <__swsetup_r+0x6a>
 800a718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a71c:	4299      	cmp	r1, r3
 800a71e:	d002      	beq.n	800a726 <__swsetup_r+0x66>
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff fcdb 	bl	800a0dc <_free_r>
 800a726:	2300      	movs	r3, #0
 800a728:	6363      	str	r3, [r4, #52]	; 0x34
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	2300      	movs	r3, #0
 800a734:	6063      	str	r3, [r4, #4]
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f043 0308 	orr.w	r3, r3, #8
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	6923      	ldr	r3, [r4, #16]
 800a744:	b94b      	cbnz	r3, 800a75a <__swsetup_r+0x9a>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a750:	d003      	beq.n	800a75a <__swsetup_r+0x9a>
 800a752:	4621      	mov	r1, r4
 800a754:	4630      	mov	r0, r6
 800a756:	f000 f95b 	bl	800aa10 <__smakebuf_r>
 800a75a:	89a0      	ldrh	r0, [r4, #12]
 800a75c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a760:	f010 0301 	ands.w	r3, r0, #1
 800a764:	d00a      	beq.n	800a77c <__swsetup_r+0xbc>
 800a766:	2300      	movs	r3, #0
 800a768:	60a3      	str	r3, [r4, #8]
 800a76a:	6963      	ldr	r3, [r4, #20]
 800a76c:	425b      	negs	r3, r3
 800a76e:	61a3      	str	r3, [r4, #24]
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	b943      	cbnz	r3, 800a786 <__swsetup_r+0xc6>
 800a774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a778:	d1ba      	bne.n	800a6f0 <__swsetup_r+0x30>
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	0781      	lsls	r1, r0, #30
 800a77e:	bf58      	it	pl
 800a780:	6963      	ldrpl	r3, [r4, #20]
 800a782:	60a3      	str	r3, [r4, #8]
 800a784:	e7f4      	b.n	800a770 <__swsetup_r+0xb0>
 800a786:	2000      	movs	r0, #0
 800a788:	e7f7      	b.n	800a77a <__swsetup_r+0xba>
 800a78a:	bf00      	nop
 800a78c:	20000048 	.word	0x20000048
 800a790:	0800c850 	.word	0x0800c850
 800a794:	0800c870 	.word	0x0800c870
 800a798:	0800c830 	.word	0x0800c830

0800a79c <__assert_func>:
 800a79c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a79e:	4614      	mov	r4, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <__assert_func+0x2c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	68d8      	ldr	r0, [r3, #12]
 800a7aa:	b14c      	cbz	r4, 800a7c0 <__assert_func+0x24>
 800a7ac:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <__assert_func+0x30>)
 800a7ae:	9100      	str	r1, [sp, #0]
 800a7b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7b4:	4906      	ldr	r1, [pc, #24]	; (800a7d0 <__assert_func+0x34>)
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	f000 f8e0 	bl	800a97c <fiprintf>
 800a7bc:	f000 f9a5 	bl	800ab0a <abort>
 800a7c0:	4b04      	ldr	r3, [pc, #16]	; (800a7d4 <__assert_func+0x38>)
 800a7c2:	461c      	mov	r4, r3
 800a7c4:	e7f3      	b.n	800a7ae <__assert_func+0x12>
 800a7c6:	bf00      	nop
 800a7c8:	20000048 	.word	0x20000048
 800a7cc:	0800c9fd 	.word	0x0800c9fd
 800a7d0:	0800ca0a 	.word	0x0800ca0a
 800a7d4:	0800ca38 	.word	0x0800ca38

0800a7d8 <_close_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d06      	ldr	r5, [pc, #24]	; (800a7f4 <_close_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	f7fb f95d 	bl	8005aa2 <_close>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_close_r+0x1a>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_close_r+0x1a>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	200003e0 	.word	0x200003e0

0800a7f8 <__sflush_r>:
 800a7f8:	898a      	ldrh	r2, [r1, #12]
 800a7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	4605      	mov	r5, r0
 800a800:	0710      	lsls	r0, r2, #28
 800a802:	460c      	mov	r4, r1
 800a804:	d458      	bmi.n	800a8b8 <__sflush_r+0xc0>
 800a806:	684b      	ldr	r3, [r1, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc05      	bgt.n	800a818 <__sflush_r+0x20>
 800a80c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dc02      	bgt.n	800a818 <__sflush_r+0x20>
 800a812:	2000      	movs	r0, #0
 800a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d0f9      	beq.n	800a812 <__sflush_r+0x1a>
 800a81e:	2300      	movs	r3, #0
 800a820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a824:	682f      	ldr	r7, [r5, #0]
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	d032      	beq.n	800a890 <__sflush_r+0x98>
 800a82a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	075a      	lsls	r2, r3, #29
 800a830:	d505      	bpl.n	800a83e <__sflush_r+0x46>
 800a832:	6863      	ldr	r3, [r4, #4]
 800a834:	1ac0      	subs	r0, r0, r3
 800a836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a838:	b10b      	cbz	r3, 800a83e <__sflush_r+0x46>
 800a83a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a83c:	1ac0      	subs	r0, r0, r3
 800a83e:	2300      	movs	r3, #0
 800a840:	4602      	mov	r2, r0
 800a842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	4628      	mov	r0, r5
 800a848:	47b0      	blx	r6
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	d106      	bne.n	800a85e <__sflush_r+0x66>
 800a850:	6829      	ldr	r1, [r5, #0]
 800a852:	291d      	cmp	r1, #29
 800a854:	d82c      	bhi.n	800a8b0 <__sflush_r+0xb8>
 800a856:	4a2a      	ldr	r2, [pc, #168]	; (800a900 <__sflush_r+0x108>)
 800a858:	40ca      	lsrs	r2, r1
 800a85a:	07d6      	lsls	r6, r2, #31
 800a85c:	d528      	bpl.n	800a8b0 <__sflush_r+0xb8>
 800a85e:	2200      	movs	r2, #0
 800a860:	6062      	str	r2, [r4, #4]
 800a862:	04d9      	lsls	r1, r3, #19
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	d504      	bpl.n	800a874 <__sflush_r+0x7c>
 800a86a:	1c42      	adds	r2, r0, #1
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0x7a>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	b903      	cbnz	r3, 800a874 <__sflush_r+0x7c>
 800a872:	6560      	str	r0, [r4, #84]	; 0x54
 800a874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a876:	602f      	str	r7, [r5, #0]
 800a878:	2900      	cmp	r1, #0
 800a87a:	d0ca      	beq.n	800a812 <__sflush_r+0x1a>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <__sflush_r+0x92>
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff fc29 	bl	800a0dc <_free_r>
 800a88a:	2000      	movs	r0, #0
 800a88c:	6360      	str	r0, [r4, #52]	; 0x34
 800a88e:	e7c1      	b.n	800a814 <__sflush_r+0x1c>
 800a890:	6a21      	ldr	r1, [r4, #32]
 800a892:	2301      	movs	r3, #1
 800a894:	4628      	mov	r0, r5
 800a896:	47b0      	blx	r6
 800a898:	1c41      	adds	r1, r0, #1
 800a89a:	d1c7      	bne.n	800a82c <__sflush_r+0x34>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0c4      	beq.n	800a82c <__sflush_r+0x34>
 800a8a2:	2b1d      	cmp	r3, #29
 800a8a4:	d001      	beq.n	800a8aa <__sflush_r+0xb2>
 800a8a6:	2b16      	cmp	r3, #22
 800a8a8:	d101      	bne.n	800a8ae <__sflush_r+0xb6>
 800a8aa:	602f      	str	r7, [r5, #0]
 800a8ac:	e7b1      	b.n	800a812 <__sflush_r+0x1a>
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	e7ad      	b.n	800a814 <__sflush_r+0x1c>
 800a8b8:	690f      	ldr	r7, [r1, #16]
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	d0a9      	beq.n	800a812 <__sflush_r+0x1a>
 800a8be:	0793      	lsls	r3, r2, #30
 800a8c0:	680e      	ldr	r6, [r1, #0]
 800a8c2:	bf08      	it	eq
 800a8c4:	694b      	ldreq	r3, [r1, #20]
 800a8c6:	600f      	str	r7, [r1, #0]
 800a8c8:	bf18      	it	ne
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	eba6 0807 	sub.w	r8, r6, r7
 800a8d0:	608b      	str	r3, [r1, #8]
 800a8d2:	f1b8 0f00 	cmp.w	r8, #0
 800a8d6:	dd9c      	ble.n	800a812 <__sflush_r+0x1a>
 800a8d8:	6a21      	ldr	r1, [r4, #32]
 800a8da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8dc:	4643      	mov	r3, r8
 800a8de:	463a      	mov	r2, r7
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b0      	blx	r6
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	dc06      	bgt.n	800a8f6 <__sflush_r+0xfe>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f4:	e78e      	b.n	800a814 <__sflush_r+0x1c>
 800a8f6:	4407      	add	r7, r0
 800a8f8:	eba8 0800 	sub.w	r8, r8, r0
 800a8fc:	e7e9      	b.n	800a8d2 <__sflush_r+0xda>
 800a8fe:	bf00      	nop
 800a900:	20400001 	.word	0x20400001

0800a904 <_fflush_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	690b      	ldr	r3, [r1, #16]
 800a908:	4605      	mov	r5, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	b913      	cbnz	r3, 800a914 <_fflush_r+0x10>
 800a90e:	2500      	movs	r5, #0
 800a910:	4628      	mov	r0, r5
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	b118      	cbz	r0, 800a91e <_fflush_r+0x1a>
 800a916:	6983      	ldr	r3, [r0, #24]
 800a918:	b90b      	cbnz	r3, 800a91e <_fflush_r+0x1a>
 800a91a:	f7fe ff97 	bl	800984c <__sinit>
 800a91e:	4b14      	ldr	r3, [pc, #80]	; (800a970 <_fflush_r+0x6c>)
 800a920:	429c      	cmp	r4, r3
 800a922:	d11b      	bne.n	800a95c <_fflush_r+0x58>
 800a924:	686c      	ldr	r4, [r5, #4]
 800a926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0ef      	beq.n	800a90e <_fflush_r+0xa>
 800a92e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a930:	07d0      	lsls	r0, r2, #31
 800a932:	d404      	bmi.n	800a93e <_fflush_r+0x3a>
 800a934:	0599      	lsls	r1, r3, #22
 800a936:	d402      	bmi.n	800a93e <_fflush_r+0x3a>
 800a938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93a:	f7ff f82a 	bl	8009992 <__retarget_lock_acquire_recursive>
 800a93e:	4628      	mov	r0, r5
 800a940:	4621      	mov	r1, r4
 800a942:	f7ff ff59 	bl	800a7f8 <__sflush_r>
 800a946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a948:	07da      	lsls	r2, r3, #31
 800a94a:	4605      	mov	r5, r0
 800a94c:	d4e0      	bmi.n	800a910 <_fflush_r+0xc>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	059b      	lsls	r3, r3, #22
 800a952:	d4dd      	bmi.n	800a910 <_fflush_r+0xc>
 800a954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a956:	f7ff f81d 	bl	8009994 <__retarget_lock_release_recursive>
 800a95a:	e7d9      	b.n	800a910 <_fflush_r+0xc>
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <_fflush_r+0x70>)
 800a95e:	429c      	cmp	r4, r3
 800a960:	d101      	bne.n	800a966 <_fflush_r+0x62>
 800a962:	68ac      	ldr	r4, [r5, #8]
 800a964:	e7df      	b.n	800a926 <_fflush_r+0x22>
 800a966:	4b04      	ldr	r3, [pc, #16]	; (800a978 <_fflush_r+0x74>)
 800a968:	429c      	cmp	r4, r3
 800a96a:	bf08      	it	eq
 800a96c:	68ec      	ldreq	r4, [r5, #12]
 800a96e:	e7da      	b.n	800a926 <_fflush_r+0x22>
 800a970:	0800c850 	.word	0x0800c850
 800a974:	0800c870 	.word	0x0800c870
 800a978:	0800c830 	.word	0x0800c830

0800a97c <fiprintf>:
 800a97c:	b40e      	push	{r1, r2, r3}
 800a97e:	b503      	push	{r0, r1, lr}
 800a980:	4601      	mov	r1, r0
 800a982:	ab03      	add	r3, sp, #12
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <fiprintf+0x20>)
 800a986:	f853 2b04 	ldr.w	r2, [r3], #4
 800a98a:	6800      	ldr	r0, [r0, #0]
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	f7ff fcaf 	bl	800a2f0 <_vfiprintf_r>
 800a992:	b002      	add	sp, #8
 800a994:	f85d eb04 	ldr.w	lr, [sp], #4
 800a998:	b003      	add	sp, #12
 800a99a:	4770      	bx	lr
 800a99c:	20000048 	.word	0x20000048

0800a9a0 <_lseek_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d07      	ldr	r5, [pc, #28]	; (800a9c0 <_lseek_r+0x20>)
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	602a      	str	r2, [r5, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f7fb f89e 	bl	8005af0 <_lseek>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_lseek_r+0x1e>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_lseek_r+0x1e>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	200003e0 	.word	0x200003e0

0800a9c4 <__swhatbuf_r>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	460e      	mov	r6, r1
 800a9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	b096      	sub	sp, #88	; 0x58
 800a9d0:	4614      	mov	r4, r2
 800a9d2:	461d      	mov	r5, r3
 800a9d4:	da08      	bge.n	800a9e8 <__swhatbuf_r+0x24>
 800a9d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	602a      	str	r2, [r5, #0]
 800a9de:	061a      	lsls	r2, r3, #24
 800a9e0:	d410      	bmi.n	800aa04 <__swhatbuf_r+0x40>
 800a9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9e6:	e00e      	b.n	800aa06 <__swhatbuf_r+0x42>
 800a9e8:	466a      	mov	r2, sp
 800a9ea:	f000 f895 	bl	800ab18 <_fstat_r>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	dbf1      	blt.n	800a9d6 <__swhatbuf_r+0x12>
 800a9f2:	9a01      	ldr	r2, [sp, #4]
 800a9f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9fc:	425a      	negs	r2, r3
 800a9fe:	415a      	adcs	r2, r3
 800aa00:	602a      	str	r2, [r5, #0]
 800aa02:	e7ee      	b.n	800a9e2 <__swhatbuf_r+0x1e>
 800aa04:	2340      	movs	r3, #64	; 0x40
 800aa06:	2000      	movs	r0, #0
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	b016      	add	sp, #88	; 0x58
 800aa0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa10 <__smakebuf_r>:
 800aa10:	898b      	ldrh	r3, [r1, #12]
 800aa12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa14:	079d      	lsls	r5, r3, #30
 800aa16:	4606      	mov	r6, r0
 800aa18:	460c      	mov	r4, r1
 800aa1a:	d507      	bpl.n	800aa2c <__smakebuf_r+0x1c>
 800aa1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	2301      	movs	r3, #1
 800aa26:	6163      	str	r3, [r4, #20]
 800aa28:	b002      	add	sp, #8
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	ab01      	add	r3, sp, #4
 800aa2e:	466a      	mov	r2, sp
 800aa30:	f7ff ffc8 	bl	800a9c4 <__swhatbuf_r>
 800aa34:	9900      	ldr	r1, [sp, #0]
 800aa36:	4605      	mov	r5, r0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff fbbb 	bl	800a1b4 <_malloc_r>
 800aa3e:	b948      	cbnz	r0, 800aa54 <__smakebuf_r+0x44>
 800aa40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa44:	059a      	lsls	r2, r3, #22
 800aa46:	d4ef      	bmi.n	800aa28 <__smakebuf_r+0x18>
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	f043 0302 	orr.w	r3, r3, #2
 800aa50:	81a3      	strh	r3, [r4, #12]
 800aa52:	e7e3      	b.n	800aa1c <__smakebuf_r+0xc>
 800aa54:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <__smakebuf_r+0x7c>)
 800aa56:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	6020      	str	r0, [r4, #0]
 800aa5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	9b00      	ldr	r3, [sp, #0]
 800aa64:	6163      	str	r3, [r4, #20]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	6120      	str	r0, [r4, #16]
 800aa6a:	b15b      	cbz	r3, 800aa84 <__smakebuf_r+0x74>
 800aa6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f863 	bl	800ab3c <_isatty_r>
 800aa76:	b128      	cbz	r0, 800aa84 <__smakebuf_r+0x74>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	89a0      	ldrh	r0, [r4, #12]
 800aa86:	4305      	orrs	r5, r0
 800aa88:	81a5      	strh	r5, [r4, #12]
 800aa8a:	e7cd      	b.n	800aa28 <__smakebuf_r+0x18>
 800aa8c:	080097e5 	.word	0x080097e5

0800aa90 <__ascii_mbtowc>:
 800aa90:	b082      	sub	sp, #8
 800aa92:	b901      	cbnz	r1, 800aa96 <__ascii_mbtowc+0x6>
 800aa94:	a901      	add	r1, sp, #4
 800aa96:	b142      	cbz	r2, 800aaaa <__ascii_mbtowc+0x1a>
 800aa98:	b14b      	cbz	r3, 800aaae <__ascii_mbtowc+0x1e>
 800aa9a:	7813      	ldrb	r3, [r2, #0]
 800aa9c:	600b      	str	r3, [r1, #0]
 800aa9e:	7812      	ldrb	r2, [r2, #0]
 800aaa0:	1e10      	subs	r0, r2, #0
 800aaa2:	bf18      	it	ne
 800aaa4:	2001      	movne	r0, #1
 800aaa6:	b002      	add	sp, #8
 800aaa8:	4770      	bx	lr
 800aaaa:	4610      	mov	r0, r2
 800aaac:	e7fb      	b.n	800aaa6 <__ascii_mbtowc+0x16>
 800aaae:	f06f 0001 	mvn.w	r0, #1
 800aab2:	e7f8      	b.n	800aaa6 <__ascii_mbtowc+0x16>

0800aab4 <__malloc_lock>:
 800aab4:	4801      	ldr	r0, [pc, #4]	; (800aabc <__malloc_lock+0x8>)
 800aab6:	f7fe bf6c 	b.w	8009992 <__retarget_lock_acquire_recursive>
 800aaba:	bf00      	nop
 800aabc:	200003d4 	.word	0x200003d4

0800aac0 <__malloc_unlock>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__malloc_unlock+0x8>)
 800aac2:	f7fe bf67 	b.w	8009994 <__retarget_lock_release_recursive>
 800aac6:	bf00      	nop
 800aac8:	200003d4 	.word	0x200003d4

0800aacc <_read_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_read_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7fa ffc4 	bl	8005a68 <_read>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_read_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_read_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	200003e0 	.word	0x200003e0

0800aaf0 <__ascii_wctomb>:
 800aaf0:	b149      	cbz	r1, 800ab06 <__ascii_wctomb+0x16>
 800aaf2:	2aff      	cmp	r2, #255	; 0xff
 800aaf4:	bf85      	ittet	hi
 800aaf6:	238a      	movhi	r3, #138	; 0x8a
 800aaf8:	6003      	strhi	r3, [r0, #0]
 800aafa:	700a      	strbls	r2, [r1, #0]
 800aafc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ab00:	bf98      	it	ls
 800ab02:	2001      	movls	r0, #1
 800ab04:	4770      	bx	lr
 800ab06:	4608      	mov	r0, r1
 800ab08:	4770      	bx	lr

0800ab0a <abort>:
 800ab0a:	b508      	push	{r3, lr}
 800ab0c:	2006      	movs	r0, #6
 800ab0e:	f000 f84d 	bl	800abac <raise>
 800ab12:	2001      	movs	r0, #1
 800ab14:	f7fa ff9e 	bl	8005a54 <_exit>

0800ab18 <_fstat_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d07      	ldr	r5, [pc, #28]	; (800ab38 <_fstat_r+0x20>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	4611      	mov	r1, r2
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	f7fa ffc8 	bl	8005aba <_fstat>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d102      	bne.n	800ab34 <_fstat_r+0x1c>
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	b103      	cbz	r3, 800ab34 <_fstat_r+0x1c>
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	200003e0 	.word	0x200003e0

0800ab3c <_isatty_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d06      	ldr	r5, [pc, #24]	; (800ab58 <_isatty_r+0x1c>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7fa ffc7 	bl	8005ada <_isatty>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_isatty_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_isatty_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	200003e0 	.word	0x200003e0

0800ab5c <_raise_r>:
 800ab5c:	291f      	cmp	r1, #31
 800ab5e:	b538      	push	{r3, r4, r5, lr}
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	d904      	bls.n	800ab70 <_raise_r+0x14>
 800ab66:	2316      	movs	r3, #22
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab72:	b112      	cbz	r2, 800ab7a <_raise_r+0x1e>
 800ab74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab78:	b94b      	cbnz	r3, 800ab8e <_raise_r+0x32>
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f000 f830 	bl	800abe0 <_getpid_r>
 800ab80:	462a      	mov	r2, r5
 800ab82:	4601      	mov	r1, r0
 800ab84:	4620      	mov	r0, r4
 800ab86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab8a:	f000 b817 	b.w	800abbc <_kill_r>
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d00a      	beq.n	800aba8 <_raise_r+0x4c>
 800ab92:	1c59      	adds	r1, r3, #1
 800ab94:	d103      	bne.n	800ab9e <_raise_r+0x42>
 800ab96:	2316      	movs	r3, #22
 800ab98:	6003      	str	r3, [r0, #0]
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	e7e7      	b.n	800ab6e <_raise_r+0x12>
 800ab9e:	2400      	movs	r4, #0
 800aba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aba4:	4628      	mov	r0, r5
 800aba6:	4798      	blx	r3
 800aba8:	2000      	movs	r0, #0
 800abaa:	e7e0      	b.n	800ab6e <_raise_r+0x12>

0800abac <raise>:
 800abac:	4b02      	ldr	r3, [pc, #8]	; (800abb8 <raise+0xc>)
 800abae:	4601      	mov	r1, r0
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	f7ff bfd3 	b.w	800ab5c <_raise_r>
 800abb6:	bf00      	nop
 800abb8:	20000048 	.word	0x20000048

0800abbc <_kill_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	; (800abdc <_kill_r+0x20>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	4611      	mov	r1, r2
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	f7fa ff33 	bl	8005a34 <_kill>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d102      	bne.n	800abd8 <_kill_r+0x1c>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b103      	cbz	r3, 800abd8 <_kill_r+0x1c>
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	bf00      	nop
 800abdc:	200003e0 	.word	0x200003e0

0800abe0 <_getpid_r>:
 800abe0:	f7fa bf20 	b.w	8005a24 <_getpid>

0800abe4 <round>:
 800abe4:	ec51 0b10 	vmov	r0, r1, d0
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800abee:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800abf2:	2c13      	cmp	r4, #19
 800abf4:	ee10 2a10 	vmov	r2, s0
 800abf8:	460b      	mov	r3, r1
 800abfa:	dc19      	bgt.n	800ac30 <round+0x4c>
 800abfc:	2c00      	cmp	r4, #0
 800abfe:	da09      	bge.n	800ac14 <round+0x30>
 800ac00:	3401      	adds	r4, #1
 800ac02:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ac06:	d103      	bne.n	800ac10 <round+0x2c>
 800ac08:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ac0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac10:	2200      	movs	r2, #0
 800ac12:	e028      	b.n	800ac66 <round+0x82>
 800ac14:	4d15      	ldr	r5, [pc, #84]	; (800ac6c <round+0x88>)
 800ac16:	4125      	asrs	r5, r4
 800ac18:	ea01 0605 	and.w	r6, r1, r5
 800ac1c:	4332      	orrs	r2, r6
 800ac1e:	d00e      	beq.n	800ac3e <round+0x5a>
 800ac20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ac24:	fa42 f404 	asr.w	r4, r2, r4
 800ac28:	4423      	add	r3, r4
 800ac2a:	ea23 0305 	bic.w	r3, r3, r5
 800ac2e:	e7ef      	b.n	800ac10 <round+0x2c>
 800ac30:	2c33      	cmp	r4, #51	; 0x33
 800ac32:	dd07      	ble.n	800ac44 <round+0x60>
 800ac34:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ac38:	d101      	bne.n	800ac3e <round+0x5a>
 800ac3a:	f7f5 fb2f 	bl	800029c <__adddf3>
 800ac3e:	ec41 0b10 	vmov	d0, r0, r1
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800ac48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ac4c:	40f5      	lsrs	r5, r6
 800ac4e:	4228      	tst	r0, r5
 800ac50:	d0f5      	beq.n	800ac3e <round+0x5a>
 800ac52:	2101      	movs	r1, #1
 800ac54:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ac58:	fa01 f404 	lsl.w	r4, r1, r4
 800ac5c:	1912      	adds	r2, r2, r4
 800ac5e:	bf28      	it	cs
 800ac60:	185b      	addcs	r3, r3, r1
 800ac62:	ea22 0205 	bic.w	r2, r2, r5
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	e7e8      	b.n	800ac3e <round+0x5a>
 800ac6c:	000fffff 	.word	0x000fffff

0800ac70 <asin>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	ed2d 8b02 	vpush	{d8}
 800ac76:	ec55 4b10 	vmov	r4, r5, d0
 800ac7a:	f000 f85d 	bl	800ad38 <__ieee754_asin>
 800ac7e:	4622      	mov	r2, r4
 800ac80:	462b      	mov	r3, r5
 800ac82:	4620      	mov	r0, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	eeb0 8a40 	vmov.f32	s16, s0
 800ac8a:	eef0 8a60 	vmov.f32	s17, s1
 800ac8e:	f7f5 ff55 	bl	8000b3c <__aeabi_dcmpun>
 800ac92:	b9a8      	cbnz	r0, 800acc0 <asin+0x50>
 800ac94:	ec45 4b10 	vmov	d0, r4, r5
 800ac98:	f000 fe92 	bl	800b9c0 <fabs>
 800ac9c:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <asin+0x60>)
 800ac9e:	ec51 0b10 	vmov	r0, r1, d0
 800aca2:	2200      	movs	r2, #0
 800aca4:	f7f5 ff40 	bl	8000b28 <__aeabi_dcmpgt>
 800aca8:	b150      	cbz	r0, 800acc0 <asin+0x50>
 800acaa:	f7fd fa2b 	bl	8008104 <__errno>
 800acae:	ecbd 8b02 	vpop	{d8}
 800acb2:	2321      	movs	r3, #33	; 0x21
 800acb4:	6003      	str	r3, [r0, #0]
 800acb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acba:	4806      	ldr	r0, [pc, #24]	; (800acd4 <asin+0x64>)
 800acbc:	f000 be8c 	b.w	800b9d8 <nan>
 800acc0:	eeb0 0a48 	vmov.f32	s0, s16
 800acc4:	eef0 0a68 	vmov.f32	s1, s17
 800acc8:	ecbd 8b02 	vpop	{d8}
 800accc:	bd38      	pop	{r3, r4, r5, pc}
 800acce:	bf00      	nop
 800acd0:	3ff00000 	.word	0x3ff00000
 800acd4:	0800ca38 	.word	0x0800ca38

0800acd8 <atan2>:
 800acd8:	f000 ba42 	b.w	800b160 <__ieee754_atan2>

0800acdc <fmod>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	ed2d 8b02 	vpush	{d8}
 800ace2:	ec57 6b10 	vmov	r6, r7, d0
 800ace6:	ec55 4b11 	vmov	r4, r5, d1
 800acea:	f000 fb03 	bl	800b2f4 <__ieee754_fmod>
 800acee:	4622      	mov	r2, r4
 800acf0:	462b      	mov	r3, r5
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	eeb0 8a40 	vmov.f32	s16, s0
 800acfa:	eef0 8a60 	vmov.f32	s17, s1
 800acfe:	f7f5 ff1d 	bl	8000b3c <__aeabi_dcmpun>
 800ad02:	b990      	cbnz	r0, 800ad2a <fmod+0x4e>
 800ad04:	2200      	movs	r2, #0
 800ad06:	2300      	movs	r3, #0
 800ad08:	4620      	mov	r0, r4
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	f7f5 fee4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad10:	b158      	cbz	r0, 800ad2a <fmod+0x4e>
 800ad12:	f7fd f9f7 	bl	8008104 <__errno>
 800ad16:	2321      	movs	r3, #33	; 0x21
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4610      	mov	r0, r2
 800ad20:	4619      	mov	r1, r3
 800ad22:	f7f5 fd9b 	bl	800085c <__aeabi_ddiv>
 800ad26:	ec41 0b18 	vmov	d8, r0, r1
 800ad2a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad2e:	eef0 0a68 	vmov.f32	s1, s17
 800ad32:	ecbd 8b02 	vpop	{d8}
 800ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad38 <__ieee754_asin>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	ed2d 8b04 	vpush	{d8-d9}
 800ad40:	ec55 4b10 	vmov	r4, r5, d0
 800ad44:	4bcc      	ldr	r3, [pc, #816]	; (800b078 <__ieee754_asin+0x340>)
 800ad46:	b083      	sub	sp, #12
 800ad48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ad4c:	4598      	cmp	r8, r3
 800ad4e:	9501      	str	r5, [sp, #4]
 800ad50:	dd35      	ble.n	800adbe <__ieee754_asin+0x86>
 800ad52:	ee10 3a10 	vmov	r3, s0
 800ad56:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800ad5a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800ad5e:	ea58 0303 	orrs.w	r3, r8, r3
 800ad62:	d117      	bne.n	800ad94 <__ieee754_asin+0x5c>
 800ad64:	a3aa      	add	r3, pc, #680	; (adr r3, 800b010 <__ieee754_asin+0x2d8>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	ee10 0a10 	vmov	r0, s0
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7f5 fc4a 	bl	8000608 <__aeabi_dmul>
 800ad74:	a3a8      	add	r3, pc, #672	; (adr r3, 800b018 <__ieee754_asin+0x2e0>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fc41 	bl	8000608 <__aeabi_dmul>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fa85 	bl	800029c <__adddf3>
 800ad92:	e00b      	b.n	800adac <__ieee754_asin+0x74>
 800ad94:	ee10 2a10 	vmov	r2, s0
 800ad98:	462b      	mov	r3, r5
 800ad9a:	ee10 0a10 	vmov	r0, s0
 800ad9e:	4629      	mov	r1, r5
 800ada0:	f7f5 fa7a 	bl	8000298 <__aeabi_dsub>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	f7f5 fd58 	bl	800085c <__aeabi_ddiv>
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	ec45 4b10 	vmov	d0, r4, r5
 800adb4:	b003      	add	sp, #12
 800adb6:	ecbd 8b04 	vpop	{d8-d9}
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbe:	4baf      	ldr	r3, [pc, #700]	; (800b07c <__ieee754_asin+0x344>)
 800adc0:	4598      	cmp	r8, r3
 800adc2:	dc11      	bgt.n	800ade8 <__ieee754_asin+0xb0>
 800adc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800adc8:	f280 80ae 	bge.w	800af28 <__ieee754_asin+0x1f0>
 800adcc:	a394      	add	r3, pc, #592	; (adr r3, 800b020 <__ieee754_asin+0x2e8>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	ee10 0a10 	vmov	r0, s0
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fa60 	bl	800029c <__adddf3>
 800addc:	4ba8      	ldr	r3, [pc, #672]	; (800b080 <__ieee754_asin+0x348>)
 800adde:	2200      	movs	r2, #0
 800ade0:	f7f5 fea2 	bl	8000b28 <__aeabi_dcmpgt>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d1e3      	bne.n	800adb0 <__ieee754_asin+0x78>
 800ade8:	ec45 4b10 	vmov	d0, r4, r5
 800adec:	f000 fde8 	bl	800b9c0 <fabs>
 800adf0:	49a3      	ldr	r1, [pc, #652]	; (800b080 <__ieee754_asin+0x348>)
 800adf2:	ec53 2b10 	vmov	r2, r3, d0
 800adf6:	2000      	movs	r0, #0
 800adf8:	f7f5 fa4e 	bl	8000298 <__aeabi_dsub>
 800adfc:	4ba1      	ldr	r3, [pc, #644]	; (800b084 <__ieee754_asin+0x34c>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	f7f5 fc02 	bl	8000608 <__aeabi_dmul>
 800ae04:	a388      	add	r3, pc, #544	; (adr r3, 800b028 <__ieee754_asin+0x2f0>)
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	460d      	mov	r5, r1
 800ae0e:	f7f5 fbfb 	bl	8000608 <__aeabi_dmul>
 800ae12:	a387      	add	r3, pc, #540	; (adr r3, 800b030 <__ieee754_asin+0x2f8>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f7f5 fa40 	bl	800029c <__adddf3>
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f7f5 fbf2 	bl	8000608 <__aeabi_dmul>
 800ae24:	a384      	add	r3, pc, #528	; (adr r3, 800b038 <__ieee754_asin+0x300>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fa35 	bl	8000298 <__aeabi_dsub>
 800ae2e:	4622      	mov	r2, r4
 800ae30:	462b      	mov	r3, r5
 800ae32:	f7f5 fbe9 	bl	8000608 <__aeabi_dmul>
 800ae36:	a382      	add	r3, pc, #520	; (adr r3, 800b040 <__ieee754_asin+0x308>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f7f5 fa2e 	bl	800029c <__adddf3>
 800ae40:	4622      	mov	r2, r4
 800ae42:	462b      	mov	r3, r5
 800ae44:	f7f5 fbe0 	bl	8000608 <__aeabi_dmul>
 800ae48:	a37f      	add	r3, pc, #508	; (adr r3, 800b048 <__ieee754_asin+0x310>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f7f5 fa23 	bl	8000298 <__aeabi_dsub>
 800ae52:	4622      	mov	r2, r4
 800ae54:	462b      	mov	r3, r5
 800ae56:	f7f5 fbd7 	bl	8000608 <__aeabi_dmul>
 800ae5a:	a37d      	add	r3, pc, #500	; (adr r3, 800b050 <__ieee754_asin+0x318>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 fa1c 	bl	800029c <__adddf3>
 800ae64:	4622      	mov	r2, r4
 800ae66:	462b      	mov	r3, r5
 800ae68:	f7f5 fbce 	bl	8000608 <__aeabi_dmul>
 800ae6c:	a37a      	add	r3, pc, #488	; (adr r3, 800b058 <__ieee754_asin+0x320>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	ec41 0b18 	vmov	d8, r0, r1
 800ae76:	4620      	mov	r0, r4
 800ae78:	4629      	mov	r1, r5
 800ae7a:	f7f5 fbc5 	bl	8000608 <__aeabi_dmul>
 800ae7e:	a378      	add	r3, pc, #480	; (adr r3, 800b060 <__ieee754_asin+0x328>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 fa08 	bl	8000298 <__aeabi_dsub>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	f7f5 fbbc 	bl	8000608 <__aeabi_dmul>
 800ae90:	a375      	add	r3, pc, #468	; (adr r3, 800b068 <__ieee754_asin+0x330>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 fa01 	bl	800029c <__adddf3>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	f7f5 fbb3 	bl	8000608 <__aeabi_dmul>
 800aea2:	a373      	add	r3, pc, #460	; (adr r3, 800b070 <__ieee754_asin+0x338>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f9f6 	bl	8000298 <__aeabi_dsub>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fbaa 	bl	8000608 <__aeabi_dmul>
 800aeb4:	4b72      	ldr	r3, [pc, #456]	; (800b080 <__ieee754_asin+0x348>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f7f5 f9f0 	bl	800029c <__adddf3>
 800aebc:	ec45 4b10 	vmov	d0, r4, r5
 800aec0:	4606      	mov	r6, r0
 800aec2:	460f      	mov	r7, r1
 800aec4:	f000 fb28 	bl	800b518 <__ieee754_sqrt>
 800aec8:	4b6f      	ldr	r3, [pc, #444]	; (800b088 <__ieee754_asin+0x350>)
 800aeca:	4598      	cmp	r8, r3
 800aecc:	ec5b ab10 	vmov	sl, fp, d0
 800aed0:	f340 80dc 	ble.w	800b08c <__ieee754_asin+0x354>
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	ec51 0b18 	vmov	r0, r1, d8
 800aedc:	f7f5 fcbe 	bl	800085c <__aeabi_ddiv>
 800aee0:	4652      	mov	r2, sl
 800aee2:	465b      	mov	r3, fp
 800aee4:	f7f5 fb90 	bl	8000608 <__aeabi_dmul>
 800aee8:	4652      	mov	r2, sl
 800aeea:	465b      	mov	r3, fp
 800aeec:	f7f5 f9d6 	bl	800029c <__adddf3>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	f7f5 f9d2 	bl	800029c <__adddf3>
 800aef8:	a347      	add	r3, pc, #284	; (adr r3, 800b018 <__ieee754_asin+0x2e0>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 f9cb 	bl	8000298 <__aeabi_dsub>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	a142      	add	r1, pc, #264	; (adr r1, 800b010 <__ieee754_asin+0x2d8>)
 800af08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af0c:	f7f5 f9c4 	bl	8000298 <__aeabi_dsub>
 800af10:	9b01      	ldr	r3, [sp, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	bfdc      	itt	le
 800af16:	4602      	movle	r2, r0
 800af18:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800af1c:	4604      	mov	r4, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	bfdc      	itt	le
 800af22:	4614      	movle	r4, r2
 800af24:	461d      	movle	r5, r3
 800af26:	e743      	b.n	800adb0 <__ieee754_asin+0x78>
 800af28:	ee10 2a10 	vmov	r2, s0
 800af2c:	ee10 0a10 	vmov	r0, s0
 800af30:	462b      	mov	r3, r5
 800af32:	4629      	mov	r1, r5
 800af34:	f7f5 fb68 	bl	8000608 <__aeabi_dmul>
 800af38:	a33b      	add	r3, pc, #236	; (adr r3, 800b028 <__ieee754_asin+0x2f0>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	4606      	mov	r6, r0
 800af40:	460f      	mov	r7, r1
 800af42:	f7f5 fb61 	bl	8000608 <__aeabi_dmul>
 800af46:	a33a      	add	r3, pc, #232	; (adr r3, 800b030 <__ieee754_asin+0x2f8>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f7f5 f9a6 	bl	800029c <__adddf3>
 800af50:	4632      	mov	r2, r6
 800af52:	463b      	mov	r3, r7
 800af54:	f7f5 fb58 	bl	8000608 <__aeabi_dmul>
 800af58:	a337      	add	r3, pc, #220	; (adr r3, 800b038 <__ieee754_asin+0x300>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f7f5 f99b 	bl	8000298 <__aeabi_dsub>
 800af62:	4632      	mov	r2, r6
 800af64:	463b      	mov	r3, r7
 800af66:	f7f5 fb4f 	bl	8000608 <__aeabi_dmul>
 800af6a:	a335      	add	r3, pc, #212	; (adr r3, 800b040 <__ieee754_asin+0x308>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 f994 	bl	800029c <__adddf3>
 800af74:	4632      	mov	r2, r6
 800af76:	463b      	mov	r3, r7
 800af78:	f7f5 fb46 	bl	8000608 <__aeabi_dmul>
 800af7c:	a332      	add	r3, pc, #200	; (adr r3, 800b048 <__ieee754_asin+0x310>)
 800af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af82:	f7f5 f989 	bl	8000298 <__aeabi_dsub>
 800af86:	4632      	mov	r2, r6
 800af88:	463b      	mov	r3, r7
 800af8a:	f7f5 fb3d 	bl	8000608 <__aeabi_dmul>
 800af8e:	a330      	add	r3, pc, #192	; (adr r3, 800b050 <__ieee754_asin+0x318>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f7f5 f982 	bl	800029c <__adddf3>
 800af98:	4632      	mov	r2, r6
 800af9a:	463b      	mov	r3, r7
 800af9c:	f7f5 fb34 	bl	8000608 <__aeabi_dmul>
 800afa0:	a32d      	add	r3, pc, #180	; (adr r3, 800b058 <__ieee754_asin+0x320>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	4630      	mov	r0, r6
 800afac:	4639      	mov	r1, r7
 800afae:	f7f5 fb2b 	bl	8000608 <__aeabi_dmul>
 800afb2:	a32b      	add	r3, pc, #172	; (adr r3, 800b060 <__ieee754_asin+0x328>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 f96e 	bl	8000298 <__aeabi_dsub>
 800afbc:	4632      	mov	r2, r6
 800afbe:	463b      	mov	r3, r7
 800afc0:	f7f5 fb22 	bl	8000608 <__aeabi_dmul>
 800afc4:	a328      	add	r3, pc, #160	; (adr r3, 800b068 <__ieee754_asin+0x330>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f967 	bl	800029c <__adddf3>
 800afce:	4632      	mov	r2, r6
 800afd0:	463b      	mov	r3, r7
 800afd2:	f7f5 fb19 	bl	8000608 <__aeabi_dmul>
 800afd6:	a326      	add	r3, pc, #152	; (adr r3, 800b070 <__ieee754_asin+0x338>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 f95c 	bl	8000298 <__aeabi_dsub>
 800afe0:	4632      	mov	r2, r6
 800afe2:	463b      	mov	r3, r7
 800afe4:	f7f5 fb10 	bl	8000608 <__aeabi_dmul>
 800afe8:	4b25      	ldr	r3, [pc, #148]	; (800b080 <__ieee754_asin+0x348>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 f956 	bl	800029c <__adddf3>
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	4640      	mov	r0, r8
 800aff6:	4649      	mov	r1, r9
 800aff8:	f7f5 fc30 	bl	800085c <__aeabi_ddiv>
 800affc:	4622      	mov	r2, r4
 800affe:	462b      	mov	r3, r5
 800b000:	f7f5 fb02 	bl	8000608 <__aeabi_dmul>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	e6bf      	b.n	800ad8e <__ieee754_asin+0x56>
 800b00e:	bf00      	nop
 800b010:	54442d18 	.word	0x54442d18
 800b014:	3ff921fb 	.word	0x3ff921fb
 800b018:	33145c07 	.word	0x33145c07
 800b01c:	3c91a626 	.word	0x3c91a626
 800b020:	8800759c 	.word	0x8800759c
 800b024:	7e37e43c 	.word	0x7e37e43c
 800b028:	0dfdf709 	.word	0x0dfdf709
 800b02c:	3f023de1 	.word	0x3f023de1
 800b030:	7501b288 	.word	0x7501b288
 800b034:	3f49efe0 	.word	0x3f49efe0
 800b038:	b5688f3b 	.word	0xb5688f3b
 800b03c:	3fa48228 	.word	0x3fa48228
 800b040:	0e884455 	.word	0x0e884455
 800b044:	3fc9c155 	.word	0x3fc9c155
 800b048:	03eb6f7d 	.word	0x03eb6f7d
 800b04c:	3fd4d612 	.word	0x3fd4d612
 800b050:	55555555 	.word	0x55555555
 800b054:	3fc55555 	.word	0x3fc55555
 800b058:	b12e9282 	.word	0xb12e9282
 800b05c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b060:	1b8d0159 	.word	0x1b8d0159
 800b064:	3fe6066c 	.word	0x3fe6066c
 800b068:	9c598ac8 	.word	0x9c598ac8
 800b06c:	40002ae5 	.word	0x40002ae5
 800b070:	1c8a2d4b 	.word	0x1c8a2d4b
 800b074:	40033a27 	.word	0x40033a27
 800b078:	3fefffff 	.word	0x3fefffff
 800b07c:	3fdfffff 	.word	0x3fdfffff
 800b080:	3ff00000 	.word	0x3ff00000
 800b084:	3fe00000 	.word	0x3fe00000
 800b088:	3fef3332 	.word	0x3fef3332
 800b08c:	ee10 2a10 	vmov	r2, s0
 800b090:	ee10 0a10 	vmov	r0, s0
 800b094:	465b      	mov	r3, fp
 800b096:	4659      	mov	r1, fp
 800b098:	f7f5 f900 	bl	800029c <__adddf3>
 800b09c:	4632      	mov	r2, r6
 800b09e:	463b      	mov	r3, r7
 800b0a0:	ec41 0b19 	vmov	d9, r0, r1
 800b0a4:	ec51 0b18 	vmov	r0, r1, d8
 800b0a8:	f7f5 fbd8 	bl	800085c <__aeabi_ddiv>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	ec51 0b19 	vmov	r0, r1, d9
 800b0b4:	f7f5 faa8 	bl	8000608 <__aeabi_dmul>
 800b0b8:	f04f 0800 	mov.w	r8, #0
 800b0bc:	4606      	mov	r6, r0
 800b0be:	460f      	mov	r7, r1
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	465b      	mov	r3, fp
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4659      	mov	r1, fp
 800b0c8:	f7f5 fa9e 	bl	8000608 <__aeabi_dmul>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	f7f5 f8e0 	bl	8000298 <__aeabi_dsub>
 800b0d8:	4642      	mov	r2, r8
 800b0da:	4604      	mov	r4, r0
 800b0dc:	460d      	mov	r5, r1
 800b0de:	465b      	mov	r3, fp
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	f7f5 f8da 	bl	800029c <__adddf3>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 fbb4 	bl	800085c <__aeabi_ddiv>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	f7f5 f8d0 	bl	800029c <__adddf3>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	a113      	add	r1, pc, #76	; (adr r1, 800b150 <__ieee754_asin+0x418>)
 800b102:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b106:	f7f5 f8c7 	bl	8000298 <__aeabi_dsub>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	f7f5 f8c1 	bl	8000298 <__aeabi_dsub>
 800b116:	4642      	mov	r2, r8
 800b118:	4604      	mov	r4, r0
 800b11a:	460d      	mov	r5, r1
 800b11c:	465b      	mov	r3, fp
 800b11e:	4640      	mov	r0, r8
 800b120:	4659      	mov	r1, fp
 800b122:	f7f5 f8bb 	bl	800029c <__adddf3>
 800b126:	4602      	mov	r2, r0
 800b128:	460b      	mov	r3, r1
 800b12a:	a10b      	add	r1, pc, #44	; (adr r1, 800b158 <__ieee754_asin+0x420>)
 800b12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b130:	f7f5 f8b2 	bl	8000298 <__aeabi_dsub>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4620      	mov	r0, r4
 800b13a:	4629      	mov	r1, r5
 800b13c:	f7f5 f8ac 	bl	8000298 <__aeabi_dsub>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	a104      	add	r1, pc, #16	; (adr r1, 800b158 <__ieee754_asin+0x420>)
 800b146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b14a:	e6df      	b.n	800af0c <__ieee754_asin+0x1d4>
 800b14c:	f3af 8000 	nop.w
 800b150:	33145c07 	.word	0x33145c07
 800b154:	3c91a626 	.word	0x3c91a626
 800b158:	54442d18 	.word	0x54442d18
 800b15c:	3fe921fb 	.word	0x3fe921fb

0800b160 <__ieee754_atan2>:
 800b160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b164:	ec57 6b11 	vmov	r6, r7, d1
 800b168:	4273      	negs	r3, r6
 800b16a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b2f0 <__ieee754_atan2+0x190>
 800b16e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b172:	4333      	orrs	r3, r6
 800b174:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b178:	4573      	cmp	r3, lr
 800b17a:	ec51 0b10 	vmov	r0, r1, d0
 800b17e:	ee11 8a10 	vmov	r8, s2
 800b182:	d80a      	bhi.n	800b19a <__ieee754_atan2+0x3a>
 800b184:	4244      	negs	r4, r0
 800b186:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b18a:	4304      	orrs	r4, r0
 800b18c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b190:	4574      	cmp	r4, lr
 800b192:	ee10 9a10 	vmov	r9, s0
 800b196:	468c      	mov	ip, r1
 800b198:	d907      	bls.n	800b1aa <__ieee754_atan2+0x4a>
 800b19a:	4632      	mov	r2, r6
 800b19c:	463b      	mov	r3, r7
 800b19e:	f7f5 f87d 	bl	800029c <__adddf3>
 800b1a2:	ec41 0b10 	vmov	d0, r0, r1
 800b1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b1ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b1b2:	4334      	orrs	r4, r6
 800b1b4:	d103      	bne.n	800b1be <__ieee754_atan2+0x5e>
 800b1b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ba:	f000 ba61 	b.w	800b680 <atan>
 800b1be:	17bc      	asrs	r4, r7, #30
 800b1c0:	f004 0402 	and.w	r4, r4, #2
 800b1c4:	ea53 0909 	orrs.w	r9, r3, r9
 800b1c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b1cc:	d107      	bne.n	800b1de <__ieee754_atan2+0x7e>
 800b1ce:	2c02      	cmp	r4, #2
 800b1d0:	d060      	beq.n	800b294 <__ieee754_atan2+0x134>
 800b1d2:	2c03      	cmp	r4, #3
 800b1d4:	d1e5      	bne.n	800b1a2 <__ieee754_atan2+0x42>
 800b1d6:	a142      	add	r1, pc, #264	; (adr r1, 800b2e0 <__ieee754_atan2+0x180>)
 800b1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1dc:	e7e1      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b1de:	ea52 0808 	orrs.w	r8, r2, r8
 800b1e2:	d106      	bne.n	800b1f2 <__ieee754_atan2+0x92>
 800b1e4:	f1bc 0f00 	cmp.w	ip, #0
 800b1e8:	da5f      	bge.n	800b2aa <__ieee754_atan2+0x14a>
 800b1ea:	a13f      	add	r1, pc, #252	; (adr r1, 800b2e8 <__ieee754_atan2+0x188>)
 800b1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f0:	e7d7      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b1f2:	4572      	cmp	r2, lr
 800b1f4:	d10f      	bne.n	800b216 <__ieee754_atan2+0xb6>
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b1fc:	d107      	bne.n	800b20e <__ieee754_atan2+0xae>
 800b1fe:	2c02      	cmp	r4, #2
 800b200:	d84c      	bhi.n	800b29c <__ieee754_atan2+0x13c>
 800b202:	4b35      	ldr	r3, [pc, #212]	; (800b2d8 <__ieee754_atan2+0x178>)
 800b204:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b208:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b20c:	e7c9      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b20e:	2c02      	cmp	r4, #2
 800b210:	d848      	bhi.n	800b2a4 <__ieee754_atan2+0x144>
 800b212:	4b32      	ldr	r3, [pc, #200]	; (800b2dc <__ieee754_atan2+0x17c>)
 800b214:	e7f6      	b.n	800b204 <__ieee754_atan2+0xa4>
 800b216:	4573      	cmp	r3, lr
 800b218:	d0e4      	beq.n	800b1e4 <__ieee754_atan2+0x84>
 800b21a:	1a9b      	subs	r3, r3, r2
 800b21c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b220:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b224:	da1e      	bge.n	800b264 <__ieee754_atan2+0x104>
 800b226:	2f00      	cmp	r7, #0
 800b228:	da01      	bge.n	800b22e <__ieee754_atan2+0xce>
 800b22a:	323c      	adds	r2, #60	; 0x3c
 800b22c:	db1e      	blt.n	800b26c <__ieee754_atan2+0x10c>
 800b22e:	4632      	mov	r2, r6
 800b230:	463b      	mov	r3, r7
 800b232:	f7f5 fb13 	bl	800085c <__aeabi_ddiv>
 800b236:	ec41 0b10 	vmov	d0, r0, r1
 800b23a:	f000 fbc1 	bl	800b9c0 <fabs>
 800b23e:	f000 fa1f 	bl	800b680 <atan>
 800b242:	ec51 0b10 	vmov	r0, r1, d0
 800b246:	2c01      	cmp	r4, #1
 800b248:	d013      	beq.n	800b272 <__ieee754_atan2+0x112>
 800b24a:	2c02      	cmp	r4, #2
 800b24c:	d015      	beq.n	800b27a <__ieee754_atan2+0x11a>
 800b24e:	2c00      	cmp	r4, #0
 800b250:	d0a7      	beq.n	800b1a2 <__ieee754_atan2+0x42>
 800b252:	a319      	add	r3, pc, #100	; (adr r3, 800b2b8 <__ieee754_atan2+0x158>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f81e 	bl	8000298 <__aeabi_dsub>
 800b25c:	a318      	add	r3, pc, #96	; (adr r3, 800b2c0 <__ieee754_atan2+0x160>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	e014      	b.n	800b28e <__ieee754_atan2+0x12e>
 800b264:	a118      	add	r1, pc, #96	; (adr r1, 800b2c8 <__ieee754_atan2+0x168>)
 800b266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b26a:	e7ec      	b.n	800b246 <__ieee754_atan2+0xe6>
 800b26c:	2000      	movs	r0, #0
 800b26e:	2100      	movs	r1, #0
 800b270:	e7e9      	b.n	800b246 <__ieee754_atan2+0xe6>
 800b272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b276:	4619      	mov	r1, r3
 800b278:	e793      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b27a:	a30f      	add	r3, pc, #60	; (adr r3, 800b2b8 <__ieee754_atan2+0x158>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f80a 	bl	8000298 <__aeabi_dsub>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	a10d      	add	r1, pc, #52	; (adr r1, 800b2c0 <__ieee754_atan2+0x160>)
 800b28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28e:	f7f5 f803 	bl	8000298 <__aeabi_dsub>
 800b292:	e786      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b294:	a10a      	add	r1, pc, #40	; (adr r1, 800b2c0 <__ieee754_atan2+0x160>)
 800b296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b29a:	e782      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b29c:	a10c      	add	r1, pc, #48	; (adr r1, 800b2d0 <__ieee754_atan2+0x170>)
 800b29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2a2:	e77e      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	e77b      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b2aa:	a107      	add	r1, pc, #28	; (adr r1, 800b2c8 <__ieee754_atan2+0x168>)
 800b2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b0:	e777      	b.n	800b1a2 <__ieee754_atan2+0x42>
 800b2b2:	bf00      	nop
 800b2b4:	f3af 8000 	nop.w
 800b2b8:	33145c07 	.word	0x33145c07
 800b2bc:	3ca1a626 	.word	0x3ca1a626
 800b2c0:	54442d18 	.word	0x54442d18
 800b2c4:	400921fb 	.word	0x400921fb
 800b2c8:	54442d18 	.word	0x54442d18
 800b2cc:	3ff921fb 	.word	0x3ff921fb
 800b2d0:	54442d18 	.word	0x54442d18
 800b2d4:	3fe921fb 	.word	0x3fe921fb
 800b2d8:	0800cb48 	.word	0x0800cb48
 800b2dc:	0800cb60 	.word	0x0800cb60
 800b2e0:	54442d18 	.word	0x54442d18
 800b2e4:	c00921fb 	.word	0xc00921fb
 800b2e8:	54442d18 	.word	0x54442d18
 800b2ec:	bff921fb 	.word	0xbff921fb
 800b2f0:	7ff00000 	.word	0x7ff00000

0800b2f4 <__ieee754_fmod>:
 800b2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f8:	ec53 2b11 	vmov	r2, r3, d1
 800b2fc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b300:	ea5e 0402 	orrs.w	r4, lr, r2
 800b304:	ec51 0b10 	vmov	r0, r1, d0
 800b308:	ee11 7a10 	vmov	r7, s2
 800b30c:	ee11 ca10 	vmov	ip, s2
 800b310:	461e      	mov	r6, r3
 800b312:	d00d      	beq.n	800b330 <__ieee754_fmod+0x3c>
 800b314:	4c7a      	ldr	r4, [pc, #488]	; (800b500 <__ieee754_fmod+0x20c>)
 800b316:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b31a:	45a0      	cmp	r8, r4
 800b31c:	4689      	mov	r9, r1
 800b31e:	dc07      	bgt.n	800b330 <__ieee754_fmod+0x3c>
 800b320:	4254      	negs	r4, r2
 800b322:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800b50c <__ieee754_fmod+0x218>
 800b326:	4314      	orrs	r4, r2
 800b328:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b32c:	455c      	cmp	r4, fp
 800b32e:	d909      	bls.n	800b344 <__ieee754_fmod+0x50>
 800b330:	f7f5 f96a 	bl	8000608 <__aeabi_dmul>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	f7f5 fa90 	bl	800085c <__aeabi_ddiv>
 800b33c:	ec41 0b10 	vmov	d0, r0, r1
 800b340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b344:	45f0      	cmp	r8, lr
 800b346:	ee10 aa10 	vmov	sl, s0
 800b34a:	ee10 4a10 	vmov	r4, s0
 800b34e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b352:	dc09      	bgt.n	800b368 <__ieee754_fmod+0x74>
 800b354:	dbf2      	blt.n	800b33c <__ieee754_fmod+0x48>
 800b356:	4290      	cmp	r0, r2
 800b358:	d3f0      	bcc.n	800b33c <__ieee754_fmod+0x48>
 800b35a:	d105      	bne.n	800b368 <__ieee754_fmod+0x74>
 800b35c:	4b69      	ldr	r3, [pc, #420]	; (800b504 <__ieee754_fmod+0x210>)
 800b35e:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800b362:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b366:	e7e9      	b.n	800b33c <__ieee754_fmod+0x48>
 800b368:	ea19 0f0b 	tst.w	r9, fp
 800b36c:	d14a      	bne.n	800b404 <__ieee754_fmod+0x110>
 800b36e:	f1b8 0f00 	cmp.w	r8, #0
 800b372:	d13f      	bne.n	800b3f4 <__ieee754_fmod+0x100>
 800b374:	4964      	ldr	r1, [pc, #400]	; (800b508 <__ieee754_fmod+0x214>)
 800b376:	4653      	mov	r3, sl
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dc38      	bgt.n	800b3ee <__ieee754_fmod+0xfa>
 800b37c:	4b63      	ldr	r3, [pc, #396]	; (800b50c <__ieee754_fmod+0x218>)
 800b37e:	4033      	ands	r3, r6
 800b380:	2b00      	cmp	r3, #0
 800b382:	d14f      	bne.n	800b424 <__ieee754_fmod+0x130>
 800b384:	f1be 0f00 	cmp.w	lr, #0
 800b388:	d144      	bne.n	800b414 <__ieee754_fmod+0x120>
 800b38a:	4a5f      	ldr	r2, [pc, #380]	; (800b508 <__ieee754_fmod+0x214>)
 800b38c:	463b      	mov	r3, r7
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dc3d      	bgt.n	800b40e <__ieee754_fmod+0x11a>
 800b392:	4b5f      	ldr	r3, [pc, #380]	; (800b510 <__ieee754_fmod+0x21c>)
 800b394:	4299      	cmp	r1, r3
 800b396:	db4a      	blt.n	800b42e <__ieee754_fmod+0x13a>
 800b398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b39c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3a0:	485b      	ldr	r0, [pc, #364]	; (800b510 <__ieee754_fmod+0x21c>)
 800b3a2:	4282      	cmp	r2, r0
 800b3a4:	db57      	blt.n	800b456 <__ieee754_fmod+0x162>
 800b3a6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b3aa:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b3ae:	1a89      	subs	r1, r1, r2
 800b3b0:	1b98      	subs	r0, r3, r6
 800b3b2:	eba4 070c 	sub.w	r7, r4, ip
 800b3b6:	2900      	cmp	r1, #0
 800b3b8:	d164      	bne.n	800b484 <__ieee754_fmod+0x190>
 800b3ba:	4564      	cmp	r4, ip
 800b3bc:	bf38      	it	cc
 800b3be:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	bfa4      	itt	ge
 800b3c6:	463c      	movge	r4, r7
 800b3c8:	4603      	movge	r3, r0
 800b3ca:	ea53 0104 	orrs.w	r1, r3, r4
 800b3ce:	d0c5      	beq.n	800b35c <__ieee754_fmod+0x68>
 800b3d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3d4:	db6b      	blt.n	800b4ae <__ieee754_fmod+0x1ba>
 800b3d6:	494e      	ldr	r1, [pc, #312]	; (800b510 <__ieee754_fmod+0x21c>)
 800b3d8:	428a      	cmp	r2, r1
 800b3da:	db6e      	blt.n	800b4ba <__ieee754_fmod+0x1c6>
 800b3dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3e0:	431d      	orrs	r5, r3
 800b3e2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b3e6:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	e7a6      	b.n	800b33c <__ieee754_fmod+0x48>
 800b3ee:	3901      	subs	r1, #1
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	e7c1      	b.n	800b378 <__ieee754_fmod+0x84>
 800b3f4:	4946      	ldr	r1, [pc, #280]	; (800b510 <__ieee754_fmod+0x21c>)
 800b3f6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	ddbe      	ble.n	800b37c <__ieee754_fmod+0x88>
 800b3fe:	3901      	subs	r1, #1
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	e7fa      	b.n	800b3fa <__ieee754_fmod+0x106>
 800b404:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b408:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b40c:	e7b6      	b.n	800b37c <__ieee754_fmod+0x88>
 800b40e:	3a01      	subs	r2, #1
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	e7bc      	b.n	800b38e <__ieee754_fmod+0x9a>
 800b414:	4a3e      	ldr	r2, [pc, #248]	; (800b510 <__ieee754_fmod+0x21c>)
 800b416:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	ddb9      	ble.n	800b392 <__ieee754_fmod+0x9e>
 800b41e:	3a01      	subs	r2, #1
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	e7fa      	b.n	800b41a <__ieee754_fmod+0x126>
 800b424:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b428:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b42c:	e7b1      	b.n	800b392 <__ieee754_fmod+0x9e>
 800b42e:	1a5c      	subs	r4, r3, r1
 800b430:	2c1f      	cmp	r4, #31
 800b432:	dc0a      	bgt.n	800b44a <__ieee754_fmod+0x156>
 800b434:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b438:	fa08 f804 	lsl.w	r8, r8, r4
 800b43c:	fa2a f303 	lsr.w	r3, sl, r3
 800b440:	ea43 0308 	orr.w	r3, r3, r8
 800b444:	fa0a f404 	lsl.w	r4, sl, r4
 800b448:	e7aa      	b.n	800b3a0 <__ieee754_fmod+0xac>
 800b44a:	4b32      	ldr	r3, [pc, #200]	; (800b514 <__ieee754_fmod+0x220>)
 800b44c:	1a5b      	subs	r3, r3, r1
 800b44e:	fa0a f303 	lsl.w	r3, sl, r3
 800b452:	2400      	movs	r4, #0
 800b454:	e7a4      	b.n	800b3a0 <__ieee754_fmod+0xac>
 800b456:	eba0 0c02 	sub.w	ip, r0, r2
 800b45a:	f1bc 0f1f 	cmp.w	ip, #31
 800b45e:	dc0a      	bgt.n	800b476 <__ieee754_fmod+0x182>
 800b460:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b464:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b468:	fa27 f606 	lsr.w	r6, r7, r6
 800b46c:	ea46 060e 	orr.w	r6, r6, lr
 800b470:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b474:	e79b      	b.n	800b3ae <__ieee754_fmod+0xba>
 800b476:	4e27      	ldr	r6, [pc, #156]	; (800b514 <__ieee754_fmod+0x220>)
 800b478:	1ab6      	subs	r6, r6, r2
 800b47a:	fa07 f606 	lsl.w	r6, r7, r6
 800b47e:	f04f 0c00 	mov.w	ip, #0
 800b482:	e794      	b.n	800b3ae <__ieee754_fmod+0xba>
 800b484:	4564      	cmp	r4, ip
 800b486:	bf38      	it	cc
 800b488:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800b48c:	2800      	cmp	r0, #0
 800b48e:	da05      	bge.n	800b49c <__ieee754_fmod+0x1a8>
 800b490:	0fe0      	lsrs	r0, r4, #31
 800b492:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b496:	0064      	lsls	r4, r4, #1
 800b498:	3901      	subs	r1, #1
 800b49a:	e789      	b.n	800b3b0 <__ieee754_fmod+0xbc>
 800b49c:	ea50 0307 	orrs.w	r3, r0, r7
 800b4a0:	f43f af5c 	beq.w	800b35c <__ieee754_fmod+0x68>
 800b4a4:	0ffb      	lsrs	r3, r7, #31
 800b4a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b4aa:	007c      	lsls	r4, r7, #1
 800b4ac:	e7f4      	b.n	800b498 <__ieee754_fmod+0x1a4>
 800b4ae:	0fe1      	lsrs	r1, r4, #31
 800b4b0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b4b4:	0064      	lsls	r4, r4, #1
 800b4b6:	3a01      	subs	r2, #1
 800b4b8:	e78a      	b.n	800b3d0 <__ieee754_fmod+0xdc>
 800b4ba:	1a89      	subs	r1, r1, r2
 800b4bc:	2914      	cmp	r1, #20
 800b4be:	dc0a      	bgt.n	800b4d6 <__ieee754_fmod+0x1e2>
 800b4c0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b4c4:	fa03 f202 	lsl.w	r2, r3, r2
 800b4c8:	40cc      	lsrs	r4, r1
 800b4ca:	4322      	orrs	r2, r4
 800b4cc:	410b      	asrs	r3, r1
 800b4ce:	ea43 0105 	orr.w	r1, r3, r5
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	e732      	b.n	800b33c <__ieee754_fmod+0x48>
 800b4d6:	291f      	cmp	r1, #31
 800b4d8:	dc07      	bgt.n	800b4ea <__ieee754_fmod+0x1f6>
 800b4da:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b4de:	40cc      	lsrs	r4, r1
 800b4e0:	fa03 f202 	lsl.w	r2, r3, r2
 800b4e4:	4322      	orrs	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	e7f1      	b.n	800b4ce <__ieee754_fmod+0x1da>
 800b4ea:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b4ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b4f2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b4f6:	32e2      	adds	r2, #226	; 0xe2
 800b4f8:	fa43 f202 	asr.w	r2, r3, r2
 800b4fc:	e7f3      	b.n	800b4e6 <__ieee754_fmod+0x1f2>
 800b4fe:	bf00      	nop
 800b500:	7fefffff 	.word	0x7fefffff
 800b504:	0800cb78 	.word	0x0800cb78
 800b508:	fffffbed 	.word	0xfffffbed
 800b50c:	7ff00000 	.word	0x7ff00000
 800b510:	fffffc02 	.word	0xfffffc02
 800b514:	fffffbe2 	.word	0xfffffbe2

0800b518 <__ieee754_sqrt>:
 800b518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51c:	ec55 4b10 	vmov	r4, r5, d0
 800b520:	4e55      	ldr	r6, [pc, #340]	; (800b678 <__ieee754_sqrt+0x160>)
 800b522:	43ae      	bics	r6, r5
 800b524:	ee10 0a10 	vmov	r0, s0
 800b528:	ee10 3a10 	vmov	r3, s0
 800b52c:	462a      	mov	r2, r5
 800b52e:	4629      	mov	r1, r5
 800b530:	d110      	bne.n	800b554 <__ieee754_sqrt+0x3c>
 800b532:	ee10 2a10 	vmov	r2, s0
 800b536:	462b      	mov	r3, r5
 800b538:	f7f5 f866 	bl	8000608 <__aeabi_dmul>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f4 feaa 	bl	800029c <__adddf3>
 800b548:	4604      	mov	r4, r0
 800b54a:	460d      	mov	r5, r1
 800b54c:	ec45 4b10 	vmov	d0, r4, r5
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	2d00      	cmp	r5, #0
 800b556:	dc10      	bgt.n	800b57a <__ieee754_sqrt+0x62>
 800b558:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b55c:	4330      	orrs	r0, r6
 800b55e:	d0f5      	beq.n	800b54c <__ieee754_sqrt+0x34>
 800b560:	b15d      	cbz	r5, 800b57a <__ieee754_sqrt+0x62>
 800b562:	ee10 2a10 	vmov	r2, s0
 800b566:	462b      	mov	r3, r5
 800b568:	ee10 0a10 	vmov	r0, s0
 800b56c:	f7f4 fe94 	bl	8000298 <__aeabi_dsub>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	f7f5 f972 	bl	800085c <__aeabi_ddiv>
 800b578:	e7e6      	b.n	800b548 <__ieee754_sqrt+0x30>
 800b57a:	1512      	asrs	r2, r2, #20
 800b57c:	d074      	beq.n	800b668 <__ieee754_sqrt+0x150>
 800b57e:	07d4      	lsls	r4, r2, #31
 800b580:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b584:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b58c:	bf5e      	ittt	pl
 800b58e:	0fda      	lsrpl	r2, r3, #31
 800b590:	005b      	lslpl	r3, r3, #1
 800b592:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b596:	2400      	movs	r4, #0
 800b598:	0fda      	lsrs	r2, r3, #31
 800b59a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b59e:	107f      	asrs	r7, r7, #1
 800b5a0:	005b      	lsls	r3, r3, #1
 800b5a2:	2516      	movs	r5, #22
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b5aa:	1886      	adds	r6, r0, r2
 800b5ac:	428e      	cmp	r6, r1
 800b5ae:	bfde      	ittt	le
 800b5b0:	1b89      	suble	r1, r1, r6
 800b5b2:	18b0      	addle	r0, r6, r2
 800b5b4:	18a4      	addle	r4, r4, r2
 800b5b6:	0049      	lsls	r1, r1, #1
 800b5b8:	3d01      	subs	r5, #1
 800b5ba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b5be:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b5c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5c6:	d1f0      	bne.n	800b5aa <__ieee754_sqrt+0x92>
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	f04f 0e20 	mov.w	lr, #32
 800b5ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b5d2:	4281      	cmp	r1, r0
 800b5d4:	eb06 0c05 	add.w	ip, r6, r5
 800b5d8:	dc02      	bgt.n	800b5e0 <__ieee754_sqrt+0xc8>
 800b5da:	d113      	bne.n	800b604 <__ieee754_sqrt+0xec>
 800b5dc:	459c      	cmp	ip, r3
 800b5de:	d811      	bhi.n	800b604 <__ieee754_sqrt+0xec>
 800b5e0:	f1bc 0f00 	cmp.w	ip, #0
 800b5e4:	eb0c 0506 	add.w	r5, ip, r6
 800b5e8:	da43      	bge.n	800b672 <__ieee754_sqrt+0x15a>
 800b5ea:	2d00      	cmp	r5, #0
 800b5ec:	db41      	blt.n	800b672 <__ieee754_sqrt+0x15a>
 800b5ee:	f100 0801 	add.w	r8, r0, #1
 800b5f2:	1a09      	subs	r1, r1, r0
 800b5f4:	459c      	cmp	ip, r3
 800b5f6:	bf88      	it	hi
 800b5f8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800b5fc:	eba3 030c 	sub.w	r3, r3, ip
 800b600:	4432      	add	r2, r6
 800b602:	4640      	mov	r0, r8
 800b604:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b608:	f1be 0e01 	subs.w	lr, lr, #1
 800b60c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b614:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b618:	d1db      	bne.n	800b5d2 <__ieee754_sqrt+0xba>
 800b61a:	430b      	orrs	r3, r1
 800b61c:	d006      	beq.n	800b62c <__ieee754_sqrt+0x114>
 800b61e:	1c50      	adds	r0, r2, #1
 800b620:	bf13      	iteet	ne
 800b622:	3201      	addne	r2, #1
 800b624:	3401      	addeq	r4, #1
 800b626:	4672      	moveq	r2, lr
 800b628:	f022 0201 	bicne.w	r2, r2, #1
 800b62c:	1063      	asrs	r3, r4, #1
 800b62e:	0852      	lsrs	r2, r2, #1
 800b630:	07e1      	lsls	r1, r4, #31
 800b632:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b636:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b63a:	bf48      	it	mi
 800b63c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b640:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b644:	4614      	mov	r4, r2
 800b646:	e781      	b.n	800b54c <__ieee754_sqrt+0x34>
 800b648:	0ad9      	lsrs	r1, r3, #11
 800b64a:	3815      	subs	r0, #21
 800b64c:	055b      	lsls	r3, r3, #21
 800b64e:	2900      	cmp	r1, #0
 800b650:	d0fa      	beq.n	800b648 <__ieee754_sqrt+0x130>
 800b652:	02cd      	lsls	r5, r1, #11
 800b654:	d50a      	bpl.n	800b66c <__ieee754_sqrt+0x154>
 800b656:	f1c2 0420 	rsb	r4, r2, #32
 800b65a:	fa23 f404 	lsr.w	r4, r3, r4
 800b65e:	1e55      	subs	r5, r2, #1
 800b660:	4093      	lsls	r3, r2
 800b662:	4321      	orrs	r1, r4
 800b664:	1b42      	subs	r2, r0, r5
 800b666:	e78a      	b.n	800b57e <__ieee754_sqrt+0x66>
 800b668:	4610      	mov	r0, r2
 800b66a:	e7f0      	b.n	800b64e <__ieee754_sqrt+0x136>
 800b66c:	0049      	lsls	r1, r1, #1
 800b66e:	3201      	adds	r2, #1
 800b670:	e7ef      	b.n	800b652 <__ieee754_sqrt+0x13a>
 800b672:	4680      	mov	r8, r0
 800b674:	e7bd      	b.n	800b5f2 <__ieee754_sqrt+0xda>
 800b676:	bf00      	nop
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	00000000 	.word	0x00000000

0800b680 <atan>:
 800b680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	ec55 4b10 	vmov	r4, r5, d0
 800b688:	4bc3      	ldr	r3, [pc, #780]	; (800b998 <atan+0x318>)
 800b68a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b68e:	429e      	cmp	r6, r3
 800b690:	46ab      	mov	fp, r5
 800b692:	dd18      	ble.n	800b6c6 <atan+0x46>
 800b694:	4bc1      	ldr	r3, [pc, #772]	; (800b99c <atan+0x31c>)
 800b696:	429e      	cmp	r6, r3
 800b698:	dc01      	bgt.n	800b69e <atan+0x1e>
 800b69a:	d109      	bne.n	800b6b0 <atan+0x30>
 800b69c:	b144      	cbz	r4, 800b6b0 <atan+0x30>
 800b69e:	4622      	mov	r2, r4
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	f7f4 fdf9 	bl	800029c <__adddf3>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	e006      	b.n	800b6be <atan+0x3e>
 800b6b0:	f1bb 0f00 	cmp.w	fp, #0
 800b6b4:	f300 8131 	bgt.w	800b91a <atan+0x29a>
 800b6b8:	a59b      	add	r5, pc, #620	; (adr r5, 800b928 <atan+0x2a8>)
 800b6ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b6be:	ec45 4b10 	vmov	d0, r4, r5
 800b6c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c6:	4bb6      	ldr	r3, [pc, #728]	; (800b9a0 <atan+0x320>)
 800b6c8:	429e      	cmp	r6, r3
 800b6ca:	dc14      	bgt.n	800b6f6 <atan+0x76>
 800b6cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b6d0:	429e      	cmp	r6, r3
 800b6d2:	dc0d      	bgt.n	800b6f0 <atan+0x70>
 800b6d4:	a396      	add	r3, pc, #600	; (adr r3, 800b930 <atan+0x2b0>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	ee10 0a10 	vmov	r0, s0
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 fddc 	bl	800029c <__adddf3>
 800b6e4:	4baf      	ldr	r3, [pc, #700]	; (800b9a4 <atan+0x324>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f7f5 fa1e 	bl	8000b28 <__aeabi_dcmpgt>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d1e6      	bne.n	800b6be <atan+0x3e>
 800b6f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b6f4:	e02b      	b.n	800b74e <atan+0xce>
 800b6f6:	f000 f963 	bl	800b9c0 <fabs>
 800b6fa:	4bab      	ldr	r3, [pc, #684]	; (800b9a8 <atan+0x328>)
 800b6fc:	429e      	cmp	r6, r3
 800b6fe:	ec55 4b10 	vmov	r4, r5, d0
 800b702:	f300 80bf 	bgt.w	800b884 <atan+0x204>
 800b706:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b70a:	429e      	cmp	r6, r3
 800b70c:	f300 80a0 	bgt.w	800b850 <atan+0x1d0>
 800b710:	ee10 2a10 	vmov	r2, s0
 800b714:	ee10 0a10 	vmov	r0, s0
 800b718:	462b      	mov	r3, r5
 800b71a:	4629      	mov	r1, r5
 800b71c:	f7f4 fdbe 	bl	800029c <__adddf3>
 800b720:	4ba0      	ldr	r3, [pc, #640]	; (800b9a4 <atan+0x324>)
 800b722:	2200      	movs	r2, #0
 800b724:	f7f4 fdb8 	bl	8000298 <__aeabi_dsub>
 800b728:	2200      	movs	r2, #0
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b732:	4620      	mov	r0, r4
 800b734:	4629      	mov	r1, r5
 800b736:	f7f4 fdb1 	bl	800029c <__adddf3>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4630      	mov	r0, r6
 800b740:	4639      	mov	r1, r7
 800b742:	f7f5 f88b 	bl	800085c <__aeabi_ddiv>
 800b746:	f04f 0a00 	mov.w	sl, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	460d      	mov	r5, r1
 800b74e:	4622      	mov	r2, r4
 800b750:	462b      	mov	r3, r5
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	f7f4 ff57 	bl	8000608 <__aeabi_dmul>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4680      	mov	r8, r0
 800b760:	4689      	mov	r9, r1
 800b762:	f7f4 ff51 	bl	8000608 <__aeabi_dmul>
 800b766:	a374      	add	r3, pc, #464	; (adr r3, 800b938 <atan+0x2b8>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	4606      	mov	r6, r0
 800b76e:	460f      	mov	r7, r1
 800b770:	f7f4 ff4a 	bl	8000608 <__aeabi_dmul>
 800b774:	a372      	add	r3, pc, #456	; (adr r3, 800b940 <atan+0x2c0>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	f7f4 fd8f 	bl	800029c <__adddf3>
 800b77e:	4632      	mov	r2, r6
 800b780:	463b      	mov	r3, r7
 800b782:	f7f4 ff41 	bl	8000608 <__aeabi_dmul>
 800b786:	a370      	add	r3, pc, #448	; (adr r3, 800b948 <atan+0x2c8>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7f4 fd86 	bl	800029c <__adddf3>
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	f7f4 ff38 	bl	8000608 <__aeabi_dmul>
 800b798:	a36d      	add	r3, pc, #436	; (adr r3, 800b950 <atan+0x2d0>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f7f4 fd7d 	bl	800029c <__adddf3>
 800b7a2:	4632      	mov	r2, r6
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	f7f4 ff2f 	bl	8000608 <__aeabi_dmul>
 800b7aa:	a36b      	add	r3, pc, #428	; (adr r3, 800b958 <atan+0x2d8>)
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	f7f4 fd74 	bl	800029c <__adddf3>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	f7f4 ff26 	bl	8000608 <__aeabi_dmul>
 800b7bc:	a368      	add	r3, pc, #416	; (adr r3, 800b960 <atan+0x2e0>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f7f4 fd6b 	bl	800029c <__adddf3>
 800b7c6:	4642      	mov	r2, r8
 800b7c8:	464b      	mov	r3, r9
 800b7ca:	f7f4 ff1d 	bl	8000608 <__aeabi_dmul>
 800b7ce:	a366      	add	r3, pc, #408	; (adr r3, 800b968 <atan+0x2e8>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	4689      	mov	r9, r1
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f4 ff14 	bl	8000608 <__aeabi_dmul>
 800b7e0:	a363      	add	r3, pc, #396	; (adr r3, 800b970 <atan+0x2f0>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fd57 	bl	8000298 <__aeabi_dsub>
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	f7f4 ff0b 	bl	8000608 <__aeabi_dmul>
 800b7f2:	a361      	add	r3, pc, #388	; (adr r3, 800b978 <atan+0x2f8>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 fd4e 	bl	8000298 <__aeabi_dsub>
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	f7f4 ff02 	bl	8000608 <__aeabi_dmul>
 800b804:	a35e      	add	r3, pc, #376	; (adr r3, 800b980 <atan+0x300>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f4 fd45 	bl	8000298 <__aeabi_dsub>
 800b80e:	4632      	mov	r2, r6
 800b810:	463b      	mov	r3, r7
 800b812:	f7f4 fef9 	bl	8000608 <__aeabi_dmul>
 800b816:	a35c      	add	r3, pc, #368	; (adr r3, 800b988 <atan+0x308>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f4 fd3c 	bl	8000298 <__aeabi_dsub>
 800b820:	4632      	mov	r2, r6
 800b822:	463b      	mov	r3, r7
 800b824:	f7f4 fef0 	bl	8000608 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4640      	mov	r0, r8
 800b82e:	4649      	mov	r1, r9
 800b830:	f7f4 fd34 	bl	800029c <__adddf3>
 800b834:	4622      	mov	r2, r4
 800b836:	462b      	mov	r3, r5
 800b838:	f7f4 fee6 	bl	8000608 <__aeabi_dmul>
 800b83c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	d14b      	bne.n	800b8de <atan+0x25e>
 800b846:	4620      	mov	r0, r4
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f4 fd25 	bl	8000298 <__aeabi_dsub>
 800b84e:	e72c      	b.n	800b6aa <atan+0x2a>
 800b850:	ee10 0a10 	vmov	r0, s0
 800b854:	4b53      	ldr	r3, [pc, #332]	; (800b9a4 <atan+0x324>)
 800b856:	2200      	movs	r2, #0
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f4 fd1d 	bl	8000298 <__aeabi_dsub>
 800b85e:	4b51      	ldr	r3, [pc, #324]	; (800b9a4 <atan+0x324>)
 800b860:	4606      	mov	r6, r0
 800b862:	460f      	mov	r7, r1
 800b864:	2200      	movs	r2, #0
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 fd17 	bl	800029c <__adddf3>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4630      	mov	r0, r6
 800b874:	4639      	mov	r1, r7
 800b876:	f7f4 fff1 	bl	800085c <__aeabi_ddiv>
 800b87a:	f04f 0a01 	mov.w	sl, #1
 800b87e:	4604      	mov	r4, r0
 800b880:	460d      	mov	r5, r1
 800b882:	e764      	b.n	800b74e <atan+0xce>
 800b884:	4b49      	ldr	r3, [pc, #292]	; (800b9ac <atan+0x32c>)
 800b886:	429e      	cmp	r6, r3
 800b888:	da1d      	bge.n	800b8c6 <atan+0x246>
 800b88a:	ee10 0a10 	vmov	r0, s0
 800b88e:	4b48      	ldr	r3, [pc, #288]	; (800b9b0 <atan+0x330>)
 800b890:	2200      	movs	r2, #0
 800b892:	4629      	mov	r1, r5
 800b894:	f7f4 fd00 	bl	8000298 <__aeabi_dsub>
 800b898:	4b45      	ldr	r3, [pc, #276]	; (800b9b0 <atan+0x330>)
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f7f4 feb0 	bl	8000608 <__aeabi_dmul>
 800b8a8:	4b3e      	ldr	r3, [pc, #248]	; (800b9a4 <atan+0x324>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f7f4 fcf6 	bl	800029c <__adddf3>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	f7f4 ffd0 	bl	800085c <__aeabi_ddiv>
 800b8bc:	f04f 0a02 	mov.w	sl, #2
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	460d      	mov	r5, r1
 800b8c4:	e743      	b.n	800b74e <atan+0xce>
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	ee10 2a10 	vmov	r2, s0
 800b8cc:	4939      	ldr	r1, [pc, #228]	; (800b9b4 <atan+0x334>)
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f7f4 ffc4 	bl	800085c <__aeabi_ddiv>
 800b8d4:	f04f 0a03 	mov.w	sl, #3
 800b8d8:	4604      	mov	r4, r0
 800b8da:	460d      	mov	r5, r1
 800b8dc:	e737      	b.n	800b74e <atan+0xce>
 800b8de:	4b36      	ldr	r3, [pc, #216]	; (800b9b8 <atan+0x338>)
 800b8e0:	4e36      	ldr	r6, [pc, #216]	; (800b9bc <atan+0x33c>)
 800b8e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b8e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b8ea:	e9da 2300 	ldrd	r2, r3, [sl]
 800b8ee:	f7f4 fcd3 	bl	8000298 <__aeabi_dsub>
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	f7f4 fccf 	bl	8000298 <__aeabi_dsub>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b902:	f7f4 fcc9 	bl	8000298 <__aeabi_dsub>
 800b906:	f1bb 0f00 	cmp.w	fp, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	460d      	mov	r5, r1
 800b90e:	f6bf aed6 	bge.w	800b6be <atan+0x3e>
 800b912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b916:	461d      	mov	r5, r3
 800b918:	e6d1      	b.n	800b6be <atan+0x3e>
 800b91a:	a51d      	add	r5, pc, #116	; (adr r5, 800b990 <atan+0x310>)
 800b91c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b920:	e6cd      	b.n	800b6be <atan+0x3e>
 800b922:	bf00      	nop
 800b924:	f3af 8000 	nop.w
 800b928:	54442d18 	.word	0x54442d18
 800b92c:	bff921fb 	.word	0xbff921fb
 800b930:	8800759c 	.word	0x8800759c
 800b934:	7e37e43c 	.word	0x7e37e43c
 800b938:	e322da11 	.word	0xe322da11
 800b93c:	3f90ad3a 	.word	0x3f90ad3a
 800b940:	24760deb 	.word	0x24760deb
 800b944:	3fa97b4b 	.word	0x3fa97b4b
 800b948:	a0d03d51 	.word	0xa0d03d51
 800b94c:	3fb10d66 	.word	0x3fb10d66
 800b950:	c54c206e 	.word	0xc54c206e
 800b954:	3fb745cd 	.word	0x3fb745cd
 800b958:	920083ff 	.word	0x920083ff
 800b95c:	3fc24924 	.word	0x3fc24924
 800b960:	5555550d 	.word	0x5555550d
 800b964:	3fd55555 	.word	0x3fd55555
 800b968:	2c6a6c2f 	.word	0x2c6a6c2f
 800b96c:	bfa2b444 	.word	0xbfa2b444
 800b970:	52defd9a 	.word	0x52defd9a
 800b974:	3fadde2d 	.word	0x3fadde2d
 800b978:	af749a6d 	.word	0xaf749a6d
 800b97c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b980:	fe231671 	.word	0xfe231671
 800b984:	3fbc71c6 	.word	0x3fbc71c6
 800b988:	9998ebc4 	.word	0x9998ebc4
 800b98c:	3fc99999 	.word	0x3fc99999
 800b990:	54442d18 	.word	0x54442d18
 800b994:	3ff921fb 	.word	0x3ff921fb
 800b998:	440fffff 	.word	0x440fffff
 800b99c:	7ff00000 	.word	0x7ff00000
 800b9a0:	3fdbffff 	.word	0x3fdbffff
 800b9a4:	3ff00000 	.word	0x3ff00000
 800b9a8:	3ff2ffff 	.word	0x3ff2ffff
 800b9ac:	40038000 	.word	0x40038000
 800b9b0:	3ff80000 	.word	0x3ff80000
 800b9b4:	bff00000 	.word	0xbff00000
 800b9b8:	0800cba8 	.word	0x0800cba8
 800b9bc:	0800cb88 	.word	0x0800cb88

0800b9c0 <fabs>:
 800b9c0:	ec51 0b10 	vmov	r0, r1, d0
 800b9c4:	ee10 2a10 	vmov	r2, s0
 800b9c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9cc:	ec43 2b10 	vmov	d0, r2, r3
 800b9d0:	4770      	bx	lr
 800b9d2:	0000      	movs	r0, r0
 800b9d4:	0000      	movs	r0, r0
	...

0800b9d8 <nan>:
 800b9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9e0 <nan+0x8>
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	00000000 	.word	0x00000000
 800b9e4:	7ff80000 	.word	0x7ff80000

0800b9e8 <_init>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <_fini>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr
