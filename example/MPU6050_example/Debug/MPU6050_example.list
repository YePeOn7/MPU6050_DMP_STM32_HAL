
MPU6050_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001144  0800b9a0  0800b9a0  0001b9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae4  0800cae4  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae4  0800cae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caec  0800caec  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caec  0800caec  0001caec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800caf0  0800caf0  0001caf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800caf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000218  0800cd0c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800cd0c  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c0d  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd4  00000000  00000000  00034e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00037c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  00038f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b28c  00000000  00000000  0003a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017deb  00000000  00000000  0005543c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae7a  00000000  00000000  0006d227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001080a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  001080f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b984 	.word	0x0800b984

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800b984 	.word	0x0800b984

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <IIC_Init>:
#include "IOI2C.h"

I2C_HandleTypeDef i2c_handle;

void IIC_Init(I2C_HandleTypeDef i2cHandle)
{			
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
 8001002:	f107 0c08 	add.w	ip, r7, #8
 8001006:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_handle = i2cHandle;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <IIC_Init+0x2c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2254      	movs	r2, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	f007 ff7d 	bl	8008f14 <memcpy>
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000234 	.word	0x20000234

0800102c <i2cWrite>:
//}


  
int i2cWrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af04      	add	r7, sp, #16
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	460b      	mov	r3, r1
 800103a:	71bb      	strb	r3, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	717b      	strb	r3, [r7, #5]
    return (int)HAL_I2C_Mem_Write(&i2c_handle, addr << 1, reg, 1, data, len, I2C_TIMEOUT);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b29b      	uxth	r3, r3
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b299      	uxth	r1, r3
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	b29a      	uxth	r2, r3
 800104c:	797b      	ldrb	r3, [r7, #5]
 800104e:	b29b      	uxth	r3, r3
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	9002      	str	r0, [sp, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <i2cWrite+0x44>)
 8001060:	f004 feee 	bl	8005e40 <HAL_I2C_Mem_Write>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000234 	.word	0x20000234

08001074 <i2cRead>:

int i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af04      	add	r7, sp, #16
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	460b      	mov	r3, r1
 8001082:	71bb      	strb	r3, [r7, #6]
 8001084:	4613      	mov	r3, r2
 8001086:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&i2c_handle, addr << 1, reg, 1, buf, len, I2C_TIMEOUT);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	b29b      	uxth	r3, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b299      	uxth	r1, r3
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	b29a      	uxth	r2, r3
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	b29b      	uxth	r3, r3
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	9002      	str	r0, [sp, #8]
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <i2cRead+0x44>)
 80010a8:	f004 ffc4 	bl	8006034 <HAL_I2C_Mem_Read>
    return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000234 	.word	0x20000234

080010bc <I2C_ReadOneByte>:
����	I2C_Addr  Ŀ���豸��ַ
		addr	   �Ĵ�����ַ
����   ��������ֵ
*******************************************************************************/ 
unsigned char I2C_ReadOneByte(unsigned char I2C_Addr,unsigned char addr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
//	IIC_Wait_Ack();
//	res=IIC_Read_Byte(0);
//    IIC_Stop();//����һ��ֹͣ����
//
	unsigned char data;
	HAL_I2C_Mem_Read(&i2c_handle, I2C_Addr, addr, 1, &data, 1, I2C_TIMEOUT);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	b299      	uxth	r1, r3
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f107 030f 	add.w	r3, r7, #15
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <I2C_ReadOneByte+0x3c>)
 80010e8:	f004 ffa4 	bl	8006034 <HAL_I2C_Mem_Read>

	return data;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000234 	.word	0x20000234

080010fc <IICwriteBytes>:
//    return count;
	HAL_I2C_Mem_Read(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
}


u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af04      	add	r7, sp, #16
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	460b      	mov	r3, r1
 800110a:	71bb      	strb	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	717b      	strb	r3, [r7, #5]
//		IIC_Send_Byte(data[count]);
//		IIC_Wait_Ack();
//	 }
//	IIC_Stop();//����һ��ֹͣ����

	HAL_I2C_Mem_Write(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	b299      	uxth	r1, r3
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	b29a      	uxth	r2, r3
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	b29b      	uxth	r3, r3
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	9002      	str	r0, [sp, #8]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <IICwriteBytes+0x40>)
 800112c:	f004 fe88 	bl	8005e40 <HAL_I2C_Mem_Write>
    return 1; //status == 0;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000234 	.word	0x20000234

08001140 <IICreadByte>:
����	dev  Ŀ���豸��ַ
		reg	   �Ĵ�����ַ
		*data  ���������ݽ�Ҫ��ŵĵ�ַ
����   1
*******************************************************************************/ 
u8 IICreadByte(u8 dev, u8 reg, u8 *data){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	603a      	str	r2, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
	*data=I2C_ReadOneByte(dev, reg);
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffb0 	bl	80010bc <I2C_ReadOneByte>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	701a      	strb	r2, [r3, #0]
    return 1;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <IICwriteByte>:

unsigned char IICwriteByte(unsigned char dev, unsigned char reg, unsigned char data){
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	460b      	mov	r3, r1
 800117a:	71bb      	strb	r3, [r7, #6]
 800117c:	4613      	mov	r3, r2
 800117e:	717b      	strb	r3, [r7, #5]
    return IICwriteBytes(dev, reg, 1, &data);
 8001180:	1d7b      	adds	r3, r7, #5
 8001182:	79b9      	ldrb	r1, [r7, #6]
 8001184:	79f8      	ldrb	r0, [r7, #7]
 8001186:	2201      	movs	r2, #1
 8001188:	f7ff ffb8 	bl	80010fc <IICwriteBytes>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <IICwriteBits>:
		data    ��Ÿı�Ŀ���ֽ�λ��ֵ
����   �ɹ� Ϊ1 
 		ʧ��Ϊ0
*******************************************************************************/ 
u8 IICwriteBits(u8 dev,u8 reg,u8 bitStart,u8 length,u8 data)
{
 8001196:	b590      	push	{r4, r7, lr}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	4604      	mov	r4, r0
 800119e:	4608      	mov	r0, r1
 80011a0:	4611      	mov	r1, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	4623      	mov	r3, r4
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4603      	mov	r3, r0
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	460b      	mov	r3, r1
 80011ae:	717b      	strb	r3, [r7, #5]
 80011b0:	4613      	mov	r3, r2
 80011b2:	713b      	strb	r3, [r7, #4]

    u8 b;
    if (IICreadByte(dev, reg, &b) != 0) {
 80011b4:	f107 020e 	add.w	r2, r7, #14
 80011b8:	79b9      	ldrb	r1, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffbf 	bl	8001140 <IICreadByte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d037      	beq.n	8001238 <IICwriteBits+0xa2>
        u8 mask = (0xFF << (bitStart + 1)) | 0xFF >> ((8 - bitStart) + length - 1);
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	3301      	adds	r3, #1
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	f1c3 0108 	rsb	r1, r3, #8
 80011da:	793b      	ldrb	r3, [r7, #4]
 80011dc:	440b      	add	r3, r1
 80011de:	3b01      	subs	r3, #1
 80011e0:	21ff      	movs	r1, #255	; 0xff
 80011e2:	fa41 f303 	asr.w	r3, r1, r3
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
        data <<= (8 - length);
 80011ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011f2:	793b      	ldrb	r3, [r7, #4]
 80011f4:	f1c3 0308 	rsb	r3, r3, #8
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	f887 3020 	strb.w	r3, [r7, #32]
        data >>= (7 - bitStart);
 8001200:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	fa42 f303 	asr.w	r3, r2, r3
 800120e:	f887 3020 	strb.w	r3, [r7, #32]
        b &= mask;
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4013      	ands	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73bb      	strb	r3, [r7, #14]
        b |= data;
 800121c:	7bba      	ldrb	r2, [r7, #14]
 800121e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001222:	4313      	orrs	r3, r2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73bb      	strb	r3, [r7, #14]
        return IICwriteByte(dev, reg, b);
 8001228:	7bba      	ldrb	r2, [r7, #14]
 800122a:	79b9      	ldrb	r1, [r7, #6]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff9d 	bl	800116e <IICwriteByte>
 8001234:	4603      	mov	r3, r0
 8001236:	e000      	b.n	800123a <IICwriteBits+0xa4>
    } else {
        return 0;
 8001238:	2300      	movs	r3, #0
    }
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}

08001242 <IICwriteBit>:
		bitNum  Ҫ�޸�Ŀ���ֽڵ�bitNumλ
		data  Ϊ0 ʱ��Ŀ��λ������0 ���򽫱���λ
����   �ɹ� Ϊ1 
 		ʧ��Ϊ0
*******************************************************************************/ 
u8 IICwriteBit(u8 dev, u8 reg, u8 bitNum, u8 data){
 8001242:	b590      	push	{r4, r7, lr}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	4604      	mov	r4, r0
 800124a:	4608      	mov	r0, r1
 800124c:	4611      	mov	r1, r2
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4603      	mov	r3, r0
 8001256:	71bb      	strb	r3, [r7, #6]
 8001258:	460b      	mov	r3, r1
 800125a:	717b      	strb	r3, [r7, #5]
 800125c:	4613      	mov	r3, r2
 800125e:	713b      	strb	r3, [r7, #4]
    u8 b;
    IICreadByte(dev, reg, &b);
 8001260:	f107 020f 	add.w	r2, r7, #15
 8001264:	79b9      	ldrb	r1, [r7, #6]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff69 	bl	8001140 <IICreadByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00a      	beq.n	800128a <IICwriteBit+0x48>
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	2201      	movs	r2, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	b25a      	sxtb	r2, r3
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b25b      	sxtb	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	e00b      	b.n	80012a2 <IICwriteBit+0x60>
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	2201      	movs	r2, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	b25b      	sxtb	r3, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	b25a      	sxtb	r2, r3
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4013      	ands	r3, r2
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
    return IICwriteByte(dev, reg, b);
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	79b9      	ldrb	r1, [r7, #6]
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff5f 	bl	800116e <IICwriteByte>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
	...

080012bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012c0:	f3bf 8f4f 	dsb	sy
}
 80012c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <__NVIC_SystemReset+0x24>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012ce:	4904      	ldr	r1, [pc, #16]	; (80012e0 <__NVIC_SystemReset+0x24>)
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_SystemReset+0x28>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d6:	f3bf 8f4f 	dsb	sy
}
 80012da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <__NVIC_SystemReset+0x20>
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	05fa0004 	.word	0x05fa0004

080012e8 <inv_row_2_scale>:
static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};

static  unsigned short inv_row_2_scale(const signed char *row)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f993 3000 	ldrsb.w	r3, [r3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dd02      	ble.n	8001300 <inv_row_2_scale+0x18>
        b = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	81fb      	strh	r3, [r7, #14]
 80012fe:	e02d      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f993 3000 	ldrsb.w	r3, [r3]
 8001306:	2b00      	cmp	r3, #0
 8001308:	da02      	bge.n	8001310 <inv_row_2_scale+0x28>
        b = 4;
 800130a:	2304      	movs	r3, #4
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	e025      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	f993 3000 	ldrsb.w	r3, [r3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd02      	ble.n	8001322 <inv_row_2_scale+0x3a>
        b = 1;
 800131c:	2301      	movs	r3, #1
 800131e:	81fb      	strh	r3, [r7, #14]
 8001320:	e01c      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	f993 3000 	ldrsb.w	r3, [r3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	da02      	bge.n	8001334 <inv_row_2_scale+0x4c>
        b = 5;
 800132e:	2305      	movs	r3, #5
 8001330:	81fb      	strh	r3, [r7, #14]
 8001332:	e013      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3302      	adds	r3, #2
 8001338:	f993 3000 	ldrsb.w	r3, [r3]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd02      	ble.n	8001346 <inv_row_2_scale+0x5e>
        b = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	81fb      	strh	r3, [r7, #14]
 8001344:	e00a      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3302      	adds	r3, #2
 800134a:	f993 3000 	ldrsb.w	r3, [r3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da02      	bge.n	8001358 <inv_row_2_scale+0x70>
        b = 6;
 8001352:	2306      	movs	r3, #6
 8001354:	81fb      	strh	r3, [r7, #14]
 8001356:	e001      	b.n	800135c <inv_row_2_scale+0x74>
    else
        b = 7;            // error
 8001358:	2307      	movs	r3, #7
 800135a:	81fb      	strh	r3, [r7, #14]
    return b;
 800135c:	89fb      	ldrh	r3, [r7, #14]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb8 	bl	80012e8 <inv_row_2_scale>
 8001378:	4603      	mov	r3, r0
 800137a:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3303      	adds	r3, #3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffb1 	bl	80012e8 <inv_row_2_scale>
 8001386:	4603      	mov	r3, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b21a      	sxth	r2, r3
 800138c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3306      	adds	r3, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffa4 	bl	80012e8 <inv_row_2_scale>
 80013a0:	4603      	mov	r3, r0
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	81fb      	strh	r3, [r7, #14]

    return scalar;
 80013b0:	89fb      	ldrh	r3, [r7, #14]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <run_self_test>:

static void run_self_test(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b08a      	sub	sp, #40	; 0x28
 80013be:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8cc 	bl	8003568 <mpu_run_self_test>
 80013d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0x03) {                   //����0x03ΪMPU6050
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d14b      	bne.n	8001470 <run_self_test+0xb6>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);			//��ȡ��ǰ�����ǵ�״̬
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 f895 	bl	800250c <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001414:	ee17 3a90 	vmov	r3, s15
 8001418:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001424:	edd7 7a02 	vldr	s15, [r7, #8]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);			//���ݶ�ȡ��״̬����У׼
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fbe4 	bl	8003c08 <dmp_set_gyro_bias>
		
        mpu_get_accel_sens(&accel_sens);	//��ȡ��ǰ���ٶȼƵ�״̬
 8001440:	1dbb      	adds	r3, r7, #6
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f89a 	bl	800257c <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);			//���ݶ�ȡ��״̬����У׼
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fcd6 	bl	8003e1c <dmp_set_accel_bias>
		//printf("setting bias succesfully ......\r\n");
    }
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
*******************************************************************************/
void MPU6050_setClockSource(uint8_t source){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2303      	movs	r3, #3
 8001488:	2202      	movs	r2, #2
 800148a:	216b      	movs	r1, #107	; 0x6b
 800148c:	20d0      	movs	r0, #208	; 0xd0
 800148e:	f7ff fe82 	bl	8001196 <IICwriteBits>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af02      	add	r7, sp, #8
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	2204      	movs	r2, #4
 80014ac:	211b      	movs	r1, #27
 80014ae:	20d0      	movs	r0, #208	; 0xd0
 80014b0:	f7ff fe71 	bl	8001196 <IICwriteBits>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <MPU6050_setFullScaleAccelRange>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setFullScaleAccelRange(uint8_t range)
*��������:	    ����  MPU6050 ���ٶȼƵ��������
*******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2302      	movs	r3, #2
 80014cc:	2204      	movs	r2, #4
 80014ce:	211c      	movs	r1, #28
 80014d0:	20d0      	movs	r0, #208	; 0xd0
 80014d2:	f7ff fe60 	bl	8001196 <IICwriteBits>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <MPU6050_setSleepEnabled>:
*����ԭ��:		void MPU6050_setSleepEnabled(uint8_t enabled)
*��������:	    ����  MPU6050 �Ƿ����˯��ģʽ
				enabled =1   ˯��
			    enabled =0   ����
*******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2206      	movs	r2, #6
 80014ec:	216b      	movs	r1, #107	; 0x6b
 80014ee:	20d0      	movs	r0, #208	; 0xd0
 80014f0:	f7ff fea7 	bl	8001242 <IICwriteBit>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <MPU6050_setI2CMasterModeEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2205      	movs	r2, #5
 800150a:	216a      	movs	r1, #106	; 0x6a
 800150c:	20d0      	movs	r0, #208	; 0xd0
 800150e:	f7ff fe98 	bl	8001242 <IICwriteBit>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <MPU6050_setI2CBypassEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2201      	movs	r2, #1
 8001528:	2137      	movs	r1, #55	; 0x37
 800152a:	20d0      	movs	r0, #208	; 0xd0
 800152c:	f7ff fe89 	bl	8001242 <IICwriteBit>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <MPU6050_initialize>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_initialize(void)
*��������:	    ��ʼ�� 	MPU6050 �Խ������״̬��
*******************************************************************************/
void MPU6050_initialize(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO); //����ʱ��
 800153c:	2002      	movs	r0, #2
 800153e:	f7ff ff9b 	bl	8001478 <MPU6050_setClockSource>
	MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_2000);//������������� +-2000��ÿ��
 8001542:	2003      	movs	r0, #3
 8001544:	f7ff ffa9 	bl	800149a <MPU6050_setFullScaleGyroRange>
	MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);	//���ٶȶ�������� +-2G
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ffb7 	bl	80014bc <MPU6050_setFullScaleAccelRange>
	MPU6050_setSleepEnabled(0); //���빤��״̬
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ffc5 	bl	80014de <MPU6050_setSleepEnabled>
	MPU6050_setI2CMasterModeEnabled(0);	 //����MPU6050 ����AUXI2C
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ffd1 	bl	80014fc <MPU6050_setI2CMasterModeEnabled>
	MPU6050_setI2CBypassEnabled(0);	 //����������I2C��	MPU6050��AUXI2C	ֱͨ������������ֱ�ӷ���HMC5883L
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ffdd 	bl	800151a <MPU6050_setI2CBypassEnabled>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <MPU6050_DMPInit>:
�������ܣ�MPU6050����DMP�ĳ�ʼ��
��ڲ�������
����  ֵ����
**************************************************************************/
void MPU6050_DMPInit(void)
{ 
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 800156a:	2300      	movs	r3, #0
 800156c:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2201      	movs	r2, #1
 8001576:	2175      	movs	r1, #117	; 0x75
 8001578:	2068      	movs	r0, #104	; 0x68
 800157a:	f7ff fd7b 	bl	8001074 <i2cRead>
//	printf("%d\n", temp[0]);

	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2201      	movs	r2, #1
 8001582:	2175      	movs	r1, #117	; 0x75
 8001584:	2068      	movs	r0, #104	; 0x68
 8001586:	f7ff fd75 	bl	8001074 <i2cRead>
		retry++;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3301      	adds	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <MPU6050_DMPInit+0x36>
 8001596:	f7ff fe91 	bl	80012bc <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 800159a:	793b      	ldrb	r3, [r7, #4]
 800159c:	2b68      	cmp	r3, #104	; 0x68
 800159e:	d1ee      	bne.n	800157e <MPU6050_DMPInit+0x1a>

	HAL_Delay(100);
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f004 f81d 	bl	80055e0 <HAL_Delay>
//	if(temp[0]!=0x68)NVIC_SystemReset();
	if(!mpu_init())
 80015a6:	f000 faff 	bl	8001ba8 <mpu_init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11d      	bne.n	80015ec <MPU6050_DMPInit+0x88>
	{
//		printf("mpu_setting_sensor.....\r\n");
		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f001 f885 	bl	80026c0 <mpu_set_sensors>
		{
//			printf("mpu_set_sensor complete ......\r\n");
		}
//		printf("mpu configure fifo........\r\n");
		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f001 f830 	bl	800261c <mpu_configure_fifo>
		{
//			printf("mpu_configure_fifo complete ......\r\n");
		}
//		printf("mpu setting sample rate......\r\n");
		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 80015bc:	20c8      	movs	r0, #200	; 0xc8
 80015be:	f000 ff3f 	bl	8002440 <mpu_set_sample_rate>
		{
//			printf("mpu_set_sample_rate complete ......\r\n");
		}
//		printf("loading firmware......\r\n");
		if(!dmp_load_motion_driver_firmware())
 80015c2:	f002 fa25 	bl	8003a10 <dmp_load_motion_driver_firmware>
		{
//			printf("dmp_load_motion_driver_firmware complete ......\r\n");
		}
//		printf("setting orientation.....\r\n");
		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <MPU6050_DMPInit+0x90>)
 80015c8:	f7ff fecf 	bl	800136a <inv_orientation_matrix_to_scalar>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fa2e 	bl	8003a30 <dmp_set_orientation>
		{
//			printf("dmp set_orientation complete ......\r\n");
		}
//		printf("enabling dmp features ......\r\n");
		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 80015d4:	f240 1073 	movw	r0, #371	; 0x173
 80015d8:	f002 ffac 	bl	8004534 <dmp_enable_feature>
		DMP_FEATURE_GYRO_CAL))
		{
//			printf("dmp_enable_feature complete ......\r\n");
		}
//		printf("dmp setting fifo rate ......\r\n");
		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 80015dc:	20c8      	movs	r0, #200	; 0xc8
 80015de:	f002 fd1f 	bl	8004020 <dmp_set_fifo_rate>
		{
//			printf("dmp_set_fifo_rate complete ......\r\n");
		}
		run_self_test();
 80015e2:	f7ff feea 	bl	80013ba <run_self_test>
//		printf("setting dmp state.....\r\n");
		if(!mpu_set_dmp_state(1))
 80015e6:	2001      	movs	r0, #1
 80015e8:	f002 f9b4 	bl	8003954 <mpu_set_dmp_state>
		{
//			printf("mpu_set_dmp_state complete ......\r\n");
		}
	}
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000004 	.word	0x20000004

080015f8 <MPU6050_readDMPAll>:
		 MPU6050_Yaw = yaw;
	}
}

void MPU6050_readDMPAll(float* Pitch, float* Roll, float* Yaw)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b090      	sub	sp, #64	; 0x40
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	float pitch, roll, yaw;

	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 8001604:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001608:	f107 0214 	add.w	r2, r7, #20
 800160c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	4bd7      	ldr	r3, [pc, #860]	; (8001970 <MPU6050_readDMPAll+0x378>)
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	460b      	mov	r3, r1
 8001618:	49d6      	ldr	r1, [pc, #856]	; (8001974 <MPU6050_readDMPAll+0x37c>)
 800161a:	48d7      	ldr	r0, [pc, #860]	; (8001978 <MPU6050_readDMPAll+0x380>)
 800161c:	f003 f974 	bl	8004908 <dmp_read_fifo>
	if (sensors & INV_WXYZ_QUAT )
 8001620:	4bd3      	ldr	r3, [pc, #844]	; (8001970 <MPU6050_readDMPAll+0x378>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b29b      	uxth	r3, r3
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 81c2 	beq.w	80019b6 <MPU6050_readDMPAll+0x3be>
	{
		 q0=quat[0] / q30;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163c:	eddf 6acf 	vldr	s13, [pc, #828]	; 800197c <MPU6050_readDMPAll+0x384>
 8001640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001644:	4bce      	ldr	r3, [pc, #824]	; (8001980 <MPU6050_readDMPAll+0x388>)
 8001646:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001654:	eddf 6ac9 	vldr	s13, [pc, #804]	; 800197c <MPU6050_readDMPAll+0x384>
 8001658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165c:	4bc9      	ldr	r3, [pc, #804]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166c:	eddf 6ac3 	vldr	s13, [pc, #780]	; 800197c <MPU6050_readDMPAll+0x384>
 8001670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001674:	4bc4      	ldr	r3, [pc, #784]	; (8001988 <MPU6050_readDMPAll+0x390>)
 8001676:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	eddf 6abd 	vldr	s13, [pc, #756]	; 800197c <MPU6050_readDMPAll+0x384>
 8001688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168c:	4bbf      	ldr	r3, [pc, #764]	; (800198c <MPU6050_readDMPAll+0x394>)
 800168e:	edc3 7a00 	vstr	s15, [r3]
		 pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;
 8001692:	4bbc      	ldr	r3, [pc, #752]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800169c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a0:	4bba      	ldr	r3, [pc, #744]	; (800198c <MPU6050_readDMPAll+0x394>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016aa:	4bb5      	ldr	r3, [pc, #724]	; (8001980 <MPU6050_readDMPAll+0x388>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016b4:	4bb4      	ldr	r3, [pc, #720]	; (8001988 <MPU6050_readDMPAll+0x390>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	ee17 0a90 	vmov	r0, s15
 80016c6:	f7fe ff47 	bl	8000558 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	ec43 2b10 	vmov	d0, r2, r3
 80016d2:	f006 fd27 	bl	8008124 <asin>
 80016d6:	ec51 0b10 	vmov	r0, r1, d0
 80016da:	a3a1      	add	r3, pc, #644	; (adr r3, 8001960 <MPU6050_readDMPAll+0x368>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff92 	bl	8000608 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa64 	bl	8000bb8 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
		 roll= atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;
 80016f4:	4ba4      	ldr	r3, [pc, #656]	; (8001988 <MPU6050_readDMPAll+0x390>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016fe:	4ba3      	ldr	r3, [pc, #652]	; (800198c <MPU6050_readDMPAll+0x394>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001708:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <MPU6050_readDMPAll+0x388>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001712:	4b9c      	ldr	r3, [pc, #624]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	ee17 0a90 	vmov	r0, s15
 8001724:	f7fe ff18 	bl	8000558 <__aeabi_f2d>
 8001728:	4604      	mov	r4, r0
 800172a:	460d      	mov	r5, r1
 800172c:	4b95      	ldr	r3, [pc, #596]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001736:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173a:	4b92      	ldr	r3, [pc, #584]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	4b90      	ldr	r3, [pc, #576]	; (8001988 <MPU6050_readDMPAll+0x390>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800174e:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <MPU6050_readDMPAll+0x390>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe fef6 	bl	8000558 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ec43 2b11 	vmov	d1, r2, r3
 8001774:	ec45 4b10 	vmov	d0, r4, r5
 8001778:	f006 fd08 	bl	800818c <atan2>
 800177c:	ec51 0b10 	vmov	r0, r1, d0
 8001780:	a377      	add	r3, pc, #476	; (adr r3, 8001960 <MPU6050_readDMPAll+0x368>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff3f 	bl	8000608 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff fa11 	bl	8000bb8 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	4b79      	ldr	r3, [pc, #484]	; (8001988 <MPU6050_readDMPAll+0x390>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017aa:	4b75      	ldr	r3, [pc, #468]	; (8001980 <MPU6050_readDMPAll+0x388>)
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	4b76      	ldr	r3, [pc, #472]	; (800198c <MPU6050_readDMPAll+0x394>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017c2:	ee17 0a90 	vmov	r0, s15
 80017c6:	f7fe fec7 	bl	8000558 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4b6c      	ldr	r3, [pc, #432]	; (8001980 <MPU6050_readDMPAll+0x388>)
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <MPU6050_readDMPAll+0x388>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017de:	4b69      	ldr	r3, [pc, #420]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	4b67      	ldr	r3, [pc, #412]	; (8001984 <MPU6050_readDMPAll+0x38c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <MPU6050_readDMPAll+0x390>)
 80017f4:	edd3 6a00 	vldr	s13, [r3]
 80017f8:	4b63      	ldr	r3, [pc, #396]	; (8001988 <MPU6050_readDMPAll+0x390>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001802:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001806:	4b61      	ldr	r3, [pc, #388]	; (800198c <MPU6050_readDMPAll+0x394>)
 8001808:	edd3 6a00 	vldr	s13, [r3]
 800180c:	4b5f      	ldr	r3, [pc, #380]	; (800198c <MPU6050_readDMPAll+0x394>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ec43 2b11 	vmov	d1, r2, r3
 800182a:	ec45 4b10 	vmov	d0, r4, r5
 800182e:	f006 fcad 	bl	800818c <atan2>
 8001832:	ec51 0b10 	vmov	r0, r1, d0
 8001836:	a34a      	add	r3, pc, #296	; (adr r3, 8001960 <MPU6050_readDMPAll+0x368>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fee4 	bl	8000608 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9b6 	bl	8000bb8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c

		 pitch += MPU6050_PitchCorrector;
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <MPU6050_readDMPAll+0x398>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		 pitch = fmod(pitch, 360);
 8001862:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001864:	f7fe fe78 	bl	8000558 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8001968 <MPU6050_readDMPAll+0x370>
 8001870:	ec43 2b10 	vmov	d0, r2, r3
 8001874:	f006 fc8c 	bl	8008190 <fmod>
 8001878:	ec53 2b10 	vmov	r2, r3, d0
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f99a 	bl	8000bb8 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
		 if(pitch > 180) pitch -= 360;
 8001888:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800188c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001994 <MPU6050_readDMPAll+0x39c>
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	dd07      	ble.n	80018aa <MPU6050_readDMPAll+0x2b2>
 800189a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800189e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001998 <MPU6050_readDMPAll+0x3a0>
 80018a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		 roll += MPU6050_RollCorrector;
 80018aa:	4b3c      	ldr	r3, [pc, #240]	; (800199c <MPU6050_readDMPAll+0x3a4>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		 roll = fmod(roll, 360);
 80018bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018be:	f7fe fe4b 	bl	8000558 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001968 <MPU6050_readDMPAll+0x370>
 80018ca:	ec43 2b10 	vmov	d0, r2, r3
 80018ce:	f006 fc5f 	bl	8008190 <fmod>
 80018d2:	ec53 2b10 	vmov	r2, r3, d0
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f96d 	bl	8000bb8 <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
		 if(roll > 180) roll -= 360;
 80018e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001994 <MPU6050_readDMPAll+0x39c>
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	dd07      	ble.n	8001904 <MPU6050_readDMPAll+0x30c>
 80018f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018f8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001998 <MPU6050_readDMPAll+0x3a0>
 80018fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001900:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		 yaw += MPU6050_YawCorrector;
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <MPU6050_readDMPAll+0x3a8>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		 yaw = fmod(yaw, 360);
 8001916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001918:	f7fe fe1e 	bl	8000558 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001968 <MPU6050_readDMPAll+0x370>
 8001924:	ec43 2b10 	vmov	d0, r2, r3
 8001928:	f006 fc32 	bl	8008190 <fmod>
 800192c:	ec53 2b10 	vmov	r2, r3, d0
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f940 	bl	8000bb8 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
		 if(yaw > 180) yaw -= 360;
 800193c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001940:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001994 <MPU6050_readDMPAll+0x39c>
 8001944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	dd2a      	ble.n	80019a4 <MPU6050_readDMPAll+0x3ac>
 800194e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001952:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001998 <MPU6050_readDMPAll+0x3a0>
 8001956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800195a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800195e:	e021      	b.n	80019a4 <MPU6050_readDMPAll+0x3ac>
 8001960:	66666666 	.word	0x66666666
 8001964:	404ca666 	.word	0x404ca666
 8001968:	00000000 	.word	0x00000000
 800196c:	40768000 	.word	0x40768000
 8001970:	20000296 	.word	0x20000296
 8001974:	20000290 	.word	0x20000290
 8001978:	20000288 	.word	0x20000288
 800197c:	4e800000 	.word	0x4e800000
 8001980:	20000000 	.word	0x20000000
 8001984:	200002b0 	.word	0x200002b0
 8001988:	200002b4 	.word	0x200002b4
 800198c:	200002b8 	.word	0x200002b8
 8001990:	200002a4 	.word	0x200002a4
 8001994:	43340000 	.word	0x43340000
 8001998:	43b40000 	.word	0x43b40000
 800199c:	200002a8 	.word	0x200002a8
 80019a0:	200002ac 	.word	0x200002ac

		 *Pitch = pitch;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019a8:	601a      	str	r2, [r3, #0]
		 *Roll = roll;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ae:	601a      	str	r2, [r3, #0]
		 *Yaw = yaw;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b4:	601a      	str	r2, [r3, #0]
	}
}
 80019b6:	bf00      	nop
 80019b8:	3738      	adds	r7, #56	; 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bdb0      	pop	{r4, r5, r7, pc}
 80019be:	bf00      	nop

080019c0 <MPU6050_setYawCorrectorRate>:
{
	MPU6050_RollCorrectorRate = rollCorrectorRate;
}

void MPU6050_setYawCorrectorRate(float yawCorrectorRate)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	ed87 0a01 	vstr	s0, [r7, #4]
	MPU6050_YawCorrectorRate = yawCorrectorRate;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <MPU6050_setYawCorrectorRate+0x1c>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	200002a0 	.word	0x200002a0

080019e0 <MPU6050_updateAngleCorrector>:

void MPU6050_updateAngleCorrector(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	MPU6050_PitchCorrector += MPU6050_PitchCorrectorRate;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MPU6050_updateAngleCorrector+0x50>)
 80019e6:	ed93 7a00 	vldr	s14, [r3]
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MPU6050_updateAngleCorrector+0x54>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MPU6050_updateAngleCorrector+0x50>)
 80019f6:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_RollCorrector += MPU6050_RollCorrectorRate;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MPU6050_updateAngleCorrector+0x58>)
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MPU6050_updateAngleCorrector+0x5c>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MPU6050_updateAngleCorrector+0x58>)
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_YawCorrector += MPU6050_YawCorrectorRate;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MPU6050_updateAngleCorrector+0x60>)
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MPU6050_updateAngleCorrector+0x64>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MPU6050_updateAngleCorrector+0x60>)
 8001a22:	edc3 7a00 	vstr	s15, [r3]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200002a4 	.word	0x200002a4
 8001a34:	20000298 	.word	0x20000298
 8001a38:	200002a8 	.word	0x200002a8
 8001a3c:	2000029c 	.word	0x2000029c
 8001a40:	200002ac 	.word	0x200002ac
 8001a44:	200002a0 	.word	0x200002a0

08001a48 <MPU6050_getDriftingRate>:

void MPU6050_getDriftingRate(float pitch, float roll, float yaw, float* pitchRate, float* rollRate, float* yawRate)
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af04      	add	r7, sp, #16
 8001a4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a52:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a56:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a5a:	60b8      	str	r0, [r7, #8]
 8001a5c:	6079      	str	r1, [r7, #4]
 8001a5e:	603a      	str	r2, [r7, #0]
	static long t = 0;

	*pitchRate = pitch/t;
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <MPU6050_getDriftingRate+0xa4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	edc3 7a00 	vstr	s15, [r3]
	*rollRate = roll/t;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MPU6050_getDriftingRate+0xa4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a86:	edd7 6a04 	vldr	s13, [r7, #16]
 8001a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	edc3 7a00 	vstr	s15, [r3]
	*yawRate = yaw/t;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MPU6050_getDriftingRate+0xa4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	edc3 7a00 	vstr	s15, [r3]

	printf("%.2f %f %li\n\r", yaw, *yawRate, t);
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7fe fd52 	bl	8000558 <__aeabi_f2d>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	460d      	mov	r5, r1
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd4b 	bl	8000558 <__aeabi_f2d>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4909      	ldr	r1, [pc, #36]	; (8001aec <MPU6050_getDriftingRate+0xa4>)
 8001ac8:	6809      	ldr	r1, [r1, #0]
 8001aca:	9102      	str	r1, [sp, #8]
 8001acc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MPU6050_getDriftingRate+0xa8>)
 8001ad6:	f007 fe9d 	bl	8009814 <iprintf>

	t++;
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <MPU6050_getDriftingRate+0xa4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a02      	ldr	r2, [pc, #8]	; (8001aec <MPU6050_getDriftingRate+0xa4>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bdb0      	pop	{r4, r5, r7, pc}
 8001aec:	200002bc 	.word	0x200002bc
 8001af0:	0800b9a0 	.word	0x0800b9a0

08001af4 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <set_int_enable+0xb0>)
 8001b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01c      	beq.n	8001b42 <set_int_enable+0x4e>
        if (enable)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e001      	b.n	8001b18 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <set_int_enable+0xb0>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	7818      	ldrb	r0, [r3, #0]
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <set_int_enable+0xb0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	7bd9      	ldrb	r1, [r3, #15]
 8001b24:	f107 030f 	add.w	r3, r7, #15
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f7ff fa7f 	bl	800102c <i2cWrite>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <set_int_enable+0x46>
            return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	e030      	b.n	8001b9c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <set_int_enable+0xb0>)
 8001b3e:	745a      	strb	r2, [r3, #17]
 8001b40:	e02b      	b.n	8001b9a <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <set_int_enable+0xb0>)
 8001b44:	7a9b      	ldrb	r3, [r3, #10]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <set_int_enable+0x5c>
            return -1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e025      	b.n	8001b9c <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <set_int_enable+0x6e>
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <set_int_enable+0xb0>)
 8001b58:	7c5b      	ldrb	r3, [r3, #17]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <set_int_enable+0x6e>
            return 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e01c      	b.n	8001b9c <set_int_enable+0xa8>
        if (enable)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e001      	b.n	8001b72 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <set_int_enable+0xb0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	7818      	ldrb	r0, [r3, #0]
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <set_int_enable+0xb0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	7bd9      	ldrb	r1, [r3, #15]
 8001b7e:	f107 030f 	add.w	r3, r7, #15
 8001b82:	2201      	movs	r2, #1
 8001b84:	f7ff fa52 	bl	800102c <i2cWrite>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <set_int_enable+0xa0>
            return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e003      	b.n	8001b9c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <set_int_enable+0xb0>)
 8001b98:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000010 	.word	0x20000010

08001ba8 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001bb2:	4b7c      	ldr	r3, [pc, #496]	; (8001da4 <mpu_init+0x1fc>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	7818      	ldrb	r0, [r3, #0]
 8001bb8:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <mpu_init+0x1fc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	7c99      	ldrb	r1, [r3, #18]
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f7ff fa33 	bl	800102c <i2cWrite>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <mpu_init+0x2a>
        return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e0e4      	b.n	8001d9c <mpu_init+0x1f4>
    delay_ms(100);
 8001bd2:	2064      	movs	r0, #100	; 0x64
 8001bd4:	f003 fd04 	bl	80055e0 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001bdc:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <mpu_init+0x1fc>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	7818      	ldrb	r0, [r3, #0]
 8001be2:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <mpu_init+0x1fc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	7c99      	ldrb	r1, [r3, #18]
 8001be8:	463b      	mov	r3, r7
 8001bea:	2201      	movs	r2, #1
 8001bec:	f7ff fa1e 	bl	800102c <i2cWrite>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <mpu_init+0x54>
        return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e0cf      	b.n	8001d9c <mpu_init+0x1f4>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8001bfc:	4b69      	ldr	r3, [pc, #420]	; (8001da4 <mpu_init+0x1fc>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	7818      	ldrb	r0, [r3, #0]
 8001c02:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <mpu_init+0x1fc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	7d99      	ldrb	r1, [r3, #22]
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2206      	movs	r2, #6
 8001c0c:	f7ff fa32 	bl	8001074 <i2cRead>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <mpu_init+0x74>
        return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e0bf      	b.n	8001d9c <mpu_init+0x1f4>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001c1c:	797b      	ldrb	r3, [r7, #5]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <mpu_init+0xc8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d103      	bne.n	8001c5c <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <mpu_init+0x1fc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	74da      	strb	r2, [r3, #19]
 8001c5a:	e02d      	b.n	8001cb8 <mpu_init+0x110>
        else if (rev == 2)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d103      	bne.n	8001c6a <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <mpu_init+0x1fc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	74da      	strb	r2, [r3, #19]
 8001c68:	e026      	b.n	8001cb8 <mpu_init+0x110>
        else {
            //log_e("Unsupported software product rev %d.\n",rev);
            return -1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e095      	b.n	8001d9c <mpu_init+0x1f4>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <mpu_init+0x1fc>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	7818      	ldrb	r0, [r3, #0]
 8001c76:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <mpu_init+0x1fc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	78d9      	ldrb	r1, [r3, #3]
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f7ff f9f8 	bl	8001074 <i2cRead>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <mpu_init+0xe8>
            return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e085      	b.n	8001d9c <mpu_init+0x1f4>
        rev = data[0] & 0x0F;
 8001c90:	783b      	ldrb	r3, [r7, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <mpu_init+0xfc>
            //log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
            return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e07b      	b.n	8001d9c <mpu_init+0x1f4>
        } else if (rev == 4) {
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d103      	bne.n	8001cb2 <mpu_init+0x10a>
            //log_i("Half sensitivity part found.\r\n");
            st.chip_cfg.accel_half = 1;
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <mpu_init+0x1fc>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	74da      	strb	r2, [r3, #19]
 8001cb0:	e002      	b.n	8001cb8 <mpu_init+0x110>
        } else
            st.chip_cfg.accel_half = 0;
 8001cb2:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <mpu_init+0x1fc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <mpu_init+0x1fc>)
 8001cba:	22ff      	movs	r2, #255	; 0xff
 8001cbc:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <mpu_init+0x1fc>)
 8001cc0:	22ff      	movs	r2, #255	; 0xff
 8001cc2:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001cc4:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <mpu_init+0x1fc>)
 8001cc6:	22ff      	movs	r2, #255	; 0xff
 8001cc8:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <mpu_init+0x1fc>)
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001cd0:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <mpu_init+0x1fc>)
 8001cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd6:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <mpu_init+0x1fc>)
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <mpu_init+0x1fc>)
 8001ce0:	22ff      	movs	r2, #255	; 0xff
 8001ce2:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <mpu_init+0x1fc>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <mpu_init+0x1fc>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <mpu_init+0x1fc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <mpu_init+0x1fc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <mpu_init+0x1fc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001d06:	220c      	movs	r2, #12
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4827      	ldr	r0, [pc, #156]	; (8001da8 <mpu_init+0x200>)
 8001d0c:	f007 f910 	bl	8008f30 <memset>
    st.chip_cfg.dmp_on = 0;
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <mpu_init+0x1fc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <mpu_init+0x1fc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <mpu_init+0x1fc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8001d26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d2a:	f000 f9ed 	bl	8002108 <mpu_set_gyro_fsr>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <mpu_init+0x192>
        return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e030      	b.n	8001d9c <mpu_init+0x1f4>
    if (mpu_set_accel_fsr(2))
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f000 fa72 	bl	8002224 <mpu_set_accel_fsr>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <mpu_init+0x1a4>
        return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e027      	b.n	8001d9c <mpu_init+0x1f4>
    if (mpu_set_lpf(42))
 8001d4c:	202a      	movs	r0, #42	; 0x2a
 8001d4e:	f000 fb0f 	bl	8002370 <mpu_set_lpf>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <mpu_init+0x1b6>
        return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e01e      	b.n	8001d9c <mpu_init+0x1f4>
    if (mpu_set_sample_rate(50))
 8001d5e:	2032      	movs	r0, #50	; 0x32
 8001d60:	f000 fb6e 	bl	8002440 <mpu_set_sample_rate>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <mpu_init+0x1c8>
        return -1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e015      	b.n	8001d9c <mpu_init+0x1f4>
    if (mpu_configure_fifo(0))
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 fc53 	bl	800261c <mpu_configure_fifo>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <mpu_init+0x1da>
        return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	e00c      	b.n	8001d9c <mpu_init+0x1f4>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 fda0 	bl	80028c8 <mpu_set_bypass>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <mpu_init+0x1ec>
        return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e003      	b.n	8001d9c <mpu_init+0x1f4>
#endif

    mpu_set_sensors(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 fc93 	bl	80026c0 <mpu_set_sensors>
    return 0;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000010 	.word	0x20000010
 8001da8:	20000026 	.word	0x20000026

08001dac <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b28      	cmp	r3, #40	; 0x28
 8001dba:	d902      	bls.n	8001dc2 <mpu_lp_accel_mode+0x16>
        return -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc0:	e06a      	b.n	8001e98 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d11c      	bne.n	8001e02 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 fe43 	bl	8002a54 <mpu_set_int_latched>
        tmp[0] = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	7818      	ldrb	r0, [r3, #0]
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	7c99      	ldrb	r1, [r3, #18]
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2202      	movs	r2, #2
 8001de8:	f7ff f920 	bl	800102c <i2cWrite>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <mpu_lp_accel_mode+0x4c>
            return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e04f      	b.n	8001e98 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	751a      	strb	r2, [r3, #20]
        return 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e04a      	b.n	8001e98 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fe26 	bl	8002a54 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8001e12:	2300      	movs	r3, #0
 8001e14:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001e16:	2005      	movs	r0, #5
 8001e18:	f000 faaa 	bl	8002370 <mpu_set_lpf>
 8001e1c:	e016      	b.n	8001e4c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d805      	bhi.n	8001e30 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8001e24:	2301      	movs	r3, #1
 8001e26:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001e28:	2005      	movs	r0, #5
 8001e2a:	f000 faa1 	bl	8002370 <mpu_set_lpf>
 8001e2e:	e00d      	b.n	8001e4c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b14      	cmp	r3, #20
 8001e34:	d805      	bhi.n	8001e42 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8001e36:	2302      	movs	r3, #2
 8001e38:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f000 fa98 	bl	8002370 <mpu_set_lpf>
 8001e40:	e004      	b.n	8001e4c <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001e42:	2303      	movs	r3, #3
 8001e44:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001e46:	2014      	movs	r0, #20
 8001e48:	f000 fa92 	bl	8002370 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8001e4c:	7b7b      	ldrb	r3, [r7, #13]
 8001e4e:	019b      	lsls	r3, r3, #6
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	f043 0307 	orr.w	r3, r3, #7
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	7818      	ldrb	r0, [r3, #0]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	7c99      	ldrb	r1, [r3, #18]
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f7ff f8dd 	bl	800102c <i2cWrite>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <mpu_lp_accel_mode+0xd2>
        return -1;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	e00c      	b.n	8001e98 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001e80:	2208      	movs	r2, #8
 8001e82:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <mpu_lp_accel_mode+0xf4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 fbc3 	bl	800261c <mpu_configure_fifo>

    return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001eac:	7a9b      	ldrb	r3, [r3, #10]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <mpu_reset_fifo+0x14>
        return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e0eb      	b.n	8002090 <mpu_reset_fifo+0x1ec>

    data = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001ebc:	4b76      	ldr	r3, [pc, #472]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	7818      	ldrb	r0, [r3, #0]
 8001ec2:	4b75      	ldr	r3, [pc, #468]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	7bd9      	ldrb	r1, [r3, #15]
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f7ff f8ae 	bl	800102c <i2cWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <mpu_reset_fifo+0x38>
        return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e0d9      	b.n	8002090 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001edc:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	7818      	ldrb	r0, [r3, #0]
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	7959      	ldrb	r1, [r3, #5]
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	2201      	movs	r2, #1
 8001eec:	f7ff f89e 	bl	800102c <i2cWrite>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <mpu_reset_fifo+0x58>
        return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e0c9      	b.n	8002090 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001efc:	4b66      	ldr	r3, [pc, #408]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	4b65      	ldr	r3, [pc, #404]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	7919      	ldrb	r1, [r3, #4]
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f7ff f88e 	bl	800102c <i2cWrite>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <mpu_reset_fifo+0x78>
        return -1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e0b9      	b.n	8002090 <mpu_reset_fifo+0x1ec>

    if (st.chip_cfg.dmp_on) {
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d059      	beq.n	8001fda <mpu_reset_fifo+0x136>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001f26:	230c      	movs	r3, #12
 8001f28:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	7818      	ldrb	r0, [r3, #0]
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	7919      	ldrb	r1, [r3, #4]
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f7ff f877 	bl	800102c <i2cWrite>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <mpu_reset_fifo+0xa6>
            return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	e0a2      	b.n	8002090 <mpu_reset_fifo+0x1ec>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001f4a:	23c0      	movs	r3, #192	; 0xc0
 8001f4c:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f50:	7a9b      	ldrb	r3, [r3, #10]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <mpu_reset_fifo+0xc0>
            data |= BIT_AUX_IF_EN;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	7818      	ldrb	r0, [r3, #0]
 8001f6a:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	7919      	ldrb	r1, [r3, #4]
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	2201      	movs	r2, #1
 8001f74:	f7ff f85a 	bl	800102c <i2cWrite>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <mpu_reset_fifo+0xe0>
            return -1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e085      	b.n	8002090 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.int_enable)
 8001f84:	4b44      	ldr	r3, [pc, #272]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f86:	7c5b      	ldrb	r3, [r3, #17]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <mpu_reset_fifo+0xee>
            data = BIT_DMP_INT_EN;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	e001      	b.n	8001f96 <mpu_reset_fifo+0xf2>
        else
            data = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001f96:	4b40      	ldr	r3, [pc, #256]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	7818      	ldrb	r0, [r3, #0]
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	7bd9      	ldrb	r1, [r3, #15]
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f7ff f841 	bl	800102c <i2cWrite>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <mpu_reset_fifo+0x112>
            return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	e06c      	b.n	8002090 <mpu_reset_fifo+0x1ec>
        data = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001fba:	4b37      	ldr	r3, [pc, #220]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	7818      	ldrb	r0, [r3, #0]
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	7959      	ldrb	r1, [r3, #5]
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f7ff f82f 	bl	800102c <i2cWrite>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05c      	beq.n	800208e <mpu_reset_fifo+0x1ea>
            return -1;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd8:	e05a      	b.n	8002090 <mpu_reset_fifo+0x1ec>
    } else {
        data = BIT_FIFO_RST;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	7818      	ldrb	r0, [r3, #0]
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	7919      	ldrb	r1, [r3, #4]
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	2201      	movs	r2, #1
 8001fee:	f7ff f81d 	bl	800102c <i2cWrite>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <mpu_reset_fifo+0x15a>
            return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	e048      	b.n	8002090 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002000:	7c9b      	ldrb	r3, [r3, #18]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d105      	bne.n	8002012 <mpu_reset_fifo+0x16e>
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002008:	7a9b      	ldrb	r3, [r3, #10]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <mpu_reset_fifo+0x174>
            data = BIT_FIFO_EN;
 8002012:	2340      	movs	r3, #64	; 0x40
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	e001      	b.n	800201c <mpu_reset_fifo+0x178>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8002018:	2360      	movs	r3, #96	; 0x60
 800201a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <mpu_reset_fifo+0x1f4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	7818      	ldrb	r0, [r3, #0]
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	7919      	ldrb	r1, [r3, #4]
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	2201      	movs	r2, #1
 800202c:	f7fe fffe 	bl	800102c <i2cWrite>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <mpu_reset_fifo+0x198>
            return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e029      	b.n	8002090 <mpu_reset_fifo+0x1ec>
    
        if (st.chip_cfg.int_enable)
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <mpu_reset_fifo+0x1f4>)
 800203e:	7c5b      	ldrb	r3, [r3, #17]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <mpu_reset_fifo+0x1a6>
            data = BIT_DATA_RDY_EN;
 8002044:	2301      	movs	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	e001      	b.n	800204e <mpu_reset_fifo+0x1aa>
        else
            data = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	7818      	ldrb	r0, [r3, #0]
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	7bd9      	ldrb	r1, [r3, #15]
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	2201      	movs	r2, #1
 800205e:	f7fe ffe5 	bl	800102c <i2cWrite>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <mpu_reset_fifo+0x1ca>
            return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	e010      	b.n	8002090 <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	7818      	ldrb	r0, [r3, #0]
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <mpu_reset_fifo+0x1f4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	7959      	ldrb	r1, [r3, #5]
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <mpu_reset_fifo+0x1f8>)
 800207c:	2201      	movs	r2, #1
 800207e:	f7fe ffd5 	bl	800102c <i2cWrite>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <mpu_reset_fifo+0x1ea>
            return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	e000      	b.n	8002090 <mpu_reset_fifo+0x1ec>
    }
    return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000010 	.word	0x20000010
 800209c:	20000020 	.word	0x20000020

080020a0 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <mpu_get_gyro_fsr+0x64>)
 80020aa:	7a1b      	ldrb	r3, [r3, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d81e      	bhi.n	80020ee <mpu_get_gyro_fsr+0x4e>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <mpu_get_gyro_fsr+0x18>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020d1 	.word	0x080020d1
 80020c0:	080020db 	.word	0x080020db
 80020c4:	080020e5 	.word	0x080020e5
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	22fa      	movs	r2, #250	; 0xfa
 80020cc:	801a      	strh	r2, [r3, #0]
        break;
 80020ce:	e012      	b.n	80020f6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020d6:	801a      	strh	r2, [r3, #0]
        break;
 80020d8:	e00d      	b.n	80020f6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e0:	801a      	strh	r2, [r3, #0]
        break;
 80020e2:	e008      	b.n	80020f6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020ea:	801a      	strh	r2, [r3, #0]
        break;
 80020ec:	e003      	b.n	80020f6 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	801a      	strh	r2, [r3, #0]
        break;
 80020f4:	bf00      	nop
    }
    return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	20000010 	.word	0x20000010

08002108 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <mpu_set_gyro_fsr+0xa4>)
 8002114:	7a9b      	ldrb	r3, [r3, #10]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <mpu_set_gyro_fsr+0x18>
        return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e041      	b.n	80021a4 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002126:	d017      	beq.n	8002158 <mpu_set_gyro_fsr+0x50>
 8002128:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800212c:	dc17      	bgt.n	800215e <mpu_set_gyro_fsr+0x56>
 800212e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002132:	d00e      	beq.n	8002152 <mpu_set_gyro_fsr+0x4a>
 8002134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002138:	dc11      	bgt.n	800215e <mpu_set_gyro_fsr+0x56>
 800213a:	2bfa      	cmp	r3, #250	; 0xfa
 800213c:	d003      	beq.n	8002146 <mpu_set_gyro_fsr+0x3e>
 800213e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002142:	d003      	beq.n	800214c <mpu_set_gyro_fsr+0x44>
 8002144:	e00b      	b.n	800215e <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
        break;
 800214a:	e00b      	b.n	8002164 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800214c:	2308      	movs	r3, #8
 800214e:	73fb      	strb	r3, [r7, #15]
        break;
 8002150:	e008      	b.n	8002164 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002152:	2310      	movs	r3, #16
 8002154:	73fb      	strb	r3, [r7, #15]
        break;
 8002156:	e005      	b.n	8002164 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002158:	2318      	movs	r3, #24
 800215a:	73fb      	strb	r3, [r7, #15]
        break;
 800215c:	e002      	b.n	8002164 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e01f      	b.n	80021a4 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <mpu_set_gyro_fsr+0xa4>)
 8002166:	7a1a      	ldrb	r2, [r3, #8]
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	08db      	lsrs	r3, r3, #3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	429a      	cmp	r2, r3
 8002170:	d101      	bne.n	8002176 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002172:	2300      	movs	r3, #0
 8002174:	e016      	b.n	80021a4 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <mpu_set_gyro_fsr+0xa4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	7818      	ldrb	r0, [r3, #0]
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <mpu_set_gyro_fsr+0xa4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	7999      	ldrb	r1, [r3, #6]
 8002182:	f107 030f 	add.w	r3, r7, #15
 8002186:	2201      	movs	r2, #1
 8002188:	f7fe ff50 	bl	800102c <i2cWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <mpu_set_gyro_fsr+0x90>
        return -1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e005      	b.n	80021a4 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b03      	ldr	r3, [pc, #12]	; (80021ac <mpu_set_gyro_fsr+0xa4>)
 80021a0:	721a      	strb	r2, [r3, #8]
    return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000010 	.word	0x20000010

080021b0 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <mpu_get_accel_fsr+0x70>)
 80021ba:	7a5b      	ldrb	r3, [r3, #9]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d81b      	bhi.n	80021f8 <mpu_get_accel_fsr+0x48>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <mpu_get_accel_fsr+0x18>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021e1 	.word	0x080021e1
 80021d0:	080021e9 	.word	0x080021e9
 80021d4:	080021f1 	.word	0x080021f1
    case INV_FSR_2G:
        fsr[0] = 2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
        break;
 80021de:	e00e      	b.n	80021fe <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2204      	movs	r2, #4
 80021e4:	701a      	strb	r2, [r3, #0]
        break;
 80021e6:	e00a      	b.n	80021fe <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2208      	movs	r2, #8
 80021ec:	701a      	strb	r2, [r3, #0]
        break;
 80021ee:	e006      	b.n	80021fe <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2210      	movs	r2, #16
 80021f4:	701a      	strb	r2, [r3, #0]
        break;
 80021f6:	e002      	b.n	80021fe <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	e00a      	b.n	8002214 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <mpu_get_accel_fsr+0x70>)
 8002200:	7cdb      	ldrb	r3, [r3, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	701a      	strb	r2, [r3, #0]
    return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	20000010 	.word	0x20000010

08002224 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <mpu_set_accel_fsr+0xcc>)
 8002230:	7a9b      	ldrb	r3, [r3, #10]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <mpu_set_accel_fsr+0x18>
        return -1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e054      	b.n	80022e6 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	3b02      	subs	r3, #2
 8002240:	2b0e      	cmp	r3, #14
 8002242:	d82d      	bhi.n	80022a0 <mpu_set_accel_fsr+0x7c>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <mpu_set_accel_fsr+0x28>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	08002289 	.word	0x08002289
 8002250:	080022a1 	.word	0x080022a1
 8002254:	0800228f 	.word	0x0800228f
 8002258:	080022a1 	.word	0x080022a1
 800225c:	080022a1 	.word	0x080022a1
 8002260:	080022a1 	.word	0x080022a1
 8002264:	08002295 	.word	0x08002295
 8002268:	080022a1 	.word	0x080022a1
 800226c:	080022a1 	.word	0x080022a1
 8002270:	080022a1 	.word	0x080022a1
 8002274:	080022a1 	.word	0x080022a1
 8002278:	080022a1 	.word	0x080022a1
 800227c:	080022a1 	.word	0x080022a1
 8002280:	080022a1 	.word	0x080022a1
 8002284:	0800229b 	.word	0x0800229b
    case 2:
        data = INV_FSR_2G << 3;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
        break;
 800228c:	e00b      	b.n	80022a6 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800228e:	2308      	movs	r3, #8
 8002290:	73fb      	strb	r3, [r7, #15]
        break;
 8002292:	e008      	b.n	80022a6 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002294:	2310      	movs	r3, #16
 8002296:	73fb      	strb	r3, [r7, #15]
        break;
 8002298:	e005      	b.n	80022a6 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800229a:	2318      	movs	r3, #24
 800229c:	73fb      	strb	r3, [r7, #15]
        break;
 800229e:	e002      	b.n	80022a6 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	e01f      	b.n	80022e6 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <mpu_set_accel_fsr+0xcc>)
 80022a8:	7a5a      	ldrb	r2, [r3, #9]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d101      	bne.n	80022b8 <mpu_set_accel_fsr+0x94>
        return 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e016      	b.n	80022e6 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <mpu_set_accel_fsr+0xcc>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	7818      	ldrb	r0, [r3, #0]
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <mpu_set_accel_fsr+0xcc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	79d9      	ldrb	r1, [r3, #7]
 80022c4:	f107 030f 	add.w	r3, r7, #15
 80022c8:	2201      	movs	r2, #1
 80022ca:	f7fe feaf 	bl	800102c <i2cWrite>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <mpu_set_accel_fsr+0xb6>
        return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
 80022d8:	e005      	b.n	80022e6 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <mpu_set_accel_fsr+0xcc>)
 80022e2:	725a      	strb	r2, [r3, #9]
    return 0;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000010 	.word	0x20000010

080022f4 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <mpu_get_lpf+0x78>)
 80022fe:	7adb      	ldrb	r3, [r3, #11]
 8002300:	3b01      	subs	r3, #1
 8002302:	2b05      	cmp	r3, #5
 8002304:	d826      	bhi.n	8002354 <mpu_get_lpf+0x60>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <mpu_get_lpf+0x18>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	08002325 	.word	0x08002325
 8002310:	0800232d 	.word	0x0800232d
 8002314:	08002335 	.word	0x08002335
 8002318:	0800233d 	.word	0x0800233d
 800231c:	08002345 	.word	0x08002345
 8002320:	0800234d 	.word	0x0800234d
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	22bc      	movs	r2, #188	; 0xbc
 8002328:	801a      	strh	r2, [r3, #0]
        break;
 800232a:	e017      	b.n	800235c <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2262      	movs	r2, #98	; 0x62
 8002330:	801a      	strh	r2, [r3, #0]
        break;
 8002332:	e013      	b.n	800235c <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	222a      	movs	r2, #42	; 0x2a
 8002338:	801a      	strh	r2, [r3, #0]
        break;
 800233a:	e00f      	b.n	800235c <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2214      	movs	r2, #20
 8002340:	801a      	strh	r2, [r3, #0]
        break;
 8002342:	e00b      	b.n	800235c <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	220a      	movs	r2, #10
 8002348:	801a      	strh	r2, [r3, #0]
        break;
 800234a:	e007      	b.n	800235c <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2205      	movs	r2, #5
 8002350:	801a      	strh	r2, [r3, #0]
        break;
 8002352:	e003      	b.n	800235c <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	801a      	strh	r2, [r3, #0]
        break;
 800235a:	bf00      	nop
    }
    return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010

08002370 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <mpu_set_lpf+0x98>)
 800237c:	7a9b      	ldrb	r3, [r3, #10]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <mpu_set_lpf+0x18>
        return -1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e03b      	b.n	8002400 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	2bbb      	cmp	r3, #187	; 0xbb
 800238c:	d902      	bls.n	8002394 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e019      	b.n	80023c8 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	2b61      	cmp	r3, #97	; 0x61
 8002398:	d902      	bls.n	80023a0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800239a:	2302      	movs	r3, #2
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e013      	b.n	80023c8 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	2b29      	cmp	r3, #41	; 0x29
 80023a4:	d902      	bls.n	80023ac <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80023a6:	2303      	movs	r3, #3
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e00d      	b.n	80023c8 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	2b13      	cmp	r3, #19
 80023b0:	d902      	bls.n	80023b8 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80023b2:	2304      	movs	r3, #4
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e007      	b.n	80023c8 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	d902      	bls.n	80023c4 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80023be:	2305      	movs	r3, #5
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e001      	b.n	80023c8 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80023c4:	2306      	movs	r3, #6
 80023c6:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <mpu_set_lpf+0x98>)
 80023ca:	7ada      	ldrb	r2, [r3, #11]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d101      	bne.n	80023d6 <mpu_set_lpf+0x66>
        return 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e014      	b.n	8002400 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <mpu_set_lpf+0x98>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	7818      	ldrb	r0, [r3, #0]
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <mpu_set_lpf+0x98>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	7899      	ldrb	r1, [r3, #2]
 80023e2:	f107 030f 	add.w	r3, r7, #15
 80023e6:	2201      	movs	r2, #1
 80023e8:	f7fe fe20 	bl	800102c <i2cWrite>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <mpu_set_lpf+0x88>
        return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e003      	b.n	8002400 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	4b03      	ldr	r3, [pc, #12]	; (8002408 <mpu_set_lpf+0x98>)
 80023fc:	72da      	strb	r2, [r3, #11]
    return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000010 	.word	0x20000010

0800240c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <mpu_get_sample_rate+0x30>)
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <mpu_get_sample_rate+0x18>
        return -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e004      	b.n	800242e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <mpu_get_sample_rate+0x30>)
 8002426:	89da      	ldrh	r2, [r3, #14]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	801a      	strh	r2, [r3, #0]
    return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000010 	.word	0x20000010

08002440 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <mpu_set_sample_rate+0xc8>)
 800244c:	7a9b      	ldrb	r3, [r3, #10]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <mpu_set_sample_rate+0x18>
        return -1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e053      	b.n	8002500 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <mpu_set_sample_rate+0xc8>)
 800245a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <mpu_set_sample_rate+0x28>
        return -1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e04b      	b.n	8002500 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <mpu_set_sample_rate+0xc8>)
 800246a:	7d1b      	ldrb	r3, [r3, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00f      	beq.n	8002490 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <mpu_set_sample_rate+0x4a>
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b28      	cmp	r3, #40	; 0x28
 800247a:	d806      	bhi.n	800248a <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fc93 	bl	8001dac <mpu_lp_accel_mode>
                return 0;
 8002486:	2300      	movs	r3, #0
 8002488:	e03a      	b.n	8002500 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fc8e 	bl	8001dac <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d802      	bhi.n	800249c <mpu_set_sample_rate+0x5c>
            rate = 4;
 8002496:	2304      	movs	r3, #4
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	e006      	b.n	80024aa <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a2:	d902      	bls.n	80024aa <mpu_set_sample_rate+0x6a>
            rate = 1000;
 80024a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <mpu_set_sample_rate+0xc8>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	7818      	ldrb	r0, [r3, #0]
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <mpu_set_sample_rate+0xc8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	7859      	ldrb	r1, [r3, #1]
 80024c8:	f107 030f 	add.w	r3, r7, #15
 80024cc:	2201      	movs	r2, #1
 80024ce:	f7fe fdad 	bl	800102c <i2cWrite>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <mpu_set_sample_rate+0x9e>
            return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	e010      	b.n	8002500 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	3301      	adds	r3, #1
 80024e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <mpu_set_sample_rate+0xc8>)
 80024ee:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <mpu_set_sample_rate+0xc8>)
 80024f2:	89db      	ldrh	r3, [r3, #14]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff39 	bl	8002370 <mpu_set_lpf>
        return 0;
 80024fe:	2300      	movs	r3, #0
    }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000010 	.word	0x20000010

0800250c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <mpu_get_gyro_sens+0x5c>)
 8002516:	7a1b      	ldrb	r3, [r3, #8]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d81b      	bhi.n	8002554 <mpu_get_gyro_sens+0x48>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <mpu_get_gyro_sens+0x18>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002535 	.word	0x08002535
 8002528:	0800253d 	.word	0x0800253d
 800252c:	08002545 	.word	0x08002545
 8002530:	0800254d 	.word	0x0800254d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0d      	ldr	r2, [pc, #52]	; (800256c <mpu_get_gyro_sens+0x60>)
 8002538:	601a      	str	r2, [r3, #0]
        break;
 800253a:	e00e      	b.n	800255a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <mpu_get_gyro_sens+0x64>)
 8002540:	601a      	str	r2, [r3, #0]
        break;
 8002542:	e00a      	b.n	800255a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <mpu_get_gyro_sens+0x68>)
 8002548:	601a      	str	r2, [r3, #0]
        break;
 800254a:	e006      	b.n	800255a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <mpu_get_gyro_sens+0x6c>)
 8002550:	601a      	str	r2, [r3, #0]
        break;
 8002552:	e002      	b.n	800255a <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	e000      	b.n	800255c <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	20000010 	.word	0x20000010
 800256c:	43030000 	.word	0x43030000
 8002570:	42830000 	.word	0x42830000
 8002574:	42033333 	.word	0x42033333
 8002578:	41833333 	.word	0x41833333

0800257c <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <mpu_get_accel_sens+0x78>)
 8002586:	7a5b      	ldrb	r3, [r3, #9]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d81f      	bhi.n	80025cc <mpu_get_accel_sens+0x50>
 800258c:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <mpu_get_accel_sens+0x18>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025af 	.word	0x080025af
 800259c:	080025b9 	.word	0x080025b9
 80025a0:	080025c3 	.word	0x080025c3
    case INV_FSR_2G:
        sens[0] = 16384;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025aa:	801a      	strh	r2, [r3, #0]
        break;
 80025ac:	e011      	b.n	80025d2 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f641 729c 	movw	r2, #8092	; 0x1f9c
 80025b4:	801a      	strh	r2, [r3, #0]
        break;
 80025b6:	e00c      	b.n	80025d2 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025be:	801a      	strh	r2, [r3, #0]
        break;
 80025c0:	e007      	b.n	80025d2 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c8:	801a      	strh	r2, [r3, #0]
        break;
 80025ca:	e002      	b.n	80025d2 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	e00a      	b.n	80025e8 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <mpu_get_accel_sens+0x78>)
 80025d4:	7cdb      	ldrb	r3, [r3, #19]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	801a      	strh	r2, [r3, #0]
    return 0;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	20000010 	.word	0x20000010

080025f8 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <mpu_get_fifo_config+0x20>)
 8002602:	7c1a      	ldrb	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	701a      	strb	r2, [r3, #0]
    return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000010 	.word	0x20000010

0800261c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <mpu_configure_fifo+0x24>
        return 0;
 800263c:	2300      	movs	r3, #0
 800263e:	e038      	b.n	80026b2 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <mpu_configure_fifo+0x32>
            return -1;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	e031      	b.n	80026b2 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002650:	7c1b      	ldrb	r3, [r3, #16]
 8002652:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002656:	7a9a      	ldrb	r2, [r3, #10]
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4013      	ands	r3, r2
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002660:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002664:	7c1b      	ldrb	r3, [r3, #16]
 8002666:	79fa      	ldrb	r2, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d003      	beq.n	8002674 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e001      	b.n	8002678 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <mpu_configure_fifo+0x6a>
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <mpu_configure_fifo+0xa0>)
 8002680:	7d1b      	ldrb	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8002686:	2001      	movs	r0, #1
 8002688:	f7ff fa34 	bl	8001af4 <set_int_enable>
 800268c:	e002      	b.n	8002694 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800268e:	2000      	movs	r0, #0
 8002690:	f7ff fa30 	bl	8001af4 <set_int_enable>
        if (sensors) {
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800269a:	f7ff fc03 	bl	8001ea4 <mpu_reset_fifo>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80026a4:	4a05      	ldr	r2, [pc, #20]	; (80026bc <mpu_configure_fifo+0xa0>)
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	7413      	strb	r3, [r2, #16]
                return -1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e000      	b.n	80026b2 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000010 	.word	0x20000010

080026c0 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e007      	b.n	80026ea <mpu_set_sensors+0x2a>
    else if (sensors)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <mpu_set_sensors+0x26>
        data = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e001      	b.n	80026ea <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 80026e6:	2340      	movs	r3, #64	; 0x40
 80026e8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <mpu_set_sensors+0x108>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	7818      	ldrb	r0, [r3, #0]
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <mpu_set_sensors+0x108>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	7c99      	ldrb	r1, [r3, #18]
 80026f6:	f107 030f 	add.w	r3, r7, #15
 80026fa:	2201      	movs	r2, #1
 80026fc:	f7fe fc96 	bl	800102c <i2cWrite>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <mpu_set_sensors+0x108>)
 8002708:	2200      	movs	r2, #0
 800270a:	729a      	strb	r2, [r3, #10]
        return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	e056      	b.n	80027c0 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <mpu_set_sensors+0x108>)
 800271c:	731a      	strb	r2, [r3, #12]

    data = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	b2db      	uxtb	r3, r3
 8002734:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	b2db      	uxtb	r3, r3
 8002748:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800276e:	b2db      	uxtb	r3, r3
 8002770:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <mpu_set_sensors+0x108>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	7818      	ldrb	r0, [r3, #0]
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <mpu_set_sensors+0x108>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	7cd9      	ldrb	r1, [r3, #19]
 800277e:	f107 030f 	add.w	r3, r7, #15
 8002782:	2201      	movs	r2, #1
 8002784:	f7fe fc52 	bl	800102c <i2cWrite>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <mpu_set_sensors+0x108>)
 8002790:	2200      	movs	r2, #0
 8002792:	729a      	strb	r2, [r3, #10]
        return -1;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
 8002798:	e012      	b.n	80027c0 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <mpu_set_sensors+0xec>
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d002      	beq.n	80027ac <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f954 	bl	8002a54 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <mpu_set_sensors+0x108>)
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <mpu_set_sensors+0x108>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80027b8:	2032      	movs	r0, #50	; 0x32
 80027ba:	f002 ff11 	bl	80055e0 <HAL_Delay>
    return 0;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000010 	.word	0x20000010

080027cc <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 80027da:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <mpu_read_fifo_stream+0x1e>
        return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e068      	b.n	80028bc <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 80027ec:	7a9b      	ldrb	r3, [r3, #10]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <mpu_read_fifo_stream+0x2c>
        return -1;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e061      	b.n	80028bc <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	7818      	ldrb	r0, [r3, #0]
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	7a99      	ldrb	r1, [r3, #10]
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2202      	movs	r2, #2
 800280a:	f7fe fc33 	bl	8001074 <i2cRead>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <mpu_read_fifo_stream+0x4e>
        return -1;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
 8002818:	e050      	b.n	80028bc <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800281a:	7d3b      	ldrb	r3, [r7, #20]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	b21a      	sxth	r2, r3
 8002820:	7d7b      	ldrb	r3, [r7, #21]
 8002822:	b21b      	sxth	r3, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	b21b      	sxth	r3, r3
 8002828:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 800282a:	8afa      	ldrh	r2, [r7, #22]
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	429a      	cmp	r2, r3
 8002830:	d205      	bcs.n	800283e <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
        return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	e03e      	b.n	80028bc <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	885b      	ldrh	r3, [r3, #2]
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	b29b      	uxth	r3, r3
 8002848:	8afa      	ldrh	r2, [r7, #22]
 800284a:	429a      	cmp	r2, r3
 800284c:	d91a      	bls.n	8002884 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	7818      	ldrb	r0, [r3, #0]
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	7c59      	ldrb	r1, [r3, #17]
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	2201      	movs	r2, #1
 8002860:	f7fe fc08 	bl	8001074 <i2cRead>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <mpu_read_fifo_stream+0xa4>
            return -1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e025      	b.n	80028bc <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002870:	7d3b      	ldrb	r3, [r7, #20]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 800287a:	f7ff fb13 	bl	8001ea4 <mpu_reset_fifo>
            return -2;
 800287e:	f06f 0301 	mvn.w	r3, #1
 8002882:	e01b      	b.n	80028bc <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	7818      	ldrb	r0, [r3, #0]
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <mpu_read_fifo_stream+0xf8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	7ad9      	ldrb	r1, [r3, #11]
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f7fe fbed 	bl	8001074 <i2cRead>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <mpu_read_fifo_stream+0xda>
        return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e00a      	b.n	80028bc <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 80028a6:	8afa      	ldrh	r2, [r7, #22]
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	701a      	strb	r2, [r3, #0]
    return 0;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000010 	.word	0x20000010

080028c8 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <mpu_set_bypass+0x188>)
 80028d4:	7c9b      	ldrb	r3, [r3, #18]
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d101      	bne.n	80028e0 <mpu_set_bypass+0x18>
        return 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	e0b2      	b.n	8002a46 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d050      	beq.n	8002988 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80028e6:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <mpu_set_bypass+0x188>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	7818      	ldrb	r0, [r3, #0]
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <mpu_set_bypass+0x188>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	7919      	ldrb	r1, [r3, #4]
 80028f2:	f107 030f 	add.w	r3, r7, #15
 80028f6:	2201      	movs	r2, #1
 80028f8:	f7fe fbbc 	bl	8001074 <i2cRead>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <mpu_set_bypass+0x40>
            return -1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e09e      	b.n	8002a46 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	f023 0320 	bic.w	r3, r3, #32
 800290e:	b2db      	uxtb	r3, r3
 8002910:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002912:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <mpu_set_bypass+0x188>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	7818      	ldrb	r0, [r3, #0]
 8002918:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <mpu_set_bypass+0x188>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	7919      	ldrb	r1, [r3, #4]
 800291e:	f107 030f 	add.w	r3, r7, #15
 8002922:	2201      	movs	r2, #1
 8002924:	f7fe fb82 	bl	800102c <i2cWrite>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <mpu_set_bypass+0x6c>
            return -1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e088      	b.n	8002a46 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002934:	2003      	movs	r0, #3
 8002936:	f002 fe53 	bl	80055e0 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800293a:	2302      	movs	r3, #2
 800293c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <mpu_set_bypass+0x188>)
 8002940:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800294e:	b2db      	uxtb	r3, r3
 8002950:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <mpu_set_bypass+0x188>)
 8002954:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <mpu_set_bypass+0x188>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	7818      	ldrb	r0, [r3, #0]
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <mpu_set_bypass+0x188>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	7d19      	ldrb	r1, [r3, #20]
 8002972:	f107 030f 	add.w	r3, r7, #15
 8002976:	2201      	movs	r2, #1
 8002978:	f7fe fb58 	bl	800102c <i2cWrite>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d05d      	beq.n	8002a3e <mpu_set_bypass+0x176>
            return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	e05e      	b.n	8002a46 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <mpu_set_bypass+0x188>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	7818      	ldrb	r0, [r3, #0]
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <mpu_set_bypass+0x188>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	7919      	ldrb	r1, [r3, #4]
 8002994:	f107 030f 	add.w	r3, r7, #15
 8002998:	2201      	movs	r2, #1
 800299a:	f7fe fb6b 	bl	8001074 <i2cRead>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <mpu_set_bypass+0xe2>
            return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	e04d      	b.n	8002a46 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <mpu_set_bypass+0x188>)
 80029ac:	7a9b      	ldrb	r3, [r3, #10]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	f043 0320 	orr.w	r3, r3, #32
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e004      	b.n	80029cc <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	f023 0320 	bic.w	r3, r3, #32
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <mpu_set_bypass+0x188>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	7818      	ldrb	r0, [r3, #0]
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <mpu_set_bypass+0x188>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	7919      	ldrb	r1, [r3, #4]
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	f7fe fb25 	bl	800102c <i2cWrite>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <mpu_set_bypass+0x126>
            return -1;
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ec:	e02b      	b.n	8002a46 <mpu_set_bypass+0x17e>
        delay_ms(3);
 80029ee:	2003      	movs	r0, #3
 80029f0:	f002 fdf6 	bl	80055e0 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <mpu_set_bypass+0x188>)
 80029f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e001      	b.n	8002a08 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <mpu_set_bypass+0x188>)
 8002a0a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <mpu_set_bypass+0x188>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	7818      	ldrb	r0, [r3, #0]
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <mpu_set_bypass+0x188>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	7d19      	ldrb	r1, [r3, #20]
 8002a28:	f107 030f 	add.w	r3, r7, #15
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f7fe fafd 	bl	800102c <i2cWrite>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <mpu_set_bypass+0x176>
            return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	e003      	b.n	8002a46 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <mpu_set_bypass+0x188>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	7493      	strb	r3, [r2, #18]
    return 0;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000010 	.word	0x20000010

08002a54 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <mpu_set_int_latched+0x84>)
 8002a60:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a64:	79fa      	ldrb	r2, [r7, #7]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d101      	bne.n	8002a6e <mpu_set_int_latched+0x1a>
        return 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e030      	b.n	8002ad0 <mpu_set_int_latched+0x7c>

    if (enable)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002a74:	2330      	movs	r3, #48	; 0x30
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e001      	b.n	8002a7e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <mpu_set_int_latched+0x84>)
 8002a80:	7c9b      	ldrb	r3, [r3, #18]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <mpu_set_int_latched+0x84>)
 8002a92:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <mpu_set_int_latched+0x84>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	7818      	ldrb	r0, [r3, #0]
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <mpu_set_int_latched+0x84>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	7d19      	ldrb	r1, [r3, #20]
 8002ab0:	f107 030f 	add.w	r3, r7, #15
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f7fe fab9 	bl	800102c <i2cWrite>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <mpu_set_int_latched+0x72>
        return -1;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	e004      	b.n	8002ad0 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <mpu_set_int_latched+0x84>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000010 	.word	0x20000010

08002adc <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <get_accel_prod_shift+0x110>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	7818      	ldrb	r0, [r3, #0]
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	2204      	movs	r2, #4
 8002af0:	210d      	movs	r1, #13
 8002af2:	f7fe fabf 	bl	8001074 <i2cRead>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <get_accel_prod_shift+0x24>
        return 0x07;
 8002afc:	2307      	movs	r3, #7
 8002afe:	e071      	b.n	8002be4 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002b00:	7c3b      	ldrb	r3, [r7, #16]
 8002b02:	10db      	asrs	r3, r3, #3
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	f003 031c 	and.w	r3, r3, #28
 8002b0a:	b25a      	sxtb	r2, r3
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	111b      	asrs	r3, r3, #4
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002b20:	7c7b      	ldrb	r3, [r7, #17]
 8002b22:	10db      	asrs	r3, r3, #3
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f003 031c 	and.w	r3, r3, #28
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	109b      	asrs	r3, r3, #2
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002b40:	7cbb      	ldrb	r3, [r7, #18]
 8002b42:	10db      	asrs	r3, r3, #3
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f003 031c 	and.w	r3, r3, #28
 8002b4a:	b25a      	sxtb	r2, r3
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]
 8002b62:	e03b      	b.n	8002bdc <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	3318      	adds	r3, #24
 8002b68:	443b      	add	r3, r7
 8002b6a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
            continue;
 8002b80:	e029      	b.n	8002bd6 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <get_accel_prod_shift+0x114>)
 8002b8c:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8002b8e:	e00f      	b.n	8002bb0 <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bf4 <get_accel_prod_shift+0x118>
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	f103 0218 	add.w	r2, r3, #24
 8002bb6:	443a      	add	r2, r7
 8002bb8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	b2d1      	uxtb	r1, r2
 8002bc0:	f103 0218 	add.w	r2, r3, #24
 8002bc4:	443a      	add	r2, r7
 8002bc6:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8002bca:	3318      	adds	r3, #24
 8002bcc:	443b      	add	r3, r7
 8002bce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1dc      	bne.n	8002b90 <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d9c0      	bls.n	8002b64 <get_accel_prod_shift+0x88>
    }
    return 0;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000010 	.word	0x20000010
 8002bf0:	3eae147b 	.word	0x3eae147b
 8002bf4:	3f845a1d 	.word	0x3f845a1d

08002bf8 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff66 	bl	8002adc <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
 8002c14:	e063      	b.n	8002cde <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	440b      	add	r3, r1
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bfb8      	it	lt
 8002c30:	425b      	neglt	r3, r3
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002cf0 <accel_self_test+0xf8>
 8002c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c42:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	3328      	adds	r3, #40	; 0x28
 8002c4c:	443b      	add	r3, r7
 8002c4e:	3b1c      	subs	r3, #28
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	d023      	beq.n	8002ca6 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3328      	adds	r3, #40	; 0x28
 8002c64:	443b      	add	r3, r7
 8002c66:	3b1c      	subs	r3, #28
 8002c68:	ed93 7a00 	vldr	s14, [r3]
 8002c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c7c:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8002c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c84:	eef0 7ae7 	vabs.f32	s15, s15
 8002c88:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002cf4 <accel_self_test+0xfc>
 8002c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	dd20      	ble.n	8002cd8 <accel_self_test+0xe0>
                result |= 1 << jj;
 8002c96:	2201      	movs	r2, #1
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	e018      	b.n	8002cd8 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 8002ca6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002cf8 <accel_self_test+0x100>
 8002caa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	d408      	bmi.n	8002cca <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002cb8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002cfc <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002cbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	dd06      	ble.n	8002cd8 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	6a3a      	ldr	r2, [r7, #32]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3301      	adds	r3, #1
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	dd98      	ble.n	8002c16 <accel_self_test+0x1e>
    }

    return result;
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3728      	adds	r7, #40	; 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	47800000 	.word	0x47800000
 8002cf4:	3e0f5c29 	.word	0x3e0f5c29
 8002cf8:	3e99999a 	.word	0x3e99999a
 8002cfc:	3f733333 	.word	0x3f733333

08002d00 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002d0e:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <gyro_self_test+0x164>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	7818      	ldrb	r0, [r3, #0]
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	2203      	movs	r2, #3
 8002d1a:	210d      	movs	r1, #13
 8002d1c:	f7fe f9aa 	bl	8001074 <i2cRead>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <gyro_self_test+0x2a>
        return 0x07;
 8002d26:	2307      	movs	r3, #7
 8002d28:	e097      	b.n	8002e5a <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 8002d2a:	7a3b      	ldrb	r3, [r7, #8]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8002d34:	7a7b      	ldrb	r3, [r7, #9]
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8002d3e:	7abb      	ldrb	r3, [r7, #10]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	e080      	b.n	8002e50 <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	440b      	add	r3, r1
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bfb8      	it	lt
 8002d68:	425b      	neglt	r3, r3
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002e68 <gyro_self_test+0x168>
 8002d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7a:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d045      	beq.n	8002e18 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 8002d8c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002e6c <gyro_self_test+0x16c>
 8002d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d94:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002e70 <gyro_self_test+0x170>
 8002d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9c:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002da0:	e007      	b.n	8002db2 <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8002da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002e74 <gyro_self_test+0x174>
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002db2:	f107 0208 	add.w	r2, r7, #8
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b2d9      	uxtb	r1, r3
 8002dc0:	f107 0208 	add.w	r2, r7, #8
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	460a      	mov	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	f107 0208 	add.w	r2, r7, #8
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002dda:	edd7 6a04 	vldr	s13, [r7, #16]
 8002dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dee:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8002df2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df6:	eef0 7ae7 	vabs.f32	s15, s15
 8002dfa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e78 <gyro_self_test+0x178>
 8002dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	dd20      	ble.n	8002e4a <gyro_self_test+0x14a>
                result |= 1 << jj;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e018      	b.n	8002e4a <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002e18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d408      	bmi.n	8002e3c <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 8002e2a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e7c <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 8002e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3a:	dd06      	ble.n	8002e4a <gyro_self_test+0x14a>
            result |= 1 << jj;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	f77f af7b 	ble.w	8002d4e <gyro_self_test+0x4e>
    }
    return result;
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000010 	.word	0x20000010
 8002e68:	47800000 	.word	0x47800000
 8002e6c:	00000083 	.word	0x00000083
 8002e70:	454cb000 	.word	0x454cb000
 8002e74:	3f85e354 	.word	0x3f85e354
 8002e78:	3e0f5c29 	.word	0x3e0f5c29
 8002e7c:	42d20000 	.word	0x42d20000

08002e80 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b0b8      	sub	sp, #224	; 0xe0
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8002e8c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002e90:	4613      	mov	r3, r2
 8002e92:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8002ea2:	4ba5      	ldr	r3, [pc, #660]	; (8003138 <get_st_biases+0x2b8>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	7818      	ldrb	r0, [r3, #0]
 8002ea8:	4ba3      	ldr	r3, [pc, #652]	; (8003138 <get_st_biases+0x2b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	7c99      	ldrb	r1, [r3, #18]
 8002eae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f7fe f8ba 	bl	800102c <i2cWrite>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <get_st_biases+0x44>
        return -1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec2:	e34b      	b.n	800355c <get_st_biases+0x6dc>
    delay_ms(200);
 8002ec4:	20c8      	movs	r0, #200	; 0xc8
 8002ec6:	f002 fb8b 	bl	80055e0 <HAL_Delay>
    data[0] = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8002ed0:	4b99      	ldr	r3, [pc, #612]	; (8003138 <get_st_biases+0x2b8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	7818      	ldrb	r0, [r3, #0]
 8002ed6:	4b98      	ldr	r3, [pc, #608]	; (8003138 <get_st_biases+0x2b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	7bd9      	ldrb	r1, [r3, #15]
 8002edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f7fe f8a3 	bl	800102c <i2cWrite>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <get_st_biases+0x72>
        return -1;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	e334      	b.n	800355c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002ef2:	4b91      	ldr	r3, [pc, #580]	; (8003138 <get_st_biases+0x2b8>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	7818      	ldrb	r0, [r3, #0]
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <get_st_biases+0x2b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	7959      	ldrb	r1, [r3, #5]
 8002efe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f02:	2201      	movs	r2, #1
 8002f04:	f7fe f892 	bl	800102c <i2cWrite>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <get_st_biases+0x94>
        return -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e323      	b.n	800355c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002f14:	4b88      	ldr	r3, [pc, #544]	; (8003138 <get_st_biases+0x2b8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	7818      	ldrb	r0, [r3, #0]
 8002f1a:	4b87      	ldr	r3, [pc, #540]	; (8003138 <get_st_biases+0x2b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	7c99      	ldrb	r1, [r3, #18]
 8002f20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f24:	2201      	movs	r2, #1
 8002f26:	f7fe f881 	bl	800102c <i2cWrite>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <get_st_biases+0xb6>
        return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	e312      	b.n	800355c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8002f36:	4b80      	ldr	r3, [pc, #512]	; (8003138 <get_st_biases+0x2b8>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	7818      	ldrb	r0, [r3, #0]
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	; (8003138 <get_st_biases+0x2b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	7dd9      	ldrb	r1, [r3, #23]
 8002f42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f46:	2201      	movs	r2, #1
 8002f48:	f7fe f870 	bl	800102c <i2cWrite>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <get_st_biases+0xd8>
        return -1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295
 8002f56:	e301      	b.n	800355c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002f58:	4b77      	ldr	r3, [pc, #476]	; (8003138 <get_st_biases+0x2b8>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	7818      	ldrb	r0, [r3, #0]
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <get_st_biases+0x2b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	7919      	ldrb	r1, [r3, #4]
 8002f64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f7fe f85f 	bl	800102c <i2cWrite>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <get_st_biases+0xfa>
        return -1;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e2f0      	b.n	800355c <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002f80:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <get_st_biases+0x2b8>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	7818      	ldrb	r0, [r3, #0]
 8002f86:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <get_st_biases+0x2b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	7919      	ldrb	r1, [r3, #4]
 8002f8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f90:	2201      	movs	r2, #1
 8002f92:	f7fe f84b 	bl	800102c <i2cWrite>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <get_st_biases+0x122>
        return -1;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa0:	e2dc      	b.n	800355c <get_st_biases+0x6dc>
    delay_ms(15);
 8002fa2:	200f      	movs	r0, #15
 8002fa4:	f002 fb1c 	bl	80055e0 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002fa8:	4b63      	ldr	r3, [pc, #396]	; (8003138 <get_st_biases+0x2b8>)
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	7a5b      	ldrb	r3, [r3, #9]
 8002fae:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <get_st_biases+0x2b8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	7818      	ldrb	r0, [r3, #0]
 8002fb8:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <get_st_biases+0x2b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	7899      	ldrb	r1, [r3, #2]
 8002fbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f7fe f832 	bl	800102c <i2cWrite>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <get_st_biases+0x154>
        return -1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e2c3      	b.n	800355c <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <get_st_biases+0x2b8>)
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	7a1b      	ldrb	r3, [r3, #8]
 8002fda:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <get_st_biases+0x2b8>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	7818      	ldrb	r0, [r3, #0]
 8002fe4:	4b54      	ldr	r3, [pc, #336]	; (8003138 <get_st_biases+0x2b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	7859      	ldrb	r1, [r3, #1]
 8002fea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f7fe f81c 	bl	800102c <i2cWrite>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <get_st_biases+0x180>
        return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e2ad      	b.n	800355c <get_st_biases+0x6dc>
    if (hw_test)
 8003000:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <get_st_biases+0x2b8>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	7a9b      	ldrb	r3, [r3, #10]
 800300e:	f063 031f 	orn	r3, r3, #31
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8003018:	e004      	b.n	8003024 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <get_st_biases+0x2b8>)
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	7a9b      	ldrb	r3, [r3, #10]
 8003020:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003024:	4b44      	ldr	r3, [pc, #272]	; (8003138 <get_st_biases+0x2b8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	7818      	ldrb	r0, [r3, #0]
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <get_st_biases+0x2b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	7999      	ldrb	r1, [r3, #6]
 8003030:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003034:	2201      	movs	r2, #1
 8003036:	f7fd fff9 	bl	800102c <i2cWrite>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <get_st_biases+0x1c6>
        return -1;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	e28a      	b.n	800355c <get_st_biases+0x6dc>

    if (hw_test)
 8003046:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <get_st_biases+0x2b8>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	7adb      	ldrb	r3, [r3, #11]
 8003054:	f063 031f 	orn	r3, r3, #31
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800305e:	e002      	b.n	8003066 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 8003060:	2318      	movs	r3, #24
 8003062:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <get_st_biases+0x2b8>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	7818      	ldrb	r0, [r3, #0]
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <get_st_biases+0x2b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	79d9      	ldrb	r1, [r3, #7]
 8003072:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003076:	2201      	movs	r2, #1
 8003078:	f7fd ffd8 	bl	800102c <i2cWrite>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <get_st_biases+0x208>
        return -1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e269      	b.n	800355c <get_st_biases+0x6dc>
    if (hw_test)
 8003088:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <get_st_biases+0x216>
        delay_ms(200);
 8003090:	20c8      	movs	r0, #200	; 0xc8
 8003092:	f002 faa5 	bl	80055e0 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8003096:	2340      	movs	r3, #64	; 0x40
 8003098:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <get_st_biases+0x2b8>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	7818      	ldrb	r0, [r3, #0]
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <get_st_biases+0x2b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	7919      	ldrb	r1, [r3, #4]
 80030a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030ac:	2201      	movs	r2, #1
 80030ae:	f7fd ffbd 	bl	800102c <i2cWrite>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <get_st_biases+0x23e>
        return -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	e24e      	b.n	800355c <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 80030be:	2378      	movs	r3, #120	; 0x78
 80030c0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <get_st_biases+0x2b8>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	7818      	ldrb	r0, [r3, #0]
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <get_st_biases+0x2b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	7959      	ldrb	r1, [r3, #5]
 80030d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030d4:	2201      	movs	r2, #1
 80030d6:	f7fd ffa9 	bl	800102c <i2cWrite>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <get_st_biases+0x266>
        return -1;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	e23a      	b.n	800355c <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 80030e6:	2332      	movs	r3, #50	; 0x32
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fa79 	bl	80055e0 <HAL_Delay>
    data[0] = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <get_st_biases+0x2b8>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	7818      	ldrb	r0, [r3, #0]
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <get_st_biases+0x2b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	7959      	ldrb	r1, [r3, #5]
 8003100:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003104:	2201      	movs	r2, #1
 8003106:	f7fd ff91 	bl	800102c <i2cWrite>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <get_st_biases+0x296>
        return -1;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e222      	b.n	800355c <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <get_st_biases+0x2b8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	7818      	ldrb	r0, [r3, #0]
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <get_st_biases+0x2b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	7a99      	ldrb	r1, [r3, #10]
 8003122:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003126:	2202      	movs	r2, #2
 8003128:	f7fd ffa4 	bl	8001074 <i2cRead>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <get_st_biases+0x2bc>
        return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	e211      	b.n	800355c <get_st_biases+0x6dc>
 8003138:	20000010 	.word	0x20000010

    fifo_count = (data[0] << 8) | data[1];
 800313c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	b21a      	sxth	r2, r3
 8003144:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003148:	b21b      	sxth	r3, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	b21b      	sxth	r3, r3
 800314e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8003152:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <get_st_biases+0x34c>)
 8003158:	fba3 2302 	umull	r2, r3, r3, r2
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	b29b      	uxth	r3, r3
 8003160:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8003164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003168:	f103 0108 	add.w	r1, r3, #8
 800316c:	2300      	movs	r3, #0
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003174:	1d1a      	adds	r2, r3, #4
 8003176:	680b      	ldr	r3, [r1, #0]
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003180:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8003182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003186:	f103 0108 	add.w	r1, r3, #8
 800318a:	2300      	movs	r3, #0
 800318c:	600b      	str	r3, [r1, #0]
 800318e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003192:	1d1a      	adds	r2, r3, #4
 8003194:	680b      	ldr	r3, [r1, #0]
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800319e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80031a6:	e0a0      	b.n	80032ea <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <get_st_biases+0x350>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	7818      	ldrb	r0, [r3, #0]
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <get_st_biases+0x350>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	7ad9      	ldrb	r1, [r3, #11]
 80031b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031b8:	220c      	movs	r2, #12
 80031ba:	f7fd ff5b 	bl	8001074 <i2cRead>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <get_st_biases+0x354>
            return -1;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	e1c8      	b.n	800355c <get_st_biases+0x6dc>
 80031ca:	bf00      	nop
 80031cc:	aaaaaaab 	.word	0xaaaaaaab
 80031d0:	20000010 	.word	0x20000010
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 80031d4:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b21a      	sxth	r2, r3
 80031dc:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b21b      	sxth	r3, r3
 80031e6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 80031ea:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80031f6:	b21b      	sxth	r3, r3
 80031f8:	4313      	orrs	r3, r2
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8003200:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	b21a      	sxth	r2, r3
 8003208:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800320c:	b21b      	sxth	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	b21b      	sxth	r3, r3
 8003212:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 8003216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8003220:	441a      	add	r2, r3
 8003222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003226:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8003228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800322c:	3304      	adds	r3, #4
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8003234:	4618      	mov	r0, r3
 8003236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	180b      	adds	r3, r1, r0
 800323e:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8003240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003244:	3308      	adds	r3, #8
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 800324c:	4618      	mov	r0, r3
 800324e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003252:	f103 0208 	add.w	r2, r3, #8
 8003256:	180b      	adds	r3, r1, r0
 8003258:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800325a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	b21a      	sxth	r2, r3
 8003262:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003266:	b21b      	sxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b21b      	sxth	r3, r3
 800326c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8003270:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	b21a      	sxth	r2, r3
 8003278:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800327c:	b21b      	sxth	r3, r3
 800327e:	4313      	orrs	r3, r2
 8003280:	b21b      	sxth	r3, r3
 8003282:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8003286:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	b21a      	sxth	r2, r3
 800328e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003292:	b21b      	sxth	r3, r3
 8003294:	4313      	orrs	r3, r2
 8003296:	b21b      	sxth	r3, r3
 8003298:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 800329c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 80032a6:	441a      	add	r2, r3
 80032a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ac:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 80032ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032b2:	3304      	adds	r3, #4
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 80032ba:	4618      	mov	r0, r3
 80032bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032c0:	1d1a      	adds	r2, r3, #4
 80032c2:	180b      	adds	r3, r1, r0
 80032c4:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 80032c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ca:	3308      	adds	r3, #8
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032d8:	f103 0208 	add.w	r2, r3, #8
 80032dc:	180b      	adds	r3, r1, r0
 80032de:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 80032e0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80032e4:	3301      	adds	r3, #1
 80032e6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80032ea:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 80032ee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f4ff af58 	bcc.w	80031a8 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 80032f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	17da      	asrs	r2, r3, #31
 8003300:	461c      	mov	r4, r3
 8003302:	4615      	mov	r5, r2
 8003304:	1423      	asrs	r3, r4, #16
 8003306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800330a:	0423      	lsls	r3, r4, #16
 800330c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003310:	2283      	movs	r2, #131	; 0x83
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800331c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003320:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003324:	f7fd fc98 	bl	8000c58 <__aeabi_ldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003334:	2200      	movs	r2, #0
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800333a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800333e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003342:	f7fd fc89 	bl	8000c58 <__aeabi_ldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800334e:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8003350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003354:	3304      	adds	r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	17da      	asrs	r2, r3, #31
 800335a:	4698      	mov	r8, r3
 800335c:	4691      	mov	r9, r2
 800335e:	ea4f 4328 	mov.w	r3, r8, asr #16
 8003362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003366:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800336a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800336e:	2283      	movs	r2, #131	; 0x83
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800337a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800337e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003382:	f7fd fc69 	bl	8000c58 <__aeabi_ldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003392:	2200      	movs	r2, #0
 8003394:	67bb      	str	r3, [r7, #120]	; 0x78
 8003396:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003398:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800339c:	f7fd fc5c 	bl	8000c58 <__aeabi_ldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	4603      	mov	r3, r0
 80033b0:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 80033b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b6:	3308      	adds	r3, #8
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	17da      	asrs	r2, r3, #31
 80033bc:	469a      	mov	sl, r3
 80033be:	4693      	mov	fp, r2
 80033c0:	ea4f 432a 	mov.w	r3, sl, asr #16
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74
 80033c6:	ea4f 430a 	mov.w	r3, sl, lsl #16
 80033ca:	673b      	str	r3, [r7, #112]	; 0x70
 80033cc:	2283      	movs	r2, #131	; 0x83
 80033ce:	2300      	movs	r3, #0
 80033d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80033d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80033d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033dc:	f7fd fc3c 	bl	8000c58 <__aeabi_ldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80033ec:	2200      	movs	r2, #0
 80033ee:	663b      	str	r3, [r7, #96]	; 0x60
 80033f0:	667a      	str	r2, [r7, #100]	; 0x64
 80033f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80033f6:	f7fd fc2f 	bl	8000c58 <__aeabi_ldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003406:	f103 0208 	add.w	r2, r3, #8
 800340a:	4603      	mov	r3, r0
 800340c:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800340e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	17da      	asrs	r2, r3, #31
 8003416:	65bb      	str	r3, [r7, #88]	; 0x58
 8003418:	65fa      	str	r2, [r7, #92]	; 0x5c
 800341a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800341e:	460b      	mov	r3, r1
 8003420:	141b      	asrs	r3, r3, #16
 8003422:	657b      	str	r3, [r7, #84]	; 0x54
 8003424:	460b      	mov	r3, r1
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
 800342a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342e:	2300      	movs	r3, #0
 8003430:	64ba      	str	r2, [r7, #72]	; 0x48
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003438:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800343c:	f7fd fc0c 	bl	8000c58 <__aeabi_ldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800344c:	2200      	movs	r2, #0
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
 8003450:	647a      	str	r2, [r7, #68]	; 0x44
 8003452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003456:	f7fd fbff 	bl	8000c58 <__aeabi_ldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003462:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8003464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003468:	3304      	adds	r3, #4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	17da      	asrs	r2, r3, #31
 800346e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003470:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003472:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003476:	460b      	mov	r3, r1
 8003478:	141b      	asrs	r3, r3, #16
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	460b      	mov	r3, r1
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
 8003482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003486:	2300      	movs	r3, #0
 8003488:	62ba      	str	r2, [r7, #40]	; 0x28
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800348c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003490:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003494:	f7fd fbe0 	bl	8000c58 <__aeabi_ldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80034a4:	2200      	movs	r2, #0
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	627a      	str	r2, [r7, #36]	; 0x24
 80034aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ae:	f7fd fbd3 	bl	8000c58 <__aeabi_ldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034be:	3304      	adds	r3, #4
 80034c0:	4602      	mov	r2, r0
 80034c2:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 80034c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034c8:	3308      	adds	r3, #8
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	17da      	asrs	r2, r3, #31
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	61fa      	str	r2, [r7, #28]
 80034d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034d6:	460b      	mov	r3, r1
 80034d8:	141b      	asrs	r3, r3, #16
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	460b      	mov	r3, r1
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e6:	2300      	movs	r3, #0
 80034e8:	60ba      	str	r2, [r7, #8]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034f4:	f7fd fbb0 	bl	8000c58 <__aeabi_ldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003504:	2200      	movs	r2, #0
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800350e:	f7fd fba3 	bl	8000c58 <__aeabi_ldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800351e:	3308      	adds	r3, #8
 8003520:	4602      	mov	r2, r0
 8003522:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8003524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003528:	3308      	adds	r3, #8
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	dd0a      	ble.n	8003546 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 8003530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003534:	3308      	adds	r3, #8
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800353c:	3308      	adds	r3, #8
 800353e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e009      	b.n	800355a <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 8003546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800354a:	3308      	adds	r3, #8
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003552:	3308      	adds	r3, #8
 8003554:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003558:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	37e0      	adds	r7, #224	; 0xe0
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003566:	bf00      	nop

08003568 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8003572:	2302      	movs	r3, #2
 8003574:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <mpu_run_self_test+0x1a4>)
 800357a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8003582:	2000      	movs	r0, #0
 8003584:	f000 f9e6 	bl	8003954 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800358e:	e002      	b.n	8003596 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fd80 	bl	80020a0 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 80035a0:	f107 030f 	add.w	r3, r7, #15
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fe03 	bl	80021b0 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 80035aa:	f107 0308 	add.w	r3, r7, #8
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fea0 	bl	80022f4 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 80035b4:	f107 030a 	add.w	r3, r7, #10
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ff27 	bl	800240c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 80035be:	4b53      	ldr	r3, [pc, #332]	; (800370c <mpu_run_self_test+0x1a4>)
 80035c0:	7a9b      	ldrb	r3, [r3, #10]
 80035c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 80035c6:	f107 030e 	add.w	r3, r7, #14
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f814 	bl	80025f8 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	e00a      	b.n	80035ec <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 80035d6:	2200      	movs	r2, #0
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fc50 	bl	8002e80 <get_st_biases>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	3301      	adds	r3, #1
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
 80035ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f2:	429a      	cmp	r2, r3
 80035f4:	dbef      	blt.n	80035d6 <mpu_run_self_test+0x6e>
 80035f6:	e000      	b.n	80035fa <mpu_run_self_test+0x92>
            break;
 80035f8:	bf00      	nop
    if (ii == tries) {
 80035fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003600:	429a      	cmp	r2, r3
 8003602:	d102      	bne.n	800360a <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003608:	e045      	b.n	8003696 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e00d      	b.n	800362c <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8003610:	f107 0110 	add.w	r1, r7, #16
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	2201      	movs	r2, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fc30 	bl	8002e80 <get_st_biases>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	3301      	adds	r3, #1
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
 800362c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003632:	429a      	cmp	r2, r3
 8003634:	dbec      	blt.n	8003610 <mpu_run_self_test+0xa8>
 8003636:	e000      	b.n	800363a <mpu_run_self_test+0xd2>
            break;
 8003638:	bf00      	nop
    if (ii == tries) {
 800363a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800363e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003640:	429a      	cmp	r2, r3
 8003642:	d102      	bne.n	800364a <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003648:	e025      	b.n	8003696 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 800364a:	f107 0310 	add.w	r3, r7, #16
 800364e:	4619      	mov	r1, r3
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f7ff fad1 	bl	8002bf8 <accel_self_test>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fb4c 	bl	8002d00 <gyro_self_test>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 8003672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <mpu_run_self_test+0x11a>
        result |= 0x01;
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 8003682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d104      	bne.n	8003694 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
 8003692:	e000      	b.n	8003696 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003694:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <mpu_run_self_test+0x1a4>)
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <mpu_run_self_test+0x1a4>)
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <mpu_run_self_test+0x1a4>)
 80036a4:	22ff      	movs	r2, #255	; 0xff
 80036a6:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <mpu_run_self_test+0x1a4>)
 80036aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ae:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <mpu_run_self_test+0x1a4>)
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <mpu_run_self_test+0x1a4>)
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <mpu_run_self_test+0x1a4>)
 80036be:	2201      	movs	r2, #1
 80036c0:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 80036c2:	89bb      	ldrh	r3, [r7, #12]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fd1f 	bl	8002108 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fda9 	bl	8002224 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 80036d2:	893b      	ldrh	r3, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fe4b 	bl	8002370 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe feaf 	bl	8002440 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 80036e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe ffea 	bl	80026c0 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 80036ec:	7bbb      	ldrb	r3, [r7, #14]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe ff94 	bl	800261c <mpu_configure_fifo>

    if (dmp_was_on)
 80036f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 80036fc:	2001      	movs	r0, #1
 80036fe:	f000 f929 	bl	8003954 <mpu_set_dmp_state>

    return result;
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003704:	4618      	mov	r0, r3
 8003706:	3738      	adds	r7, #56	; 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000010 	.word	0x20000010

08003710 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	603a      	str	r2, [r7, #0]
 800371a:	80fb      	strh	r3, [r7, #6]
 800371c:	460b      	mov	r3, r1
 800371e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <mpu_write_mem+0x1c>
        return -1;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	e03d      	b.n	80037a8 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 800372c:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <mpu_write_mem+0xa0>)
 800372e:	7a9b      	ldrb	r3, [r3, #10]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <mpu_write_mem+0x2a>
        return -1;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e036      	b.n	80037a8 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	b29b      	uxth	r3, r3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	461a      	mov	r2, r3
 800374e:	88bb      	ldrh	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <mpu_write_mem+0xa0>)
 8003754:	6852      	ldr	r2, [r2, #4]
 8003756:	8952      	ldrh	r2, [r2, #10]
 8003758:	4293      	cmp	r3, r2
 800375a:	dd02      	ble.n	8003762 <mpu_write_mem+0x52>
        return -1;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	e022      	b.n	80037a8 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <mpu_write_mem+0xa0>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	7818      	ldrb	r0, [r3, #0]
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <mpu_write_mem+0xa0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	7e19      	ldrb	r1, [r3, #24]
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	2202      	movs	r2, #2
 8003774:	f7fd fc5a 	bl	800102c <i2cWrite>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <mpu_write_mem+0x74>
        return -1;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e011      	b.n	80037a8 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <mpu_write_mem+0xa0>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	7818      	ldrb	r0, [r3, #0]
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <mpu_write_mem+0xa0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	7d59      	ldrb	r1, [r3, #21]
 8003790:	88bb      	ldrh	r3, [r7, #4]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f7fd fc49 	bl	800102c <i2cWrite>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <mpu_write_mem+0x96>
        return -1;
 80037a0:	f04f 33ff 	mov.w	r3, #4294967295
 80037a4:	e000      	b.n	80037a8 <mpu_write_mem+0x98>
    return 0;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000010 	.word	0x20000010

080037b4 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	603a      	str	r2, [r7, #0]
 80037be:	80fb      	strh	r3, [r7, #6]
 80037c0:	460b      	mov	r3, r1
 80037c2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <mpu_read_mem+0x1c>
        return -1;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	e03d      	b.n	800384c <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <mpu_read_mem+0xa0>)
 80037d2:	7a9b      	ldrb	r3, [r3, #10]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <mpu_read_mem+0x2a>
        return -1;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	e036      	b.n	800384c <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80037ee:	7b7b      	ldrb	r3, [r7, #13]
 80037f0:	461a      	mov	r2, r3
 80037f2:	88bb      	ldrh	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <mpu_read_mem+0xa0>)
 80037f8:	6852      	ldr	r2, [r2, #4]
 80037fa:	8952      	ldrh	r2, [r2, #10]
 80037fc:	4293      	cmp	r3, r2
 80037fe:	dd02      	ble.n	8003806 <mpu_read_mem+0x52>
        return -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	e022      	b.n	800384c <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <mpu_read_mem+0xa0>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	7818      	ldrb	r0, [r3, #0]
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <mpu_read_mem+0xa0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	7e19      	ldrb	r1, [r3, #24]
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	2202      	movs	r2, #2
 8003818:	f7fd fc08 	bl	800102c <i2cWrite>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <mpu_read_mem+0x74>
        return -1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e011      	b.n	800384c <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <mpu_read_mem+0xa0>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	7818      	ldrb	r0, [r3, #0]
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <mpu_read_mem+0xa0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	7d59      	ldrb	r1, [r3, #21]
 8003834:	88bb      	ldrh	r3, [r7, #4]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f7fd fc1b 	bl	8001074 <i2cRead>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <mpu_read_mem+0x96>
        return -1;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
 8003848:	e000      	b.n	800384c <mpu_read_mem+0x98>
    return 0;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000010 	.word	0x20000010

08003858 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	4611      	mov	r1, r2
 8003862:	461a      	mov	r2, r3
 8003864:	4603      	mov	r3, r0
 8003866:	81fb      	strh	r3, [r7, #14]
 8003868:	460b      	mov	r3, r1
 800386a:	81bb      	strh	r3, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <mpu_load_firmware+0xf8>)
 8003872:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	e062      	b.n	8003946 <mpu_load_firmware+0xee>

    if (!firmware)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <mpu_load_firmware+0x34>
        return -1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e05c      	b.n	8003946 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800388c:	2300      	movs	r3, #0
 800388e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003890:	e034      	b.n	80038fc <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003892:	89fa      	ldrh	r2, [r7, #14]
 8003894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b10      	cmp	r3, #16
 800389a:	bfa8      	it	ge
 800389c:	2310      	movge	r3, #16
 800389e:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80038a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	441a      	add	r2, r3
 80038a6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80038a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff30 	bl	8003710 <mpu_write_mem>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <mpu_load_firmware+0x64>
            return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	e044      	b.n	8003946 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 80038bc:	f107 0214 	add.w	r2, r7, #20
 80038c0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80038c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff75 	bl	80037b4 <mpu_read_mem>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <mpu_load_firmware+0x7e>
            return -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	e037      	b.n	8003946 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 80038d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4413      	add	r3, r2
 80038dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038de:	f107 0114 	add.w	r1, r7, #20
 80038e2:	4618      	mov	r0, r3
 80038e4:	f005 fb06 	bl	8008ef4 <memcmp>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <mpu_load_firmware+0x9c>
            return -2;
 80038ee:	f06f 0301 	mvn.w	r3, #1
 80038f2:	e028      	b.n	8003946 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80038f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038f8:	4413      	add	r3, r2
 80038fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038fe:	89fb      	ldrh	r3, [r7, #14]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3c6      	bcc.n	8003892 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	b29b      	uxth	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800390e:	89bb      	ldrh	r3, [r7, #12]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <mpu_load_firmware+0xf8>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	7818      	ldrb	r0, [r3, #0]
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <mpu_load_firmware+0xf8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	7e99      	ldrb	r1, [r3, #26]
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	2202      	movs	r2, #2
 8003926:	f7fd fb81 	bl	800102c <i2cWrite>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <mpu_load_firmware+0xde>
        return -1;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	e007      	b.n	8003946 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <mpu_load_firmware+0xf8>)
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800393e:	4a04      	ldr	r2, [pc, #16]	; (8003950 <mpu_load_firmware+0xf8>)
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000010 	.word	0x20000010

08003954 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 8003960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003964:	79fa      	ldrb	r2, [r7, #7]
 8003966:	429a      	cmp	r2, r3
 8003968:	d101      	bne.n	800396e <mpu_set_dmp_state+0x1a>
        return 0;
 800396a:	2300      	movs	r3, #0
 800396c:	e040      	b.n	80039f0 <mpu_set_dmp_state+0x9c>

    if (enable) {
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d027      	beq.n	80039c4 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 8003976:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <mpu_set_dmp_state+0x30>
            return -1;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	e035      	b.n	80039f0 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003984:	2000      	movs	r0, #0
 8003986:	f7fe f8b5 	bl	8001af4 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800398a:	2000      	movs	r0, #0
 800398c:	f7fe ff9c 	bl	80028c8 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 8003992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fd53 	bl	8002440 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800399e:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	7818      	ldrb	r0, [r3, #0]
 80039a4:	f107 030f 	add.w	r3, r7, #15
 80039a8:	2201      	movs	r2, #1
 80039aa:	2123      	movs	r1, #35	; 0x23
 80039ac:	f7fd fb3e 	bl	800102c <i2cWrite>
        st.chip_cfg.dmp_on = 1;
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80039b8:	2001      	movs	r0, #1
 80039ba:	f7fe f89b 	bl	8001af4 <set_int_enable>
        mpu_reset_fifo();
 80039be:	f7fe fa71 	bl	8001ea4 <mpu_reset_fifo>
 80039c2:	e014      	b.n	80039ee <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f7fe f895 	bl	8001af4 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 80039cc:	7c1b      	ldrb	r3, [r3, #16]
 80039ce:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	7818      	ldrb	r0, [r3, #0]
 80039d6:	f107 030f 	add.w	r3, r7, #15
 80039da:	2201      	movs	r2, #1
 80039dc:	2123      	movs	r1, #35	; 0x23
 80039de:	f7fd fb25 	bl	800102c <i2cWrite>
        st.chip_cfg.dmp_on = 0;
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <mpu_set_dmp_state+0xa4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 80039ea:	f7fe fa5b 	bl	8001ea4 <mpu_reset_fifo>
    }
    return 0;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000010 	.word	0x20000010

080039fc <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a18:	23c8      	movs	r3, #200	; 0xc8
 8003a1a:	4904      	ldr	r1, [pc, #16]	; (8003a2c <dmp_load_motion_driver_firmware+0x1c>)
 8003a1c:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8003a20:	f7ff ff1a 	bl	8003858 <mpu_load_firmware>
 8003a24:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0800ba74 	.word	0x0800ba74

08003a30 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003a3a:	4a6e      	ldr	r2, [pc, #440]	; (8003bf4 <dmp_set_orientation+0x1c4>)
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	4611      	mov	r1, r2
 8003a44:	8019      	strh	r1, [r3, #0]
 8003a46:	3302      	adds	r3, #2
 8003a48:	0c12      	lsrs	r2, r2, #16
 8003a4a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <dmp_set_orientation+0x1c8>)
 8003a4e:	f107 0310 	add.w	r3, r7, #16
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4611      	mov	r1, r2
 8003a56:	8019      	strh	r1, [r3, #0]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	0c12      	lsrs	r2, r2, #16
 8003a5c:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003a5e:	4a67      	ldr	r2, [pc, #412]	; (8003bfc <dmp_set_orientation+0x1cc>)
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	4611      	mov	r1, r2
 8003a68:	8019      	strh	r1, [r3, #0]
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	0c12      	lsrs	r2, r2, #16
 8003a6e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003a70:	4a63      	ldr	r2, [pc, #396]	; (8003c00 <dmp_set_orientation+0x1d0>)
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	8019      	strh	r1, [r3, #0]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	0c12      	lsrs	r2, r2, #16
 8003a80:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	3320      	adds	r3, #32
 8003a8a:	443b      	add	r3, r7
 8003a8c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a90:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	3320      	adds	r3, #32
 8003a9e:	443b      	add	r3, r7
 8003aa0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003aa4:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	3320      	adds	r3, #32
 8003ab2:	443b      	add	r3, r7
 8003ab4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ab8:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	3320      	adds	r3, #32
 8003ac2:	443b      	add	r3, r7
 8003ac4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003ac8:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	3320      	adds	r3, #32
 8003ad6:	443b      	add	r3, r7
 8003ad8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003adc:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	3320      	adds	r3, #32
 8003aea:	443b      	add	r3, r7
 8003aec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003af0:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	461a      	mov	r2, r3
 8003af8:	2103      	movs	r1, #3
 8003afa:	f240 4026 	movw	r0, #1062	; 0x426
 8003afe:	f7ff fe07 	bl	8003710 <mpu_write_mem>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <dmp_set_orientation+0xde>
        return -1;
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0c:	e06e      	b.n	8003bec <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003b0e:	f107 0318 	add.w	r3, r7, #24
 8003b12:	461a      	mov	r2, r3
 8003b14:	2103      	movs	r1, #3
 8003b16:	f240 402a 	movw	r0, #1066	; 0x42a
 8003b1a:	f7ff fdf9 	bl	8003710 <mpu_write_mem>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <dmp_set_orientation+0xfa>
        return -1;
 8003b24:	f04f 33ff 	mov.w	r3, #4294967295
 8003b28:	e060      	b.n	8003bec <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	f107 020c 	add.w	r2, r7, #12
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	4611      	mov	r1, r2
 8003b36:	8019      	strh	r1, [r3, #0]
 8003b38:	3302      	adds	r3, #2
 8003b3a:	0c12      	lsrs	r2, r2, #16
 8003b3c:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003b3e:	f107 0318 	add.w	r3, r7, #24
 8003b42:	f107 0208 	add.w	r2, r7, #8
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	8019      	strh	r1, [r3, #0]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	0c12      	lsrs	r2, r2, #16
 8003b50:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003b5c:	7f3b      	ldrb	r3, [r7, #28]
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8003b66:	7e3b      	ldrb	r3, [r7, #24]
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8003b7a:	7f7b      	ldrb	r3, [r7, #29]
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8003b84:	7e7b      	ldrb	r3, [r7, #25]
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8003b98:	7fbb      	ldrb	r3, [r7, #30]
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8003ba2:	7ebb      	ldrb	r3, [r7, #26]
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2103      	movs	r1, #3
 8003bb4:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8003bb8:	f7ff fdaa 	bl	8003710 <mpu_write_mem>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <dmp_set_orientation+0x198>
        return -1;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc6:	e011      	b.n	8003bec <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8003bc8:	f107 0318 	add.w	r3, r7, #24
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2103      	movs	r1, #3
 8003bd0:	f240 4031 	movw	r0, #1073	; 0x431
 8003bd4:	f7ff fd9c 	bl	8003710 <mpu_write_mem>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <dmp_set_orientation+0x1b4>
        return -1;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	e003      	b.n	8003bec <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8003be4:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <dmp_set_orientation+0x1d4>)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	8113      	strh	r3, [r2, #8]
    return 0;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	0800b9b0 	.word	0x0800b9b0
 8003bf8:	0800b9b4 	.word	0x0800b9b4
 8003bfc:	0800b9b8 	.word	0x0800b9b8
 8003c00:	0800b9bc 	.word	0x0800b9bc
 8003c04:	200002c0 	.word	0x200002c0

08003c08 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c0c:	b08c      	sub	sp, #48	; 0x30
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8003c12:	4b80      	ldr	r3, [pc, #512]	; (8003e14 <dmp_set_gyro_bias+0x20c>)
 8003c14:	891b      	ldrh	r3, [r3, #8]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 8003c24:	4b7b      	ldr	r3, [pc, #492]	; (8003e14 <dmp_set_gyro_bias+0x20c>)
 8003c26:	891b      	ldrh	r3, [r3, #8]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	425b      	negs	r3, r3
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <dmp_set_gyro_bias+0x20c>)
 8003c38:	891b      	ldrh	r3, [r3, #8]
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 8003c4c:	4b71      	ldr	r3, [pc, #452]	; (8003e14 <dmp_set_gyro_bias+0x20c>)
 8003c4e:	891b      	ldrh	r3, [r3, #8]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003c5e:	4b6d      	ldr	r3, [pc, #436]	; (8003e14 <dmp_set_gyro_bias+0x20c>)
 8003c60:	891b      	ldrh	r3, [r3, #8]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 8003c74:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <dmp_set_gyro_bias+0x20c>)
 8003c76:	891b      	ldrh	r3, [r3, #8]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	425b      	negs	r3, r3
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	17da      	asrs	r2, r3, #31
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	617a      	str	r2, [r7, #20]
 8003c8e:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <dmp_set_gyro_bias+0x210>)
 8003c90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c94:	460a      	mov	r2, r1
 8003c96:	fb03 f202 	mul.w	r2, r3, r2
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <dmp_set_gyro_bias+0x210>)
 8003caa:	6939      	ldr	r1, [r7, #16]
 8003cac:	fba1 ab02 	umull	sl, fp, r1, r2
 8003cb0:	445b      	add	r3, fp
 8003cb2:	469b      	mov	fp, r3
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003cc0:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003cc4:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003cc8:	4613      	mov	r3, r2
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	17da      	asrs	r2, r3, #31
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <dmp_set_gyro_bias+0x210>)
 8003cd6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cda:	465a      	mov	r2, fp
 8003cdc:	fb03 f202 	mul.w	r2, r3, r2
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a4b      	ldr	r2, [pc, #300]	; (8003e18 <dmp_set_gyro_bias+0x210>)
 8003cec:	4651      	mov	r1, sl
 8003cee:	fba1 8902 	umull	r8, r9, r1, r2
 8003cf2:	444b      	add	r3, r9
 8003cf4:	4699      	mov	r9, r3
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003d02:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003d06:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	17da      	asrs	r2, r3, #31
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <dmp_set_gyro_bias+0x210>)
 8003d18:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003d1c:	464a      	mov	r2, r9
 8003d1e:	fb03 f202 	mul.w	r2, r3, r2
 8003d22:	2300      	movs	r3, #0
 8003d24:	4641      	mov	r1, r8
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <dmp_set_gyro_bias+0x210>)
 8003d2e:	4641      	mov	r1, r8
 8003d30:	fba1 4502 	umull	r4, r5, r1, r2
 8003d34:	442b      	add	r3, r5
 8003d36:	461d      	mov	r5, r3
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	0fa2      	lsrs	r2, r4, #30
 8003d42:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003d46:	17ab      	asrs	r3, r5, #30
 8003d48:	4613      	mov	r3, r2
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	161b      	asrs	r3, r3, #24
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	141b      	asrs	r3, r3, #16
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	121b      	asrs	r3, r3, #8
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8003d72:	f107 0320 	add.w	r3, r7, #32
 8003d76:	461a      	mov	r2, r3
 8003d78:	2104      	movs	r1, #4
 8003d7a:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 8003d7e:	f7ff fcc7 	bl	8003710 <mpu_write_mem>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <dmp_set_gyro_bias+0x186>
        return -1;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e03c      	b.n	8003e08 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	161b      	asrs	r3, r3, #24
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	141b      	asrs	r3, r3, #16
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	121b      	asrs	r3, r3, #8
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8003db4:	f107 0320 	add.w	r3, r7, #32
 8003db8:	461a      	mov	r2, r3
 8003dba:	2104      	movs	r1, #4
 8003dbc:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 8003dc0:	f7ff fca6 	bl	8003710 <mpu_write_mem>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <dmp_set_gyro_bias+0x1c8>
        return -1;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	e01b      	b.n	8003e08 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	161b      	asrs	r3, r3, #24
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	141b      	asrs	r3, r3, #16
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	121b      	asrs	r3, r3, #8
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8003df6:	f107 0320 	add.w	r3, r7, #32
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 8003e02:	f7ff fc85 	bl	8003710 <mpu_write_mem>
 8003e06:	4603      	mov	r3, r0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3730      	adds	r7, #48	; 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	200002c0 	.word	0x200002c0
 8003e18:	02cae309 	.word	0x02cae309

08003e1c <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e20:	b094      	sub	sp, #80	; 0x50
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8003e26:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fba6 	bl	800257c <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003e30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2200      	movs	r2, #0
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	61fa      	str	r2, [r7, #28]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	69f9      	ldr	r1, [r7, #28]
 8003e44:	03cb      	lsls	r3, r1, #15
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	03ca      	lsls	r2, r1, #15
 8003e50:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 8003e54:	4b71      	ldr	r3, [pc, #452]	; (800401c <dmp_set_accel_bias+0x200>)
 8003e56:	891b      	ldrh	r3, [r3, #8]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 8003e66:	4b6d      	ldr	r3, [pc, #436]	; (800401c <dmp_set_accel_bias+0x200>)
 8003e68:	891b      	ldrh	r3, [r3, #8]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	425b      	negs	r3, r3
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <dmp_set_accel_bias+0x200>)
 8003e7a:	891b      	ldrh	r3, [r3, #8]
 8003e7c:	08db      	lsrs	r3, r3, #3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	4413      	add	r3, r2
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <dmp_set_accel_bias+0x200>)
 8003e90:	891b      	ldrh	r3, [r3, #8]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003ea0:	4b5e      	ldr	r3, [pc, #376]	; (800401c <dmp_set_accel_bias+0x200>)
 8003ea2:	891b      	ldrh	r3, [r3, #8]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 8003eb6:	4b59      	ldr	r3, [pc, #356]	; (800401c <dmp_set_accel_bias+0x200>)
 8003eb8:	891b      	ldrh	r3, [r3, #8]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec4:	425b      	negs	r3, r3
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	17da      	asrs	r2, r3, #31
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	617a      	str	r2, [r7, #20]
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	fb02 f203 	mul.w	r2, r2, r3
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eec:	6939      	ldr	r1, [r7, #16]
 8003eee:	fba2 ab01 	umull	sl, fp, r2, r1
 8003ef2:	445b      	add	r3, fp
 8003ef4:	469b      	mov	fp, r3
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003f02:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003f06:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f10:	17da      	asrs	r2, r3, #31
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	60fa      	str	r2, [r7, #12]
 8003f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f1c:	465a      	mov	r2, fp
 8003f1e:	fb02 f203 	mul.w	r2, r2, r3
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f24:	4651      	mov	r1, sl
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2e:	4651      	mov	r1, sl
 8003f30:	fba2 8901 	umull	r8, r9, r2, r1
 8003f34:	444b      	add	r3, r9
 8003f36:	4699      	mov	r9, r3
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003f44:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003f48:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f52:	17da      	asrs	r2, r3, #31
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003f5e:	464a      	mov	r2, r9
 8003f60:	fb02 f203 	mul.w	r2, r2, r3
 8003f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f66:	4641      	mov	r1, r8
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f70:	4641      	mov	r1, r8
 8003f72:	fba2 4501 	umull	r4, r5, r2, r1
 8003f76:	442b      	add	r3, r5
 8003f78:	461d      	mov	r5, r3
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	0fa2      	lsrs	r2, r4, #30
 8003f84:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003f88:	17ab      	asrs	r3, r5, #30
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f90:	161b      	asrs	r3, r3, #24
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8003f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9a:	141b      	asrs	r3, r3, #16
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	121b      	asrs	r3, r3, #8
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb6:	161b      	asrs	r3, r3, #24
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 8003fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc0:	141b      	asrs	r3, r3, #16
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fca:	121b      	asrs	r3, r3, #8
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 8003fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fdc:	161b      	asrs	r3, r3, #24
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	141b      	asrs	r3, r3, #16
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8003fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff0:	121b      	asrs	r3, r3, #8
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8004000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004004:	461a      	mov	r2, r3
 8004006:	210c      	movs	r1, #12
 8004008:	f44f 7025 	mov.w	r0, #660	; 0x294
 800400c:	f7ff fb80 	bl	8003710 <mpu_write_mem>
 8004010:	4603      	mov	r3, r0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3750      	adds	r7, #80	; 0x50
 8004016:	46bd      	mov	sp, r7
 8004018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401c:	200002c0 	.word	0x200002c0

08004020 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <dmp_set_fifo_rate+0x88>)
 800402c:	f107 0310 	add.w	r3, r7, #16
 8004030:	ca07      	ldmia	r2, {r0, r1, r2}
 8004032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2bc8      	cmp	r3, #200	; 0xc8
 800403a:	d902      	bls.n	8004042 <dmp_set_fifo_rate+0x22>
        return -1;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e02e      	b.n	80040a0 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	22c8      	movs	r2, #200	; 0xc8
 8004046:	fb92 f3f3 	sdiv	r3, r2, r3
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8004050:	8bfb      	ldrh	r3, [r7, #30]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	b29b      	uxth	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800405a:	8bfb      	ldrh	r3, [r7, #30]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	461a      	mov	r2, r3
 8004066:	2102      	movs	r1, #2
 8004068:	f240 2016 	movw	r0, #534	; 0x216
 800406c:	f7ff fb50 	bl	8003710 <mpu_write_mem>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <dmp_set_fifo_rate+0x5c>
        return -1;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	e011      	b.n	80040a0 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800407c:	f107 0310 	add.w	r3, r7, #16
 8004080:	461a      	mov	r2, r3
 8004082:	210c      	movs	r1, #12
 8004084:	f640 20c1 	movw	r0, #2753	; 0xac1
 8004088:	f7ff fb42 	bl	8003710 <mpu_write_mem>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <dmp_set_fifo_rate+0x78>
        return -1;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	e003      	b.n	80040a0 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <dmp_set_fifo_rate+0x8c>)
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	8193      	strh	r3, [r2, #12]
    return 0;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	0800b9c0 	.word	0x0800b9c0
 80040ac:	200002c0 	.word	0x200002c0

080040b0 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	460a      	mov	r2, r1
 80040ba:	71fb      	strb	r3, [r7, #7]
 80040bc:	4613      	mov	r3, r2
 80040be:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <dmp_set_tap_thresh+0x22>
 80040ca:	88bb      	ldrh	r3, [r7, #4]
 80040cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80040d0:	d902      	bls.n	80040d8 <dmp_set_tap_thresh+0x28>
        return -1;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	e10b      	b.n	80042f0 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80040d8:	88bb      	ldrh	r3, [r7, #4]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040e2:	eddf 6a85 	vldr	s13, [pc, #532]	; 80042f8 <dmp_set_tap_thresh+0x248>
 80040e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040ea:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 80040ee:	f107 030b 	add.w	r3, r7, #11
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe f85c 	bl	80021b0 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	3b02      	subs	r3, #2
 80040fc:	2b0e      	cmp	r3, #14
 80040fe:	d87d      	bhi.n	80041fc <dmp_set_tap_thresh+0x14c>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <dmp_set_tap_thresh+0x58>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	08004145 	.word	0x08004145
 800410c:	080041fd 	.word	0x080041fd
 8004110:	08004173 	.word	0x08004173
 8004114:	080041fd 	.word	0x080041fd
 8004118:	080041fd 	.word	0x080041fd
 800411c:	080041fd 	.word	0x080041fd
 8004120:	080041a1 	.word	0x080041a1
 8004124:	080041fd 	.word	0x080041fd
 8004128:	080041fd 	.word	0x080041fd
 800412c:	080041fd 	.word	0x080041fd
 8004130:	080041fd 	.word	0x080041fd
 8004134:	080041fd 	.word	0x080041fd
 8004138:	080041fd 	.word	0x080041fd
 800413c:	080041fd 	.word	0x080041fd
 8004140:	080041cf 	.word	0x080041cf
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8004144:	edd7 7a04 	vldr	s15, [r7, #16]
 8004148:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80042fc <dmp_set_tap_thresh+0x24c>
 800414c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004154:	ee17 3a90 	vmov	r3, s15
 8004158:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800415a:	edd7 7a04 	vldr	s15, [r7, #16]
 800415e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004300 <dmp_set_tap_thresh+0x250>
 8004162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416a:	ee17 3a90 	vmov	r3, s15
 800416e:	82bb      	strh	r3, [r7, #20]
        break;
 8004170:	e047      	b.n	8004202 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004172:	edd7 7a04 	vldr	s15, [r7, #16]
 8004176:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004304 <dmp_set_tap_thresh+0x254>
 800417a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800417e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004182:	ee17 3a90 	vmov	r3, s15
 8004186:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004188:	edd7 7a04 	vldr	s15, [r7, #16]
 800418c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004308 <dmp_set_tap_thresh+0x258>
 8004190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004198:	ee17 3a90 	vmov	r3, s15
 800419c:	82bb      	strh	r3, [r7, #20]
        break;
 800419e:	e030      	b.n	8004202 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 80041a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800430c <dmp_set_tap_thresh+0x25c>
 80041a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b0:	ee17 3a90 	vmov	r3, s15
 80041b4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 80041b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ba:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004310 <dmp_set_tap_thresh+0x260>
 80041be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c6:	ee17 3a90 	vmov	r3, s15
 80041ca:	82bb      	strh	r3, [r7, #20]
        break;
 80041cc:	e019      	b.n	8004202 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 80041ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80041d2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004314 <dmp_set_tap_thresh+0x264>
 80041d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 3a90 	vmov	r3, s15
 80041e2:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80041e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80041e8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004318 <dmp_set_tap_thresh+0x268>
 80041ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f4:	ee17 3a90 	vmov	r3, s15
 80041f8:	82bb      	strh	r3, [r7, #20]
        break;
 80041fa:	e002      	b.n	8004202 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	e076      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	b29b      	uxth	r3, r3
 8004208:	b2db      	uxtb	r3, r3
 800420a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800420c:	8afb      	ldrh	r3, [r7, #22]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8004212:	8abb      	ldrh	r3, [r7, #20]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b29b      	uxth	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800421c:	8abb      	ldrh	r3, [r7, #20]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01c      	beq.n	8004266 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	461a      	mov	r2, r3
 8004232:	2102      	movs	r1, #2
 8004234:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8004238:	f7ff fa6a 	bl	8003710 <mpu_write_mem>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <dmp_set_tap_thresh+0x198>
            return -1;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	e053      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004248:	f107 030c 	add.w	r3, r7, #12
 800424c:	3302      	adds	r3, #2
 800424e:	461a      	mov	r2, r3
 8004250:	2102      	movs	r1, #2
 8004252:	f44f 7092 	mov.w	r0, #292	; 0x124
 8004256:	f7ff fa5b 	bl	8003710 <mpu_write_mem>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <dmp_set_tap_thresh+0x1b6>
            return -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	e044      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01c      	beq.n	80042aa <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	461a      	mov	r2, r3
 8004276:	2102      	movs	r1, #2
 8004278:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800427c:	f7ff fa48 	bl	8003710 <mpu_write_mem>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <dmp_set_tap_thresh+0x1dc>
            return -1;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	e031      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800428c:	f107 030c 	add.w	r3, r7, #12
 8004290:	3302      	adds	r3, #2
 8004292:	461a      	mov	r2, r3
 8004294:	2102      	movs	r1, #2
 8004296:	f44f 7094 	mov.w	r0, #296	; 0x128
 800429a:	f7ff fa39 	bl	8003710 <mpu_write_mem>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <dmp_set_tap_thresh+0x1fa>
            return -1;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	e022      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01c      	beq.n	80042ee <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	461a      	mov	r2, r3
 80042ba:	2102      	movs	r1, #2
 80042bc:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 80042c0:	f7ff fa26 	bl	8003710 <mpu_write_mem>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <dmp_set_tap_thresh+0x220>
            return -1;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e00f      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	3302      	adds	r3, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	2102      	movs	r1, #2
 80042da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80042de:	f7ff fa17 	bl	8003710 <mpu_write_mem>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <dmp_set_tap_thresh+0x23e>
            return -1;
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ec:	e000      	b.n	80042f0 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	43480000 	.word	0x43480000
 80042fc:	46800000 	.word	0x46800000
 8004300:	46400000 	.word	0x46400000
 8004304:	46000000 	.word	0x46000000
 8004308:	45c00000 	.word	0x45c00000
 800430c:	45800000 	.word	0x45800000
 8004310:	45400000 	.word	0x45400000
 8004314:	45000000 	.word	0x45000000
 8004318:	44c00000 	.word	0x44c00000

0800431c <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800433a:	b2db      	uxtb	r3, r3
 800433c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	f043 030c 	orr.w	r3, r3, #12
 800434e:	b2db      	uxtb	r3, r3
 8004350:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	f043 0303 	orr.w	r3, r3, #3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8004366:	f107 030f 	add.w	r3, r7, #15
 800436a:	461a      	mov	r2, r3
 800436c:	2101      	movs	r1, #1
 800436e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8004372:	f7ff f9cd 	bl	8003710 <mpu_write_mem>
 8004376:	4603      	mov	r3, r0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <dmp_set_tap_count+0x16>
        min_taps = 1;
 8004390:	2301      	movs	r3, #1
 8004392:	71fb      	strb	r3, [r7, #7]
 8004394:	e004      	b.n	80043a0 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d901      	bls.n	80043a0 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800439c:	2304      	movs	r3, #4
 800439e:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80043a8:	f107 030f 	add.w	r3, r7, #15
 80043ac:	461a      	mov	r2, r3
 80043ae:	2101      	movs	r1, #1
 80043b0:	f240 104f 	movw	r0, #335	; 0x14f
 80043b4:	f7ff f9ac 	bl	8003710 <mpu_write_mem>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <dmp_set_tap_time+0x40>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80043da:	89fb      	ldrh	r3, [r7, #14]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	b29b      	uxth	r3, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	461a      	mov	r2, r3
 80043f0:	2102      	movs	r1, #2
 80043f2:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 80043f6:	f7ff f98b 	bl	8003710 <mpu_write_mem>
 80043fa:	4603      	mov	r3, r0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	cccccccd 	.word	0xcccccccd

08004408 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <dmp_set_tap_time_multi+0x40>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800441e:	89fb      	ldrh	r3, [r7, #14]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	b29b      	uxth	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	461a      	mov	r2, r3
 8004434:	2102      	movs	r1, #2
 8004436:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800443a:	f7ff f969 	bl	8003710 <mpu_write_mem>
 800443e:	4603      	mov	r3, r0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	cccccccd 	.word	0xcccccccd

0800444c <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <dmp_set_shake_reject_thresh+0x5c>)
 800445c:	fb82 1203 	smull	r1, r2, r2, r3
 8004460:	1192      	asrs	r2, r2, #6
 8004462:	17db      	asrs	r3, r3, #31
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	161b      	asrs	r3, r3, #24
 8004472:	b2db      	uxtb	r3, r3
 8004474:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	141b      	asrs	r3, r3, #16
 800447a:	b2db      	uxtb	r3, r3
 800447c:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	121b      	asrs	r3, r3, #8
 8004482:	b2db      	uxtb	r3, r3
 8004484:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	461a      	mov	r2, r3
 8004492:	2104      	movs	r1, #4
 8004494:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8004498:	f7ff f93a 	bl	8003710 <mpu_write_mem>
 800449c:	4603      	mov	r3, r0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	10624dd3 	.word	0x10624dd3

080044ac <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <dmp_set_shake_reject_time+0x40>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	461a      	mov	r2, r3
 80044d8:	2102      	movs	r1, #2
 80044da:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 80044de:	f7ff f917 	bl	8003710 <mpu_write_mem>
 80044e2:	4603      	mov	r3, r0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	cccccccd 	.word	0xcccccccd

080044f0 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <dmp_set_shake_reject_timeout+0x40>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	b29b      	uxth	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	461a      	mov	r2, r3
 800451c:	2102      	movs	r1, #2
 800451e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004522:	f7ff f8f5 	bl	8003710 <mpu_write_mem>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	cccccccd 	.word	0xcccccccd

08004534 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800453e:	2302      	movs	r3, #2
 8004540:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8004542:	23ca      	movs	r3, #202	; 0xca
 8004544:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8004546:	23e3      	movs	r3, #227	; 0xe3
 8004548:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800454a:	2309      	movs	r3, #9
 800454c:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800454e:	f107 030c 	add.w	r3, r7, #12
 8004552:	461a      	mov	r2, r3
 8004554:	2104      	movs	r1, #4
 8004556:	2068      	movs	r0, #104	; 0x68
 8004558:	f7ff f8da 	bl	8003710 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800455c:	23a3      	movs	r3, #163	; 0xa3
 800455e:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800456a:	23c0      	movs	r3, #192	; 0xc0
 800456c:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800456e:	23c8      	movs	r3, #200	; 0xc8
 8004570:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8004572:	23c2      	movs	r3, #194	; 0xc2
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e005      	b.n	8004584 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8004578:	23a3      	movs	r3, #163	; 0xa3
 800457a:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800457c:	23a3      	movs	r3, #163	; 0xa3
 800457e:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8004580:	23a3      	movs	r3, #163	; 0xa3
 8004582:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800458e:	23c4      	movs	r3, #196	; 0xc4
 8004590:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8004592:	23cc      	movs	r3, #204	; 0xcc
 8004594:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8004596:	23c6      	movs	r3, #198	; 0xc6
 8004598:	74bb      	strb	r3, [r7, #18]
 800459a:	e005      	b.n	80045a8 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800459c:	23a3      	movs	r3, #163	; 0xa3
 800459e:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80045a0:	23a3      	movs	r3, #163	; 0xa3
 80045a2:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80045a4:	23a3      	movs	r3, #163	; 0xa3
 80045a6:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80045a8:	23a3      	movs	r3, #163	; 0xa3
 80045aa:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80045ac:	23a3      	movs	r3, #163	; 0xa3
 80045ae:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80045b0:	23a3      	movs	r3, #163	; 0xa3
 80045b2:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	461a      	mov	r2, r3
 80045ba:	210a      	movs	r1, #10
 80045bc:	f640 20a7 	movw	r0, #2727	; 0xaa7
 80045c0:	f7ff f8a6 	bl	8003710 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 80045ce:	2320      	movs	r3, #32
 80045d0:	733b      	strb	r3, [r7, #12]
 80045d2:	e001      	b.n	80045d8 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 80045d4:	23d8      	movs	r3, #216	; 0xd8
 80045d6:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 80045d8:	f107 030c 	add.w	r3, r7, #12
 80045dc:	461a      	mov	r2, r3
 80045de:	2101      	movs	r1, #1
 80045e0:	f640 20b6 	movw	r0, #2742	; 0xab6
 80045e4:	f7ff f894 	bl	8003710 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 80045f2:	2001      	movs	r0, #1
 80045f4:	f000 f8c6 	bl	8004784 <dmp_enable_gyro_cal>
 80045f8:	e002      	b.n	8004600 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 80045fa:	2000      	movs	r0, #0
 80045fc:	f000 f8c2 	bl	8004784 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01d      	beq.n	8004646 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8004614:	23b2      	movs	r3, #178	; 0xb2
 8004616:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004618:	238b      	movs	r3, #139	; 0x8b
 800461a:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800461c:	23b6      	movs	r3, #182	; 0xb6
 800461e:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004620:	239b      	movs	r3, #155	; 0x9b
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e007      	b.n	8004636 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8004626:	23b0      	movs	r3, #176	; 0xb0
 8004628:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800462e:	23b4      	movs	r3, #180	; 0xb4
 8004630:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8004632:	2390      	movs	r3, #144	; 0x90
 8004634:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	461a      	mov	r2, r3
 800463c:	2104      	movs	r1, #4
 800463e:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8004642:	f7ff f865 	bl	8003710 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d025      	beq.n	800469c <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004650:	23f8      	movs	r3, #248	; 0xf8
 8004652:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	461a      	mov	r2, r3
 800465a:	2101      	movs	r1, #1
 800465c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004660:	f7ff f856 	bl	8003710 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004664:	21fa      	movs	r1, #250	; 0xfa
 8004666:	2007      	movs	r0, #7
 8004668:	f7ff fd22 	bl	80040b0 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800466c:	2007      	movs	r0, #7
 800466e:	f7ff fe55 	bl	800431c <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8004672:	2001      	movs	r0, #1
 8004674:	f7ff fe84 	bl	8004380 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004678:	2064      	movs	r0, #100	; 0x64
 800467a:	f7ff fea3 	bl	80043c4 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800467e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004682:	f7ff fec1 	bl	8004408 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004686:	21c8      	movs	r1, #200	; 0xc8
 8004688:	483c      	ldr	r0, [pc, #240]	; (800477c <dmp_enable_feature+0x248>)
 800468a:	f7ff fedf 	bl	800444c <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800468e:	2028      	movs	r0, #40	; 0x28
 8004690:	f7ff ff0c 	bl	80044ac <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004694:	200a      	movs	r0, #10
 8004696:	f7ff ff2b 	bl	80044f0 <dmp_set_shake_reject_timeout>
 800469a:	e009      	b.n	80046b0 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800469c:	23d8      	movs	r3, #216	; 0xd8
 800469e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	461a      	mov	r2, r3
 80046a6:	2101      	movs	r1, #1
 80046a8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80046ac:	f7ff f830 	bl	8003710 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80046ba:	23d9      	movs	r3, #217	; 0xd9
 80046bc:	733b      	strb	r3, [r7, #12]
 80046be:	e001      	b.n	80046c4 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80046c0:	23d8      	movs	r3, #216	; 0xd8
 80046c2:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	461a      	mov	r2, r3
 80046ca:	2101      	movs	r1, #1
 80046cc:	f240 703d 	movw	r0, #1853	; 0x73d
 80046d0:	f7ff f81e 	bl	8003710 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 80046de:	2001      	movs	r0, #1
 80046e0:	f000 f880 	bl	80047e4 <dmp_enable_lp_quat>
 80046e4:	e002      	b.n	80046ec <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f000 f87c 	bl	80047e4 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 80046f6:	2001      	movs	r0, #1
 80046f8:	f000 f89b 	bl	8004832 <dmp_enable_6x_lp_quat>
 80046fc:	e002      	b.n	8004704 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 80046fe:	2000      	movs	r0, #0
 8004700:	f000 f897 	bl	8004832 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	b29a      	uxth	r2, r3
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <dmp_enable_feature+0x24c>)
 800470e:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004710:	f7fd fbc8 	bl	8001ea4 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8004714:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <dmp_enable_feature+0x24c>)
 8004716:	2200      	movs	r2, #0
 8004718:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <dmp_enable_feature+0x24c>)
 8004726:	7b9b      	ldrb	r3, [r3, #14]
 8004728:	3306      	adds	r3, #6
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <dmp_enable_feature+0x24c>)
 800472e:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <dmp_enable_feature+0x24c>)
 800473c:	7b9b      	ldrb	r3, [r3, #14]
 800473e:	3306      	adds	r3, #6
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <dmp_enable_feature+0x24c>)
 8004744:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	f003 0314 	and.w	r3, r3, #20
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <dmp_enable_feature+0x24c>)
 8004752:	7b9b      	ldrb	r3, [r3, #14]
 8004754:	3310      	adds	r3, #16
 8004756:	b2da      	uxtb	r2, r3
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <dmp_enable_feature+0x24c>)
 800475a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <dmp_enable_feature+0x24c>)
 8004768:	7b9b      	ldrb	r3, [r3, #14]
 800476a:	3304      	adds	r3, #4
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <dmp_enable_feature+0x24c>)
 8004770:	739a      	strb	r2, [r3, #14]

    return 0;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	02cae309 	.word	0x02cae309
 8004780:	200002c0 	.word	0x200002c0

08004784 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00f      	beq.n	80047b4 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <dmp_enable_gyro_cal+0x58>)
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	ca07      	ldmia	r2, {r0, r1, r2}
 800479c:	c303      	stmia	r3!, {r0, r1}
 800479e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	461a      	mov	r2, r3
 80047a6:	2109      	movs	r1, #9
 80047a8:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80047ac:	f7fe ffb0 	bl	8003710 <mpu_write_mem>
 80047b0:	4603      	mov	r3, r0
 80047b2:	e00e      	b.n	80047d2 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80047b4:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <dmp_enable_gyro_cal+0x5c>)
 80047b6:	f107 0308 	add.w	r3, r7, #8
 80047ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80047bc:	c303      	stmia	r3!, {r0, r1}
 80047be:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	461a      	mov	r2, r3
 80047c6:	2109      	movs	r1, #9
 80047c8:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80047cc:	f7fe ffa0 	bl	8003710 <mpu_write_mem>
 80047d0:	4603      	mov	r3, r0
    }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	0800b9cc 	.word	0x0800b9cc
 80047e0:	0800b9d8 	.word	0x0800b9d8

080047e4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 80047f4:	23c0      	movs	r3, #192	; 0xc0
 80047f6:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 80047f8:	23c2      	movs	r3, #194	; 0xc2
 80047fa:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 80047fc:	23c4      	movs	r3, #196	; 0xc4
 80047fe:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004800:	23c6      	movs	r3, #198	; 0xc6
 8004802:	73fb      	strb	r3, [r7, #15]
 8004804:	e006      	b.n	8004814 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	2204      	movs	r2, #4
 800480c:	218b      	movs	r1, #139	; 0x8b
 800480e:	4618      	mov	r0, r3
 8004810:	f004 fb8e 	bl	8008f30 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	461a      	mov	r2, r3
 800481a:	2104      	movs	r1, #4
 800481c:	f640 2098 	movw	r0, #2712	; 0xa98
 8004820:	f7fe ff76 	bl	8003710 <mpu_write_mem>

    return mpu_reset_fifo();
 8004824:	f7fd fb3e 	bl	8001ea4 <mpu_reset_fifo>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8004842:	2320      	movs	r3, #32
 8004844:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8004846:	2328      	movs	r3, #40	; 0x28
 8004848:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800484a:	2330      	movs	r3, #48	; 0x30
 800484c:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800484e:	2338      	movs	r3, #56	; 0x38
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	e006      	b.n	8004862 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8004854:	f107 030c 	add.w	r3, r7, #12
 8004858:	2204      	movs	r2, #4
 800485a:	21a3      	movs	r1, #163	; 0xa3
 800485c:	4618      	mov	r0, r3
 800485e:	f004 fb67 	bl	8008f30 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8004862:	f107 030c 	add.w	r3, r7, #12
 8004866:	461a      	mov	r2, r3
 8004868:	2104      	movs	r1, #4
 800486a:	f640 209e 	movw	r0, #2718	; 0xa9e
 800486e:	f7fe ff4f 	bl	8003710 <mpu_write_mem>

    return mpu_reset_fifo();
 8004872:	f7fd fb17 	bl	8001ea4 <mpu_reset_fifo>
 8004876:	4603      	mov	r3, r0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3303      	adds	r3, #3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004892:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3303      	adds	r3, #3
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800489e:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3301      	adds	r3, #1
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80048ae:	7bbb      	ldrb	r3, [r7, #14]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80048b4:	7bbb      	ldrb	r3, [r7, #14]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3301      	adds	r3, #1
 80048be:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <decode_gesture+0x84>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <decode_gesture+0x84>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	7b39      	ldrb	r1, [r7, #12]
 80048ce:	7b7a      	ldrb	r2, [r7, #13]
 80048d0:	4610      	mov	r0, r2
 80048d2:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3301      	adds	r3, #1
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <decode_gesture+0x84>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d006      	beq.n	80048f8 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <decode_gesture+0x84>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	7bfa      	ldrb	r2, [r7, #15]
 80048f0:	0992      	lsrs	r2, r2, #6
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
    }

    return 0;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200002c0 	.word	0x200002c0

08004908 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b092      	sub	sp, #72	; 0x48
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    sensors[0] = 0;
 800491c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491e:	2200      	movs	r2, #0
 8004920:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8004922:	4bae      	ldr	r3, [pc, #696]	; (8004bdc <dmp_read_fifo+0x2d4>)
 8004924:	7b9b      	ldrb	r3, [r3, #14]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f107 0120 	add.w	r1, r7, #32
 800492c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd ff4c 	bl	80027cc <mpu_read_fifo_stream>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <dmp_read_fifo+0x38>
        return -1;
 800493a:	f04f 33ff 	mov.w	r3, #4294967295
 800493e:	e148      	b.n	8004bd2 <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004940:	4ba6      	ldr	r3, [pc, #664]	; (8004bdc <dmp_read_fifo+0x2d4>)
 8004942:	895b      	ldrh	r3, [r3, #10]
 8004944:	f003 0314 	and.w	r3, r3, #20
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 808a 	beq.w	8004a62 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800494e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004952:	061a      	lsls	r2, r3, #24
 8004954:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800495c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004960:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004962:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004964:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004968:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800496e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004972:	061a      	lsls	r2, r3, #24
 8004974:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800497c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004980:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004982:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004988:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800498e:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004990:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80049a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80049a4:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80049a6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80049a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049ac:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80049b2:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80049b4:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80049b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80049ba:	061a      	lsls	r2, r3, #24
 80049bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80049c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049c8:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80049ca:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80049cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049d0:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80049d6:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80049d8:	601a      	str	r2, [r3, #0]
        ii += 16;
 80049da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049de:	3310      	adds	r3, #16
 80049e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	141b      	asrs	r3, r3, #16
 80049ea:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	141b      	asrs	r3, r3, #16
 80049f4:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3308      	adds	r3, #8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	141b      	asrs	r3, r3, #16
 80049fe:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	330c      	adds	r3, #12
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	141b      	asrs	r3, r3, #16
 8004a08:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	fb03 f202 	mul.w	r2, r3, r2
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6979      	ldr	r1, [r7, #20]
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	69b9      	ldr	r1, [r7, #24]
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004a24:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	69f9      	ldr	r1, [r7, #28]
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004a2e:	4413      	add	r3, r2
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004a38:	db03      	blt.n	8004a42 <dmp_read_fifo+0x13a>
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8004a40:	dd07      	ble.n	8004a52 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8004a42:	f7fd fa2f 	bl	8001ea4 <mpu_reset_fifo>
            sensors[0] = 0;
 8004a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a48:	2200      	movs	r2, #0
 8004a4a:	801a      	strh	r2, [r3, #0]
            return -1;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a50:	e0bf      	b.n	8004bd2 <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8004a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	b21a      	sxth	r2, r3
 8004a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a60:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004a62:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <dmp_read_fifo+0x2d4>)
 8004a64:	895b      	ldrh	r3, [r3, #10]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04c      	beq.n	8004b08 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004a6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a72:	3348      	adds	r3, #72	; 0x48
 8004a74:	443b      	add	r3, r7
 8004a76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	b21a      	sxth	r2, r3
 8004a7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a82:	3301      	adds	r3, #1
 8004a84:	3348      	adds	r3, #72	; 0x48
 8004a86:	443b      	add	r3, r7
 8004a88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004a96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	3348      	adds	r3, #72	; 0x48
 8004a9e:	443b      	add	r3, r7
 8004aa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	b219      	sxth	r1, r3
 8004aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004aac:	3303      	adds	r3, #3
 8004aae:	3348      	adds	r3, #72	; 0x48
 8004ab0:	443b      	add	r3, r7
 8004ab2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ab6:	b21a      	sxth	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	3302      	adds	r3, #2
 8004abc:	430a      	orrs	r2, r1
 8004abe:	b212      	sxth	r2, r2
 8004ac0:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	3348      	adds	r3, #72	; 0x48
 8004aca:	443b      	add	r3, r7
 8004acc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b219      	sxth	r1, r3
 8004ad4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ad8:	3305      	adds	r3, #5
 8004ada:	3348      	adds	r3, #72	; 0x48
 8004adc:	443b      	add	r3, r7
 8004ade:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ae2:	b21a      	sxth	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	b212      	sxth	r2, r2
 8004aec:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004aee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004af2:	3306      	adds	r3, #6
 8004af4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004afe:	f043 0308 	orr.w	r3, r3, #8
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b06:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004b08:	4b34      	ldr	r3, [pc, #208]	; (8004bdc <dmp_read_fifo+0x2d4>)
 8004b0a:	895b      	ldrh	r3, [r3, #10]
 8004b0c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d04c      	beq.n	8004bae <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004b14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b18:	3348      	adds	r3, #72	; 0x48
 8004b1a:	443b      	add	r3, r7
 8004b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	b21a      	sxth	r2, r3
 8004b24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b28:	3301      	adds	r3, #1
 8004b2a:	3348      	adds	r3, #72	; 0x48
 8004b2c:	443b      	add	r3, r7
 8004b2e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b32:	b21b      	sxth	r3, r3
 8004b34:	4313      	orrs	r3, r2
 8004b36:	b21a      	sxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b40:	3302      	adds	r3, #2
 8004b42:	3348      	adds	r3, #72	; 0x48
 8004b44:	443b      	add	r3, r7
 8004b46:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	b219      	sxth	r1, r3
 8004b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b52:	3303      	adds	r3, #3
 8004b54:	3348      	adds	r3, #72	; 0x48
 8004b56:	443b      	add	r3, r7
 8004b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3302      	adds	r3, #2
 8004b62:	430a      	orrs	r2, r1
 8004b64:	b212      	sxth	r2, r2
 8004b66:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	3348      	adds	r3, #72	; 0x48
 8004b70:	443b      	add	r3, r7
 8004b72:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	b219      	sxth	r1, r3
 8004b7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b7e:	3305      	adds	r3, #5
 8004b80:	3348      	adds	r3, #72	; 0x48
 8004b82:	443b      	add	r3, r7
 8004b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b88:	b21a      	sxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	b212      	sxth	r2, r2
 8004b92:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b98:	3306      	adds	r3, #6
 8004b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004ba8:	b21a      	sxth	r2, r3
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <dmp_read_fifo+0x2d4>)
 8004bb0:	895b      	ldrh	r3, [r3, #10]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8004bba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bbe:	f107 0220 	add.w	r2, r7, #32
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fe5b 	bl	8004880 <decode_gesture>

    myget_ms(timestamp);
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	f7fe ff16 	bl	80039fc <myget_ms>
    return 0;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3748      	adds	r7, #72	; 0x48
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	200002c0 	.word	0x200002c0

08004be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	60da      	str	r2, [r3, #12]
 8004bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a31      	ldr	r2, [pc, #196]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	6313      	str	r3, [r2, #48]	; 0x30
 8004c22:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	4a23      	ldr	r2, [pc, #140]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c38:	f043 0308 	orr.w	r3, r3, #8
 8004c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3e:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <MX_GPIO_Init+0xe4>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8004c66:	2200      	movs	r2, #0
 8004c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c6c:	4816      	ldr	r0, [pc, #88]	; (8004cc8 <MX_GPIO_Init+0xe8>)
 8004c6e:	f000 ff71 	bl	8005b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c80:	2300      	movs	r3, #0
 8004c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c84:	f107 0314 	add.w	r3, r7, #20
 8004c88:	4619      	mov	r1, r3
 8004c8a:	480f      	ldr	r0, [pc, #60]	; (8004cc8 <MX_GPIO_Init+0xe8>)
 8004c8c:	f000 fdde 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004c90:	2320      	movs	r3, #32
 8004c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9e:	f107 0314 	add.w	r3, r7, #20
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4809      	ldr	r0, [pc, #36]	; (8004ccc <MX_GPIO_Init+0xec>)
 8004ca6:	f000 fdd1 	bl	800584c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	2017      	movs	r0, #23
 8004cb0:	f000 fd95 	bl	80057de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004cb4:	2017      	movs	r0, #23
 8004cb6:	f000 fdae 	bl	8005816 <HAL_NVIC_EnableIRQ>

}
 8004cba:	bf00      	nop
 8004cbc:	3728      	adds	r7, #40	; 0x28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40020c00 	.word	0x40020c00
 8004ccc:	40020400 	.word	0x40020400

08004cd0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004cd4:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <MX_I2C1_Init+0x54>)
 8004cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004cdc:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <MX_I2C1_Init+0x58>)
 8004cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d0c:	4804      	ldr	r0, [pc, #16]	; (8004d20 <MX_I2C1_Init+0x50>)
 8004d0e:	f000 ff53 	bl	8005bb8 <HAL_I2C_Init>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004d18:	f000 f9e0 	bl	80050dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200002d0 	.word	0x200002d0
 8004d24:	40005400 	.word	0x40005400
 8004d28:	00061a80 	.word	0x00061a80

08004d2c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d32:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <MX_I2C2_Init+0x54>)
 8004d34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d38:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <MX_I2C2_Init+0x58>)
 8004d3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004d42:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004d68:	4804      	ldr	r0, [pc, #16]	; (8004d7c <MX_I2C2_Init+0x50>)
 8004d6a:	f000 ff25 	bl	8005bb8 <HAL_I2C_Init>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004d74:	f000 f9b2 	bl	80050dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004d78:	bf00      	nop
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000324 	.word	0x20000324
 8004d80:	40005800 	.word	0x40005800
 8004d84:	000186a0 	.word	0x000186a0

08004d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08c      	sub	sp, #48	; 0x30
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3a      	ldr	r2, [pc, #232]	; (8004e90 <HAL_I2C_MspInit+0x108>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d12c      	bne.n	8004e04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	4a38      	ldr	r2, [pc, #224]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004db4:	f043 0302 	orr.w	r3, r3, #2
 8004db8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004dc6:	23c0      	movs	r3, #192	; 0xc0
 8004dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dca:	2312      	movs	r3, #18
 8004dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dda:	f107 031c 	add.w	r3, r7, #28
 8004dde:	4619      	mov	r1, r3
 8004de0:	482d      	ldr	r0, [pc, #180]	; (8004e98 <HAL_I2C_MspInit+0x110>)
 8004de2:	f000 fd33 	bl	800584c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004df4:	6413      	str	r3, [r2, #64]	; 0x40
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004e02:	e041      	b.n	8004e88 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <HAL_I2C_MspInit+0x114>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d13c      	bne.n	8004e88 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004e18:	f043 0302 	orr.w	r3, r3, #2
 8004e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e30:	2312      	movs	r3, #18
 8004e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e40:	f107 031c 	add.w	r3, r7, #28
 8004e44:	4619      	mov	r1, r3
 8004e46:	4814      	ldr	r0, [pc, #80]	; (8004e98 <HAL_I2C_MspInit+0x110>)
 8004e48:	f000 fd00 	bl	800584c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e50:	2312      	movs	r3, #18
 8004e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004e5c:	2309      	movs	r3, #9
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e60:	f107 031c 	add.w	r3, r7, #28
 8004e64:	4619      	mov	r1, r3
 8004e66:	480c      	ldr	r0, [pc, #48]	; (8004e98 <HAL_I2C_MspInit+0x110>)
 8004e68:	f000 fcf0 	bl	800584c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_I2C_MspInit+0x10c>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40005400 	.word	0x40005400
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40020400 	.word	0x40020400
 8004e9c:	40005800 	.word	0x40005800

08004ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b095      	sub	sp, #84	; 0x54
 8004ea4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ea6:	f000 fb29 	bl	80054fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004eaa:	f000 f863 	bl	8004f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004eae:	f7ff fe97 	bl	8004be0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004eb2:	f7ff ff0d 	bl	8004cd0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004eb6:	f000 fa85 	bl	80053c4 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8004eba:	f000 fa37 	bl	800532c <MX_TIM11_Init>
  MX_I2C2_Init();
 8004ebe:	f7ff ff35 	bl	8004d2c <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  IIC_Init(hi2c1);
 8004ec2:	4c22      	ldr	r4, [pc, #136]	; (8004f4c <main+0xac>)
 8004ec4:	4668      	mov	r0, sp
 8004ec6:	f104 0310 	add.w	r3, r4, #16
 8004eca:	2244      	movs	r2, #68	; 0x44
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f004 f821 	bl	8008f14 <memcpy>
 8004ed2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ed6:	f7fc f891 	bl	8000ffc <IIC_Init>
  MPU6050_initialize();
 8004eda:	f7fc fb2d 	bl	8001538 <MPU6050_initialize>
  printf("\n\rMPU6050 has been initialized....\n\r");
 8004ede:	481c      	ldr	r0, [pc, #112]	; (8004f50 <main+0xb0>)
 8004ee0:	f004 fc98 	bl	8009814 <iprintf>
  MPU6050_DMPInit();
 8004ee4:	f7fc fb3e 	bl	8001564 <MPU6050_DMPInit>
  MPU6050_setYawCorrectorRate(-0.00415);
 8004ee8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8004f54 <main+0xb4>
 8004eec:	f7fc fd68 	bl	80019c0 <MPU6050_setYawCorrectorRate>

  HAL_TIM_Base_Start_IT(&htim11);
 8004ef0:	4819      	ldr	r0, [pc, #100]	; (8004f58 <main+0xb8>)
 8004ef2:	f002 fb2f 	bl	8007554 <HAL_TIM_Base_Start_IT>
  long last_tick = HAL_GetTick();
 8004ef6:	f000 fb67 	bl	80055c8 <HAL_GetTick>
 8004efa:	4603      	mov	r3, r0
 8004efc:	607b      	str	r3, [r7, #4]
//	  i2cRead(0x68,0x75,1, &data);
//	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x75, 1, &data, 1, 1000);

//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//	  MPU6050_readDMP();
	  MPU6050_readDMPAll(&pitch, &roll, &yaw);
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <main+0xbc>)
 8004f00:	4917      	ldr	r1, [pc, #92]	; (8004f60 <main+0xc0>)
 8004f02:	4818      	ldr	r0, [pc, #96]	; (8004f64 <main+0xc4>)
 8004f04:	f7fc fb78 	bl	80015f8 <MPU6050_readDMPAll>
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);

//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	  if(HAL_GetTick()- last_tick > 1000)
 8004f08:	f000 fb5e 	bl	80055c8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f16:	d9f2      	bls.n	8004efe <main+0x5e>
	  {
		  last_tick = HAL_GetTick();
 8004f18:	f000 fb56 	bl	80055c8 <HAL_GetTick>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	607b      	str	r3, [r7, #4]
//		  printf("pry: %.2f %.2f %.2f \n\r", pitch, roll, yaw);
//		  printf("%d, %.2f, %li\n\r", seconds, Yaw, time_process);
		  MPU6050_getDriftingRate(pitch, roll, yaw, &pr, &rr, &yr);
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <main+0xc4>)
 8004f22:	edd3 7a00 	vldr	s15, [r3]
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <main+0xc0>)
 8004f28:	ed93 7a00 	vldr	s14, [r3]
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <main+0xbc>)
 8004f2e:	edd3 6a00 	vldr	s13, [r3]
 8004f32:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <main+0xc8>)
 8004f34:	490d      	ldr	r1, [pc, #52]	; (8004f6c <main+0xcc>)
 8004f36:	480e      	ldr	r0, [pc, #56]	; (8004f70 <main+0xd0>)
 8004f38:	eeb0 1a66 	vmov.f32	s2, s13
 8004f3c:	eef0 0a47 	vmov.f32	s1, s14
 8004f40:	eeb0 0a67 	vmov.f32	s0, s15
 8004f44:	f7fc fd80 	bl	8001a48 <MPU6050_getDriftingRate>
	  MPU6050_readDMPAll(&pitch, &roll, &yaw);
 8004f48:	e7d9      	b.n	8004efe <main+0x5e>
 8004f4a:	bf00      	nop
 8004f4c:	200002d0 	.word	0x200002d0
 8004f50:	0800b9fc 	.word	0x0800b9fc
 8004f54:	bb87fcb9 	.word	0xbb87fcb9
 8004f58:	20000398 	.word	0x20000398
 8004f5c:	20000390 	.word	0x20000390
 8004f60:	2000038c 	.word	0x2000038c
 8004f64:	20000388 	.word	0x20000388
 8004f68:	20000384 	.word	0x20000384
 8004f6c:	20000380 	.word	0x20000380
 8004f70:	2000037c 	.word	0x2000037c

08004f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b094      	sub	sp, #80	; 0x50
 8004f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f7a:	f107 0320 	add.w	r3, r7, #32
 8004f7e:	2230      	movs	r2, #48	; 0x30
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 ffd4 	bl	8008f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f88:	f107 030c 	add.w	r3, r7, #12
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	4b28      	ldr	r3, [pc, #160]	; (8005040 <SystemClock_Config+0xcc>)
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	4a27      	ldr	r2, [pc, #156]	; (8005040 <SystemClock_Config+0xcc>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <SystemClock_Config+0xcc>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	4b22      	ldr	r3, [pc, #136]	; (8005044 <SystemClock_Config+0xd0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a21      	ldr	r2, [pc, #132]	; (8005044 <SystemClock_Config+0xd0>)
 8004fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <SystemClock_Config+0xd0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004fe8:	2364      	movs	r3, #100	; 0x64
 8004fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fec:	2302      	movs	r3, #2
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ff4:	f107 0320 	add.w	r3, r7, #32
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 fd9d 	bl	8006b38 <HAL_RCC_OscConfig>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005004:	f000 f86a 	bl	80050dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005008:	230f      	movs	r3, #15
 800500a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800500c:	2302      	movs	r3, #2
 800500e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800501e:	f107 030c 	add.w	r3, r7, #12
 8005022:	2103      	movs	r1, #3
 8005024:	4618      	mov	r0, r3
 8005026:	f001 ffff 	bl	8007028 <HAL_RCC_ClockConfig>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005030:	f000 f854 	bl	80050dc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005034:	f002 f8de 	bl	80071f4 <HAL_RCC_EnableCSS>
}
 8005038:	bf00      	nop
 800503a:	3750      	adds	r7, #80	; 0x50
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	40007000 	.word	0x40007000

08005048 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
//	for (DataIdx = 0; DataIdx < len; DataIdx++)
//	{
//		ITM_SendChar(*ptr++);
//	}

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	b29a      	uxth	r2, r3
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4804      	ldr	r0, [pc, #16]	; (8005070 <_write+0x28>)
 8005060:	f002 fceb 	bl	8007a3a <HAL_UART_Transmit>
	return len;
 8005064:	687b      	ldr	r3, [r7, #4]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200003e0 	.word	0x200003e0

08005074 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5)
	{
//		check++;
	}
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d115      	bne.n	80050c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		cnt11++;
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80050a4:	6013      	str	r3, [r2, #0]

		if(cnt11%1000 == 0)
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80050ac:	fb83 1302 	smull	r1, r3, r3, r2
 80050b0:	1199      	asrs	r1, r3, #6
 80050b2:	17d3      	asrs	r3, r2, #31
 80050b4:	1acb      	subs	r3, r1, r3
 80050b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
//			MPU6050_getDriftingRate(&pr, &rr, &yr);
			MPU6050_updateAngleCorrector();
 80050c4:	f7fc fc8c 	bl	80019e0 <MPU6050_updateAngleCorrector>
		}
	}
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000398 	.word	0x20000398
 80050d4:	20000378 	.word	0x20000378
 80050d8:	10624dd3 	.word	0x10624dd3

080050dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050e0:	b672      	cpsid	i
}
 80050e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050e4:	e7fe      	b.n	80050e4 <Error_Handler+0x8>
	...

080050e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <HAL_MspInit+0x4c>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	4a0f      	ldr	r2, [pc, #60]	; (8005134 <HAL_MspInit+0x4c>)
 80050f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050fc:	6453      	str	r3, [r2, #68]	; 0x44
 80050fe:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <HAL_MspInit+0x4c>)
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_MspInit+0x4c>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a08      	ldr	r2, [pc, #32]	; (8005134 <HAL_MspInit+0x4c>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_MspInit+0x4c>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800

08005138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800513c:	f002 f9a0 	bl	8007480 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005140:	e7fe      	b.n	8005140 <NMI_Handler+0x8>

08005142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005146:	e7fe      	b.n	8005146 <HardFault_Handler+0x4>

08005148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800514c:	e7fe      	b.n	800514c <MemManage_Handler+0x4>

0800514e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800514e:	b480      	push	{r7}
 8005150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005152:	e7fe      	b.n	8005152 <BusFault_Handler+0x4>

08005154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005158:	e7fe      	b.n	8005158 <UsageFault_Handler+0x4>

0800515a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800516c:	bf00      	nop
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005188:	f000 fa0a 	bl	80055a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800518c:	bf00      	nop
 800518e:	bd80      	pop	{r7, pc}

08005190 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005194:	2020      	movs	r0, #32
 8005196:	f000 fcf7 	bl	8005b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80051a4:	4802      	ldr	r0, [pc, #8]	; (80051b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80051a6:	f002 fa37 	bl	8007618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000398 	.word	0x20000398

080051b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
	return 1;
 80051b8:	2301      	movs	r3, #1
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_kill>:

int _kill(int pid, int sig)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051ce:	f003 fe67 	bl	8008ea0 <__errno>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2216      	movs	r2, #22
 80051d6:	601a      	str	r2, [r3, #0]
	return -1;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_exit>:

void _exit (int status)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051ec:	f04f 31ff 	mov.w	r1, #4294967295
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ffe7 	bl	80051c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051f6:	e7fe      	b.n	80051f6 <_exit+0x12>

080051f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e00a      	b.n	8005220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800520a:	f3af 8000 	nop.w
 800520e:	4601      	mov	r1, r0
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	60ba      	str	r2, [r7, #8]
 8005216:	b2ca      	uxtb	r2, r1
 8005218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3301      	adds	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	dbf0      	blt.n	800520a <_read+0x12>
	}

return len;
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
	return -1;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800525a:	605a      	str	r2, [r3, #4]
	return 0;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <_isatty>:

int _isatty(int file)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
	return 1;
 8005272:	2301      	movs	r3, #1
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	return 0;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <_sbrk+0x5c>)
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <_sbrk+0x60>)
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052b0:	4b13      	ldr	r3, [pc, #76]	; (8005300 <_sbrk+0x64>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <_sbrk+0x64>)
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <_sbrk+0x68>)
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052cc:	f003 fde8 	bl	8008ea0 <__errno>
 80052d0:	4603      	mov	r3, r0
 80052d2:	220c      	movs	r2, #12
 80052d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	e009      	b.n	80052f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <_sbrk+0x64>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <_sbrk+0x64>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	4a05      	ldr	r2, [pc, #20]	; (8005300 <_sbrk+0x64>)
 80052ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20020000 	.word	0x20020000
 80052fc:	00000400 	.word	0x00000400
 8005300:	20000394 	.word	0x20000394
 8005304:	20000438 	.word	0x20000438

08005308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <SystemInit+0x20>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <SystemInit+0x20>)
 8005314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <MX_TIM11_Init+0x40>)
 8005332:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <MX_TIM11_Init+0x44>)
 8005334:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <MX_TIM11_Init+0x40>)
 8005338:	2263      	movs	r2, #99	; 0x63
 800533a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <MX_TIM11_Init+0x40>)
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <MX_TIM11_Init+0x40>)
 8005344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005348:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <MX_TIM11_Init+0x40>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <MX_TIM11_Init+0x40>)
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005356:	4805      	ldr	r0, [pc, #20]	; (800536c <MX_TIM11_Init+0x40>)
 8005358:	f002 f8ad 	bl	80074b6 <HAL_TIM_Base_Init>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005362:	f7ff febb 	bl	80050dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000398 	.word	0x20000398
 8005370:	40014800 	.word	0x40014800

08005374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d115      	bne.n	80053b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_TIM_Base_MspInit+0x4c>)
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005394:	6453      	str	r3, [r2, #68]	; 0x44
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	201a      	movs	r0, #26
 80053a8:	f000 fa19 	bl	80057de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80053ac:	201a      	movs	r0, #26
 80053ae:	f000 fa32 	bl	8005816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40014800 	.word	0x40014800
 80053c0:	40023800 	.word	0x40023800

080053c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <MX_USART1_UART_Init+0x50>)
 80053cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80053d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053ea:	220c      	movs	r2, #12
 80053ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053fc:	f002 fad0 	bl	80079a0 <HAL_UART_Init>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005406:	f7ff fe69 	bl	80050dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200003e0 	.word	0x200003e0
 8005414:	40011000 	.word	0x40011000

08005418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <HAL_UART_MspInit+0x84>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d12c      	bne.n	8005494 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005444:	f043 0310 	orr.w	r3, r3, #16
 8005448:	6453      	str	r3, [r2, #68]	; 0x44
 800544a:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <HAL_UART_MspInit+0x88>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <HAL_UART_MspInit+0x88>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8005472:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8005476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005480:	2303      	movs	r3, #3
 8005482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005484:	2307      	movs	r3, #7
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	4805      	ldr	r0, [pc, #20]	; (80054a4 <HAL_UART_MspInit+0x8c>)
 8005490:	f000 f9dc 	bl	800584c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005494:	bf00      	nop
 8005496:	3728      	adds	r7, #40	; 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40011000 	.word	0x40011000
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40020000 	.word	0x40020000

080054a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054ac:	480d      	ldr	r0, [pc, #52]	; (80054e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054ae:	490e      	ldr	r1, [pc, #56]	; (80054e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054b4:	e002      	b.n	80054bc <LoopCopyDataInit>

080054b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054ba:	3304      	adds	r3, #4

080054bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054c0:	d3f9      	bcc.n	80054b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054c2:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054c4:	4c0b      	ldr	r4, [pc, #44]	; (80054f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80054c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054c8:	e001      	b.n	80054ce <LoopFillZerobss>

080054ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054cc:	3204      	adds	r2, #4

080054ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054d0:	d3fb      	bcc.n	80054ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054d2:	f7ff ff19 	bl	8005308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054d6:	f003 fce9 	bl	8008eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054da:	f7ff fce1 	bl	8004ea0 <main>
  bx  lr    
 80054de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80054e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054e8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80054ec:	0800caf4 	.word	0x0800caf4
  ldr r2, =_sbss
 80054f0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80054f4:	20000438 	.word	0x20000438

080054f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054f8:	e7fe      	b.n	80054f8 <ADC_IRQHandler>
	...

080054fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_Init+0x40>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <HAL_Init+0x40>)
 8005506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800550a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_Init+0x40>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0a      	ldr	r2, [pc, #40]	; (800553c <HAL_Init+0x40>)
 8005512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005518:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_Init+0x40>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a07      	ldr	r2, [pc, #28]	; (800553c <HAL_Init+0x40>)
 800551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005524:	2003      	movs	r0, #3
 8005526:	f000 f94f 	bl	80057c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800552a:	200f      	movs	r0, #15
 800552c:	f000 f808 	bl	8005540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005530:	f7ff fdda 	bl	80050e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023c00 	.word	0x40023c00

08005540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005548:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_InitTick+0x54>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_InitTick+0x58>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005556:	fbb3 f3f1 	udiv	r3, r3, r1
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f967 	bl	8005832 <HAL_SYSTICK_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e00e      	b.n	800558c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b0f      	cmp	r3, #15
 8005572:	d80a      	bhi.n	800558a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005574:	2200      	movs	r2, #0
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	f000 f92f 	bl	80057de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005580:	4a06      	ldr	r2, [pc, #24]	; (800559c <HAL_InitTick+0x5c>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	2000003c 	.word	0x2000003c
 8005598:	20000044 	.word	0x20000044
 800559c:	20000040 	.word	0x20000040

080055a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_IncTick+0x20>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <HAL_IncTick+0x24>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4413      	add	r3, r2
 80055b0:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <HAL_IncTick+0x24>)
 80055b2:	6013      	str	r3, [r2, #0]
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000044 	.word	0x20000044
 80055c4:	20000424 	.word	0x20000424

080055c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return uwTick;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_GetTick+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000424 	.word	0x20000424

080055e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055e8:	f7ff ffee 	bl	80055c8 <HAL_GetTick>
 80055ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d005      	beq.n	8005606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <HAL_Delay+0x44>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005606:	bf00      	nop
 8005608:	f7ff ffde 	bl	80055c8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	429a      	cmp	r2, r3
 8005616:	d8f7      	bhi.n	8005608 <HAL_Delay+0x28>
  {
  }
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000044 	.word	0x20000044

08005628 <__NVIC_SetPriorityGrouping>:
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60d3      	str	r3, [r2, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_GetPriorityGrouping>:
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <__NVIC_GetPriorityGrouping+0x18>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 0307 	and.w	r3, r3, #7
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_EnableIRQ>:
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db0b      	blt.n	80056b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <__NVIC_EnableIRQ+0x38>)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2001      	movs	r0, #1
 80056ae:	fa00 f202 	lsl.w	r2, r0, r2
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e100 	.word	0xe000e100

080056c8 <__NVIC_SetPriority>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db0a      	blt.n	80056f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <__NVIC_SetPriority+0x4c>)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	0112      	lsls	r2, r2, #4
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	440b      	add	r3, r1
 80056ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056f0:	e00a      	b.n	8005708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4908      	ldr	r1, [pc, #32]	; (8005718 <__NVIC_SetPriority+0x50>)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	3b04      	subs	r3, #4
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	440b      	add	r3, r1
 8005706:	761a      	strb	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000e100 	.word	0xe000e100
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <NVIC_EncodePriority>:
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f1c3 0307 	rsb	r3, r3, #7
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf28      	it	cs
 800573a:	2304      	movcs	r3, #4
 800573c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3304      	adds	r3, #4
 8005742:	2b06      	cmp	r3, #6
 8005744:	d902      	bls.n	800574c <NVIC_EncodePriority+0x30>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3b03      	subs	r3, #3
 800574a:	e000      	b.n	800574e <NVIC_EncodePriority+0x32>
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	f04f 32ff 	mov.w	r2, #4294967295
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	401a      	ands	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005764:	f04f 31ff 	mov.w	r1, #4294967295
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43d9      	mvns	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	4313      	orrs	r3, r2
}
 8005776:	4618      	mov	r0, r3
 8005778:	3724      	adds	r7, #36	; 0x24
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005794:	d301      	bcc.n	800579a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005796:	2301      	movs	r3, #1
 8005798:	e00f      	b.n	80057ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <SysTick_Config+0x40>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057a2:	210f      	movs	r1, #15
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	f7ff ff8e 	bl	80056c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <SysTick_Config+0x40>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <SysTick_Config+0x40>)
 80057b4:	2207      	movs	r2, #7
 80057b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000e010 	.word	0xe000e010

080057c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff29 	bl	8005628 <__NVIC_SetPriorityGrouping>
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	4603      	mov	r3, r0
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057f0:	f7ff ff3e 	bl	8005670 <__NVIC_GetPriorityGrouping>
 80057f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	6978      	ldr	r0, [r7, #20]
 80057fc:	f7ff ff8e 	bl	800571c <NVIC_EncodePriority>
 8005800:	4602      	mov	r2, r0
 8005802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff5d 	bl	80056c8 <__NVIC_SetPriority>
}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	4603      	mov	r3, r0
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff31 	bl	800568c <__NVIC_EnableIRQ>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ffa2 	bl	8005784 <SysTick_Config>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800584c:	b480      	push	{r7}
 800584e:	b089      	sub	sp, #36	; 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e159      	b.n	8005b1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005868:	2201      	movs	r2, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	f040 8148 	bne.w	8005b16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d005      	beq.n	800589e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800589a:	2b02      	cmp	r3, #2
 800589c:	d130      	bne.n	8005900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	2203      	movs	r2, #3
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058d4:	2201      	movs	r2, #1
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 0201 	and.w	r2, r3, #1
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b03      	cmp	r3, #3
 800590a:	d017      	beq.n	800593c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d123      	bne.n	8005990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	08da      	lsrs	r2, r3, #3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3208      	adds	r2, #8
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	220f      	movs	r2, #15
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4013      	ands	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	08da      	lsrs	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3208      	adds	r2, #8
 800598a:	69b9      	ldr	r1, [r7, #24]
 800598c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	2203      	movs	r2, #3
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0203 	and.w	r2, r3, #3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80a2 	beq.w	8005b16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	4a56      	ldr	r2, [pc, #344]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 80059dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e0:	6453      	str	r3, [r2, #68]	; 0x44
 80059e2:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ee:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	3302      	adds	r3, #2
 80059f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	220f      	movs	r2, #15
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a49      	ldr	r2, [pc, #292]	; (8005b3c <HAL_GPIO_Init+0x2f0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d019      	beq.n	8005a4e <HAL_GPIO_Init+0x202>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a48      	ldr	r2, [pc, #288]	; (8005b40 <HAL_GPIO_Init+0x2f4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_GPIO_Init+0x1fe>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a47      	ldr	r2, [pc, #284]	; (8005b44 <HAL_GPIO_Init+0x2f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00d      	beq.n	8005a46 <HAL_GPIO_Init+0x1fa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a46      	ldr	r2, [pc, #280]	; (8005b48 <HAL_GPIO_Init+0x2fc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <HAL_GPIO_Init+0x1f6>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a45      	ldr	r2, [pc, #276]	; (8005b4c <HAL_GPIO_Init+0x300>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_GPIO_Init+0x1f2>
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e008      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	e006      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a42:	2303      	movs	r3, #3
 8005a44:	e004      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e002      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	f002 0203 	and.w	r2, r2, #3
 8005a56:	0092      	lsls	r2, r2, #2
 8005a58:	4093      	lsls	r3, r2
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a60:	4935      	ldr	r1, [pc, #212]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	3302      	adds	r3, #2
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a6e:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a92:	4a2f      	ldr	r2, [pc, #188]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005abc:	4a24      	ldr	r2, [pc, #144]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ae6:	4a1a      	ldr	r2, [pc, #104]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aec:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b10:	4a0f      	ldr	r2, [pc, #60]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b0f      	cmp	r3, #15
 8005b20:	f67f aea2 	bls.w	8005868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	3724      	adds	r7, #36	; 0x24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40013800 	.word	0x40013800
 8005b3c:	40020000 	.word	0x40020000
 8005b40:	40020400 	.word	0x40020400
 8005b44:	40020800 	.word	0x40020800
 8005b48:	40020c00 	.word	0x40020c00
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40013c00 	.word	0x40013c00

08005b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	807b      	strh	r3, [r7, #2]
 8005b60:	4613      	mov	r3, r2
 8005b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b64:	787b      	ldrb	r3, [r7, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b6a:	887a      	ldrh	r2, [r7, #2]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b70:	e003      	b.n	8005b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b72:	887b      	ldrh	r3, [r7, #2]
 8005b74:	041a      	lsls	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	619a      	str	r2, [r3, #24]
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b9e:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fa64 	bl	8005074 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40013c00 	.word	0x40013c00

08005bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e12b      	b.n	8005e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff f8d2 	bl	8004d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2224      	movs	r2, #36	; 0x24
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f001 fc08 	bl	8007430 <HAL_RCC_GetPCLK1Freq>
 8005c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a81      	ldr	r2, [pc, #516]	; (8005e2c <HAL_I2C_Init+0x274>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d807      	bhi.n	8005c3c <HAL_I2C_Init+0x84>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a80      	ldr	r2, [pc, #512]	; (8005e30 <HAL_I2C_Init+0x278>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	bf94      	ite	ls
 8005c34:	2301      	movls	r3, #1
 8005c36:	2300      	movhi	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e006      	b.n	8005c4a <HAL_I2C_Init+0x92>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a7d      	ldr	r2, [pc, #500]	; (8005e34 <HAL_I2C_Init+0x27c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	bf94      	ite	ls
 8005c44:	2301      	movls	r3, #1
 8005c46:	2300      	movhi	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0e7      	b.n	8005e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a78      	ldr	r2, [pc, #480]	; (8005e38 <HAL_I2C_Init+0x280>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	0c9b      	lsrs	r3, r3, #18
 8005c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4a6a      	ldr	r2, [pc, #424]	; (8005e2c <HAL_I2C_Init+0x274>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d802      	bhi.n	8005c8c <HAL_I2C_Init+0xd4>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	e009      	b.n	8005ca0 <HAL_I2C_Init+0xe8>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	4a69      	ldr	r2, [pc, #420]	; (8005e3c <HAL_I2C_Init+0x284>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	495c      	ldr	r1, [pc, #368]	; (8005e2c <HAL_I2C_Init+0x274>)
 8005cbc:	428b      	cmp	r3, r1
 8005cbe:	d819      	bhi.n	8005cf4 <HAL_I2C_Init+0x13c>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1e59      	subs	r1, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cd4:	400b      	ands	r3, r1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_I2C_Init+0x138>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1e59      	subs	r1, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cee:	e051      	b.n	8005d94 <HAL_I2C_Init+0x1dc>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	e04f      	b.n	8005d94 <HAL_I2C_Init+0x1dc>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d111      	bne.n	8005d20 <HAL_I2C_Init+0x168>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1e58      	subs	r0, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	440b      	add	r3, r1
 8005d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	e012      	b.n	8005d46 <HAL_I2C_Init+0x18e>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1e58      	subs	r0, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	0099      	lsls	r1, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d36:	3301      	adds	r3, #1
 8005d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_I2C_Init+0x196>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e022      	b.n	8005d94 <HAL_I2C_Init+0x1dc>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10e      	bne.n	8005d74 <HAL_I2C_Init+0x1bc>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1e58      	subs	r0, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6859      	ldr	r1, [r3, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	440b      	add	r3, r1
 8005d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d72:	e00f      	b.n	8005d94 <HAL_I2C_Init+0x1dc>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1e58      	subs	r0, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	0099      	lsls	r1, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	6809      	ldr	r1, [r1, #0]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6911      	ldr	r1, [r2, #16]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68d2      	ldr	r2, [r2, #12]
 8005dce:	4311      	orrs	r1, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	000186a0 	.word	0x000186a0
 8005e30:	001e847f 	.word	0x001e847f
 8005e34:	003d08ff 	.word	0x003d08ff
 8005e38:	431bde83 	.word	0x431bde83
 8005e3c:	10624dd3 	.word	0x10624dd3

08005e40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	817b      	strh	r3, [r7, #10]
 8005e52:	460b      	mov	r3, r1
 8005e54:	813b      	strh	r3, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e5a:	f7ff fbb5 	bl	80055c8 <HAL_GetTick>
 8005e5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	f040 80d9 	bne.w	8006020 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	2319      	movs	r3, #25
 8005e74:	2201      	movs	r2, #1
 8005e76:	496d      	ldr	r1, [pc, #436]	; (800602c <HAL_I2C_Mem_Write+0x1ec>)
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fc7f 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e84:	2302      	movs	r3, #2
 8005e86:	e0cc      	b.n	8006022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_I2C_Mem_Write+0x56>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0c5      	b.n	8006022 <HAL_I2C_Mem_Write+0x1e2>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d007      	beq.n	8005ebc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2221      	movs	r2, #33	; 0x21
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2240      	movs	r2, #64	; 0x40
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a3a      	ldr	r2, [r7, #32]
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a4d      	ldr	r2, [pc, #308]	; (8006030 <HAL_I2C_Mem_Write+0x1f0>)
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005efe:	88f8      	ldrh	r0, [r7, #6]
 8005f00:	893a      	ldrh	r2, [r7, #8]
 8005f02:	8979      	ldrh	r1, [r7, #10]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fab6 	bl	8006480 <I2C_RequestMemoryWrite>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d052      	beq.n	8005fc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e081      	b.n	8006022 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fd00 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d107      	bne.n	8005f46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e06b      	b.n	8006022 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11b      	bne.n	8005fc0 <HAL_I2C_Mem_Write+0x180>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1aa      	bne.n	8005f1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fcec 	bl	80069aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00d      	beq.n	8005ff4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d107      	bne.n	8005ff0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e016      	b.n	8006022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	00100002 	.word	0x00100002
 8006030:	ffff0000 	.word	0xffff0000

08006034 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	; 0x30
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	461a      	mov	r2, r3
 8006042:	4603      	mov	r3, r0
 8006044:	817b      	strh	r3, [r7, #10]
 8006046:	460b      	mov	r3, r1
 8006048:	813b      	strh	r3, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800604e:	f7ff fabb 	bl	80055c8 <HAL_GetTick>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b20      	cmp	r3, #32
 800605e:	f040 8208 	bne.w	8006472 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	2319      	movs	r3, #25
 8006068:	2201      	movs	r2, #1
 800606a:	497b      	ldr	r1, [pc, #492]	; (8006258 <HAL_I2C_Mem_Read+0x224>)
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fb85 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
 800607a:	e1fb      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_I2C_Mem_Read+0x56>
 8006086:	2302      	movs	r3, #2
 8006088:	e1f4      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d007      	beq.n	80060b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2222      	movs	r2, #34	; 0x22
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2240      	movs	r2, #64	; 0x40
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4a5b      	ldr	r2, [pc, #364]	; (800625c <HAL_I2C_Mem_Read+0x228>)
 80060f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060f2:	88f8      	ldrh	r0, [r7, #6]
 80060f4:	893a      	ldrh	r2, [r7, #8]
 80060f6:	8979      	ldrh	r1, [r7, #10]
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4603      	mov	r3, r0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa52 	bl	80065ac <I2C_RequestMemoryRead>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e1b0      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d113      	bne.n	8006142 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611a:	2300      	movs	r3, #0
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	623b      	str	r3, [r7, #32]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e184      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006146:	2b01      	cmp	r3, #1
 8006148:	d11b      	bne.n	8006182 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e164      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	2b02      	cmp	r3, #2
 8006188:	d11b      	bne.n	80061c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	e144      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061d8:	e138      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061de:	2b03      	cmp	r3, #3
 80061e0:	f200 80f1 	bhi.w	80063c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d123      	bne.n	8006234 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fc1b 	bl	8006a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e139      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006232:	e10b      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006238:	2b02      	cmp	r3, #2
 800623a:	d14e      	bne.n	80062da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	2200      	movs	r2, #0
 8006244:	4906      	ldr	r1, [pc, #24]	; (8006260 <HAL_I2C_Mem_Read+0x22c>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fa98 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e10e      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
 8006256:	bf00      	nop
 8006258:	00100002 	.word	0x00100002
 800625c:	ffff0000 	.word	0xffff0000
 8006260:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d8:	e0b8      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	2200      	movs	r2, #0
 80062e2:	4966      	ldr	r1, [pc, #408]	; (800647c <HAL_I2C_Mem_Read+0x448>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fa49 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0bf      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2200      	movs	r2, #0
 800633e:	494f      	ldr	r1, [pc, #316]	; (800647c <HAL_I2C_Mem_Read+0x448>)
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fa1b 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e091      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c4:	e042      	b.n	800644c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fb2e 	bl	8006a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e04c      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b04      	cmp	r3, #4
 8006418:	d118      	bne.n	800644c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	f47f aec2 	bne.w	80061da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3728      	adds	r7, #40	; 0x28
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	00010004 	.word	0x00010004

08006480 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	4603      	mov	r3, r0
 8006490:	817b      	strh	r3, [r7, #10]
 8006492:	460b      	mov	r3, r1
 8006494:	813b      	strh	r3, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f960 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d0:	d103      	bne.n	80064da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e05f      	b.n	800659e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064de:	897b      	ldrh	r3, [r7, #10]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	492d      	ldr	r1, [pc, #180]	; (80065a8 <I2C_RequestMemoryWrite+0x128>)
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f998 	bl	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e04c      	b.n	800659e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651c:	6a39      	ldr	r1, [r7, #32]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fa02 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	2b04      	cmp	r3, #4
 8006530:	d107      	bne.n	8006542 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e02b      	b.n	800659e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d105      	bne.n	8006558 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800654c:	893b      	ldrh	r3, [r7, #8]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	611a      	str	r2, [r3, #16]
 8006556:	e021      	b.n	800659c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006558:	893b      	ldrh	r3, [r7, #8]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	b29b      	uxth	r3, r3
 800655e:	b2da      	uxtb	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006568:	6a39      	ldr	r1, [r7, #32]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f9dc 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	2b04      	cmp	r3, #4
 800657c:	d107      	bne.n	800658e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e005      	b.n	800659e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006592:	893b      	ldrh	r3, [r7, #8]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	00010002 	.word	0x00010002

080065ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	4608      	mov	r0, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	817b      	strh	r3, [r7, #10]
 80065be:	460b      	mov	r3, r1
 80065c0:	813b      	strh	r3, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f8c2 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660c:	d103      	bne.n	8006616 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006614:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e0aa      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	4952      	ldr	r1, [pc, #328]	; (8006778 <I2C_RequestMemoryRead+0x1cc>)
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f8fa 	bl	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e097      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f964 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b04      	cmp	r3, #4
 800666c:	d107      	bne.n	800667e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e076      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d105      	bne.n	8006694 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006688:	893b      	ldrh	r3, [r7, #8]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	611a      	str	r2, [r3, #16]
 8006692:	e021      	b.n	80066d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006694:	893b      	ldrh	r3, [r7, #8]
 8006696:	0a1b      	lsrs	r3, r3, #8
 8006698:	b29b      	uxth	r3, r3
 800669a:	b2da      	uxtb	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	6a39      	ldr	r1, [r7, #32]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f93e 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d107      	bne.n	80066ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e050      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066ce:	893b      	ldrh	r3, [r7, #8]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	6a39      	ldr	r1, [r7, #32]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f923 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d107      	bne.n	8006700 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e035      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006712:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2200      	movs	r2, #0
 800671c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f82b 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673a:	d103      	bne.n	8006744 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e013      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006748:	897b      	ldrh	r3, [r7, #10]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	4906      	ldr	r1, [pc, #24]	; (8006778 <I2C_RequestMemoryRead+0x1cc>)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f863 	bl	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	00010002 	.word	0x00010002

0800677c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800678c:	e025      	b.n	80067da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d021      	beq.n	80067da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006796:	f7fe ff17 	bl	80055c8 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d116      	bne.n	80067da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f043 0220 	orr.w	r2, r3, #32
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e023      	b.n	8006822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d10d      	bne.n	8006800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	43da      	mvns	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	e00c      	b.n	800681a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	43da      	mvns	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	bf0c      	ite	eq
 8006812:	2301      	moveq	r3, #1
 8006814:	2300      	movne	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	429a      	cmp	r2, r3
 800681e:	d0b6      	beq.n	800678e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006838:	e051      	b.n	80068de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d123      	bne.n	8006892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e046      	b.n	8006920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d021      	beq.n	80068de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fe fe95 	bl	80055c8 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d116      	bne.n	80068de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e020      	b.n	8006920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	0c1b      	lsrs	r3, r3, #16
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10c      	bne.n	8006902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	43da      	mvns	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	e00b      	b.n	800691a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	43da      	mvns	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4013      	ands	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	bf14      	ite	ne
 8006914:	2301      	movne	r3, #1
 8006916:	2300      	moveq	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d18d      	bne.n	800683a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006934:	e02d      	b.n	8006992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f8ce 	bl	8006ad8 <I2C_IsAcknowledgeFailed>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e02d      	b.n	80069a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d021      	beq.n	8006992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694e:	f7fe fe3b 	bl	80055c8 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d116      	bne.n	8006992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0220 	orr.w	r2, r3, #32
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e007      	b.n	80069a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699c:	2b80      	cmp	r3, #128	; 0x80
 800699e:	d1ca      	bne.n	8006936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069b6:	e02d      	b.n	8006a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f88d 	bl	8006ad8 <I2C_IsAcknowledgeFailed>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e02d      	b.n	8006a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d021      	beq.n	8006a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d0:	f7fe fdfa 	bl	80055c8 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d302      	bcc.n	80069e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d116      	bne.n	8006a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e007      	b.n	8006a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d1ca      	bne.n	80069b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a38:	e042      	b.n	8006ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d119      	bne.n	8006a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0210 	mvn.w	r2, #16
 8006a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e029      	b.n	8006ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7c:	f7fe fda4 	bl	80055c8 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d302      	bcc.n	8006a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d116      	bne.n	8006ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	f043 0220 	orr.w	r2, r3, #32
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e007      	b.n	8006ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d1b5      	bne.n	8006a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aee:	d11b      	bne.n	8006b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	f043 0204 	orr.w	r2, r3, #4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e267      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d075      	beq.n	8006c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b56:	4b88      	ldr	r3, [pc, #544]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 030c 	and.w	r3, r3, #12
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d00c      	beq.n	8006b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b62:	4b85      	ldr	r3, [pc, #532]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d112      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b6e:	4b82      	ldr	r3, [pc, #520]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b7a:	d10b      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7c:	4b7e      	ldr	r3, [pc, #504]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d05b      	beq.n	8006c40 <HAL_RCC_OscConfig+0x108>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d157      	bne.n	8006c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e242      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9c:	d106      	bne.n	8006bac <HAL_RCC_OscConfig+0x74>
 8006b9e:	4b76      	ldr	r3, [pc, #472]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a75      	ldr	r2, [pc, #468]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e01d      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x98>
 8006bb6:	4b70      	ldr	r3, [pc, #448]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6f      	ldr	r2, [pc, #444]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b6d      	ldr	r3, [pc, #436]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6c      	ldr	r2, [pc, #432]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e00b      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bd0:	4b69      	ldr	r3, [pc, #420]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a68      	ldr	r2, [pc, #416]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4b66      	ldr	r3, [pc, #408]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a65      	ldr	r2, [pc, #404]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d013      	beq.n	8006c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fe fcea 	bl	80055c8 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7fe fce6 	bl	80055c8 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	; 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e207      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0a:	4b5b      	ldr	r3, [pc, #364]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xc0>
 8006c16:	e014      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fe fcd6 	bl	80055c8 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fe fcd2 	bl	80055c8 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	; 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1f3      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c32:	4b51      	ldr	r3, [pc, #324]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0xe8>
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d063      	beq.n	8006d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c4e:	4b4a      	ldr	r3, [pc, #296]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5a:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d11c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c66:	4b44      	ldr	r3, [pc, #272]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d116      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c72:	4b41      	ldr	r3, [pc, #260]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1c7      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4b3b      	ldr	r3, [pc, #236]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4937      	ldr	r1, [pc, #220]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9e:	e03a      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d020      	beq.n	8006cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fe fc8b 	bl	80055c8 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb6:	f7fe fc87 	bl	80055c8 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e1a8      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b28      	ldr	r3, [pc, #160]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4925      	ldr	r1, [pc, #148]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	e015      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cea:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fe fc6a 	bl	80055c8 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fe fc66 	bl	80055c8 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e187      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d036      	beq.n	8006d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d016      	beq.n	8006d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2a:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fe fc4a 	bl	80055c8 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fe fc46 	bl	80055c8 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e167      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x200>
 8006d56:	e01b      	b.n	8006d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5e:	f7fe fc33 	bl	80055c8 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d64:	e00e      	b.n	8006d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d66:	f7fe fc2f 	bl	80055c8 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d907      	bls.n	8006d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e150      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	42470000 	.word	0x42470000
 8006d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d84:	4b88      	ldr	r3, [pc, #544]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ea      	bne.n	8006d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8097 	beq.w	8006ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b81      	ldr	r3, [pc, #516]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	4b7d      	ldr	r3, [pc, #500]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4a7c      	ldr	r2, [pc, #496]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dbe:	4b7a      	ldr	r3, [pc, #488]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dce:	4b77      	ldr	r3, [pc, #476]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d118      	bne.n	8006e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dda:	4b74      	ldr	r3, [pc, #464]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a73      	ldr	r2, [pc, #460]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de6:	f7fe fbef 	bl	80055c8 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dee:	f7fe fbeb 	bl	80055c8 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e10c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e00:	4b6a      	ldr	r3, [pc, #424]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d106      	bne.n	8006e22 <HAL_RCC_OscConfig+0x2ea>
 8006e14:	4b64      	ldr	r3, [pc, #400]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e18:	4a63      	ldr	r2, [pc, #396]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e20:	e01c      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x30c>
 8006e2a:	4b5f      	ldr	r3, [pc, #380]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	4a5e      	ldr	r2, [pc, #376]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e30:	f043 0304 	orr.w	r3, r3, #4
 8006e34:	6713      	str	r3, [r2, #112]	; 0x70
 8006e36:	4b5c      	ldr	r3, [pc, #368]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	4a5b      	ldr	r2, [pc, #364]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6713      	str	r3, [r2, #112]	; 0x70
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e44:	4b58      	ldr	r3, [pc, #352]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	4a57      	ldr	r2, [pc, #348]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e50:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	4a54      	ldr	r2, [pc, #336]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fe fbb0 	bl	80055c8 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fe fbac 	bl	80055c8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e0cb      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e82:	4b49      	ldr	r3, [pc, #292]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0ee      	beq.n	8006e6c <HAL_RCC_OscConfig+0x334>
 8006e8e:	e014      	b.n	8006eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e90:	f7fe fb9a 	bl	80055c8 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fe fb96 	bl	80055c8 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e0b5      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eae:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ee      	bne.n	8006e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	4b39      	ldr	r3, [pc, #228]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	4a38      	ldr	r2, [pc, #224]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a1 	beq.w	8007018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ed6:	4b34      	ldr	r3, [pc, #208]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d05c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d141      	bne.n	8006f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fe fb6a 	bl	80055c8 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fe fb66 	bl	80055c8 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e087      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	491b      	ldr	r1, [pc, #108]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f40:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f46:	f7fe fb3f 	bl	80055c8 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f4e:	f7fe fb3b 	bl	80055c8 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e05c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x416>
 8006f6c:	e054      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f74:	f7fe fb28 	bl	80055c8 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fe fb24 	bl	80055c8 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e045      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x444>
 8006f9a:	e03d      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e038      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <HAL_RCC_OscConfig+0x4ec>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d028      	beq.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d121      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d11a      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d107      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800

08007028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0cc      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800703c:	4b68      	ldr	r3, [pc, #416]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d90c      	bls.n	8007064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b65      	ldr	r3, [pc, #404]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007052:	4b63      	ldr	r3, [pc, #396]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0b8      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800707c:	4b59      	ldr	r3, [pc, #356]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a58      	ldr	r2, [pc, #352]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007094:	4b53      	ldr	r3, [pc, #332]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4a52      	ldr	r2, [pc, #328]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800709e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a0:	4b50      	ldr	r3, [pc, #320]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	494d      	ldr	r1, [pc, #308]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d044      	beq.n	8007148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	4b47      	ldr	r3, [pc, #284]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d119      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e07f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e6:	4b3f      	ldr	r3, [pc, #252]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e06f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f6:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e067      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007106:	4b37      	ldr	r3, [pc, #220]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 0203 	bic.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4934      	ldr	r1, [pc, #208]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	4313      	orrs	r3, r2
 8007116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007118:	f7fe fa56 	bl	80055c8 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711e:	e00a      	b.n	8007136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007120:	f7fe fa52 	bl	80055c8 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	; 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e04f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	4b2b      	ldr	r3, [pc, #172]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 020c 	and.w	r2, r3, #12
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	429a      	cmp	r2, r3
 8007146:	d1eb      	bne.n	8007120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d20c      	bcs.n	8007170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007156:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e032      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800717c:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4916      	ldr	r1, [pc, #88]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	490e      	ldr	r1, [pc, #56]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ae:	f000 f82d 	bl	800720c <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	490a      	ldr	r1, [pc, #40]	; (80071e8 <HAL_RCC_ClockConfig+0x1c0>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	fa22 f303 	lsr.w	r3, r2, r3
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <HAL_RCC_ClockConfig+0x1c4>)
 80071c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe f9b6 	bl	8005540 <HAL_InitTick>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40023c00 	.word	0x40023c00
 80071e4:	40023800 	.word	0x40023800
 80071e8:	0800c66c 	.word	0x0800c66c
 80071ec:	2000003c 	.word	0x2000003c
 80071f0:	20000040 	.word	0x20000040

080071f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80071f8:	4b03      	ldr	r3, [pc, #12]	; (8007208 <HAL_RCC_EnableCSS+0x14>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	4247004c 	.word	0x4247004c

0800720c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b094      	sub	sp, #80	; 0x50
 8007212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	647b      	str	r3, [r7, #68]	; 0x44
 8007218:	2300      	movs	r3, #0
 800721a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800721c:	2300      	movs	r3, #0
 800721e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007224:	4b79      	ldr	r3, [pc, #484]	; (800740c <HAL_RCC_GetSysClockFreq+0x200>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b08      	cmp	r3, #8
 800722e:	d00d      	beq.n	800724c <HAL_RCC_GetSysClockFreq+0x40>
 8007230:	2b08      	cmp	r3, #8
 8007232:	f200 80e1 	bhi.w	80073f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x34>
 800723a:	2b04      	cmp	r3, #4
 800723c:	d003      	beq.n	8007246 <HAL_RCC_GetSysClockFreq+0x3a>
 800723e:	e0db      	b.n	80073f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007240:	4b73      	ldr	r3, [pc, #460]	; (8007410 <HAL_RCC_GetSysClockFreq+0x204>)
 8007242:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007244:	e0db      	b.n	80073fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007246:	4b73      	ldr	r3, [pc, #460]	; (8007414 <HAL_RCC_GetSysClockFreq+0x208>)
 8007248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800724a:	e0d8      	b.n	80073fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800724c:	4b6f      	ldr	r3, [pc, #444]	; (800740c <HAL_RCC_GetSysClockFreq+0x200>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007254:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007256:	4b6d      	ldr	r3, [pc, #436]	; (800740c <HAL_RCC_GetSysClockFreq+0x200>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d063      	beq.n	800732a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007262:	4b6a      	ldr	r3, [pc, #424]	; (800740c <HAL_RCC_GetSysClockFreq+0x200>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	2200      	movs	r2, #0
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
 800726c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007274:	633b      	str	r3, [r7, #48]	; 0x30
 8007276:	2300      	movs	r3, #0
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
 800727a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800727e:	4622      	mov	r2, r4
 8007280:	462b      	mov	r3, r5
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f04f 0100 	mov.w	r1, #0
 800728a:	0159      	lsls	r1, r3, #5
 800728c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007290:	0150      	lsls	r0, r2, #5
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4621      	mov	r1, r4
 8007298:	1a51      	subs	r1, r2, r1
 800729a:	6139      	str	r1, [r7, #16]
 800729c:	4629      	mov	r1, r5
 800729e:	eb63 0301 	sbc.w	r3, r3, r1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072b0:	4659      	mov	r1, fp
 80072b2:	018b      	lsls	r3, r1, #6
 80072b4:	4651      	mov	r1, sl
 80072b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072ba:	4651      	mov	r1, sl
 80072bc:	018a      	lsls	r2, r1, #6
 80072be:	4651      	mov	r1, sl
 80072c0:	ebb2 0801 	subs.w	r8, r2, r1
 80072c4:	4659      	mov	r1, fp
 80072c6:	eb63 0901 	sbc.w	r9, r3, r1
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072de:	4690      	mov	r8, r2
 80072e0:	4699      	mov	r9, r3
 80072e2:	4623      	mov	r3, r4
 80072e4:	eb18 0303 	adds.w	r3, r8, r3
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	462b      	mov	r3, r5
 80072ec:	eb49 0303 	adc.w	r3, r9, r3
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072fe:	4629      	mov	r1, r5
 8007300:	024b      	lsls	r3, r1, #9
 8007302:	4621      	mov	r1, r4
 8007304:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007308:	4621      	mov	r1, r4
 800730a:	024a      	lsls	r2, r1, #9
 800730c:	4610      	mov	r0, r2
 800730e:	4619      	mov	r1, r3
 8007310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007312:	2200      	movs	r2, #0
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
 8007316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800731c:	f7f9 fcec 	bl	8000cf8 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4613      	mov	r3, r2
 8007326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007328:	e058      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732a:	4b38      	ldr	r3, [pc, #224]	; (800740c <HAL_RCC_GetSysClockFreq+0x200>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	099b      	lsrs	r3, r3, #6
 8007330:	2200      	movs	r2, #0
 8007332:	4618      	mov	r0, r3
 8007334:	4611      	mov	r1, r2
 8007336:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800733a:	623b      	str	r3, [r7, #32]
 800733c:	2300      	movs	r3, #0
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
 8007340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007344:	4642      	mov	r2, r8
 8007346:	464b      	mov	r3, r9
 8007348:	f04f 0000 	mov.w	r0, #0
 800734c:	f04f 0100 	mov.w	r1, #0
 8007350:	0159      	lsls	r1, r3, #5
 8007352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007356:	0150      	lsls	r0, r2, #5
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4641      	mov	r1, r8
 800735e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007362:	4649      	mov	r1, r9
 8007364:	eb63 0b01 	sbc.w	fp, r3, r1
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800737c:	ebb2 040a 	subs.w	r4, r2, sl
 8007380:	eb63 050b 	sbc.w	r5, r3, fp
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	00eb      	lsls	r3, r5, #3
 800738e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007392:	00e2      	lsls	r2, r4, #3
 8007394:	4614      	mov	r4, r2
 8007396:	461d      	mov	r5, r3
 8007398:	4643      	mov	r3, r8
 800739a:	18e3      	adds	r3, r4, r3
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	464b      	mov	r3, r9
 80073a0:	eb45 0303 	adc.w	r3, r5, r3
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073b2:	4629      	mov	r1, r5
 80073b4:	028b      	lsls	r3, r1, #10
 80073b6:	4621      	mov	r1, r4
 80073b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073bc:	4621      	mov	r1, r4
 80073be:	028a      	lsls	r2, r1, #10
 80073c0:	4610      	mov	r0, r2
 80073c2:	4619      	mov	r1, r3
 80073c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c6:	2200      	movs	r2, #0
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	61fa      	str	r2, [r7, #28]
 80073cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073d0:	f7f9 fc92 	bl	8000cf8 <__aeabi_uldivmod>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4613      	mov	r3, r2
 80073da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_RCC_GetSysClockFreq+0x200>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	3301      	adds	r3, #1
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073f6:	e002      	b.n	80073fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <HAL_RCC_GetSysClockFreq+0x204>)
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007400:	4618      	mov	r0, r3
 8007402:	3750      	adds	r7, #80	; 0x50
 8007404:	46bd      	mov	sp, r7
 8007406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800740a:	bf00      	nop
 800740c:	40023800 	.word	0x40023800
 8007410:	00f42400 	.word	0x00f42400
 8007414:	007a1200 	.word	0x007a1200

08007418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800741c:	4b03      	ldr	r3, [pc, #12]	; (800742c <HAL_RCC_GetHCLKFreq+0x14>)
 800741e:	681b      	ldr	r3, [r3, #0]
}
 8007420:	4618      	mov	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	2000003c 	.word	0x2000003c

08007430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007434:	f7ff fff0 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8007438:	4602      	mov	r2, r0
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	0a9b      	lsrs	r3, r3, #10
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	4903      	ldr	r1, [pc, #12]	; (8007454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007446:	5ccb      	ldrb	r3, [r1, r3]
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40023800 	.word	0x40023800
 8007454:	0800c67c 	.word	0x0800c67c

08007458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800745c:	f7ff ffdc 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8007460:	4602      	mov	r2, r0
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	0b5b      	lsrs	r3, r3, #13
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	4903      	ldr	r1, [pc, #12]	; (800747c <HAL_RCC_GetPCLK2Freq+0x24>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40023800 	.word	0x40023800
 800747c:	0800c67c 	.word	0x0800c67c

08007480 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007484:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b80      	cmp	r3, #128	; 0x80
 800748e:	d104      	bne.n	800749a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007490:	f000 f80a 	bl	80074a8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007496:	2280      	movs	r2, #128	; 0x80
 8007498:	701a      	strb	r2, [r3, #0]
  }
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800
 80074a4:	4002380e 	.word	0x4002380e

080074a8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e041      	b.n	800754c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fd ff49 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2202      	movs	r2, #2
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f000 f9bf 	bl	8007878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d001      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e044      	b.n	80075f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1e      	ldr	r2, [pc, #120]	; (8007604 <HAL_TIM_Base_Start_IT+0xb0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d018      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0x6c>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007596:	d013      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0x6c>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1a      	ldr	r2, [pc, #104]	; (8007608 <HAL_TIM_Base_Start_IT+0xb4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00e      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0x6c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a19      	ldr	r2, [pc, #100]	; (800760c <HAL_TIM_Base_Start_IT+0xb8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d009      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0x6c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a17      	ldr	r2, [pc, #92]	; (8007610 <HAL_TIM_Base_Start_IT+0xbc>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0x6c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a16      	ldr	r2, [pc, #88]	; (8007614 <HAL_TIM_Base_Start_IT+0xc0>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d111      	bne.n	80075e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b06      	cmp	r3, #6
 80075d0:	d010      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e2:	e007      	b.n	80075f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40010000 	.word	0x40010000
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40014000 	.word	0x40014000

08007618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b02      	cmp	r3, #2
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0202 	mvn.w	r2, #2
 8007644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f8ee 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8e0 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8f1 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b04      	cmp	r3, #4
 8007680:	d122      	bne.n	80076c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b04      	cmp	r3, #4
 800768e:	d11b      	bne.n	80076c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0204 	mvn.w	r2, #4
 8007698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8c4 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8b6 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f8c7 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d122      	bne.n	800771c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d11b      	bne.n	800771c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0208 	mvn.w	r2, #8
 80076ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2204      	movs	r2, #4
 80076f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f89a 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 8007708:	e005      	b.n	8007716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f88c 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f89d 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0310 	and.w	r3, r3, #16
 8007726:	2b10      	cmp	r3, #16
 8007728:	d122      	bne.n	8007770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d11b      	bne.n	8007770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0210 	mvn.w	r2, #16
 8007740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2208      	movs	r2, #8
 8007746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f870 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 800775c:	e005      	b.n	800776a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f862 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f873 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b01      	cmp	r3, #1
 800777c:	d10e      	bne.n	800779c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b01      	cmp	r3, #1
 800778a:	d107      	bne.n	800779c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0201 	mvn.w	r2, #1
 8007794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fd fc78 	bl	800508c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a6:	2b80      	cmp	r3, #128	; 0x80
 80077a8:	d10e      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d107      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f8e2 	bl	800798c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d10e      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d107      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f838 	bl	8007864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b20      	cmp	r3, #32
 8007800:	d10e      	bne.n	8007820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b20      	cmp	r3, #32
 800780e:	d107      	bne.n	8007820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0220 	mvn.w	r2, #32
 8007818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f8ac 	bl	8007978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a34      	ldr	r2, [pc, #208]	; (800795c <TIM_Base_SetConfig+0xe4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00f      	beq.n	80078b0 <TIM_Base_SetConfig+0x38>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007896:	d00b      	beq.n	80078b0 <TIM_Base_SetConfig+0x38>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a31      	ldr	r2, [pc, #196]	; (8007960 <TIM_Base_SetConfig+0xe8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_Base_SetConfig+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a30      	ldr	r2, [pc, #192]	; (8007964 <TIM_Base_SetConfig+0xec>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0x38>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a2f      	ldr	r2, [pc, #188]	; (8007968 <TIM_Base_SetConfig+0xf0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a25      	ldr	r2, [pc, #148]	; (800795c <TIM_Base_SetConfig+0xe4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01b      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d017      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a22      	ldr	r2, [pc, #136]	; (8007960 <TIM_Base_SetConfig+0xe8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a21      	ldr	r2, [pc, #132]	; (8007964 <TIM_Base_SetConfig+0xec>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a20      	ldr	r2, [pc, #128]	; (8007968 <TIM_Base_SetConfig+0xf0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1f      	ldr	r2, [pc, #124]	; (800796c <TIM_Base_SetConfig+0xf4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1e      	ldr	r2, [pc, #120]	; (8007970 <TIM_Base_SetConfig+0xf8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_Base_SetConfig+0x8a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <TIM_Base_SetConfig+0xfc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d108      	bne.n	8007914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a08      	ldr	r2, [pc, #32]	; (800795c <TIM_Base_SetConfig+0xe4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d103      	bne.n	8007948 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	615a      	str	r2, [r3, #20]
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40014000 	.word	0x40014000
 8007970:	40014400 	.word	0x40014400
 8007974:	40014800 	.word	0x40014800

08007978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e03f      	b.n	8007a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7fd fd26 	bl	8005418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2224      	movs	r2, #36	; 0x24
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f929 	bl	8007c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695a      	ldr	r2, [r3, #20]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b08a      	sub	sp, #40	; 0x28
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	603b      	str	r3, [r7, #0]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d17c      	bne.n	8007b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_UART_Transmit+0x2c>
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e075      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_UART_Transmit+0x3e>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e06e      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2221      	movs	r2, #33	; 0x21
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a8e:	f7fd fd9b 	bl	80055c8 <HAL_GetTick>
 8007a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	88fa      	ldrh	r2, [r7, #6]
 8007a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa8:	d108      	bne.n	8007abc <HAL_UART_Transmit+0x82>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e003      	b.n	8007ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007acc:	e02a      	b.n	8007b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2180      	movs	r1, #128	; 0x80
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f840 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e036      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3302      	adds	r3, #2
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	e007      	b.n	8007b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1cf      	bne.n	8007ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2200      	movs	r2, #0
 8007b36:	2140      	movs	r1, #64	; 0x40
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f810 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e006      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e000      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b54:	2302      	movs	r3, #2
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b090      	sub	sp, #64	; 0x40
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6e:	e050      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d04c      	beq.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8007b7e:	f7fd fd23 	bl	80055c8 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d241      	bcs.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	330c      	adds	r3, #12
 8007b94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bae:	637a      	str	r2, [r7, #52]	; 0x34
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e5      	bne.n	8007b8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f023 0301 	bic.w	r3, r3, #1
 8007bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3314      	adds	r3, #20
 8007be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be2:	623a      	str	r2, [r7, #32]
 8007be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	69f9      	ldr	r1, [r7, #28]
 8007be8:	6a3a      	ldr	r2, [r7, #32]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e5      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e00f      	b.n	8007c32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	bf0c      	ite	eq
 8007c22:	2301      	moveq	r3, #1
 8007c24:	2300      	movne	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d09f      	beq.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3740      	adds	r7, #64	; 0x40
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c40:	b0c0      	sub	sp, #256	; 0x100
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	68d9      	ldr	r1, [r3, #12]
 8007c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	ea40 0301 	orr.w	r3, r0, r1
 8007c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c94:	f021 010c 	bic.w	r1, r1, #12
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb6:	6999      	ldr	r1, [r3, #24]
 8007cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	ea40 0301 	orr.w	r3, r0, r1
 8007cc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b8f      	ldr	r3, [pc, #572]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d005      	beq.n	8007cdc <UART_SetConfig+0xa0>
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b8d      	ldr	r3, [pc, #564]	; (8007f0c <UART_SetConfig+0x2d0>)
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d104      	bne.n	8007ce6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cdc:	f7ff fbbc 	bl	8007458 <HAL_RCC_GetPCLK2Freq>
 8007ce0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ce4:	e003      	b.n	8007cee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ce6:	f7ff fba3 	bl	8007430 <HAL_RCC_GetPCLK1Freq>
 8007cea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf8:	f040 810c 	bne.w	8007f14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	1891      	adds	r1, r2, r2
 8007d14:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d16:	415b      	adcs	r3, r3
 8007d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d1e:	4621      	mov	r1, r4
 8007d20:	eb12 0801 	adds.w	r8, r2, r1
 8007d24:	4629      	mov	r1, r5
 8007d26:	eb43 0901 	adc.w	r9, r3, r1
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d3e:	4690      	mov	r8, r2
 8007d40:	4699      	mov	r9, r3
 8007d42:	4623      	mov	r3, r4
 8007d44:	eb18 0303 	adds.w	r3, r8, r3
 8007d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	eb49 0303 	adc.w	r3, r9, r3
 8007d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	18db      	adds	r3, r3, r3
 8007d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d70:	4613      	mov	r3, r2
 8007d72:	eb42 0303 	adc.w	r3, r2, r3
 8007d76:	657b      	str	r3, [r7, #84]	; 0x54
 8007d78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d80:	f7f8 ffba 	bl	8000cf8 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4b61      	ldr	r3, [pc, #388]	; (8007f10 <UART_SetConfig+0x2d4>)
 8007d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	011c      	lsls	r4, r3, #4
 8007d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007da0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	64b9      	str	r1, [r7, #72]	; 0x48
 8007dac:	415b      	adcs	r3, r3
 8007dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007db4:	4641      	mov	r1, r8
 8007db6:	eb12 0a01 	adds.w	sl, r2, r1
 8007dba:	4649      	mov	r1, r9
 8007dbc:	eb43 0b01 	adc.w	fp, r3, r1
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dd4:	4692      	mov	sl, r2
 8007dd6:	469b      	mov	fp, r3
 8007dd8:	4643      	mov	r3, r8
 8007dda:	eb1a 0303 	adds.w	r3, sl, r3
 8007dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007de2:	464b      	mov	r3, r9
 8007de4:	eb4b 0303 	adc.w	r3, fp, r3
 8007de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007df8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007dfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e00:	460b      	mov	r3, r1
 8007e02:	18db      	adds	r3, r3, r3
 8007e04:	643b      	str	r3, [r7, #64]	; 0x40
 8007e06:	4613      	mov	r3, r2
 8007e08:	eb42 0303 	adc.w	r3, r2, r3
 8007e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e16:	f7f8 ff6f 	bl	8000cf8 <__aeabi_uldivmod>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4b3b      	ldr	r3, [pc, #236]	; (8007f10 <UART_SetConfig+0x2d4>)
 8007e22:	fba3 2301 	umull	r2, r3, r3, r1
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	2264      	movs	r2, #100	; 0x64
 8007e2a:	fb02 f303 	mul.w	r3, r2, r3
 8007e2e:	1acb      	subs	r3, r1, r3
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e36:	4b36      	ldr	r3, [pc, #216]	; (8007f10 <UART_SetConfig+0x2d4>)
 8007e38:	fba3 2302 	umull	r2, r3, r3, r2
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e44:	441c      	add	r4, r3
 8007e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e58:	4642      	mov	r2, r8
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	1891      	adds	r1, r2, r2
 8007e5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e60:	415b      	adcs	r3, r3
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e68:	4641      	mov	r1, r8
 8007e6a:	1851      	adds	r1, r2, r1
 8007e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e6e:	4649      	mov	r1, r9
 8007e70:	414b      	adcs	r3, r1
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e80:	4659      	mov	r1, fp
 8007e82:	00cb      	lsls	r3, r1, #3
 8007e84:	4651      	mov	r1, sl
 8007e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e8a:	4651      	mov	r1, sl
 8007e8c:	00ca      	lsls	r2, r1, #3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	4642      	mov	r2, r8
 8007e96:	189b      	adds	r3, r3, r2
 8007e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	460a      	mov	r2, r1
 8007ea0:	eb42 0303 	adc.w	r3, r2, r3
 8007ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	18db      	adds	r3, r3, r3
 8007ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	eb42 0303 	adc.w	r3, r2, r3
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ece:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ed2:	f7f8 ff11 	bl	8000cf8 <__aeabi_uldivmod>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <UART_SetConfig+0x2d4>)
 8007edc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	2164      	movs	r1, #100	; 0x64
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	3332      	adds	r3, #50	; 0x32
 8007eee:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <UART_SetConfig+0x2d4>)
 8007ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef4:	095b      	lsrs	r3, r3, #5
 8007ef6:	f003 0207 	and.w	r2, r3, #7
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4422      	add	r2, r4
 8007f02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f04:	e105      	b.n	8008112 <UART_SetConfig+0x4d6>
 8007f06:	bf00      	nop
 8007f08:	40011000 	.word	0x40011000
 8007f0c:	40011400 	.word	0x40011400
 8007f10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f26:	4642      	mov	r2, r8
 8007f28:	464b      	mov	r3, r9
 8007f2a:	1891      	adds	r1, r2, r2
 8007f2c:	6239      	str	r1, [r7, #32]
 8007f2e:	415b      	adcs	r3, r3
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
 8007f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f36:	4641      	mov	r1, r8
 8007f38:	1854      	adds	r4, r2, r1
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	eb43 0501 	adc.w	r5, r3, r1
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	00eb      	lsls	r3, r5, #3
 8007f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f4e:	00e2      	lsls	r2, r4, #3
 8007f50:	4614      	mov	r4, r2
 8007f52:	461d      	mov	r5, r3
 8007f54:	4643      	mov	r3, r8
 8007f56:	18e3      	adds	r3, r4, r3
 8007f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	eb45 0303 	adc.w	r3, r5, r3
 8007f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f82:	4629      	mov	r1, r5
 8007f84:	008b      	lsls	r3, r1, #2
 8007f86:	4621      	mov	r1, r4
 8007f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	008a      	lsls	r2, r1, #2
 8007f90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f94:	f7f8 feb0 	bl	8000cf8 <__aeabi_uldivmod>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4b60      	ldr	r3, [pc, #384]	; (8008120 <UART_SetConfig+0x4e4>)
 8007f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa2:	095b      	lsrs	r3, r3, #5
 8007fa4:	011c      	lsls	r4, r3, #4
 8007fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fb8:	4642      	mov	r2, r8
 8007fba:	464b      	mov	r3, r9
 8007fbc:	1891      	adds	r1, r2, r2
 8007fbe:	61b9      	str	r1, [r7, #24]
 8007fc0:	415b      	adcs	r3, r3
 8007fc2:	61fb      	str	r3, [r7, #28]
 8007fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fc8:	4641      	mov	r1, r8
 8007fca:	1851      	adds	r1, r2, r1
 8007fcc:	6139      	str	r1, [r7, #16]
 8007fce:	4649      	mov	r1, r9
 8007fd0:	414b      	adcs	r3, r1
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fe0:	4659      	mov	r1, fp
 8007fe2:	00cb      	lsls	r3, r1, #3
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fea:	4651      	mov	r1, sl
 8007fec:	00ca      	lsls	r2, r1, #3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	189b      	adds	r3, r3, r2
 8007ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	460a      	mov	r2, r1
 8008000:	eb42 0303 	adc.w	r3, r2, r3
 8008004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	67bb      	str	r3, [r7, #120]	; 0x78
 8008012:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008020:	4649      	mov	r1, r9
 8008022:	008b      	lsls	r3, r1, #2
 8008024:	4641      	mov	r1, r8
 8008026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800802a:	4641      	mov	r1, r8
 800802c:	008a      	lsls	r2, r1, #2
 800802e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008032:	f7f8 fe61 	bl	8000cf8 <__aeabi_uldivmod>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4b39      	ldr	r3, [pc, #228]	; (8008120 <UART_SetConfig+0x4e4>)
 800803c:	fba3 1302 	umull	r1, r3, r3, r2
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	2164      	movs	r1, #100	; 0x64
 8008044:	fb01 f303 	mul.w	r3, r1, r3
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	3332      	adds	r3, #50	; 0x32
 800804e:	4a34      	ldr	r2, [pc, #208]	; (8008120 <UART_SetConfig+0x4e4>)
 8008050:	fba2 2303 	umull	r2, r3, r2, r3
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800805a:	441c      	add	r4, r3
 800805c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008060:	2200      	movs	r2, #0
 8008062:	673b      	str	r3, [r7, #112]	; 0x70
 8008064:	677a      	str	r2, [r7, #116]	; 0x74
 8008066:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800806a:	4642      	mov	r2, r8
 800806c:	464b      	mov	r3, r9
 800806e:	1891      	adds	r1, r2, r2
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	415b      	adcs	r3, r3
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800807a:	4641      	mov	r1, r8
 800807c:	1851      	adds	r1, r2, r1
 800807e:	6039      	str	r1, [r7, #0]
 8008080:	4649      	mov	r1, r9
 8008082:	414b      	adcs	r3, r1
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008092:	4659      	mov	r1, fp
 8008094:	00cb      	lsls	r3, r1, #3
 8008096:	4651      	mov	r1, sl
 8008098:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800809c:	4651      	mov	r1, sl
 800809e:	00ca      	lsls	r2, r1, #3
 80080a0:	4610      	mov	r0, r2
 80080a2:	4619      	mov	r1, r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	4642      	mov	r2, r8
 80080a8:	189b      	adds	r3, r3, r2
 80080aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80080ac:	464b      	mov	r3, r9
 80080ae:	460a      	mov	r2, r1
 80080b0:	eb42 0303 	adc.w	r3, r2, r3
 80080b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	663b      	str	r3, [r7, #96]	; 0x60
 80080c0:	667a      	str	r2, [r7, #100]	; 0x64
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080ce:	4649      	mov	r1, r9
 80080d0:	008b      	lsls	r3, r1, #2
 80080d2:	4641      	mov	r1, r8
 80080d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080d8:	4641      	mov	r1, r8
 80080da:	008a      	lsls	r2, r1, #2
 80080dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080e0:	f7f8 fe0a 	bl	8000cf8 <__aeabi_uldivmod>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <UART_SetConfig+0x4e4>)
 80080ea:	fba3 1302 	umull	r1, r3, r3, r2
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	2164      	movs	r1, #100	; 0x64
 80080f2:	fb01 f303 	mul.w	r3, r1, r3
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	3332      	adds	r3, #50	; 0x32
 80080fc:	4a08      	ldr	r2, [pc, #32]	; (8008120 <UART_SetConfig+0x4e4>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4422      	add	r2, r4
 8008110:	609a      	str	r2, [r3, #8]
}
 8008112:	bf00      	nop
 8008114:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008118:	46bd      	mov	sp, r7
 800811a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800811e:	bf00      	nop
 8008120:	51eb851f 	.word	0x51eb851f

08008124 <asin>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	ed2d 8b02 	vpush	{d8}
 800812a:	ec55 4b10 	vmov	r4, r5, d0
 800812e:	f000 f85f 	bl	80081f0 <__ieee754_asin>
 8008132:	4622      	mov	r2, r4
 8008134:	462b      	mov	r3, r5
 8008136:	4620      	mov	r0, r4
 8008138:	4629      	mov	r1, r5
 800813a:	eeb0 8a40 	vmov.f32	s16, s0
 800813e:	eef0 8a60 	vmov.f32	s17, s1
 8008142:	f7f8 fcfb 	bl	8000b3c <__aeabi_dcmpun>
 8008146:	b9a8      	cbnz	r0, 8008174 <asin+0x50>
 8008148:	ec45 4b10 	vmov	d0, r4, r5
 800814c:	f000 fe94 	bl	8008e78 <fabs>
 8008150:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <asin+0x60>)
 8008152:	ec51 0b10 	vmov	r0, r1, d0
 8008156:	2200      	movs	r2, #0
 8008158:	f7f8 fce6 	bl	8000b28 <__aeabi_dcmpgt>
 800815c:	b150      	cbz	r0, 8008174 <asin+0x50>
 800815e:	f000 fe9f 	bl	8008ea0 <__errno>
 8008162:	ecbd 8b02 	vpop	{d8}
 8008166:	2321      	movs	r3, #33	; 0x21
 8008168:	6003      	str	r3, [r0, #0]
 800816a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800816e:	4806      	ldr	r0, [pc, #24]	; (8008188 <asin+0x64>)
 8008170:	f000 be8e 	b.w	8008e90 <nan>
 8008174:	eeb0 0a48 	vmov.f32	s0, s16
 8008178:	eef0 0a68 	vmov.f32	s1, s17
 800817c:	ecbd 8b02 	vpop	{d8}
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	bf00      	nop
 8008184:	3ff00000 	.word	0x3ff00000
 8008188:	0800c9d8 	.word	0x0800c9d8

0800818c <atan2>:
 800818c:	f000 ba44 	b.w	8008618 <__ieee754_atan2>

08008190 <fmod>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	ed2d 8b02 	vpush	{d8}
 8008196:	ec57 6b10 	vmov	r6, r7, d0
 800819a:	ec55 4b11 	vmov	r4, r5, d1
 800819e:	f000 fb05 	bl	80087ac <__ieee754_fmod>
 80081a2:	4622      	mov	r2, r4
 80081a4:	462b      	mov	r3, r5
 80081a6:	4630      	mov	r0, r6
 80081a8:	4639      	mov	r1, r7
 80081aa:	eeb0 8a40 	vmov.f32	s16, s0
 80081ae:	eef0 8a60 	vmov.f32	s17, s1
 80081b2:	f7f8 fcc3 	bl	8000b3c <__aeabi_dcmpun>
 80081b6:	b990      	cbnz	r0, 80081de <fmod+0x4e>
 80081b8:	2200      	movs	r2, #0
 80081ba:	2300      	movs	r3, #0
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081c4:	b158      	cbz	r0, 80081de <fmod+0x4e>
 80081c6:	f000 fe6b 	bl	8008ea0 <__errno>
 80081ca:	2321      	movs	r3, #33	; 0x21
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2300      	movs	r3, #0
 80081d2:	4610      	mov	r0, r2
 80081d4:	4619      	mov	r1, r3
 80081d6:	f7f8 fb41 	bl	800085c <__aeabi_ddiv>
 80081da:	ec41 0b18 	vmov	d8, r0, r1
 80081de:	eeb0 0a48 	vmov.f32	s0, s16
 80081e2:	eef0 0a68 	vmov.f32	s1, s17
 80081e6:	ecbd 8b02 	vpop	{d8}
 80081ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ec:	0000      	movs	r0, r0
	...

080081f0 <__ieee754_asin>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	ed2d 8b04 	vpush	{d8-d9}
 80081f8:	ec55 4b10 	vmov	r4, r5, d0
 80081fc:	4bcc      	ldr	r3, [pc, #816]	; (8008530 <__ieee754_asin+0x340>)
 80081fe:	b083      	sub	sp, #12
 8008200:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008204:	4598      	cmp	r8, r3
 8008206:	9501      	str	r5, [sp, #4]
 8008208:	dd35      	ble.n	8008276 <__ieee754_asin+0x86>
 800820a:	ee10 3a10 	vmov	r3, s0
 800820e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8008212:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8008216:	ea58 0303 	orrs.w	r3, r8, r3
 800821a:	d117      	bne.n	800824c <__ieee754_asin+0x5c>
 800821c:	a3aa      	add	r3, pc, #680	; (adr r3, 80084c8 <__ieee754_asin+0x2d8>)
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	ee10 0a10 	vmov	r0, s0
 8008226:	4629      	mov	r1, r5
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	a3a8      	add	r3, pc, #672	; (adr r3, 80084d0 <__ieee754_asin+0x2e0>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 f9e5 	bl	8000608 <__aeabi_dmul>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4630      	mov	r0, r6
 8008244:	4639      	mov	r1, r7
 8008246:	f7f8 f829 	bl	800029c <__adddf3>
 800824a:	e00b      	b.n	8008264 <__ieee754_asin+0x74>
 800824c:	ee10 2a10 	vmov	r2, s0
 8008250:	462b      	mov	r3, r5
 8008252:	ee10 0a10 	vmov	r0, s0
 8008256:	4629      	mov	r1, r5
 8008258:	f7f8 f81e 	bl	8000298 <__aeabi_dsub>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	f7f8 fafc 	bl	800085c <__aeabi_ddiv>
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	ec45 4b10 	vmov	d0, r4, r5
 800826c:	b003      	add	sp, #12
 800826e:	ecbd 8b04 	vpop	{d8-d9}
 8008272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008276:	4baf      	ldr	r3, [pc, #700]	; (8008534 <__ieee754_asin+0x344>)
 8008278:	4598      	cmp	r8, r3
 800827a:	dc11      	bgt.n	80082a0 <__ieee754_asin+0xb0>
 800827c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008280:	f280 80ae 	bge.w	80083e0 <__ieee754_asin+0x1f0>
 8008284:	a394      	add	r3, pc, #592	; (adr r3, 80084d8 <__ieee754_asin+0x2e8>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	ee10 0a10 	vmov	r0, s0
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 f804 	bl	800029c <__adddf3>
 8008294:	4ba8      	ldr	r3, [pc, #672]	; (8008538 <__ieee754_asin+0x348>)
 8008296:	2200      	movs	r2, #0
 8008298:	f7f8 fc46 	bl	8000b28 <__aeabi_dcmpgt>
 800829c:	2800      	cmp	r0, #0
 800829e:	d1e3      	bne.n	8008268 <__ieee754_asin+0x78>
 80082a0:	ec45 4b10 	vmov	d0, r4, r5
 80082a4:	f000 fde8 	bl	8008e78 <fabs>
 80082a8:	49a3      	ldr	r1, [pc, #652]	; (8008538 <__ieee754_asin+0x348>)
 80082aa:	ec53 2b10 	vmov	r2, r3, d0
 80082ae:	2000      	movs	r0, #0
 80082b0:	f7f7 fff2 	bl	8000298 <__aeabi_dsub>
 80082b4:	4ba1      	ldr	r3, [pc, #644]	; (800853c <__ieee754_asin+0x34c>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	f7f8 f9a6 	bl	8000608 <__aeabi_dmul>
 80082bc:	a388      	add	r3, pc, #544	; (adr r3, 80084e0 <__ieee754_asin+0x2f0>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	4604      	mov	r4, r0
 80082c4:	460d      	mov	r5, r1
 80082c6:	f7f8 f99f 	bl	8000608 <__aeabi_dmul>
 80082ca:	a387      	add	r3, pc, #540	; (adr r3, 80084e8 <__ieee754_asin+0x2f8>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 ffe4 	bl	800029c <__adddf3>
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	f7f8 f996 	bl	8000608 <__aeabi_dmul>
 80082dc:	a384      	add	r3, pc, #528	; (adr r3, 80084f0 <__ieee754_asin+0x300>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f7 ffd9 	bl	8000298 <__aeabi_dsub>
 80082e6:	4622      	mov	r2, r4
 80082e8:	462b      	mov	r3, r5
 80082ea:	f7f8 f98d 	bl	8000608 <__aeabi_dmul>
 80082ee:	a382      	add	r3, pc, #520	; (adr r3, 80084f8 <__ieee754_asin+0x308>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f7 ffd2 	bl	800029c <__adddf3>
 80082f8:	4622      	mov	r2, r4
 80082fa:	462b      	mov	r3, r5
 80082fc:	f7f8 f984 	bl	8000608 <__aeabi_dmul>
 8008300:	a37f      	add	r3, pc, #508	; (adr r3, 8008500 <__ieee754_asin+0x310>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f7 ffc7 	bl	8000298 <__aeabi_dsub>
 800830a:	4622      	mov	r2, r4
 800830c:	462b      	mov	r3, r5
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	a37d      	add	r3, pc, #500	; (adr r3, 8008508 <__ieee754_asin+0x318>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f7 ffc0 	bl	800029c <__adddf3>
 800831c:	4622      	mov	r2, r4
 800831e:	462b      	mov	r3, r5
 8008320:	f7f8 f972 	bl	8000608 <__aeabi_dmul>
 8008324:	a37a      	add	r3, pc, #488	; (adr r3, 8008510 <__ieee754_asin+0x320>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	ec41 0b18 	vmov	d8, r0, r1
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f8 f969 	bl	8000608 <__aeabi_dmul>
 8008336:	a378      	add	r3, pc, #480	; (adr r3, 8008518 <__ieee754_asin+0x328>)
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f7f7 ffac 	bl	8000298 <__aeabi_dsub>
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	f7f8 f960 	bl	8000608 <__aeabi_dmul>
 8008348:	a375      	add	r3, pc, #468	; (adr r3, 8008520 <__ieee754_asin+0x330>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f7 ffa5 	bl	800029c <__adddf3>
 8008352:	4622      	mov	r2, r4
 8008354:	462b      	mov	r3, r5
 8008356:	f7f8 f957 	bl	8000608 <__aeabi_dmul>
 800835a:	a373      	add	r3, pc, #460	; (adr r3, 8008528 <__ieee754_asin+0x338>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f7f7 ff9a 	bl	8000298 <__aeabi_dsub>
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	f7f8 f94e 	bl	8000608 <__aeabi_dmul>
 800836c:	4b72      	ldr	r3, [pc, #456]	; (8008538 <__ieee754_asin+0x348>)
 800836e:	2200      	movs	r2, #0
 8008370:	f7f7 ff94 	bl	800029c <__adddf3>
 8008374:	ec45 4b10 	vmov	d0, r4, r5
 8008378:	4606      	mov	r6, r0
 800837a:	460f      	mov	r7, r1
 800837c:	f000 fb28 	bl	80089d0 <__ieee754_sqrt>
 8008380:	4b6f      	ldr	r3, [pc, #444]	; (8008540 <__ieee754_asin+0x350>)
 8008382:	4598      	cmp	r8, r3
 8008384:	ec5b ab10 	vmov	sl, fp, d0
 8008388:	f340 80dc 	ble.w	8008544 <__ieee754_asin+0x354>
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	ec51 0b18 	vmov	r0, r1, d8
 8008394:	f7f8 fa62 	bl	800085c <__aeabi_ddiv>
 8008398:	4652      	mov	r2, sl
 800839a:	465b      	mov	r3, fp
 800839c:	f7f8 f934 	bl	8000608 <__aeabi_dmul>
 80083a0:	4652      	mov	r2, sl
 80083a2:	465b      	mov	r3, fp
 80083a4:	f7f7 ff7a 	bl	800029c <__adddf3>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	f7f7 ff76 	bl	800029c <__adddf3>
 80083b0:	a347      	add	r3, pc, #284	; (adr r3, 80084d0 <__ieee754_asin+0x2e0>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f7 ff6f 	bl	8000298 <__aeabi_dsub>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	a142      	add	r1, pc, #264	; (adr r1, 80084c8 <__ieee754_asin+0x2d8>)
 80083c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c4:	f7f7 ff68 	bl	8000298 <__aeabi_dsub>
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfdc      	itt	le
 80083ce:	4602      	movle	r2, r0
 80083d0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80083d4:	4604      	mov	r4, r0
 80083d6:	460d      	mov	r5, r1
 80083d8:	bfdc      	itt	le
 80083da:	4614      	movle	r4, r2
 80083dc:	461d      	movle	r5, r3
 80083de:	e743      	b.n	8008268 <__ieee754_asin+0x78>
 80083e0:	ee10 2a10 	vmov	r2, s0
 80083e4:	ee10 0a10 	vmov	r0, s0
 80083e8:	462b      	mov	r3, r5
 80083ea:	4629      	mov	r1, r5
 80083ec:	f7f8 f90c 	bl	8000608 <__aeabi_dmul>
 80083f0:	a33b      	add	r3, pc, #236	; (adr r3, 80084e0 <__ieee754_asin+0x2f0>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	4606      	mov	r6, r0
 80083f8:	460f      	mov	r7, r1
 80083fa:	f7f8 f905 	bl	8000608 <__aeabi_dmul>
 80083fe:	a33a      	add	r3, pc, #232	; (adr r3, 80084e8 <__ieee754_asin+0x2f8>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f7 ff4a 	bl	800029c <__adddf3>
 8008408:	4632      	mov	r2, r6
 800840a:	463b      	mov	r3, r7
 800840c:	f7f8 f8fc 	bl	8000608 <__aeabi_dmul>
 8008410:	a337      	add	r3, pc, #220	; (adr r3, 80084f0 <__ieee754_asin+0x300>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f7 ff3f 	bl	8000298 <__aeabi_dsub>
 800841a:	4632      	mov	r2, r6
 800841c:	463b      	mov	r3, r7
 800841e:	f7f8 f8f3 	bl	8000608 <__aeabi_dmul>
 8008422:	a335      	add	r3, pc, #212	; (adr r3, 80084f8 <__ieee754_asin+0x308>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f7 ff38 	bl	800029c <__adddf3>
 800842c:	4632      	mov	r2, r6
 800842e:	463b      	mov	r3, r7
 8008430:	f7f8 f8ea 	bl	8000608 <__aeabi_dmul>
 8008434:	a332      	add	r3, pc, #200	; (adr r3, 8008500 <__ieee754_asin+0x310>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	f7f7 ff2d 	bl	8000298 <__aeabi_dsub>
 800843e:	4632      	mov	r2, r6
 8008440:	463b      	mov	r3, r7
 8008442:	f7f8 f8e1 	bl	8000608 <__aeabi_dmul>
 8008446:	a330      	add	r3, pc, #192	; (adr r3, 8008508 <__ieee754_asin+0x318>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f7 ff26 	bl	800029c <__adddf3>
 8008450:	4632      	mov	r2, r6
 8008452:	463b      	mov	r3, r7
 8008454:	f7f8 f8d8 	bl	8000608 <__aeabi_dmul>
 8008458:	a32d      	add	r3, pc, #180	; (adr r3, 8008510 <__ieee754_asin+0x320>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	4680      	mov	r8, r0
 8008460:	4689      	mov	r9, r1
 8008462:	4630      	mov	r0, r6
 8008464:	4639      	mov	r1, r7
 8008466:	f7f8 f8cf 	bl	8000608 <__aeabi_dmul>
 800846a:	a32b      	add	r3, pc, #172	; (adr r3, 8008518 <__ieee754_asin+0x328>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 ff12 	bl	8000298 <__aeabi_dsub>
 8008474:	4632      	mov	r2, r6
 8008476:	463b      	mov	r3, r7
 8008478:	f7f8 f8c6 	bl	8000608 <__aeabi_dmul>
 800847c:	a328      	add	r3, pc, #160	; (adr r3, 8008520 <__ieee754_asin+0x330>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff0b 	bl	800029c <__adddf3>
 8008486:	4632      	mov	r2, r6
 8008488:	463b      	mov	r3, r7
 800848a:	f7f8 f8bd 	bl	8000608 <__aeabi_dmul>
 800848e:	a326      	add	r3, pc, #152	; (adr r3, 8008528 <__ieee754_asin+0x338>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f7 ff00 	bl	8000298 <__aeabi_dsub>
 8008498:	4632      	mov	r2, r6
 800849a:	463b      	mov	r3, r7
 800849c:	f7f8 f8b4 	bl	8000608 <__aeabi_dmul>
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <__ieee754_asin+0x348>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	f7f7 fefa 	bl	800029c <__adddf3>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f8 f9d4 	bl	800085c <__aeabi_ddiv>
 80084b4:	4622      	mov	r2, r4
 80084b6:	462b      	mov	r3, r5
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4620      	mov	r0, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	e6bf      	b.n	8008246 <__ieee754_asin+0x56>
 80084c6:	bf00      	nop
 80084c8:	54442d18 	.word	0x54442d18
 80084cc:	3ff921fb 	.word	0x3ff921fb
 80084d0:	33145c07 	.word	0x33145c07
 80084d4:	3c91a626 	.word	0x3c91a626
 80084d8:	8800759c 	.word	0x8800759c
 80084dc:	7e37e43c 	.word	0x7e37e43c
 80084e0:	0dfdf709 	.word	0x0dfdf709
 80084e4:	3f023de1 	.word	0x3f023de1
 80084e8:	7501b288 	.word	0x7501b288
 80084ec:	3f49efe0 	.word	0x3f49efe0
 80084f0:	b5688f3b 	.word	0xb5688f3b
 80084f4:	3fa48228 	.word	0x3fa48228
 80084f8:	0e884455 	.word	0x0e884455
 80084fc:	3fc9c155 	.word	0x3fc9c155
 8008500:	03eb6f7d 	.word	0x03eb6f7d
 8008504:	3fd4d612 	.word	0x3fd4d612
 8008508:	55555555 	.word	0x55555555
 800850c:	3fc55555 	.word	0x3fc55555
 8008510:	b12e9282 	.word	0xb12e9282
 8008514:	3fb3b8c5 	.word	0x3fb3b8c5
 8008518:	1b8d0159 	.word	0x1b8d0159
 800851c:	3fe6066c 	.word	0x3fe6066c
 8008520:	9c598ac8 	.word	0x9c598ac8
 8008524:	40002ae5 	.word	0x40002ae5
 8008528:	1c8a2d4b 	.word	0x1c8a2d4b
 800852c:	40033a27 	.word	0x40033a27
 8008530:	3fefffff 	.word	0x3fefffff
 8008534:	3fdfffff 	.word	0x3fdfffff
 8008538:	3ff00000 	.word	0x3ff00000
 800853c:	3fe00000 	.word	0x3fe00000
 8008540:	3fef3332 	.word	0x3fef3332
 8008544:	ee10 2a10 	vmov	r2, s0
 8008548:	ee10 0a10 	vmov	r0, s0
 800854c:	465b      	mov	r3, fp
 800854e:	4659      	mov	r1, fp
 8008550:	f7f7 fea4 	bl	800029c <__adddf3>
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	ec41 0b19 	vmov	d9, r0, r1
 800855c:	ec51 0b18 	vmov	r0, r1, d8
 8008560:	f7f8 f97c 	bl	800085c <__aeabi_ddiv>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	ec51 0b19 	vmov	r0, r1, d9
 800856c:	f7f8 f84c 	bl	8000608 <__aeabi_dmul>
 8008570:	f04f 0800 	mov.w	r8, #0
 8008574:	4606      	mov	r6, r0
 8008576:	460f      	mov	r7, r1
 8008578:	4642      	mov	r2, r8
 800857a:	465b      	mov	r3, fp
 800857c:	4640      	mov	r0, r8
 800857e:	4659      	mov	r1, fp
 8008580:	f7f8 f842 	bl	8000608 <__aeabi_dmul>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	4642      	mov	r2, r8
 8008592:	4604      	mov	r4, r0
 8008594:	460d      	mov	r5, r1
 8008596:	465b      	mov	r3, fp
 8008598:	4650      	mov	r0, sl
 800859a:	4659      	mov	r1, fp
 800859c:	f7f7 fe7e 	bl	800029c <__adddf3>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4620      	mov	r0, r4
 80085a6:	4629      	mov	r1, r5
 80085a8:	f7f8 f958 	bl	800085c <__aeabi_ddiv>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	f7f7 fe74 	bl	800029c <__adddf3>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	a113      	add	r1, pc, #76	; (adr r1, 8008608 <__ieee754_asin+0x418>)
 80085ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085be:	f7f7 fe6b 	bl	8000298 <__aeabi_dsub>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4630      	mov	r0, r6
 80085c8:	4639      	mov	r1, r7
 80085ca:	f7f7 fe65 	bl	8000298 <__aeabi_dsub>
 80085ce:	4642      	mov	r2, r8
 80085d0:	4604      	mov	r4, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	465b      	mov	r3, fp
 80085d6:	4640      	mov	r0, r8
 80085d8:	4659      	mov	r1, fp
 80085da:	f7f7 fe5f 	bl	800029c <__adddf3>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	a10b      	add	r1, pc, #44	; (adr r1, 8008610 <__ieee754_asin+0x420>)
 80085e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e8:	f7f7 fe56 	bl	8000298 <__aeabi_dsub>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4620      	mov	r0, r4
 80085f2:	4629      	mov	r1, r5
 80085f4:	f7f7 fe50 	bl	8000298 <__aeabi_dsub>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	a104      	add	r1, pc, #16	; (adr r1, 8008610 <__ieee754_asin+0x420>)
 80085fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008602:	e6df      	b.n	80083c4 <__ieee754_asin+0x1d4>
 8008604:	f3af 8000 	nop.w
 8008608:	33145c07 	.word	0x33145c07
 800860c:	3c91a626 	.word	0x3c91a626
 8008610:	54442d18 	.word	0x54442d18
 8008614:	3fe921fb 	.word	0x3fe921fb

08008618 <__ieee754_atan2>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	ec57 6b11 	vmov	r6, r7, d1
 8008620:	4273      	negs	r3, r6
 8008622:	f8df e184 	ldr.w	lr, [pc, #388]	; 80087a8 <__ieee754_atan2+0x190>
 8008626:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800862a:	4333      	orrs	r3, r6
 800862c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008630:	4573      	cmp	r3, lr
 8008632:	ec51 0b10 	vmov	r0, r1, d0
 8008636:	ee11 8a10 	vmov	r8, s2
 800863a:	d80a      	bhi.n	8008652 <__ieee754_atan2+0x3a>
 800863c:	4244      	negs	r4, r0
 800863e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008642:	4304      	orrs	r4, r0
 8008644:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008648:	4574      	cmp	r4, lr
 800864a:	ee10 9a10 	vmov	r9, s0
 800864e:	468c      	mov	ip, r1
 8008650:	d907      	bls.n	8008662 <__ieee754_atan2+0x4a>
 8008652:	4632      	mov	r2, r6
 8008654:	463b      	mov	r3, r7
 8008656:	f7f7 fe21 	bl	800029c <__adddf3>
 800865a:	ec41 0b10 	vmov	d0, r0, r1
 800865e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008662:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008666:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800866a:	4334      	orrs	r4, r6
 800866c:	d103      	bne.n	8008676 <__ieee754_atan2+0x5e>
 800866e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008672:	f000 ba61 	b.w	8008b38 <atan>
 8008676:	17bc      	asrs	r4, r7, #30
 8008678:	f004 0402 	and.w	r4, r4, #2
 800867c:	ea53 0909 	orrs.w	r9, r3, r9
 8008680:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008684:	d107      	bne.n	8008696 <__ieee754_atan2+0x7e>
 8008686:	2c02      	cmp	r4, #2
 8008688:	d060      	beq.n	800874c <__ieee754_atan2+0x134>
 800868a:	2c03      	cmp	r4, #3
 800868c:	d1e5      	bne.n	800865a <__ieee754_atan2+0x42>
 800868e:	a142      	add	r1, pc, #264	; (adr r1, 8008798 <__ieee754_atan2+0x180>)
 8008690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008694:	e7e1      	b.n	800865a <__ieee754_atan2+0x42>
 8008696:	ea52 0808 	orrs.w	r8, r2, r8
 800869a:	d106      	bne.n	80086aa <__ieee754_atan2+0x92>
 800869c:	f1bc 0f00 	cmp.w	ip, #0
 80086a0:	da5f      	bge.n	8008762 <__ieee754_atan2+0x14a>
 80086a2:	a13f      	add	r1, pc, #252	; (adr r1, 80087a0 <__ieee754_atan2+0x188>)
 80086a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a8:	e7d7      	b.n	800865a <__ieee754_atan2+0x42>
 80086aa:	4572      	cmp	r2, lr
 80086ac:	d10f      	bne.n	80086ce <__ieee754_atan2+0xb6>
 80086ae:	4293      	cmp	r3, r2
 80086b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80086b4:	d107      	bne.n	80086c6 <__ieee754_atan2+0xae>
 80086b6:	2c02      	cmp	r4, #2
 80086b8:	d84c      	bhi.n	8008754 <__ieee754_atan2+0x13c>
 80086ba:	4b35      	ldr	r3, [pc, #212]	; (8008790 <__ieee754_atan2+0x178>)
 80086bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80086c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80086c4:	e7c9      	b.n	800865a <__ieee754_atan2+0x42>
 80086c6:	2c02      	cmp	r4, #2
 80086c8:	d848      	bhi.n	800875c <__ieee754_atan2+0x144>
 80086ca:	4b32      	ldr	r3, [pc, #200]	; (8008794 <__ieee754_atan2+0x17c>)
 80086cc:	e7f6      	b.n	80086bc <__ieee754_atan2+0xa4>
 80086ce:	4573      	cmp	r3, lr
 80086d0:	d0e4      	beq.n	800869c <__ieee754_atan2+0x84>
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80086d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086dc:	da1e      	bge.n	800871c <__ieee754_atan2+0x104>
 80086de:	2f00      	cmp	r7, #0
 80086e0:	da01      	bge.n	80086e6 <__ieee754_atan2+0xce>
 80086e2:	323c      	adds	r2, #60	; 0x3c
 80086e4:	db1e      	blt.n	8008724 <__ieee754_atan2+0x10c>
 80086e6:	4632      	mov	r2, r6
 80086e8:	463b      	mov	r3, r7
 80086ea:	f7f8 f8b7 	bl	800085c <__aeabi_ddiv>
 80086ee:	ec41 0b10 	vmov	d0, r0, r1
 80086f2:	f000 fbc1 	bl	8008e78 <fabs>
 80086f6:	f000 fa1f 	bl	8008b38 <atan>
 80086fa:	ec51 0b10 	vmov	r0, r1, d0
 80086fe:	2c01      	cmp	r4, #1
 8008700:	d013      	beq.n	800872a <__ieee754_atan2+0x112>
 8008702:	2c02      	cmp	r4, #2
 8008704:	d015      	beq.n	8008732 <__ieee754_atan2+0x11a>
 8008706:	2c00      	cmp	r4, #0
 8008708:	d0a7      	beq.n	800865a <__ieee754_atan2+0x42>
 800870a:	a319      	add	r3, pc, #100	; (adr r3, 8008770 <__ieee754_atan2+0x158>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fdc2 	bl	8000298 <__aeabi_dsub>
 8008714:	a318      	add	r3, pc, #96	; (adr r3, 8008778 <__ieee754_atan2+0x160>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	e014      	b.n	8008746 <__ieee754_atan2+0x12e>
 800871c:	a118      	add	r1, pc, #96	; (adr r1, 8008780 <__ieee754_atan2+0x168>)
 800871e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008722:	e7ec      	b.n	80086fe <__ieee754_atan2+0xe6>
 8008724:	2000      	movs	r0, #0
 8008726:	2100      	movs	r1, #0
 8008728:	e7e9      	b.n	80086fe <__ieee754_atan2+0xe6>
 800872a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800872e:	4619      	mov	r1, r3
 8008730:	e793      	b.n	800865a <__ieee754_atan2+0x42>
 8008732:	a30f      	add	r3, pc, #60	; (adr r3, 8008770 <__ieee754_atan2+0x158>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fdae 	bl	8000298 <__aeabi_dsub>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	a10d      	add	r1, pc, #52	; (adr r1, 8008778 <__ieee754_atan2+0x160>)
 8008742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008746:	f7f7 fda7 	bl	8000298 <__aeabi_dsub>
 800874a:	e786      	b.n	800865a <__ieee754_atan2+0x42>
 800874c:	a10a      	add	r1, pc, #40	; (adr r1, 8008778 <__ieee754_atan2+0x160>)
 800874e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008752:	e782      	b.n	800865a <__ieee754_atan2+0x42>
 8008754:	a10c      	add	r1, pc, #48	; (adr r1, 8008788 <__ieee754_atan2+0x170>)
 8008756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800875a:	e77e      	b.n	800865a <__ieee754_atan2+0x42>
 800875c:	2000      	movs	r0, #0
 800875e:	2100      	movs	r1, #0
 8008760:	e77b      	b.n	800865a <__ieee754_atan2+0x42>
 8008762:	a107      	add	r1, pc, #28	; (adr r1, 8008780 <__ieee754_atan2+0x168>)
 8008764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008768:	e777      	b.n	800865a <__ieee754_atan2+0x42>
 800876a:	bf00      	nop
 800876c:	f3af 8000 	nop.w
 8008770:	33145c07 	.word	0x33145c07
 8008774:	3ca1a626 	.word	0x3ca1a626
 8008778:	54442d18 	.word	0x54442d18
 800877c:	400921fb 	.word	0x400921fb
 8008780:	54442d18 	.word	0x54442d18
 8008784:	3ff921fb 	.word	0x3ff921fb
 8008788:	54442d18 	.word	0x54442d18
 800878c:	3fe921fb 	.word	0x3fe921fb
 8008790:	0800c688 	.word	0x0800c688
 8008794:	0800c6a0 	.word	0x0800c6a0
 8008798:	54442d18 	.word	0x54442d18
 800879c:	c00921fb 	.word	0xc00921fb
 80087a0:	54442d18 	.word	0x54442d18
 80087a4:	bff921fb 	.word	0xbff921fb
 80087a8:	7ff00000 	.word	0x7ff00000

080087ac <__ieee754_fmod>:
 80087ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	ec53 2b11 	vmov	r2, r3, d1
 80087b4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80087b8:	ea5e 0402 	orrs.w	r4, lr, r2
 80087bc:	ec51 0b10 	vmov	r0, r1, d0
 80087c0:	ee11 7a10 	vmov	r7, s2
 80087c4:	ee11 ca10 	vmov	ip, s2
 80087c8:	461e      	mov	r6, r3
 80087ca:	d00d      	beq.n	80087e8 <__ieee754_fmod+0x3c>
 80087cc:	4c7a      	ldr	r4, [pc, #488]	; (80089b8 <__ieee754_fmod+0x20c>)
 80087ce:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80087d2:	45a0      	cmp	r8, r4
 80087d4:	4689      	mov	r9, r1
 80087d6:	dc07      	bgt.n	80087e8 <__ieee754_fmod+0x3c>
 80087d8:	4254      	negs	r4, r2
 80087da:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 80089c4 <__ieee754_fmod+0x218>
 80087de:	4314      	orrs	r4, r2
 80087e0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80087e4:	455c      	cmp	r4, fp
 80087e6:	d909      	bls.n	80087fc <__ieee754_fmod+0x50>
 80087e8:	f7f7 ff0e 	bl	8000608 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	f7f8 f834 	bl	800085c <__aeabi_ddiv>
 80087f4:	ec41 0b10 	vmov	d0, r0, r1
 80087f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fc:	45f0      	cmp	r8, lr
 80087fe:	ee10 aa10 	vmov	sl, s0
 8008802:	ee10 4a10 	vmov	r4, s0
 8008806:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800880a:	dc09      	bgt.n	8008820 <__ieee754_fmod+0x74>
 800880c:	dbf2      	blt.n	80087f4 <__ieee754_fmod+0x48>
 800880e:	4290      	cmp	r0, r2
 8008810:	d3f0      	bcc.n	80087f4 <__ieee754_fmod+0x48>
 8008812:	d105      	bne.n	8008820 <__ieee754_fmod+0x74>
 8008814:	4b69      	ldr	r3, [pc, #420]	; (80089bc <__ieee754_fmod+0x210>)
 8008816:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800881a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800881e:	e7e9      	b.n	80087f4 <__ieee754_fmod+0x48>
 8008820:	ea19 0f0b 	tst.w	r9, fp
 8008824:	d14a      	bne.n	80088bc <__ieee754_fmod+0x110>
 8008826:	f1b8 0f00 	cmp.w	r8, #0
 800882a:	d13f      	bne.n	80088ac <__ieee754_fmod+0x100>
 800882c:	4964      	ldr	r1, [pc, #400]	; (80089c0 <__ieee754_fmod+0x214>)
 800882e:	4653      	mov	r3, sl
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc38      	bgt.n	80088a6 <__ieee754_fmod+0xfa>
 8008834:	4b63      	ldr	r3, [pc, #396]	; (80089c4 <__ieee754_fmod+0x218>)
 8008836:	4033      	ands	r3, r6
 8008838:	2b00      	cmp	r3, #0
 800883a:	d14f      	bne.n	80088dc <__ieee754_fmod+0x130>
 800883c:	f1be 0f00 	cmp.w	lr, #0
 8008840:	d144      	bne.n	80088cc <__ieee754_fmod+0x120>
 8008842:	4a5f      	ldr	r2, [pc, #380]	; (80089c0 <__ieee754_fmod+0x214>)
 8008844:	463b      	mov	r3, r7
 8008846:	2b00      	cmp	r3, #0
 8008848:	dc3d      	bgt.n	80088c6 <__ieee754_fmod+0x11a>
 800884a:	4b5f      	ldr	r3, [pc, #380]	; (80089c8 <__ieee754_fmod+0x21c>)
 800884c:	4299      	cmp	r1, r3
 800884e:	db4a      	blt.n	80088e6 <__ieee754_fmod+0x13a>
 8008850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008858:	485b      	ldr	r0, [pc, #364]	; (80089c8 <__ieee754_fmod+0x21c>)
 800885a:	4282      	cmp	r2, r0
 800885c:	db57      	blt.n	800890e <__ieee754_fmod+0x162>
 800885e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008862:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008866:	1a89      	subs	r1, r1, r2
 8008868:	1b98      	subs	r0, r3, r6
 800886a:	eba4 070c 	sub.w	r7, r4, ip
 800886e:	2900      	cmp	r1, #0
 8008870:	d164      	bne.n	800893c <__ieee754_fmod+0x190>
 8008872:	4564      	cmp	r4, ip
 8008874:	bf38      	it	cc
 8008876:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800887a:	2800      	cmp	r0, #0
 800887c:	bfa4      	itt	ge
 800887e:	463c      	movge	r4, r7
 8008880:	4603      	movge	r3, r0
 8008882:	ea53 0104 	orrs.w	r1, r3, r4
 8008886:	d0c5      	beq.n	8008814 <__ieee754_fmod+0x68>
 8008888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800888c:	db6b      	blt.n	8008966 <__ieee754_fmod+0x1ba>
 800888e:	494e      	ldr	r1, [pc, #312]	; (80089c8 <__ieee754_fmod+0x21c>)
 8008890:	428a      	cmp	r2, r1
 8008892:	db6e      	blt.n	8008972 <__ieee754_fmod+0x1c6>
 8008894:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008898:	431d      	orrs	r5, r3
 800889a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800889e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 80088a2:	4620      	mov	r0, r4
 80088a4:	e7a6      	b.n	80087f4 <__ieee754_fmod+0x48>
 80088a6:	3901      	subs	r1, #1
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	e7c1      	b.n	8008830 <__ieee754_fmod+0x84>
 80088ac:	4946      	ldr	r1, [pc, #280]	; (80089c8 <__ieee754_fmod+0x21c>)
 80088ae:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	ddbe      	ble.n	8008834 <__ieee754_fmod+0x88>
 80088b6:	3901      	subs	r1, #1
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	e7fa      	b.n	80088b2 <__ieee754_fmod+0x106>
 80088bc:	ea4f 5128 	mov.w	r1, r8, asr #20
 80088c0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80088c4:	e7b6      	b.n	8008834 <__ieee754_fmod+0x88>
 80088c6:	3a01      	subs	r2, #1
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	e7bc      	b.n	8008846 <__ieee754_fmod+0x9a>
 80088cc:	4a3e      	ldr	r2, [pc, #248]	; (80089c8 <__ieee754_fmod+0x21c>)
 80088ce:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	ddb9      	ble.n	800884a <__ieee754_fmod+0x9e>
 80088d6:	3a01      	subs	r2, #1
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	e7fa      	b.n	80088d2 <__ieee754_fmod+0x126>
 80088dc:	ea4f 522e 	mov.w	r2, lr, asr #20
 80088e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80088e4:	e7b1      	b.n	800884a <__ieee754_fmod+0x9e>
 80088e6:	1a5c      	subs	r4, r3, r1
 80088e8:	2c1f      	cmp	r4, #31
 80088ea:	dc0a      	bgt.n	8008902 <__ieee754_fmod+0x156>
 80088ec:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80088f0:	fa08 f804 	lsl.w	r8, r8, r4
 80088f4:	fa2a f303 	lsr.w	r3, sl, r3
 80088f8:	ea43 0308 	orr.w	r3, r3, r8
 80088fc:	fa0a f404 	lsl.w	r4, sl, r4
 8008900:	e7aa      	b.n	8008858 <__ieee754_fmod+0xac>
 8008902:	4b32      	ldr	r3, [pc, #200]	; (80089cc <__ieee754_fmod+0x220>)
 8008904:	1a5b      	subs	r3, r3, r1
 8008906:	fa0a f303 	lsl.w	r3, sl, r3
 800890a:	2400      	movs	r4, #0
 800890c:	e7a4      	b.n	8008858 <__ieee754_fmod+0xac>
 800890e:	eba0 0c02 	sub.w	ip, r0, r2
 8008912:	f1bc 0f1f 	cmp.w	ip, #31
 8008916:	dc0a      	bgt.n	800892e <__ieee754_fmod+0x182>
 8008918:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800891c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008920:	fa27 f606 	lsr.w	r6, r7, r6
 8008924:	ea46 060e 	orr.w	r6, r6, lr
 8008928:	fa07 fc0c 	lsl.w	ip, r7, ip
 800892c:	e79b      	b.n	8008866 <__ieee754_fmod+0xba>
 800892e:	4e27      	ldr	r6, [pc, #156]	; (80089cc <__ieee754_fmod+0x220>)
 8008930:	1ab6      	subs	r6, r6, r2
 8008932:	fa07 f606 	lsl.w	r6, r7, r6
 8008936:	f04f 0c00 	mov.w	ip, #0
 800893a:	e794      	b.n	8008866 <__ieee754_fmod+0xba>
 800893c:	4564      	cmp	r4, ip
 800893e:	bf38      	it	cc
 8008940:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008944:	2800      	cmp	r0, #0
 8008946:	da05      	bge.n	8008954 <__ieee754_fmod+0x1a8>
 8008948:	0fe0      	lsrs	r0, r4, #31
 800894a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800894e:	0064      	lsls	r4, r4, #1
 8008950:	3901      	subs	r1, #1
 8008952:	e789      	b.n	8008868 <__ieee754_fmod+0xbc>
 8008954:	ea50 0307 	orrs.w	r3, r0, r7
 8008958:	f43f af5c 	beq.w	8008814 <__ieee754_fmod+0x68>
 800895c:	0ffb      	lsrs	r3, r7, #31
 800895e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008962:	007c      	lsls	r4, r7, #1
 8008964:	e7f4      	b.n	8008950 <__ieee754_fmod+0x1a4>
 8008966:	0fe1      	lsrs	r1, r4, #31
 8008968:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800896c:	0064      	lsls	r4, r4, #1
 800896e:	3a01      	subs	r2, #1
 8008970:	e78a      	b.n	8008888 <__ieee754_fmod+0xdc>
 8008972:	1a89      	subs	r1, r1, r2
 8008974:	2914      	cmp	r1, #20
 8008976:	dc0a      	bgt.n	800898e <__ieee754_fmod+0x1e2>
 8008978:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800897c:	fa03 f202 	lsl.w	r2, r3, r2
 8008980:	40cc      	lsrs	r4, r1
 8008982:	4322      	orrs	r2, r4
 8008984:	410b      	asrs	r3, r1
 8008986:	ea43 0105 	orr.w	r1, r3, r5
 800898a:	4610      	mov	r0, r2
 800898c:	e732      	b.n	80087f4 <__ieee754_fmod+0x48>
 800898e:	291f      	cmp	r1, #31
 8008990:	dc07      	bgt.n	80089a2 <__ieee754_fmod+0x1f6>
 8008992:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008996:	40cc      	lsrs	r4, r1
 8008998:	fa03 f202 	lsl.w	r2, r3, r2
 800899c:	4322      	orrs	r2, r4
 800899e:	462b      	mov	r3, r5
 80089a0:	e7f1      	b.n	8008986 <__ieee754_fmod+0x1da>
 80089a2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80089a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089aa:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80089ae:	32e2      	adds	r2, #226	; 0xe2
 80089b0:	fa43 f202 	asr.w	r2, r3, r2
 80089b4:	e7f3      	b.n	800899e <__ieee754_fmod+0x1f2>
 80089b6:	bf00      	nop
 80089b8:	7fefffff 	.word	0x7fefffff
 80089bc:	0800c6b8 	.word	0x0800c6b8
 80089c0:	fffffbed 	.word	0xfffffbed
 80089c4:	7ff00000 	.word	0x7ff00000
 80089c8:	fffffc02 	.word	0xfffffc02
 80089cc:	fffffbe2 	.word	0xfffffbe2

080089d0 <__ieee754_sqrt>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	ec55 4b10 	vmov	r4, r5, d0
 80089d8:	4e55      	ldr	r6, [pc, #340]	; (8008b30 <__ieee754_sqrt+0x160>)
 80089da:	43ae      	bics	r6, r5
 80089dc:	ee10 0a10 	vmov	r0, s0
 80089e0:	ee10 3a10 	vmov	r3, s0
 80089e4:	462a      	mov	r2, r5
 80089e6:	4629      	mov	r1, r5
 80089e8:	d110      	bne.n	8008a0c <__ieee754_sqrt+0x3c>
 80089ea:	ee10 2a10 	vmov	r2, s0
 80089ee:	462b      	mov	r3, r5
 80089f0:	f7f7 fe0a 	bl	8000608 <__aeabi_dmul>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fc4e 	bl	800029c <__adddf3>
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	ec45 4b10 	vmov	d0, r4, r5
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0c:	2d00      	cmp	r5, #0
 8008a0e:	dc10      	bgt.n	8008a32 <__ieee754_sqrt+0x62>
 8008a10:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a14:	4330      	orrs	r0, r6
 8008a16:	d0f5      	beq.n	8008a04 <__ieee754_sqrt+0x34>
 8008a18:	b15d      	cbz	r5, 8008a32 <__ieee754_sqrt+0x62>
 8008a1a:	ee10 2a10 	vmov	r2, s0
 8008a1e:	462b      	mov	r3, r5
 8008a20:	ee10 0a10 	vmov	r0, s0
 8008a24:	f7f7 fc38 	bl	8000298 <__aeabi_dsub>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	f7f7 ff16 	bl	800085c <__aeabi_ddiv>
 8008a30:	e7e6      	b.n	8008a00 <__ieee754_sqrt+0x30>
 8008a32:	1512      	asrs	r2, r2, #20
 8008a34:	d074      	beq.n	8008b20 <__ieee754_sqrt+0x150>
 8008a36:	07d4      	lsls	r4, r2, #31
 8008a38:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008a3c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008a40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a44:	bf5e      	ittt	pl
 8008a46:	0fda      	lsrpl	r2, r3, #31
 8008a48:	005b      	lslpl	r3, r3, #1
 8008a4a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008a4e:	2400      	movs	r4, #0
 8008a50:	0fda      	lsrs	r2, r3, #31
 8008a52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008a56:	107f      	asrs	r7, r7, #1
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	2516      	movs	r5, #22
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008a62:	1886      	adds	r6, r0, r2
 8008a64:	428e      	cmp	r6, r1
 8008a66:	bfde      	ittt	le
 8008a68:	1b89      	suble	r1, r1, r6
 8008a6a:	18b0      	addle	r0, r6, r2
 8008a6c:	18a4      	addle	r4, r4, r2
 8008a6e:	0049      	lsls	r1, r1, #1
 8008a70:	3d01      	subs	r5, #1
 8008a72:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008a76:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008a7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a7e:	d1f0      	bne.n	8008a62 <__ieee754_sqrt+0x92>
 8008a80:	462a      	mov	r2, r5
 8008a82:	f04f 0e20 	mov.w	lr, #32
 8008a86:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008a8a:	4281      	cmp	r1, r0
 8008a8c:	eb06 0c05 	add.w	ip, r6, r5
 8008a90:	dc02      	bgt.n	8008a98 <__ieee754_sqrt+0xc8>
 8008a92:	d113      	bne.n	8008abc <__ieee754_sqrt+0xec>
 8008a94:	459c      	cmp	ip, r3
 8008a96:	d811      	bhi.n	8008abc <__ieee754_sqrt+0xec>
 8008a98:	f1bc 0f00 	cmp.w	ip, #0
 8008a9c:	eb0c 0506 	add.w	r5, ip, r6
 8008aa0:	da43      	bge.n	8008b2a <__ieee754_sqrt+0x15a>
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	db41      	blt.n	8008b2a <__ieee754_sqrt+0x15a>
 8008aa6:	f100 0801 	add.w	r8, r0, #1
 8008aaa:	1a09      	subs	r1, r1, r0
 8008aac:	459c      	cmp	ip, r3
 8008aae:	bf88      	it	hi
 8008ab0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008ab4:	eba3 030c 	sub.w	r3, r3, ip
 8008ab8:	4432      	add	r2, r6
 8008aba:	4640      	mov	r0, r8
 8008abc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008ac0:	f1be 0e01 	subs.w	lr, lr, #1
 8008ac4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008acc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ad0:	d1db      	bne.n	8008a8a <__ieee754_sqrt+0xba>
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	d006      	beq.n	8008ae4 <__ieee754_sqrt+0x114>
 8008ad6:	1c50      	adds	r0, r2, #1
 8008ad8:	bf13      	iteet	ne
 8008ada:	3201      	addne	r2, #1
 8008adc:	3401      	addeq	r4, #1
 8008ade:	4672      	moveq	r2, lr
 8008ae0:	f022 0201 	bicne.w	r2, r2, #1
 8008ae4:	1063      	asrs	r3, r4, #1
 8008ae6:	0852      	lsrs	r2, r2, #1
 8008ae8:	07e1      	lsls	r1, r4, #31
 8008aea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008aee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008af2:	bf48      	it	mi
 8008af4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008af8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008afc:	4614      	mov	r4, r2
 8008afe:	e781      	b.n	8008a04 <__ieee754_sqrt+0x34>
 8008b00:	0ad9      	lsrs	r1, r3, #11
 8008b02:	3815      	subs	r0, #21
 8008b04:	055b      	lsls	r3, r3, #21
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d0fa      	beq.n	8008b00 <__ieee754_sqrt+0x130>
 8008b0a:	02cd      	lsls	r5, r1, #11
 8008b0c:	d50a      	bpl.n	8008b24 <__ieee754_sqrt+0x154>
 8008b0e:	f1c2 0420 	rsb	r4, r2, #32
 8008b12:	fa23 f404 	lsr.w	r4, r3, r4
 8008b16:	1e55      	subs	r5, r2, #1
 8008b18:	4093      	lsls	r3, r2
 8008b1a:	4321      	orrs	r1, r4
 8008b1c:	1b42      	subs	r2, r0, r5
 8008b1e:	e78a      	b.n	8008a36 <__ieee754_sqrt+0x66>
 8008b20:	4610      	mov	r0, r2
 8008b22:	e7f0      	b.n	8008b06 <__ieee754_sqrt+0x136>
 8008b24:	0049      	lsls	r1, r1, #1
 8008b26:	3201      	adds	r2, #1
 8008b28:	e7ef      	b.n	8008b0a <__ieee754_sqrt+0x13a>
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	e7bd      	b.n	8008aaa <__ieee754_sqrt+0xda>
 8008b2e:	bf00      	nop
 8008b30:	7ff00000 	.word	0x7ff00000
 8008b34:	00000000 	.word	0x00000000

08008b38 <atan>:
 8008b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ec55 4b10 	vmov	r4, r5, d0
 8008b40:	4bc3      	ldr	r3, [pc, #780]	; (8008e50 <atan+0x318>)
 8008b42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b46:	429e      	cmp	r6, r3
 8008b48:	46ab      	mov	fp, r5
 8008b4a:	dd18      	ble.n	8008b7e <atan+0x46>
 8008b4c:	4bc1      	ldr	r3, [pc, #772]	; (8008e54 <atan+0x31c>)
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	dc01      	bgt.n	8008b56 <atan+0x1e>
 8008b52:	d109      	bne.n	8008b68 <atan+0x30>
 8008b54:	b144      	cbz	r4, 8008b68 <atan+0x30>
 8008b56:	4622      	mov	r2, r4
 8008b58:	462b      	mov	r3, r5
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	f7f7 fb9d 	bl	800029c <__adddf3>
 8008b62:	4604      	mov	r4, r0
 8008b64:	460d      	mov	r5, r1
 8008b66:	e006      	b.n	8008b76 <atan+0x3e>
 8008b68:	f1bb 0f00 	cmp.w	fp, #0
 8008b6c:	f300 8131 	bgt.w	8008dd2 <atan+0x29a>
 8008b70:	a59b      	add	r5, pc, #620	; (adr r5, 8008de0 <atan+0x2a8>)
 8008b72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b76:	ec45 4b10 	vmov	d0, r4, r5
 8008b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	4bb6      	ldr	r3, [pc, #728]	; (8008e58 <atan+0x320>)
 8008b80:	429e      	cmp	r6, r3
 8008b82:	dc14      	bgt.n	8008bae <atan+0x76>
 8008b84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008b88:	429e      	cmp	r6, r3
 8008b8a:	dc0d      	bgt.n	8008ba8 <atan+0x70>
 8008b8c:	a396      	add	r3, pc, #600	; (adr r3, 8008de8 <atan+0x2b0>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	ee10 0a10 	vmov	r0, s0
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fb80 	bl	800029c <__adddf3>
 8008b9c:	4baf      	ldr	r3, [pc, #700]	; (8008e5c <atan+0x324>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f7f7 ffc2 	bl	8000b28 <__aeabi_dcmpgt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d1e6      	bne.n	8008b76 <atan+0x3e>
 8008ba8:	f04f 3aff 	mov.w	sl, #4294967295
 8008bac:	e02b      	b.n	8008c06 <atan+0xce>
 8008bae:	f000 f963 	bl	8008e78 <fabs>
 8008bb2:	4bab      	ldr	r3, [pc, #684]	; (8008e60 <atan+0x328>)
 8008bb4:	429e      	cmp	r6, r3
 8008bb6:	ec55 4b10 	vmov	r4, r5, d0
 8008bba:	f300 80bf 	bgt.w	8008d3c <atan+0x204>
 8008bbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008bc2:	429e      	cmp	r6, r3
 8008bc4:	f300 80a0 	bgt.w	8008d08 <atan+0x1d0>
 8008bc8:	ee10 2a10 	vmov	r2, s0
 8008bcc:	ee10 0a10 	vmov	r0, s0
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7f7 fb62 	bl	800029c <__adddf3>
 8008bd8:	4ba0      	ldr	r3, [pc, #640]	; (8008e5c <atan+0x324>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f7f7 fb5c 	bl	8000298 <__aeabi_dsub>
 8008be0:	2200      	movs	r2, #0
 8008be2:	4606      	mov	r6, r0
 8008be4:	460f      	mov	r7, r1
 8008be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f7 fb55 	bl	800029c <__adddf3>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fe2f 	bl	800085c <__aeabi_ddiv>
 8008bfe:	f04f 0a00 	mov.w	sl, #0
 8008c02:	4604      	mov	r4, r0
 8008c04:	460d      	mov	r5, r1
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 fcfb 	bl	8000608 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4680      	mov	r8, r0
 8008c18:	4689      	mov	r9, r1
 8008c1a:	f7f7 fcf5 	bl	8000608 <__aeabi_dmul>
 8008c1e:	a374      	add	r3, pc, #464	; (adr r3, 8008df0 <atan+0x2b8>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	4606      	mov	r6, r0
 8008c26:	460f      	mov	r7, r1
 8008c28:	f7f7 fcee 	bl	8000608 <__aeabi_dmul>
 8008c2c:	a372      	add	r3, pc, #456	; (adr r3, 8008df8 <atan+0x2c0>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f7f7 fb33 	bl	800029c <__adddf3>
 8008c36:	4632      	mov	r2, r6
 8008c38:	463b      	mov	r3, r7
 8008c3a:	f7f7 fce5 	bl	8000608 <__aeabi_dmul>
 8008c3e:	a370      	add	r3, pc, #448	; (adr r3, 8008e00 <atan+0x2c8>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f7f7 fb2a 	bl	800029c <__adddf3>
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	a36d      	add	r3, pc, #436	; (adr r3, 8008e08 <atan+0x2d0>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fb21 	bl	800029c <__adddf3>
 8008c5a:	4632      	mov	r2, r6
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	f7f7 fcd3 	bl	8000608 <__aeabi_dmul>
 8008c62:	a36b      	add	r3, pc, #428	; (adr r3, 8008e10 <atan+0x2d8>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f7f7 fb18 	bl	800029c <__adddf3>
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	463b      	mov	r3, r7
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	a368      	add	r3, pc, #416	; (adr r3, 8008e18 <atan+0x2e0>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fb0f 	bl	800029c <__adddf3>
 8008c7e:	4642      	mov	r2, r8
 8008c80:	464b      	mov	r3, r9
 8008c82:	f7f7 fcc1 	bl	8000608 <__aeabi_dmul>
 8008c86:	a366      	add	r3, pc, #408	; (adr r3, 8008e20 <atan+0x2e8>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fcb8 	bl	8000608 <__aeabi_dmul>
 8008c98:	a363      	add	r3, pc, #396	; (adr r3, 8008e28 <atan+0x2f0>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fafb 	bl	8000298 <__aeabi_dsub>
 8008ca2:	4632      	mov	r2, r6
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	f7f7 fcaf 	bl	8000608 <__aeabi_dmul>
 8008caa:	a361      	add	r3, pc, #388	; (adr r3, 8008e30 <atan+0x2f8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 faf2 	bl	8000298 <__aeabi_dsub>
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	f7f7 fca6 	bl	8000608 <__aeabi_dmul>
 8008cbc:	a35e      	add	r3, pc, #376	; (adr r3, 8008e38 <atan+0x300>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f7f7 fae9 	bl	8000298 <__aeabi_dsub>
 8008cc6:	4632      	mov	r2, r6
 8008cc8:	463b      	mov	r3, r7
 8008cca:	f7f7 fc9d 	bl	8000608 <__aeabi_dmul>
 8008cce:	a35c      	add	r3, pc, #368	; (adr r3, 8008e40 <atan+0x308>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f7f7 fae0 	bl	8000298 <__aeabi_dsub>
 8008cd8:	4632      	mov	r2, r6
 8008cda:	463b      	mov	r3, r7
 8008cdc:	f7f7 fc94 	bl	8000608 <__aeabi_dmul>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	f7f7 fad8 	bl	800029c <__adddf3>
 8008cec:	4622      	mov	r2, r4
 8008cee:	462b      	mov	r3, r5
 8008cf0:	f7f7 fc8a 	bl	8000608 <__aeabi_dmul>
 8008cf4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	d14b      	bne.n	8008d96 <atan+0x25e>
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fac9 	bl	8000298 <__aeabi_dsub>
 8008d06:	e72c      	b.n	8008b62 <atan+0x2a>
 8008d08:	ee10 0a10 	vmov	r0, s0
 8008d0c:	4b53      	ldr	r3, [pc, #332]	; (8008e5c <atan+0x324>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 fac1 	bl	8000298 <__aeabi_dsub>
 8008d16:	4b51      	ldr	r3, [pc, #324]	; (8008e5c <atan+0x324>)
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7f7 fabb 	bl	800029c <__adddf3>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	f7f7 fd95 	bl	800085c <__aeabi_ddiv>
 8008d32:	f04f 0a01 	mov.w	sl, #1
 8008d36:	4604      	mov	r4, r0
 8008d38:	460d      	mov	r5, r1
 8008d3a:	e764      	b.n	8008c06 <atan+0xce>
 8008d3c:	4b49      	ldr	r3, [pc, #292]	; (8008e64 <atan+0x32c>)
 8008d3e:	429e      	cmp	r6, r3
 8008d40:	da1d      	bge.n	8008d7e <atan+0x246>
 8008d42:	ee10 0a10 	vmov	r0, s0
 8008d46:	4b48      	ldr	r3, [pc, #288]	; (8008e68 <atan+0x330>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f7f7 faa4 	bl	8000298 <__aeabi_dsub>
 8008d50:	4b45      	ldr	r3, [pc, #276]	; (8008e68 <atan+0x330>)
 8008d52:	4606      	mov	r6, r0
 8008d54:	460f      	mov	r7, r1
 8008d56:	2200      	movs	r2, #0
 8008d58:	4620      	mov	r0, r4
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	f7f7 fc54 	bl	8000608 <__aeabi_dmul>
 8008d60:	4b3e      	ldr	r3, [pc, #248]	; (8008e5c <atan+0x324>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	f7f7 fa9a 	bl	800029c <__adddf3>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fd74 	bl	800085c <__aeabi_ddiv>
 8008d74:	f04f 0a02 	mov.w	sl, #2
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	e743      	b.n	8008c06 <atan+0xce>
 8008d7e:	462b      	mov	r3, r5
 8008d80:	ee10 2a10 	vmov	r2, s0
 8008d84:	4939      	ldr	r1, [pc, #228]	; (8008e6c <atan+0x334>)
 8008d86:	2000      	movs	r0, #0
 8008d88:	f7f7 fd68 	bl	800085c <__aeabi_ddiv>
 8008d8c:	f04f 0a03 	mov.w	sl, #3
 8008d90:	4604      	mov	r4, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	e737      	b.n	8008c06 <atan+0xce>
 8008d96:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <atan+0x338>)
 8008d98:	4e36      	ldr	r6, [pc, #216]	; (8008e74 <atan+0x33c>)
 8008d9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008d9e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008da2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008da6:	f7f7 fa77 	bl	8000298 <__aeabi_dsub>
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	f7f7 fa73 	bl	8000298 <__aeabi_dsub>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008dba:	f7f7 fa6d 	bl	8000298 <__aeabi_dsub>
 8008dbe:	f1bb 0f00 	cmp.w	fp, #0
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	f6bf aed6 	bge.w	8008b76 <atan+0x3e>
 8008dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dce:	461d      	mov	r5, r3
 8008dd0:	e6d1      	b.n	8008b76 <atan+0x3e>
 8008dd2:	a51d      	add	r5, pc, #116	; (adr r5, 8008e48 <atan+0x310>)
 8008dd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dd8:	e6cd      	b.n	8008b76 <atan+0x3e>
 8008dda:	bf00      	nop
 8008ddc:	f3af 8000 	nop.w
 8008de0:	54442d18 	.word	0x54442d18
 8008de4:	bff921fb 	.word	0xbff921fb
 8008de8:	8800759c 	.word	0x8800759c
 8008dec:	7e37e43c 	.word	0x7e37e43c
 8008df0:	e322da11 	.word	0xe322da11
 8008df4:	3f90ad3a 	.word	0x3f90ad3a
 8008df8:	24760deb 	.word	0x24760deb
 8008dfc:	3fa97b4b 	.word	0x3fa97b4b
 8008e00:	a0d03d51 	.word	0xa0d03d51
 8008e04:	3fb10d66 	.word	0x3fb10d66
 8008e08:	c54c206e 	.word	0xc54c206e
 8008e0c:	3fb745cd 	.word	0x3fb745cd
 8008e10:	920083ff 	.word	0x920083ff
 8008e14:	3fc24924 	.word	0x3fc24924
 8008e18:	5555550d 	.word	0x5555550d
 8008e1c:	3fd55555 	.word	0x3fd55555
 8008e20:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e24:	bfa2b444 	.word	0xbfa2b444
 8008e28:	52defd9a 	.word	0x52defd9a
 8008e2c:	3fadde2d 	.word	0x3fadde2d
 8008e30:	af749a6d 	.word	0xaf749a6d
 8008e34:	3fb3b0f2 	.word	0x3fb3b0f2
 8008e38:	fe231671 	.word	0xfe231671
 8008e3c:	3fbc71c6 	.word	0x3fbc71c6
 8008e40:	9998ebc4 	.word	0x9998ebc4
 8008e44:	3fc99999 	.word	0x3fc99999
 8008e48:	54442d18 	.word	0x54442d18
 8008e4c:	3ff921fb 	.word	0x3ff921fb
 8008e50:	440fffff 	.word	0x440fffff
 8008e54:	7ff00000 	.word	0x7ff00000
 8008e58:	3fdbffff 	.word	0x3fdbffff
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	3ff2ffff 	.word	0x3ff2ffff
 8008e64:	40038000 	.word	0x40038000
 8008e68:	3ff80000 	.word	0x3ff80000
 8008e6c:	bff00000 	.word	0xbff00000
 8008e70:	0800c6e8 	.word	0x0800c6e8
 8008e74:	0800c6c8 	.word	0x0800c6c8

08008e78 <fabs>:
 8008e78:	ec51 0b10 	vmov	r0, r1, d0
 8008e7c:	ee10 2a10 	vmov	r2, s0
 8008e80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e84:	ec43 2b10 	vmov	d0, r2, r3
 8008e88:	4770      	bx	lr
 8008e8a:	0000      	movs	r0, r0
 8008e8c:	0000      	movs	r0, r0
	...

08008e90 <nan>:
 8008e90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e98 <nan+0x8>
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	00000000 	.word	0x00000000
 8008e9c:	7ff80000 	.word	0x7ff80000

08008ea0 <__errno>:
 8008ea0:	4b01      	ldr	r3, [pc, #4]	; (8008ea8 <__errno+0x8>)
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	20000048 	.word	0x20000048

08008eac <__libc_init_array>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	4d0d      	ldr	r5, [pc, #52]	; (8008ee4 <__libc_init_array+0x38>)
 8008eb0:	4c0d      	ldr	r4, [pc, #52]	; (8008ee8 <__libc_init_array+0x3c>)
 8008eb2:	1b64      	subs	r4, r4, r5
 8008eb4:	10a4      	asrs	r4, r4, #2
 8008eb6:	2600      	movs	r6, #0
 8008eb8:	42a6      	cmp	r6, r4
 8008eba:	d109      	bne.n	8008ed0 <__libc_init_array+0x24>
 8008ebc:	4d0b      	ldr	r5, [pc, #44]	; (8008eec <__libc_init_array+0x40>)
 8008ebe:	4c0c      	ldr	r4, [pc, #48]	; (8008ef0 <__libc_init_array+0x44>)
 8008ec0:	f002 fd60 	bl	800b984 <_init>
 8008ec4:	1b64      	subs	r4, r4, r5
 8008ec6:	10a4      	asrs	r4, r4, #2
 8008ec8:	2600      	movs	r6, #0
 8008eca:	42a6      	cmp	r6, r4
 8008ecc:	d105      	bne.n	8008eda <__libc_init_array+0x2e>
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed4:	4798      	blx	r3
 8008ed6:	3601      	adds	r6, #1
 8008ed8:	e7ee      	b.n	8008eb8 <__libc_init_array+0xc>
 8008eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ede:	4798      	blx	r3
 8008ee0:	3601      	adds	r6, #1
 8008ee2:	e7f2      	b.n	8008eca <__libc_init_array+0x1e>
 8008ee4:	0800caec 	.word	0x0800caec
 8008ee8:	0800caec 	.word	0x0800caec
 8008eec:	0800caec 	.word	0x0800caec
 8008ef0:	0800caf0 	.word	0x0800caf0

08008ef4 <memcmp>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	3901      	subs	r1, #1
 8008ef8:	4402      	add	r2, r0
 8008efa:	4290      	cmp	r0, r2
 8008efc:	d101      	bne.n	8008f02 <memcmp+0xe>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e005      	b.n	8008f0e <memcmp+0x1a>
 8008f02:	7803      	ldrb	r3, [r0, #0]
 8008f04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d001      	beq.n	8008f10 <memcmp+0x1c>
 8008f0c:	1b18      	subs	r0, r3, r4
 8008f0e:	bd10      	pop	{r4, pc}
 8008f10:	3001      	adds	r0, #1
 8008f12:	e7f2      	b.n	8008efa <memcmp+0x6>

08008f14 <memcpy>:
 8008f14:	440a      	add	r2, r1
 8008f16:	4291      	cmp	r1, r2
 8008f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f1c:	d100      	bne.n	8008f20 <memcpy+0xc>
 8008f1e:	4770      	bx	lr
 8008f20:	b510      	push	{r4, lr}
 8008f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	d1f9      	bne.n	8008f22 <memcpy+0xe>
 8008f2e:	bd10      	pop	{r4, pc}

08008f30 <memset>:
 8008f30:	4402      	add	r2, r0
 8008f32:	4603      	mov	r3, r0
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d100      	bne.n	8008f3a <memset+0xa>
 8008f38:	4770      	bx	lr
 8008f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3e:	e7f9      	b.n	8008f34 <memset+0x4>

08008f40 <__cvt>:
 8008f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	ec55 4b10 	vmov	r4, r5, d0
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	460e      	mov	r6, r1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	462b      	mov	r3, r5
 8008f50:	bfbb      	ittet	lt
 8008f52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f56:	461d      	movlt	r5, r3
 8008f58:	2300      	movge	r3, #0
 8008f5a:	232d      	movlt	r3, #45	; 0x2d
 8008f5c:	700b      	strb	r3, [r1, #0]
 8008f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f64:	4691      	mov	r9, r2
 8008f66:	f023 0820 	bic.w	r8, r3, #32
 8008f6a:	bfbc      	itt	lt
 8008f6c:	4622      	movlt	r2, r4
 8008f6e:	4614      	movlt	r4, r2
 8008f70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f74:	d005      	beq.n	8008f82 <__cvt+0x42>
 8008f76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f7a:	d100      	bne.n	8008f7e <__cvt+0x3e>
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	2102      	movs	r1, #2
 8008f80:	e000      	b.n	8008f84 <__cvt+0x44>
 8008f82:	2103      	movs	r1, #3
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	ab02      	add	r3, sp, #8
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	ec45 4b10 	vmov	d0, r4, r5
 8008f90:	4653      	mov	r3, sl
 8008f92:	4632      	mov	r2, r6
 8008f94:	f000 fce4 	bl	8009960 <_dtoa_r>
 8008f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	d102      	bne.n	8008fa6 <__cvt+0x66>
 8008fa0:	f019 0f01 	tst.w	r9, #1
 8008fa4:	d022      	beq.n	8008fec <__cvt+0xac>
 8008fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008faa:	eb07 0906 	add.w	r9, r7, r6
 8008fae:	d110      	bne.n	8008fd2 <__cvt+0x92>
 8008fb0:	783b      	ldrb	r3, [r7, #0]
 8008fb2:	2b30      	cmp	r3, #48	; 0x30
 8008fb4:	d10a      	bne.n	8008fcc <__cvt+0x8c>
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 fd8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fc2:	b918      	cbnz	r0, 8008fcc <__cvt+0x8c>
 8008fc4:	f1c6 0601 	rsb	r6, r6, #1
 8008fc8:	f8ca 6000 	str.w	r6, [sl]
 8008fcc:	f8da 3000 	ldr.w	r3, [sl]
 8008fd0:	4499      	add	r9, r3
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fde:	b108      	cbz	r0, 8008fe4 <__cvt+0xa4>
 8008fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fe4:	2230      	movs	r2, #48	; 0x30
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	454b      	cmp	r3, r9
 8008fea:	d307      	bcc.n	8008ffc <__cvt+0xbc>
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff0:	1bdb      	subs	r3, r3, r7
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	b004      	add	sp, #16
 8008ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffc:	1c59      	adds	r1, r3, #1
 8008ffe:	9103      	str	r1, [sp, #12]
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e7f0      	b.n	8008fe6 <__cvt+0xa6>

08009004 <__exponent>:
 8009004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009006:	4603      	mov	r3, r0
 8009008:	2900      	cmp	r1, #0
 800900a:	bfb8      	it	lt
 800900c:	4249      	neglt	r1, r1
 800900e:	f803 2b02 	strb.w	r2, [r3], #2
 8009012:	bfb4      	ite	lt
 8009014:	222d      	movlt	r2, #45	; 0x2d
 8009016:	222b      	movge	r2, #43	; 0x2b
 8009018:	2909      	cmp	r1, #9
 800901a:	7042      	strb	r2, [r0, #1]
 800901c:	dd2a      	ble.n	8009074 <__exponent+0x70>
 800901e:	f10d 0407 	add.w	r4, sp, #7
 8009022:	46a4      	mov	ip, r4
 8009024:	270a      	movs	r7, #10
 8009026:	46a6      	mov	lr, r4
 8009028:	460a      	mov	r2, r1
 800902a:	fb91 f6f7 	sdiv	r6, r1, r7
 800902e:	fb07 1516 	mls	r5, r7, r6, r1
 8009032:	3530      	adds	r5, #48	; 0x30
 8009034:	2a63      	cmp	r2, #99	; 0x63
 8009036:	f104 34ff 	add.w	r4, r4, #4294967295
 800903a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800903e:	4631      	mov	r1, r6
 8009040:	dcf1      	bgt.n	8009026 <__exponent+0x22>
 8009042:	3130      	adds	r1, #48	; 0x30
 8009044:	f1ae 0502 	sub.w	r5, lr, #2
 8009048:	f804 1c01 	strb.w	r1, [r4, #-1]
 800904c:	1c44      	adds	r4, r0, #1
 800904e:	4629      	mov	r1, r5
 8009050:	4561      	cmp	r1, ip
 8009052:	d30a      	bcc.n	800906a <__exponent+0x66>
 8009054:	f10d 0209 	add.w	r2, sp, #9
 8009058:	eba2 020e 	sub.w	r2, r2, lr
 800905c:	4565      	cmp	r5, ip
 800905e:	bf88      	it	hi
 8009060:	2200      	movhi	r2, #0
 8009062:	4413      	add	r3, r2
 8009064:	1a18      	subs	r0, r3, r0
 8009066:	b003      	add	sp, #12
 8009068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800906e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009072:	e7ed      	b.n	8009050 <__exponent+0x4c>
 8009074:	2330      	movs	r3, #48	; 0x30
 8009076:	3130      	adds	r1, #48	; 0x30
 8009078:	7083      	strb	r3, [r0, #2]
 800907a:	70c1      	strb	r1, [r0, #3]
 800907c:	1d03      	adds	r3, r0, #4
 800907e:	e7f1      	b.n	8009064 <__exponent+0x60>

08009080 <_printf_float>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	ed2d 8b02 	vpush	{d8}
 8009088:	b08d      	sub	sp, #52	; 0x34
 800908a:	460c      	mov	r4, r1
 800908c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009090:	4616      	mov	r6, r2
 8009092:	461f      	mov	r7, r3
 8009094:	4605      	mov	r5, r0
 8009096:	f001 fb47 	bl	800a728 <_localeconv_r>
 800909a:	f8d0 a000 	ldr.w	sl, [r0]
 800909e:	4650      	mov	r0, sl
 80090a0:	f7f7 f89e 	bl	80001e0 <strlen>
 80090a4:	2300      	movs	r3, #0
 80090a6:	930a      	str	r3, [sp, #40]	; 0x28
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	f8d8 3000 	ldr.w	r3, [r8]
 80090b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090b4:	3307      	adds	r3, #7
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	f103 0208 	add.w	r2, r3, #8
 80090be:	f8c8 2000 	str.w	r2, [r8]
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090d2:	9307      	str	r3, [sp, #28]
 80090d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80090d8:	ee08 0a10 	vmov	s16, r0
 80090dc:	4b9f      	ldr	r3, [pc, #636]	; (800935c <_printf_float+0x2dc>)
 80090de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	f7f7 fd29 	bl	8000b3c <__aeabi_dcmpun>
 80090ea:	bb88      	cbnz	r0, 8009150 <_printf_float+0xd0>
 80090ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090f0:	4b9a      	ldr	r3, [pc, #616]	; (800935c <_printf_float+0x2dc>)
 80090f2:	f04f 32ff 	mov.w	r2, #4294967295
 80090f6:	f7f7 fd03 	bl	8000b00 <__aeabi_dcmple>
 80090fa:	bb48      	cbnz	r0, 8009150 <_printf_float+0xd0>
 80090fc:	2200      	movs	r2, #0
 80090fe:	2300      	movs	r3, #0
 8009100:	4640      	mov	r0, r8
 8009102:	4649      	mov	r1, r9
 8009104:	f7f7 fcf2 	bl	8000aec <__aeabi_dcmplt>
 8009108:	b110      	cbz	r0, 8009110 <_printf_float+0x90>
 800910a:	232d      	movs	r3, #45	; 0x2d
 800910c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009110:	4b93      	ldr	r3, [pc, #588]	; (8009360 <_printf_float+0x2e0>)
 8009112:	4894      	ldr	r0, [pc, #592]	; (8009364 <_printf_float+0x2e4>)
 8009114:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009118:	bf94      	ite	ls
 800911a:	4698      	movls	r8, r3
 800911c:	4680      	movhi	r8, r0
 800911e:	2303      	movs	r3, #3
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	f023 0204 	bic.w	r2, r3, #4
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	f04f 0900 	mov.w	r9, #0
 800912e:	9700      	str	r7, [sp, #0]
 8009130:	4633      	mov	r3, r6
 8009132:	aa0b      	add	r2, sp, #44	; 0x2c
 8009134:	4621      	mov	r1, r4
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f9d8 	bl	80094ec <_printf_common>
 800913c:	3001      	adds	r0, #1
 800913e:	f040 8090 	bne.w	8009262 <_printf_float+0x1e2>
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	b00d      	add	sp, #52	; 0x34
 8009148:	ecbd 8b02 	vpop	{d8}
 800914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 fcf0 	bl	8000b3c <__aeabi_dcmpun>
 800915c:	b140      	cbz	r0, 8009170 <_printf_float+0xf0>
 800915e:	464b      	mov	r3, r9
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfbc      	itt	lt
 8009164:	232d      	movlt	r3, #45	; 0x2d
 8009166:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800916a:	487f      	ldr	r0, [pc, #508]	; (8009368 <_printf_float+0x2e8>)
 800916c:	4b7f      	ldr	r3, [pc, #508]	; (800936c <_printf_float+0x2ec>)
 800916e:	e7d1      	b.n	8009114 <_printf_float+0x94>
 8009170:	6863      	ldr	r3, [r4, #4]
 8009172:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009176:	9206      	str	r2, [sp, #24]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	d13f      	bne.n	80091fc <_printf_float+0x17c>
 800917c:	2306      	movs	r3, #6
 800917e:	6063      	str	r3, [r4, #4]
 8009180:	9b05      	ldr	r3, [sp, #20]
 8009182:	6861      	ldr	r1, [r4, #4]
 8009184:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009188:	2300      	movs	r3, #0
 800918a:	9303      	str	r3, [sp, #12]
 800918c:	ab0a      	add	r3, sp, #40	; 0x28
 800918e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009192:	ab09      	add	r3, sp, #36	; 0x24
 8009194:	ec49 8b10 	vmov	d0, r8, r9
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	6022      	str	r2, [r4, #0]
 800919c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091a0:	4628      	mov	r0, r5
 80091a2:	f7ff fecd 	bl	8008f40 <__cvt>
 80091a6:	9b06      	ldr	r3, [sp, #24]
 80091a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091aa:	2b47      	cmp	r3, #71	; 0x47
 80091ac:	4680      	mov	r8, r0
 80091ae:	d108      	bne.n	80091c2 <_printf_float+0x142>
 80091b0:	1cc8      	adds	r0, r1, #3
 80091b2:	db02      	blt.n	80091ba <_printf_float+0x13a>
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	4299      	cmp	r1, r3
 80091b8:	dd41      	ble.n	800923e <_printf_float+0x1be>
 80091ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80091be:	fa5f fb8b 	uxtb.w	fp, fp
 80091c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091c6:	d820      	bhi.n	800920a <_printf_float+0x18a>
 80091c8:	3901      	subs	r1, #1
 80091ca:	465a      	mov	r2, fp
 80091cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091d0:	9109      	str	r1, [sp, #36]	; 0x24
 80091d2:	f7ff ff17 	bl	8009004 <__exponent>
 80091d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091d8:	1813      	adds	r3, r2, r0
 80091da:	2a01      	cmp	r2, #1
 80091dc:	4681      	mov	r9, r0
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	dc02      	bgt.n	80091e8 <_printf_float+0x168>
 80091e2:	6822      	ldr	r2, [r4, #0]
 80091e4:	07d2      	lsls	r2, r2, #31
 80091e6:	d501      	bpl.n	80091ec <_printf_float+0x16c>
 80091e8:	3301      	adds	r3, #1
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d09c      	beq.n	800912e <_printf_float+0xae>
 80091f4:	232d      	movs	r3, #45	; 0x2d
 80091f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fa:	e798      	b.n	800912e <_printf_float+0xae>
 80091fc:	9a06      	ldr	r2, [sp, #24]
 80091fe:	2a47      	cmp	r2, #71	; 0x47
 8009200:	d1be      	bne.n	8009180 <_printf_float+0x100>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1bc      	bne.n	8009180 <_printf_float+0x100>
 8009206:	2301      	movs	r3, #1
 8009208:	e7b9      	b.n	800917e <_printf_float+0xfe>
 800920a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800920e:	d118      	bne.n	8009242 <_printf_float+0x1c2>
 8009210:	2900      	cmp	r1, #0
 8009212:	6863      	ldr	r3, [r4, #4]
 8009214:	dd0b      	ble.n	800922e <_printf_float+0x1ae>
 8009216:	6121      	str	r1, [r4, #16]
 8009218:	b913      	cbnz	r3, 8009220 <_printf_float+0x1a0>
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	07d0      	lsls	r0, r2, #31
 800921e:	d502      	bpl.n	8009226 <_printf_float+0x1a6>
 8009220:	3301      	adds	r3, #1
 8009222:	440b      	add	r3, r1
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	65a1      	str	r1, [r4, #88]	; 0x58
 8009228:	f04f 0900 	mov.w	r9, #0
 800922c:	e7de      	b.n	80091ec <_printf_float+0x16c>
 800922e:	b913      	cbnz	r3, 8009236 <_printf_float+0x1b6>
 8009230:	6822      	ldr	r2, [r4, #0]
 8009232:	07d2      	lsls	r2, r2, #31
 8009234:	d501      	bpl.n	800923a <_printf_float+0x1ba>
 8009236:	3302      	adds	r3, #2
 8009238:	e7f4      	b.n	8009224 <_printf_float+0x1a4>
 800923a:	2301      	movs	r3, #1
 800923c:	e7f2      	b.n	8009224 <_printf_float+0x1a4>
 800923e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009244:	4299      	cmp	r1, r3
 8009246:	db05      	blt.n	8009254 <_printf_float+0x1d4>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	6121      	str	r1, [r4, #16]
 800924c:	07d8      	lsls	r0, r3, #31
 800924e:	d5ea      	bpl.n	8009226 <_printf_float+0x1a6>
 8009250:	1c4b      	adds	r3, r1, #1
 8009252:	e7e7      	b.n	8009224 <_printf_float+0x1a4>
 8009254:	2900      	cmp	r1, #0
 8009256:	bfd4      	ite	le
 8009258:	f1c1 0202 	rsble	r2, r1, #2
 800925c:	2201      	movgt	r2, #1
 800925e:	4413      	add	r3, r2
 8009260:	e7e0      	b.n	8009224 <_printf_float+0x1a4>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	055a      	lsls	r2, r3, #21
 8009266:	d407      	bmi.n	8009278 <_printf_float+0x1f8>
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	4642      	mov	r2, r8
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	d12c      	bne.n	80092d0 <_printf_float+0x250>
 8009276:	e764      	b.n	8009142 <_printf_float+0xc2>
 8009278:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800927c:	f240 80e0 	bls.w	8009440 <_printf_float+0x3c0>
 8009280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009284:	2200      	movs	r2, #0
 8009286:	2300      	movs	r3, #0
 8009288:	f7f7 fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800928c:	2800      	cmp	r0, #0
 800928e:	d034      	beq.n	80092fa <_printf_float+0x27a>
 8009290:	4a37      	ldr	r2, [pc, #220]	; (8009370 <_printf_float+0x2f0>)
 8009292:	2301      	movs	r3, #1
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	f43f af51 	beq.w	8009142 <_printf_float+0xc2>
 80092a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092a4:	429a      	cmp	r2, r3
 80092a6:	db02      	blt.n	80092ae <_printf_float+0x22e>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	07d8      	lsls	r0, r3, #31
 80092ac:	d510      	bpl.n	80092d0 <_printf_float+0x250>
 80092ae:	ee18 3a10 	vmov	r3, s16
 80092b2:	4652      	mov	r2, sl
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	f43f af41 	beq.w	8009142 <_printf_float+0xc2>
 80092c0:	f04f 0800 	mov.w	r8, #0
 80092c4:	f104 091a 	add.w	r9, r4, #26
 80092c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ca:	3b01      	subs	r3, #1
 80092cc:	4543      	cmp	r3, r8
 80092ce:	dc09      	bgt.n	80092e4 <_printf_float+0x264>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	079b      	lsls	r3, r3, #30
 80092d4:	f100 8105 	bmi.w	80094e2 <_printf_float+0x462>
 80092d8:	68e0      	ldr	r0, [r4, #12]
 80092da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092dc:	4298      	cmp	r0, r3
 80092de:	bfb8      	it	lt
 80092e0:	4618      	movlt	r0, r3
 80092e2:	e730      	b.n	8009146 <_printf_float+0xc6>
 80092e4:	2301      	movs	r3, #1
 80092e6:	464a      	mov	r2, r9
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f af27 	beq.w	8009142 <_printf_float+0xc2>
 80092f4:	f108 0801 	add.w	r8, r8, #1
 80092f8:	e7e6      	b.n	80092c8 <_printf_float+0x248>
 80092fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	dc39      	bgt.n	8009374 <_printf_float+0x2f4>
 8009300:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <_printf_float+0x2f0>)
 8009302:	2301      	movs	r3, #1
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	f43f af19 	beq.w	8009142 <_printf_float+0xc2>
 8009310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009314:	4313      	orrs	r3, r2
 8009316:	d102      	bne.n	800931e <_printf_float+0x29e>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	07d9      	lsls	r1, r3, #31
 800931c:	d5d8      	bpl.n	80092d0 <_printf_float+0x250>
 800931e:	ee18 3a10 	vmov	r3, s16
 8009322:	4652      	mov	r2, sl
 8009324:	4631      	mov	r1, r6
 8009326:	4628      	mov	r0, r5
 8009328:	47b8      	blx	r7
 800932a:	3001      	adds	r0, #1
 800932c:	f43f af09 	beq.w	8009142 <_printf_float+0xc2>
 8009330:	f04f 0900 	mov.w	r9, #0
 8009334:	f104 0a1a 	add.w	sl, r4, #26
 8009338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933a:	425b      	negs	r3, r3
 800933c:	454b      	cmp	r3, r9
 800933e:	dc01      	bgt.n	8009344 <_printf_float+0x2c4>
 8009340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009342:	e792      	b.n	800926a <_printf_float+0x1ea>
 8009344:	2301      	movs	r3, #1
 8009346:	4652      	mov	r2, sl
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f aef7 	beq.w	8009142 <_printf_float+0xc2>
 8009354:	f109 0901 	add.w	r9, r9, #1
 8009358:	e7ee      	b.n	8009338 <_printf_float+0x2b8>
 800935a:	bf00      	nop
 800935c:	7fefffff 	.word	0x7fefffff
 8009360:	0800c70c 	.word	0x0800c70c
 8009364:	0800c710 	.word	0x0800c710
 8009368:	0800c718 	.word	0x0800c718
 800936c:	0800c714 	.word	0x0800c714
 8009370:	0800c71c 	.word	0x0800c71c
 8009374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009376:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009378:	429a      	cmp	r2, r3
 800937a:	bfa8      	it	ge
 800937c:	461a      	movge	r2, r3
 800937e:	2a00      	cmp	r2, #0
 8009380:	4691      	mov	r9, r2
 8009382:	dc37      	bgt.n	80093f4 <_printf_float+0x374>
 8009384:	f04f 0b00 	mov.w	fp, #0
 8009388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800938c:	f104 021a 	add.w	r2, r4, #26
 8009390:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009392:	9305      	str	r3, [sp, #20]
 8009394:	eba3 0309 	sub.w	r3, r3, r9
 8009398:	455b      	cmp	r3, fp
 800939a:	dc33      	bgt.n	8009404 <_printf_float+0x384>
 800939c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a0:	429a      	cmp	r2, r3
 80093a2:	db3b      	blt.n	800941c <_printf_float+0x39c>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	07da      	lsls	r2, r3, #31
 80093a8:	d438      	bmi.n	800941c <_printf_float+0x39c>
 80093aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ac:	9a05      	ldr	r2, [sp, #20]
 80093ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093b0:	1a9a      	subs	r2, r3, r2
 80093b2:	eba3 0901 	sub.w	r9, r3, r1
 80093b6:	4591      	cmp	r9, r2
 80093b8:	bfa8      	it	ge
 80093ba:	4691      	movge	r9, r2
 80093bc:	f1b9 0f00 	cmp.w	r9, #0
 80093c0:	dc35      	bgt.n	800942e <_printf_float+0x3ae>
 80093c2:	f04f 0800 	mov.w	r8, #0
 80093c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093ca:	f104 0a1a 	add.w	sl, r4, #26
 80093ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	eba3 0309 	sub.w	r3, r3, r9
 80093d8:	4543      	cmp	r3, r8
 80093da:	f77f af79 	ble.w	80092d0 <_printf_float+0x250>
 80093de:	2301      	movs	r3, #1
 80093e0:	4652      	mov	r2, sl
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	f43f aeaa 	beq.w	8009142 <_printf_float+0xc2>
 80093ee:	f108 0801 	add.w	r8, r8, #1
 80093f2:	e7ec      	b.n	80093ce <_printf_float+0x34e>
 80093f4:	4613      	mov	r3, r2
 80093f6:	4631      	mov	r1, r6
 80093f8:	4642      	mov	r2, r8
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d1c0      	bne.n	8009384 <_printf_float+0x304>
 8009402:	e69e      	b.n	8009142 <_printf_float+0xc2>
 8009404:	2301      	movs	r3, #1
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	9205      	str	r2, [sp, #20]
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	f43f ae97 	beq.w	8009142 <_printf_float+0xc2>
 8009414:	9a05      	ldr	r2, [sp, #20]
 8009416:	f10b 0b01 	add.w	fp, fp, #1
 800941a:	e7b9      	b.n	8009390 <_printf_float+0x310>
 800941c:	ee18 3a10 	vmov	r3, s16
 8009420:	4652      	mov	r2, sl
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	47b8      	blx	r7
 8009428:	3001      	adds	r0, #1
 800942a:	d1be      	bne.n	80093aa <_printf_float+0x32a>
 800942c:	e689      	b.n	8009142 <_printf_float+0xc2>
 800942e:	9a05      	ldr	r2, [sp, #20]
 8009430:	464b      	mov	r3, r9
 8009432:	4442      	add	r2, r8
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	d1c1      	bne.n	80093c2 <_printf_float+0x342>
 800943e:	e680      	b.n	8009142 <_printf_float+0xc2>
 8009440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009442:	2a01      	cmp	r2, #1
 8009444:	dc01      	bgt.n	800944a <_printf_float+0x3ca>
 8009446:	07db      	lsls	r3, r3, #31
 8009448:	d538      	bpl.n	80094bc <_printf_float+0x43c>
 800944a:	2301      	movs	r3, #1
 800944c:	4642      	mov	r2, r8
 800944e:	4631      	mov	r1, r6
 8009450:	4628      	mov	r0, r5
 8009452:	47b8      	blx	r7
 8009454:	3001      	adds	r0, #1
 8009456:	f43f ae74 	beq.w	8009142 <_printf_float+0xc2>
 800945a:	ee18 3a10 	vmov	r3, s16
 800945e:	4652      	mov	r2, sl
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f ae6b 	beq.w	8009142 <_printf_float+0xc2>
 800946c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009470:	2200      	movs	r2, #0
 8009472:	2300      	movs	r3, #0
 8009474:	f7f7 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 8009478:	b9d8      	cbnz	r0, 80094b2 <_printf_float+0x432>
 800947a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947c:	f108 0201 	add.w	r2, r8, #1
 8009480:	3b01      	subs	r3, #1
 8009482:	4631      	mov	r1, r6
 8009484:	4628      	mov	r0, r5
 8009486:	47b8      	blx	r7
 8009488:	3001      	adds	r0, #1
 800948a:	d10e      	bne.n	80094aa <_printf_float+0x42a>
 800948c:	e659      	b.n	8009142 <_printf_float+0xc2>
 800948e:	2301      	movs	r3, #1
 8009490:	4652      	mov	r2, sl
 8009492:	4631      	mov	r1, r6
 8009494:	4628      	mov	r0, r5
 8009496:	47b8      	blx	r7
 8009498:	3001      	adds	r0, #1
 800949a:	f43f ae52 	beq.w	8009142 <_printf_float+0xc2>
 800949e:	f108 0801 	add.w	r8, r8, #1
 80094a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a4:	3b01      	subs	r3, #1
 80094a6:	4543      	cmp	r3, r8
 80094a8:	dcf1      	bgt.n	800948e <_printf_float+0x40e>
 80094aa:	464b      	mov	r3, r9
 80094ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094b0:	e6dc      	b.n	800926c <_printf_float+0x1ec>
 80094b2:	f04f 0800 	mov.w	r8, #0
 80094b6:	f104 0a1a 	add.w	sl, r4, #26
 80094ba:	e7f2      	b.n	80094a2 <_printf_float+0x422>
 80094bc:	2301      	movs	r3, #1
 80094be:	4642      	mov	r2, r8
 80094c0:	e7df      	b.n	8009482 <_printf_float+0x402>
 80094c2:	2301      	movs	r3, #1
 80094c4:	464a      	mov	r2, r9
 80094c6:	4631      	mov	r1, r6
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f ae38 	beq.w	8009142 <_printf_float+0xc2>
 80094d2:	f108 0801 	add.w	r8, r8, #1
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094da:	1a5b      	subs	r3, r3, r1
 80094dc:	4543      	cmp	r3, r8
 80094de:	dcf0      	bgt.n	80094c2 <_printf_float+0x442>
 80094e0:	e6fa      	b.n	80092d8 <_printf_float+0x258>
 80094e2:	f04f 0800 	mov.w	r8, #0
 80094e6:	f104 0919 	add.w	r9, r4, #25
 80094ea:	e7f4      	b.n	80094d6 <_printf_float+0x456>

080094ec <_printf_common>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	4616      	mov	r6, r2
 80094f2:	4699      	mov	r9, r3
 80094f4:	688a      	ldr	r2, [r1, #8]
 80094f6:	690b      	ldr	r3, [r1, #16]
 80094f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	bfb8      	it	lt
 8009500:	4613      	movlt	r3, r2
 8009502:	6033      	str	r3, [r6, #0]
 8009504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009508:	4607      	mov	r7, r0
 800950a:	460c      	mov	r4, r1
 800950c:	b10a      	cbz	r2, 8009512 <_printf_common+0x26>
 800950e:	3301      	adds	r3, #1
 8009510:	6033      	str	r3, [r6, #0]
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	0699      	lsls	r1, r3, #26
 8009516:	bf42      	ittt	mi
 8009518:	6833      	ldrmi	r3, [r6, #0]
 800951a:	3302      	addmi	r3, #2
 800951c:	6033      	strmi	r3, [r6, #0]
 800951e:	6825      	ldr	r5, [r4, #0]
 8009520:	f015 0506 	ands.w	r5, r5, #6
 8009524:	d106      	bne.n	8009534 <_printf_common+0x48>
 8009526:	f104 0a19 	add.w	sl, r4, #25
 800952a:	68e3      	ldr	r3, [r4, #12]
 800952c:	6832      	ldr	r2, [r6, #0]
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	42ab      	cmp	r3, r5
 8009532:	dc26      	bgt.n	8009582 <_printf_common+0x96>
 8009534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009538:	1e13      	subs	r3, r2, #0
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	bf18      	it	ne
 800953e:	2301      	movne	r3, #1
 8009540:	0692      	lsls	r2, r2, #26
 8009542:	d42b      	bmi.n	800959c <_printf_common+0xb0>
 8009544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009548:	4649      	mov	r1, r9
 800954a:	4638      	mov	r0, r7
 800954c:	47c0      	blx	r8
 800954e:	3001      	adds	r0, #1
 8009550:	d01e      	beq.n	8009590 <_printf_common+0xa4>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	68e5      	ldr	r5, [r4, #12]
 8009556:	6832      	ldr	r2, [r6, #0]
 8009558:	f003 0306 	and.w	r3, r3, #6
 800955c:	2b04      	cmp	r3, #4
 800955e:	bf08      	it	eq
 8009560:	1aad      	subeq	r5, r5, r2
 8009562:	68a3      	ldr	r3, [r4, #8]
 8009564:	6922      	ldr	r2, [r4, #16]
 8009566:	bf0c      	ite	eq
 8009568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800956c:	2500      	movne	r5, #0
 800956e:	4293      	cmp	r3, r2
 8009570:	bfc4      	itt	gt
 8009572:	1a9b      	subgt	r3, r3, r2
 8009574:	18ed      	addgt	r5, r5, r3
 8009576:	2600      	movs	r6, #0
 8009578:	341a      	adds	r4, #26
 800957a:	42b5      	cmp	r5, r6
 800957c:	d11a      	bne.n	80095b4 <_printf_common+0xc8>
 800957e:	2000      	movs	r0, #0
 8009580:	e008      	b.n	8009594 <_printf_common+0xa8>
 8009582:	2301      	movs	r3, #1
 8009584:	4652      	mov	r2, sl
 8009586:	4649      	mov	r1, r9
 8009588:	4638      	mov	r0, r7
 800958a:	47c0      	blx	r8
 800958c:	3001      	adds	r0, #1
 800958e:	d103      	bne.n	8009598 <_printf_common+0xac>
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009598:	3501      	adds	r5, #1
 800959a:	e7c6      	b.n	800952a <_printf_common+0x3e>
 800959c:	18e1      	adds	r1, r4, r3
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	2030      	movs	r0, #48	; 0x30
 80095a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095a6:	4422      	add	r2, r4
 80095a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095b0:	3302      	adds	r3, #2
 80095b2:	e7c7      	b.n	8009544 <_printf_common+0x58>
 80095b4:	2301      	movs	r3, #1
 80095b6:	4622      	mov	r2, r4
 80095b8:	4649      	mov	r1, r9
 80095ba:	4638      	mov	r0, r7
 80095bc:	47c0      	blx	r8
 80095be:	3001      	adds	r0, #1
 80095c0:	d0e6      	beq.n	8009590 <_printf_common+0xa4>
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7d9      	b.n	800957a <_printf_common+0x8e>
	...

080095c8 <_printf_i>:
 80095c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	7e0f      	ldrb	r7, [r1, #24]
 80095ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095d0:	2f78      	cmp	r7, #120	; 0x78
 80095d2:	4691      	mov	r9, r2
 80095d4:	4680      	mov	r8, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	469a      	mov	sl, r3
 80095da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095de:	d807      	bhi.n	80095f0 <_printf_i+0x28>
 80095e0:	2f62      	cmp	r7, #98	; 0x62
 80095e2:	d80a      	bhi.n	80095fa <_printf_i+0x32>
 80095e4:	2f00      	cmp	r7, #0
 80095e6:	f000 80d8 	beq.w	800979a <_printf_i+0x1d2>
 80095ea:	2f58      	cmp	r7, #88	; 0x58
 80095ec:	f000 80a3 	beq.w	8009736 <_printf_i+0x16e>
 80095f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095f8:	e03a      	b.n	8009670 <_printf_i+0xa8>
 80095fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095fe:	2b15      	cmp	r3, #21
 8009600:	d8f6      	bhi.n	80095f0 <_printf_i+0x28>
 8009602:	a101      	add	r1, pc, #4	; (adr r1, 8009608 <_printf_i+0x40>)
 8009604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009608:	08009661 	.word	0x08009661
 800960c:	08009675 	.word	0x08009675
 8009610:	080095f1 	.word	0x080095f1
 8009614:	080095f1 	.word	0x080095f1
 8009618:	080095f1 	.word	0x080095f1
 800961c:	080095f1 	.word	0x080095f1
 8009620:	08009675 	.word	0x08009675
 8009624:	080095f1 	.word	0x080095f1
 8009628:	080095f1 	.word	0x080095f1
 800962c:	080095f1 	.word	0x080095f1
 8009630:	080095f1 	.word	0x080095f1
 8009634:	08009781 	.word	0x08009781
 8009638:	080096a5 	.word	0x080096a5
 800963c:	08009763 	.word	0x08009763
 8009640:	080095f1 	.word	0x080095f1
 8009644:	080095f1 	.word	0x080095f1
 8009648:	080097a3 	.word	0x080097a3
 800964c:	080095f1 	.word	0x080095f1
 8009650:	080096a5 	.word	0x080096a5
 8009654:	080095f1 	.word	0x080095f1
 8009658:	080095f1 	.word	0x080095f1
 800965c:	0800976b 	.word	0x0800976b
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	1d1a      	adds	r2, r3, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	602a      	str	r2, [r5, #0]
 8009668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800966c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009670:	2301      	movs	r3, #1
 8009672:	e0a3      	b.n	80097bc <_printf_i+0x1f4>
 8009674:	6820      	ldr	r0, [r4, #0]
 8009676:	6829      	ldr	r1, [r5, #0]
 8009678:	0606      	lsls	r6, r0, #24
 800967a:	f101 0304 	add.w	r3, r1, #4
 800967e:	d50a      	bpl.n	8009696 <_printf_i+0xce>
 8009680:	680e      	ldr	r6, [r1, #0]
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	2e00      	cmp	r6, #0
 8009686:	da03      	bge.n	8009690 <_printf_i+0xc8>
 8009688:	232d      	movs	r3, #45	; 0x2d
 800968a:	4276      	negs	r6, r6
 800968c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009690:	485e      	ldr	r0, [pc, #376]	; (800980c <_printf_i+0x244>)
 8009692:	230a      	movs	r3, #10
 8009694:	e019      	b.n	80096ca <_printf_i+0x102>
 8009696:	680e      	ldr	r6, [r1, #0]
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800969e:	bf18      	it	ne
 80096a0:	b236      	sxthne	r6, r6
 80096a2:	e7ef      	b.n	8009684 <_printf_i+0xbc>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	1d19      	adds	r1, r3, #4
 80096aa:	6029      	str	r1, [r5, #0]
 80096ac:	0601      	lsls	r1, r0, #24
 80096ae:	d501      	bpl.n	80096b4 <_printf_i+0xec>
 80096b0:	681e      	ldr	r6, [r3, #0]
 80096b2:	e002      	b.n	80096ba <_printf_i+0xf2>
 80096b4:	0646      	lsls	r6, r0, #25
 80096b6:	d5fb      	bpl.n	80096b0 <_printf_i+0xe8>
 80096b8:	881e      	ldrh	r6, [r3, #0]
 80096ba:	4854      	ldr	r0, [pc, #336]	; (800980c <_printf_i+0x244>)
 80096bc:	2f6f      	cmp	r7, #111	; 0x6f
 80096be:	bf0c      	ite	eq
 80096c0:	2308      	moveq	r3, #8
 80096c2:	230a      	movne	r3, #10
 80096c4:	2100      	movs	r1, #0
 80096c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096ca:	6865      	ldr	r5, [r4, #4]
 80096cc:	60a5      	str	r5, [r4, #8]
 80096ce:	2d00      	cmp	r5, #0
 80096d0:	bfa2      	ittt	ge
 80096d2:	6821      	ldrge	r1, [r4, #0]
 80096d4:	f021 0104 	bicge.w	r1, r1, #4
 80096d8:	6021      	strge	r1, [r4, #0]
 80096da:	b90e      	cbnz	r6, 80096e0 <_printf_i+0x118>
 80096dc:	2d00      	cmp	r5, #0
 80096de:	d04d      	beq.n	800977c <_printf_i+0x1b4>
 80096e0:	4615      	mov	r5, r2
 80096e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096e6:	fb03 6711 	mls	r7, r3, r1, r6
 80096ea:	5dc7      	ldrb	r7, [r0, r7]
 80096ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096f0:	4637      	mov	r7, r6
 80096f2:	42bb      	cmp	r3, r7
 80096f4:	460e      	mov	r6, r1
 80096f6:	d9f4      	bls.n	80096e2 <_printf_i+0x11a>
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d10b      	bne.n	8009714 <_printf_i+0x14c>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	07de      	lsls	r6, r3, #31
 8009700:	d508      	bpl.n	8009714 <_printf_i+0x14c>
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	6861      	ldr	r1, [r4, #4]
 8009706:	4299      	cmp	r1, r3
 8009708:	bfde      	ittt	le
 800970a:	2330      	movle	r3, #48	; 0x30
 800970c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009714:	1b52      	subs	r2, r2, r5
 8009716:	6122      	str	r2, [r4, #16]
 8009718:	f8cd a000 	str.w	sl, [sp]
 800971c:	464b      	mov	r3, r9
 800971e:	aa03      	add	r2, sp, #12
 8009720:	4621      	mov	r1, r4
 8009722:	4640      	mov	r0, r8
 8009724:	f7ff fee2 	bl	80094ec <_printf_common>
 8009728:	3001      	adds	r0, #1
 800972a:	d14c      	bne.n	80097c6 <_printf_i+0x1fe>
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	b004      	add	sp, #16
 8009732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009736:	4835      	ldr	r0, [pc, #212]	; (800980c <_printf_i+0x244>)
 8009738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800973c:	6829      	ldr	r1, [r5, #0]
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	f851 6b04 	ldr.w	r6, [r1], #4
 8009744:	6029      	str	r1, [r5, #0]
 8009746:	061d      	lsls	r5, r3, #24
 8009748:	d514      	bpl.n	8009774 <_printf_i+0x1ac>
 800974a:	07df      	lsls	r7, r3, #31
 800974c:	bf44      	itt	mi
 800974e:	f043 0320 	orrmi.w	r3, r3, #32
 8009752:	6023      	strmi	r3, [r4, #0]
 8009754:	b91e      	cbnz	r6, 800975e <_printf_i+0x196>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	f023 0320 	bic.w	r3, r3, #32
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	2310      	movs	r3, #16
 8009760:	e7b0      	b.n	80096c4 <_printf_i+0xfc>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	f043 0320 	orr.w	r3, r3, #32
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	2378      	movs	r3, #120	; 0x78
 800976c:	4828      	ldr	r0, [pc, #160]	; (8009810 <_printf_i+0x248>)
 800976e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009772:	e7e3      	b.n	800973c <_printf_i+0x174>
 8009774:	0659      	lsls	r1, r3, #25
 8009776:	bf48      	it	mi
 8009778:	b2b6      	uxthmi	r6, r6
 800977a:	e7e6      	b.n	800974a <_printf_i+0x182>
 800977c:	4615      	mov	r5, r2
 800977e:	e7bb      	b.n	80096f8 <_printf_i+0x130>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	6826      	ldr	r6, [r4, #0]
 8009784:	6961      	ldr	r1, [r4, #20]
 8009786:	1d18      	adds	r0, r3, #4
 8009788:	6028      	str	r0, [r5, #0]
 800978a:	0635      	lsls	r5, r6, #24
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	d501      	bpl.n	8009794 <_printf_i+0x1cc>
 8009790:	6019      	str	r1, [r3, #0]
 8009792:	e002      	b.n	800979a <_printf_i+0x1d2>
 8009794:	0670      	lsls	r0, r6, #25
 8009796:	d5fb      	bpl.n	8009790 <_printf_i+0x1c8>
 8009798:	8019      	strh	r1, [r3, #0]
 800979a:	2300      	movs	r3, #0
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	4615      	mov	r5, r2
 80097a0:	e7ba      	b.n	8009718 <_printf_i+0x150>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	1d1a      	adds	r2, r3, #4
 80097a6:	602a      	str	r2, [r5, #0]
 80097a8:	681d      	ldr	r5, [r3, #0]
 80097aa:	6862      	ldr	r2, [r4, #4]
 80097ac:	2100      	movs	r1, #0
 80097ae:	4628      	mov	r0, r5
 80097b0:	f7f6 fd1e 	bl	80001f0 <memchr>
 80097b4:	b108      	cbz	r0, 80097ba <_printf_i+0x1f2>
 80097b6:	1b40      	subs	r0, r0, r5
 80097b8:	6060      	str	r0, [r4, #4]
 80097ba:	6863      	ldr	r3, [r4, #4]
 80097bc:	6123      	str	r3, [r4, #16]
 80097be:	2300      	movs	r3, #0
 80097c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c4:	e7a8      	b.n	8009718 <_printf_i+0x150>
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	462a      	mov	r2, r5
 80097ca:	4649      	mov	r1, r9
 80097cc:	4640      	mov	r0, r8
 80097ce:	47d0      	blx	sl
 80097d0:	3001      	adds	r0, #1
 80097d2:	d0ab      	beq.n	800972c <_printf_i+0x164>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	079b      	lsls	r3, r3, #30
 80097d8:	d413      	bmi.n	8009802 <_printf_i+0x23a>
 80097da:	68e0      	ldr	r0, [r4, #12]
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	4298      	cmp	r0, r3
 80097e0:	bfb8      	it	lt
 80097e2:	4618      	movlt	r0, r3
 80097e4:	e7a4      	b.n	8009730 <_printf_i+0x168>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4632      	mov	r2, r6
 80097ea:	4649      	mov	r1, r9
 80097ec:	4640      	mov	r0, r8
 80097ee:	47d0      	blx	sl
 80097f0:	3001      	adds	r0, #1
 80097f2:	d09b      	beq.n	800972c <_printf_i+0x164>
 80097f4:	3501      	adds	r5, #1
 80097f6:	68e3      	ldr	r3, [r4, #12]
 80097f8:	9903      	ldr	r1, [sp, #12]
 80097fa:	1a5b      	subs	r3, r3, r1
 80097fc:	42ab      	cmp	r3, r5
 80097fe:	dcf2      	bgt.n	80097e6 <_printf_i+0x21e>
 8009800:	e7eb      	b.n	80097da <_printf_i+0x212>
 8009802:	2500      	movs	r5, #0
 8009804:	f104 0619 	add.w	r6, r4, #25
 8009808:	e7f5      	b.n	80097f6 <_printf_i+0x22e>
 800980a:	bf00      	nop
 800980c:	0800c71e 	.word	0x0800c71e
 8009810:	0800c72f 	.word	0x0800c72f

08009814 <iprintf>:
 8009814:	b40f      	push	{r0, r1, r2, r3}
 8009816:	4b0a      	ldr	r3, [pc, #40]	; (8009840 <iprintf+0x2c>)
 8009818:	b513      	push	{r0, r1, r4, lr}
 800981a:	681c      	ldr	r4, [r3, #0]
 800981c:	b124      	cbz	r4, 8009828 <iprintf+0x14>
 800981e:	69a3      	ldr	r3, [r4, #24]
 8009820:	b913      	cbnz	r3, 8009828 <iprintf+0x14>
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fee2 	bl	800a5ec <__sinit>
 8009828:	ab05      	add	r3, sp, #20
 800982a:	9a04      	ldr	r2, [sp, #16]
 800982c:	68a1      	ldr	r1, [r4, #8]
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	4620      	mov	r0, r4
 8009832:	f001 fc2d 	bl	800b090 <_vfiprintf_r>
 8009836:	b002      	add	sp, #8
 8009838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800983c:	b004      	add	sp, #16
 800983e:	4770      	bx	lr
 8009840:	20000048 	.word	0x20000048

08009844 <quorem>:
 8009844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	6903      	ldr	r3, [r0, #16]
 800984a:	690c      	ldr	r4, [r1, #16]
 800984c:	42a3      	cmp	r3, r4
 800984e:	4607      	mov	r7, r0
 8009850:	f2c0 8081 	blt.w	8009956 <quorem+0x112>
 8009854:	3c01      	subs	r4, #1
 8009856:	f101 0814 	add.w	r8, r1, #20
 800985a:	f100 0514 	add.w	r5, r0, #20
 800985e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800986c:	3301      	adds	r3, #1
 800986e:	429a      	cmp	r2, r3
 8009870:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009878:	fbb2 f6f3 	udiv	r6, r2, r3
 800987c:	d331      	bcc.n	80098e2 <quorem+0x9e>
 800987e:	f04f 0e00 	mov.w	lr, #0
 8009882:	4640      	mov	r0, r8
 8009884:	46ac      	mov	ip, r5
 8009886:	46f2      	mov	sl, lr
 8009888:	f850 2b04 	ldr.w	r2, [r0], #4
 800988c:	b293      	uxth	r3, r2
 800988e:	fb06 e303 	mla	r3, r6, r3, lr
 8009892:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009896:	b29b      	uxth	r3, r3
 8009898:	ebaa 0303 	sub.w	r3, sl, r3
 800989c:	f8dc a000 	ldr.w	sl, [ip]
 80098a0:	0c12      	lsrs	r2, r2, #16
 80098a2:	fa13 f38a 	uxtah	r3, r3, sl
 80098a6:	fb06 e202 	mla	r2, r6, r2, lr
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	9b00      	ldr	r3, [sp, #0]
 80098ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098b2:	b292      	uxth	r2, r2
 80098b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80098c0:	4581      	cmp	r9, r0
 80098c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c6:	f84c 3b04 	str.w	r3, [ip], #4
 80098ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098ce:	d2db      	bcs.n	8009888 <quorem+0x44>
 80098d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80098d4:	b92b      	cbnz	r3, 80098e2 <quorem+0x9e>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	3b04      	subs	r3, #4
 80098da:	429d      	cmp	r5, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	d32e      	bcc.n	800993e <quorem+0xfa>
 80098e0:	613c      	str	r4, [r7, #16]
 80098e2:	4638      	mov	r0, r7
 80098e4:	f001 f9b2 	bl	800ac4c <__mcmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	db24      	blt.n	8009936 <quorem+0xf2>
 80098ec:	3601      	adds	r6, #1
 80098ee:	4628      	mov	r0, r5
 80098f0:	f04f 0c00 	mov.w	ip, #0
 80098f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80098f8:	f8d0 e000 	ldr.w	lr, [r0]
 80098fc:	b293      	uxth	r3, r2
 80098fe:	ebac 0303 	sub.w	r3, ip, r3
 8009902:	0c12      	lsrs	r2, r2, #16
 8009904:	fa13 f38e 	uxtah	r3, r3, lr
 8009908:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800990c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009910:	b29b      	uxth	r3, r3
 8009912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009916:	45c1      	cmp	r9, r8
 8009918:	f840 3b04 	str.w	r3, [r0], #4
 800991c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009920:	d2e8      	bcs.n	80098f4 <quorem+0xb0>
 8009922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800992a:	b922      	cbnz	r2, 8009936 <quorem+0xf2>
 800992c:	3b04      	subs	r3, #4
 800992e:	429d      	cmp	r5, r3
 8009930:	461a      	mov	r2, r3
 8009932:	d30a      	bcc.n	800994a <quorem+0x106>
 8009934:	613c      	str	r4, [r7, #16]
 8009936:	4630      	mov	r0, r6
 8009938:	b003      	add	sp, #12
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	3b04      	subs	r3, #4
 8009942:	2a00      	cmp	r2, #0
 8009944:	d1cc      	bne.n	80098e0 <quorem+0x9c>
 8009946:	3c01      	subs	r4, #1
 8009948:	e7c7      	b.n	80098da <quorem+0x96>
 800994a:	6812      	ldr	r2, [r2, #0]
 800994c:	3b04      	subs	r3, #4
 800994e:	2a00      	cmp	r2, #0
 8009950:	d1f0      	bne.n	8009934 <quorem+0xf0>
 8009952:	3c01      	subs	r4, #1
 8009954:	e7eb      	b.n	800992e <quorem+0xea>
 8009956:	2000      	movs	r0, #0
 8009958:	e7ee      	b.n	8009938 <quorem+0xf4>
 800995a:	0000      	movs	r0, r0
 800995c:	0000      	movs	r0, r0
	...

08009960 <_dtoa_r>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	ed2d 8b04 	vpush	{d8-d9}
 8009968:	ec57 6b10 	vmov	r6, r7, d0
 800996c:	b093      	sub	sp, #76	; 0x4c
 800996e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009974:	9106      	str	r1, [sp, #24]
 8009976:	ee10 aa10 	vmov	sl, s0
 800997a:	4604      	mov	r4, r0
 800997c:	9209      	str	r2, [sp, #36]	; 0x24
 800997e:	930c      	str	r3, [sp, #48]	; 0x30
 8009980:	46bb      	mov	fp, r7
 8009982:	b975      	cbnz	r5, 80099a2 <_dtoa_r+0x42>
 8009984:	2010      	movs	r0, #16
 8009986:	f000 fed7 	bl	800a738 <malloc>
 800998a:	4602      	mov	r2, r0
 800998c:	6260      	str	r0, [r4, #36]	; 0x24
 800998e:	b920      	cbnz	r0, 800999a <_dtoa_r+0x3a>
 8009990:	4ba7      	ldr	r3, [pc, #668]	; (8009c30 <_dtoa_r+0x2d0>)
 8009992:	21ea      	movs	r1, #234	; 0xea
 8009994:	48a7      	ldr	r0, [pc, #668]	; (8009c34 <_dtoa_r+0x2d4>)
 8009996:	f001 fdd1 	bl	800b53c <__assert_func>
 800999a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800999e:	6005      	str	r5, [r0, #0]
 80099a0:	60c5      	str	r5, [r0, #12]
 80099a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a4:	6819      	ldr	r1, [r3, #0]
 80099a6:	b151      	cbz	r1, 80099be <_dtoa_r+0x5e>
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	604a      	str	r2, [r1, #4]
 80099ac:	2301      	movs	r3, #1
 80099ae:	4093      	lsls	r3, r2
 80099b0:	608b      	str	r3, [r1, #8]
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 ff08 	bl	800a7c8 <_Bfree>
 80099b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	1e3b      	subs	r3, r7, #0
 80099c0:	bfaa      	itet	ge
 80099c2:	2300      	movge	r3, #0
 80099c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099c8:	f8c8 3000 	strge.w	r3, [r8]
 80099cc:	4b9a      	ldr	r3, [pc, #616]	; (8009c38 <_dtoa_r+0x2d8>)
 80099ce:	bfbc      	itt	lt
 80099d0:	2201      	movlt	r2, #1
 80099d2:	f8c8 2000 	strlt.w	r2, [r8]
 80099d6:	ea33 030b 	bics.w	r3, r3, fp
 80099da:	d11b      	bne.n	8009a14 <_dtoa_r+0xb4>
 80099dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099de:	f242 730f 	movw	r3, #9999	; 0x270f
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099e8:	4333      	orrs	r3, r6
 80099ea:	f000 8592 	beq.w	800a512 <_dtoa_r+0xbb2>
 80099ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f0:	b963      	cbnz	r3, 8009a0c <_dtoa_r+0xac>
 80099f2:	4b92      	ldr	r3, [pc, #584]	; (8009c3c <_dtoa_r+0x2dc>)
 80099f4:	e022      	b.n	8009a3c <_dtoa_r+0xdc>
 80099f6:	4b92      	ldr	r3, [pc, #584]	; (8009c40 <_dtoa_r+0x2e0>)
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	3308      	adds	r3, #8
 80099fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	9801      	ldr	r0, [sp, #4]
 8009a02:	b013      	add	sp, #76	; 0x4c
 8009a04:	ecbd 8b04 	vpop	{d8-d9}
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	4b8b      	ldr	r3, [pc, #556]	; (8009c3c <_dtoa_r+0x2dc>)
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	3303      	adds	r3, #3
 8009a12:	e7f3      	b.n	80099fc <_dtoa_r+0x9c>
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	4650      	mov	r0, sl
 8009a1a:	4659      	mov	r1, fp
 8009a1c:	f7f7 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a20:	ec4b ab19 	vmov	d9, sl, fp
 8009a24:	4680      	mov	r8, r0
 8009a26:	b158      	cbz	r0, 8009a40 <_dtoa_r+0xe0>
 8009a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 856b 	beq.w	800a50c <_dtoa_r+0xbac>
 8009a36:	4883      	ldr	r0, [pc, #524]	; (8009c44 <_dtoa_r+0x2e4>)
 8009a38:	6018      	str	r0, [r3, #0]
 8009a3a:	1e43      	subs	r3, r0, #1
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	e7df      	b.n	8009a00 <_dtoa_r+0xa0>
 8009a40:	ec4b ab10 	vmov	d0, sl, fp
 8009a44:	aa10      	add	r2, sp, #64	; 0x40
 8009a46:	a911      	add	r1, sp, #68	; 0x44
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f001 f9a5 	bl	800ad98 <__d2b>
 8009a4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a52:	ee08 0a10 	vmov	s16, r0
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	f000 8084 	beq.w	8009b64 <_dtoa_r+0x204>
 8009a5c:	ee19 3a90 	vmov	r3, s19
 8009a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a68:	4656      	mov	r6, sl
 8009a6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a76:	4b74      	ldr	r3, [pc, #464]	; (8009c48 <_dtoa_r+0x2e8>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fc0b 	bl	8000298 <__aeabi_dsub>
 8009a82:	a365      	add	r3, pc, #404	; (adr r3, 8009c18 <_dtoa_r+0x2b8>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fdbe 	bl	8000608 <__aeabi_dmul>
 8009a8c:	a364      	add	r3, pc, #400	; (adr r3, 8009c20 <_dtoa_r+0x2c0>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	f7f6 fc03 	bl	800029c <__adddf3>
 8009a96:	4606      	mov	r6, r0
 8009a98:	4628      	mov	r0, r5
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	f7f6 fd4a 	bl	8000534 <__aeabi_i2d>
 8009aa0:	a361      	add	r3, pc, #388	; (adr r3, 8009c28 <_dtoa_r+0x2c8>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fdaf 	bl	8000608 <__aeabi_dmul>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	f7f6 fbf3 	bl	800029c <__adddf3>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	f7f7 f855 	bl	8000b68 <__aeabi_d2iz>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	9000      	str	r0, [sp, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f7 f810 	bl	8000aec <__aeabi_dcmplt>
 8009acc:	b150      	cbz	r0, 8009ae4 <_dtoa_r+0x184>
 8009ace:	9800      	ldr	r0, [sp, #0]
 8009ad0:	f7f6 fd30 	bl	8000534 <__aeabi_i2d>
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	463b      	mov	r3, r7
 8009ad8:	f7f6 fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8009adc:	b910      	cbnz	r0, 8009ae4 <_dtoa_r+0x184>
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	2b16      	cmp	r3, #22
 8009ae8:	d85a      	bhi.n	8009ba0 <_dtoa_r+0x240>
 8009aea:	9a00      	ldr	r2, [sp, #0]
 8009aec:	4b57      	ldr	r3, [pc, #348]	; (8009c4c <_dtoa_r+0x2ec>)
 8009aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	ec51 0b19 	vmov	r0, r1, d9
 8009afa:	f7f6 fff7 	bl	8000aec <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d050      	beq.n	8009ba4 <_dtoa_r+0x244>
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b0e:	1b5d      	subs	r5, r3, r5
 8009b10:	1e6b      	subs	r3, r5, #1
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	bf45      	ittet	mi
 8009b16:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b1a:	9304      	strmi	r3, [sp, #16]
 8009b1c:	2300      	movpl	r3, #0
 8009b1e:	2300      	movmi	r3, #0
 8009b20:	bf4c      	ite	mi
 8009b22:	9305      	strmi	r3, [sp, #20]
 8009b24:	9304      	strpl	r3, [sp, #16]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	db3d      	blt.n	8009ba8 <_dtoa_r+0x248>
 8009b2c:	9b05      	ldr	r3, [sp, #20]
 8009b2e:	9a00      	ldr	r2, [sp, #0]
 8009b30:	920a      	str	r2, [sp, #40]	; 0x28
 8009b32:	4413      	add	r3, r2
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	2300      	movs	r3, #0
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	9b06      	ldr	r3, [sp, #24]
 8009b3c:	2b09      	cmp	r3, #9
 8009b3e:	f200 8089 	bhi.w	8009c54 <_dtoa_r+0x2f4>
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	bfc4      	itt	gt
 8009b46:	3b04      	subgt	r3, #4
 8009b48:	9306      	strgt	r3, [sp, #24]
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b50:	bfcc      	ite	gt
 8009b52:	2500      	movgt	r5, #0
 8009b54:	2501      	movle	r5, #1
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	f200 8087 	bhi.w	8009c6a <_dtoa_r+0x30a>
 8009b5c:	e8df f003 	tbb	[pc, r3]
 8009b60:	59383a2d 	.word	0x59383a2d
 8009b64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b68:	441d      	add	r5, r3
 8009b6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	bfc1      	itttt	gt
 8009b72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b82:	bfda      	itte	le
 8009b84:	f1c3 0320 	rsble	r3, r3, #32
 8009b88:	fa06 f003 	lslle.w	r0, r6, r3
 8009b8c:	4318      	orrgt	r0, r3
 8009b8e:	f7f6 fcc1 	bl	8000514 <__aeabi_ui2d>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4606      	mov	r6, r0
 8009b96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b9a:	3d01      	subs	r5, #1
 8009b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b9e:	e76a      	b.n	8009a76 <_dtoa_r+0x116>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7b2      	b.n	8009b0a <_dtoa_r+0x1aa>
 8009ba4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ba6:	e7b1      	b.n	8009b0c <_dtoa_r+0x1ac>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	9a00      	ldr	r2, [sp, #0]
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	4253      	negs	r3, r2
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb8:	e7bf      	b.n	8009b3a <_dtoa_r+0x1da>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9308      	str	r3, [sp, #32]
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc55      	bgt.n	8009c70 <_dtoa_r+0x310>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bce:	e00c      	b.n	8009bea <_dtoa_r+0x28a>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e7f3      	b.n	8009bbc <_dtoa_r+0x25c>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	4413      	add	r3, r2
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	3301      	adds	r3, #1
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	bfb8      	it	lt
 8009be8:	2301      	movlt	r3, #1
 8009bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bec:	2200      	movs	r2, #0
 8009bee:	6042      	str	r2, [r0, #4]
 8009bf0:	2204      	movs	r2, #4
 8009bf2:	f102 0614 	add.w	r6, r2, #20
 8009bf6:	429e      	cmp	r6, r3
 8009bf8:	6841      	ldr	r1, [r0, #4]
 8009bfa:	d93d      	bls.n	8009c78 <_dtoa_r+0x318>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fda3 	bl	800a748 <_Balloc>
 8009c02:	9001      	str	r0, [sp, #4]
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d13b      	bne.n	8009c80 <_dtoa_r+0x320>
 8009c08:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <_dtoa_r+0x2f0>)
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c10:	e6c0      	b.n	8009994 <_dtoa_r+0x34>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7df      	b.n	8009bd6 <_dtoa_r+0x276>
 8009c16:	bf00      	nop
 8009c18:	636f4361 	.word	0x636f4361
 8009c1c:	3fd287a7 	.word	0x3fd287a7
 8009c20:	8b60c8b3 	.word	0x8b60c8b3
 8009c24:	3fc68a28 	.word	0x3fc68a28
 8009c28:	509f79fb 	.word	0x509f79fb
 8009c2c:	3fd34413 	.word	0x3fd34413
 8009c30:	0800c74d 	.word	0x0800c74d
 8009c34:	0800c764 	.word	0x0800c764
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	0800c749 	.word	0x0800c749
 8009c40:	0800c740 	.word	0x0800c740
 8009c44:	0800c71d 	.word	0x0800c71d
 8009c48:	3ff80000 	.word	0x3ff80000
 8009c4c:	0800c8b8 	.word	0x0800c8b8
 8009c50:	0800c7bf 	.word	0x0800c7bf
 8009c54:	2501      	movs	r5, #1
 8009c56:	2300      	movs	r3, #0
 8009c58:	9306      	str	r3, [sp, #24]
 8009c5a:	9508      	str	r5, [sp, #32]
 8009c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c64:	2200      	movs	r2, #0
 8009c66:	2312      	movs	r3, #18
 8009c68:	e7b0      	b.n	8009bcc <_dtoa_r+0x26c>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	9308      	str	r3, [sp, #32]
 8009c6e:	e7f5      	b.n	8009c5c <_dtoa_r+0x2fc>
 8009c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c76:	e7b8      	b.n	8009bea <_dtoa_r+0x28a>
 8009c78:	3101      	adds	r1, #1
 8009c7a:	6041      	str	r1, [r0, #4]
 8009c7c:	0052      	lsls	r2, r2, #1
 8009c7e:	e7b8      	b.n	8009bf2 <_dtoa_r+0x292>
 8009c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c82:	9a01      	ldr	r2, [sp, #4]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	2b0e      	cmp	r3, #14
 8009c8a:	f200 809d 	bhi.w	8009dc8 <_dtoa_r+0x468>
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	f000 809a 	beq.w	8009dc8 <_dtoa_r+0x468>
 8009c94:	9b00      	ldr	r3, [sp, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd32      	ble.n	8009d00 <_dtoa_r+0x3a0>
 8009c9a:	4ab7      	ldr	r2, [pc, #732]	; (8009f78 <_dtoa_r+0x618>)
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	05d8      	lsls	r0, r3, #23
 8009cac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009cb0:	d516      	bpl.n	8009ce0 <_dtoa_r+0x380>
 8009cb2:	4bb2      	ldr	r3, [pc, #712]	; (8009f7c <_dtoa_r+0x61c>)
 8009cb4:	ec51 0b19 	vmov	r0, r1, d9
 8009cb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cbc:	f7f6 fdce 	bl	800085c <__aeabi_ddiv>
 8009cc0:	f007 070f 	and.w	r7, r7, #15
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	468b      	mov	fp, r1
 8009cc8:	2503      	movs	r5, #3
 8009cca:	4eac      	ldr	r6, [pc, #688]	; (8009f7c <_dtoa_r+0x61c>)
 8009ccc:	b957      	cbnz	r7, 8009ce4 <_dtoa_r+0x384>
 8009cce:	4642      	mov	r2, r8
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	f7f6 fdc1 	bl	800085c <__aeabi_ddiv>
 8009cda:	4682      	mov	sl, r0
 8009cdc:	468b      	mov	fp, r1
 8009cde:	e028      	b.n	8009d32 <_dtoa_r+0x3d2>
 8009ce0:	2502      	movs	r5, #2
 8009ce2:	e7f2      	b.n	8009cca <_dtoa_r+0x36a>
 8009ce4:	07f9      	lsls	r1, r7, #31
 8009ce6:	d508      	bpl.n	8009cfa <_dtoa_r+0x39a>
 8009ce8:	4640      	mov	r0, r8
 8009cea:	4649      	mov	r1, r9
 8009cec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cf0:	f7f6 fc8a 	bl	8000608 <__aeabi_dmul>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	4680      	mov	r8, r0
 8009cf8:	4689      	mov	r9, r1
 8009cfa:	107f      	asrs	r7, r7, #1
 8009cfc:	3608      	adds	r6, #8
 8009cfe:	e7e5      	b.n	8009ccc <_dtoa_r+0x36c>
 8009d00:	f000 809b 	beq.w	8009e3a <_dtoa_r+0x4da>
 8009d04:	9b00      	ldr	r3, [sp, #0]
 8009d06:	4f9d      	ldr	r7, [pc, #628]	; (8009f7c <_dtoa_r+0x61c>)
 8009d08:	425e      	negs	r6, r3
 8009d0a:	4b9b      	ldr	r3, [pc, #620]	; (8009f78 <_dtoa_r+0x618>)
 8009d0c:	f006 020f 	and.w	r2, r6, #15
 8009d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	ec51 0b19 	vmov	r0, r1, d9
 8009d1c:	f7f6 fc74 	bl	8000608 <__aeabi_dmul>
 8009d20:	1136      	asrs	r6, r6, #4
 8009d22:	4682      	mov	sl, r0
 8009d24:	468b      	mov	fp, r1
 8009d26:	2300      	movs	r3, #0
 8009d28:	2502      	movs	r5, #2
 8009d2a:	2e00      	cmp	r6, #0
 8009d2c:	d17a      	bne.n	8009e24 <_dtoa_r+0x4c4>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1d3      	bne.n	8009cda <_dtoa_r+0x37a>
 8009d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8082 	beq.w	8009e3e <_dtoa_r+0x4de>
 8009d3a:	4b91      	ldr	r3, [pc, #580]	; (8009f80 <_dtoa_r+0x620>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4650      	mov	r0, sl
 8009d40:	4659      	mov	r1, fp
 8009d42:	f7f6 fed3 	bl	8000aec <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d079      	beq.n	8009e3e <_dtoa_r+0x4de>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d076      	beq.n	8009e3e <_dtoa_r+0x4de>
 8009d50:	9b02      	ldr	r3, [sp, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd36      	ble.n	8009dc4 <_dtoa_r+0x464>
 8009d56:	9b00      	ldr	r3, [sp, #0]
 8009d58:	4650      	mov	r0, sl
 8009d5a:	4659      	mov	r1, fp
 8009d5c:	1e5f      	subs	r7, r3, #1
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4b88      	ldr	r3, [pc, #544]	; (8009f84 <_dtoa_r+0x624>)
 8009d62:	f7f6 fc51 	bl	8000608 <__aeabi_dmul>
 8009d66:	9e02      	ldr	r6, [sp, #8]
 8009d68:	4682      	mov	sl, r0
 8009d6a:	468b      	mov	fp, r1
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f7f6 fbe0 	bl	8000534 <__aeabi_i2d>
 8009d74:	4652      	mov	r2, sl
 8009d76:	465b      	mov	r3, fp
 8009d78:	f7f6 fc46 	bl	8000608 <__aeabi_dmul>
 8009d7c:	4b82      	ldr	r3, [pc, #520]	; (8009f88 <_dtoa_r+0x628>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f7f6 fa8c 	bl	800029c <__adddf3>
 8009d84:	46d0      	mov	r8, sl
 8009d86:	46d9      	mov	r9, fp
 8009d88:	4682      	mov	sl, r0
 8009d8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	d158      	bne.n	8009e44 <_dtoa_r+0x4e4>
 8009d92:	4b7e      	ldr	r3, [pc, #504]	; (8009f8c <_dtoa_r+0x62c>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4640      	mov	r0, r8
 8009d98:	4649      	mov	r1, r9
 8009d9a:	f7f6 fa7d 	bl	8000298 <__aeabi_dsub>
 8009d9e:	4652      	mov	r2, sl
 8009da0:	465b      	mov	r3, fp
 8009da2:	4680      	mov	r8, r0
 8009da4:	4689      	mov	r9, r1
 8009da6:	f7f6 febf 	bl	8000b28 <__aeabi_dcmpgt>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f040 8295 	bne.w	800a2da <_dtoa_r+0x97a>
 8009db0:	4652      	mov	r2, sl
 8009db2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	f7f6 fe97 	bl	8000aec <__aeabi_dcmplt>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f040 8289 	bne.w	800a2d6 <_dtoa_r+0x976>
 8009dc4:	ec5b ab19 	vmov	sl, fp, d9
 8009dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f2c0 8148 	blt.w	800a060 <_dtoa_r+0x700>
 8009dd0:	9a00      	ldr	r2, [sp, #0]
 8009dd2:	2a0e      	cmp	r2, #14
 8009dd4:	f300 8144 	bgt.w	800a060 <_dtoa_r+0x700>
 8009dd8:	4b67      	ldr	r3, [pc, #412]	; (8009f78 <_dtoa_r+0x618>)
 8009dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f280 80d5 	bge.w	8009f94 <_dtoa_r+0x634>
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f300 80d1 	bgt.w	8009f94 <_dtoa_r+0x634>
 8009df2:	f040 826f 	bne.w	800a2d4 <_dtoa_r+0x974>
 8009df6:	4b65      	ldr	r3, [pc, #404]	; (8009f8c <_dtoa_r+0x62c>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	f7f6 fe85 	bl	8000b14 <__aeabi_dcmpge>
 8009e0a:	9e03      	ldr	r6, [sp, #12]
 8009e0c:	4637      	mov	r7, r6
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f040 8245 	bne.w	800a29e <_dtoa_r+0x93e>
 8009e14:	9d01      	ldr	r5, [sp, #4]
 8009e16:	2331      	movs	r3, #49	; 0x31
 8009e18:	f805 3b01 	strb.w	r3, [r5], #1
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	e240      	b.n	800a2a6 <_dtoa_r+0x946>
 8009e24:	07f2      	lsls	r2, r6, #31
 8009e26:	d505      	bpl.n	8009e34 <_dtoa_r+0x4d4>
 8009e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e2c:	f7f6 fbec 	bl	8000608 <__aeabi_dmul>
 8009e30:	3501      	adds	r5, #1
 8009e32:	2301      	movs	r3, #1
 8009e34:	1076      	asrs	r6, r6, #1
 8009e36:	3708      	adds	r7, #8
 8009e38:	e777      	b.n	8009d2a <_dtoa_r+0x3ca>
 8009e3a:	2502      	movs	r5, #2
 8009e3c:	e779      	b.n	8009d32 <_dtoa_r+0x3d2>
 8009e3e:	9f00      	ldr	r7, [sp, #0]
 8009e40:	9e03      	ldr	r6, [sp, #12]
 8009e42:	e794      	b.n	8009d6e <_dtoa_r+0x40e>
 8009e44:	9901      	ldr	r1, [sp, #4]
 8009e46:	4b4c      	ldr	r3, [pc, #304]	; (8009f78 <_dtoa_r+0x618>)
 8009e48:	4431      	add	r1, r6
 8009e4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009e4c:	9908      	ldr	r1, [sp, #32]
 8009e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e56:	2900      	cmp	r1, #0
 8009e58:	d043      	beq.n	8009ee2 <_dtoa_r+0x582>
 8009e5a:	494d      	ldr	r1, [pc, #308]	; (8009f90 <_dtoa_r+0x630>)
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	f7f6 fcfd 	bl	800085c <__aeabi_ddiv>
 8009e62:	4652      	mov	r2, sl
 8009e64:	465b      	mov	r3, fp
 8009e66:	f7f6 fa17 	bl	8000298 <__aeabi_dsub>
 8009e6a:	9d01      	ldr	r5, [sp, #4]
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	468b      	mov	fp, r1
 8009e70:	4649      	mov	r1, r9
 8009e72:	4640      	mov	r0, r8
 8009e74:	f7f6 fe78 	bl	8000b68 <__aeabi_d2iz>
 8009e78:	4606      	mov	r6, r0
 8009e7a:	f7f6 fb5b 	bl	8000534 <__aeabi_i2d>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 fa07 	bl	8000298 <__aeabi_dsub>
 8009e8a:	3630      	adds	r6, #48	; 0x30
 8009e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009e90:	4652      	mov	r2, sl
 8009e92:	465b      	mov	r3, fp
 8009e94:	4680      	mov	r8, r0
 8009e96:	4689      	mov	r9, r1
 8009e98:	f7f6 fe28 	bl	8000aec <__aeabi_dcmplt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d163      	bne.n	8009f68 <_dtoa_r+0x608>
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	4936      	ldr	r1, [pc, #216]	; (8009f80 <_dtoa_r+0x620>)
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f7f6 f9f6 	bl	8000298 <__aeabi_dsub>
 8009eac:	4652      	mov	r2, sl
 8009eae:	465b      	mov	r3, fp
 8009eb0:	f7f6 fe1c 	bl	8000aec <__aeabi_dcmplt>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f040 80b5 	bne.w	800a024 <_dtoa_r+0x6c4>
 8009eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ebc:	429d      	cmp	r5, r3
 8009ebe:	d081      	beq.n	8009dc4 <_dtoa_r+0x464>
 8009ec0:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <_dtoa_r+0x624>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	f7f6 fb9e 	bl	8000608 <__aeabi_dmul>
 8009ecc:	4b2d      	ldr	r3, [pc, #180]	; (8009f84 <_dtoa_r+0x624>)
 8009ece:	4682      	mov	sl, r0
 8009ed0:	468b      	mov	fp, r1
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f7f6 fb96 	bl	8000608 <__aeabi_dmul>
 8009edc:	4680      	mov	r8, r0
 8009ede:	4689      	mov	r9, r1
 8009ee0:	e7c6      	b.n	8009e70 <_dtoa_r+0x510>
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	4659      	mov	r1, fp
 8009ee6:	f7f6 fb8f 	bl	8000608 <__aeabi_dmul>
 8009eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eec:	9d01      	ldr	r5, [sp, #4]
 8009eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	f7f6 fe36 	bl	8000b68 <__aeabi_d2iz>
 8009efc:	4606      	mov	r6, r0
 8009efe:	f7f6 fb19 	bl	8000534 <__aeabi_i2d>
 8009f02:	3630      	adds	r6, #48	; 0x30
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 f9c4 	bl	8000298 <__aeabi_dsub>
 8009f10:	f805 6b01 	strb.w	r6, [r5], #1
 8009f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f16:	429d      	cmp	r5, r3
 8009f18:	4680      	mov	r8, r0
 8009f1a:	4689      	mov	r9, r1
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	d124      	bne.n	8009f6c <_dtoa_r+0x60c>
 8009f22:	4b1b      	ldr	r3, [pc, #108]	; (8009f90 <_dtoa_r+0x630>)
 8009f24:	4650      	mov	r0, sl
 8009f26:	4659      	mov	r1, fp
 8009f28:	f7f6 f9b8 	bl	800029c <__adddf3>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4640      	mov	r0, r8
 8009f32:	4649      	mov	r1, r9
 8009f34:	f7f6 fdf8 	bl	8000b28 <__aeabi_dcmpgt>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d173      	bne.n	800a024 <_dtoa_r+0x6c4>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	465b      	mov	r3, fp
 8009f40:	4913      	ldr	r1, [pc, #76]	; (8009f90 <_dtoa_r+0x630>)
 8009f42:	2000      	movs	r0, #0
 8009f44:	f7f6 f9a8 	bl	8000298 <__aeabi_dsub>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f43f af35 	beq.w	8009dc4 <_dtoa_r+0x464>
 8009f5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f5c:	1e6b      	subs	r3, r5, #1
 8009f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f64:	2b30      	cmp	r3, #48	; 0x30
 8009f66:	d0f8      	beq.n	8009f5a <_dtoa_r+0x5fa>
 8009f68:	9700      	str	r7, [sp, #0]
 8009f6a:	e049      	b.n	800a000 <_dtoa_r+0x6a0>
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <_dtoa_r+0x624>)
 8009f6e:	f7f6 fb4b 	bl	8000608 <__aeabi_dmul>
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	e7bd      	b.n	8009ef4 <_dtoa_r+0x594>
 8009f78:	0800c8b8 	.word	0x0800c8b8
 8009f7c:	0800c890 	.word	0x0800c890
 8009f80:	3ff00000 	.word	0x3ff00000
 8009f84:	40240000 	.word	0x40240000
 8009f88:	401c0000 	.word	0x401c0000
 8009f8c:	40140000 	.word	0x40140000
 8009f90:	3fe00000 	.word	0x3fe00000
 8009f94:	9d01      	ldr	r5, [sp, #4]
 8009f96:	4656      	mov	r6, sl
 8009f98:	465f      	mov	r7, fp
 8009f9a:	4642      	mov	r2, r8
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	f7f6 fc5b 	bl	800085c <__aeabi_ddiv>
 8009fa6:	f7f6 fddf 	bl	8000b68 <__aeabi_d2iz>
 8009faa:	4682      	mov	sl, r0
 8009fac:	f7f6 fac2 	bl	8000534 <__aeabi_i2d>
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	f7f6 fb28 	bl	8000608 <__aeabi_dmul>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009fc4:	f7f6 f968 	bl	8000298 <__aeabi_dsub>
 8009fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fcc:	9e01      	ldr	r6, [sp, #4]
 8009fce:	9f03      	ldr	r7, [sp, #12]
 8009fd0:	1bae      	subs	r6, r5, r6
 8009fd2:	42b7      	cmp	r7, r6
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	d135      	bne.n	800a046 <_dtoa_r+0x6e6>
 8009fda:	f7f6 f95f 	bl	800029c <__adddf3>
 8009fde:	4642      	mov	r2, r8
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460f      	mov	r7, r1
 8009fe6:	f7f6 fd9f 	bl	8000b28 <__aeabi_dcmpgt>
 8009fea:	b9d0      	cbnz	r0, 800a022 <_dtoa_r+0x6c2>
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff8:	b110      	cbz	r0, 800a000 <_dtoa_r+0x6a0>
 8009ffa:	f01a 0f01 	tst.w	sl, #1
 8009ffe:	d110      	bne.n	800a022 <_dtoa_r+0x6c2>
 800a000:	4620      	mov	r0, r4
 800a002:	ee18 1a10 	vmov	r1, s16
 800a006:	f000 fbdf 	bl	800a7c8 <_Bfree>
 800a00a:	2300      	movs	r3, #0
 800a00c:	9800      	ldr	r0, [sp, #0]
 800a00e:	702b      	strb	r3, [r5, #0]
 800a010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a012:	3001      	adds	r0, #1
 800a014:	6018      	str	r0, [r3, #0]
 800a016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f43f acf1 	beq.w	8009a00 <_dtoa_r+0xa0>
 800a01e:	601d      	str	r5, [r3, #0]
 800a020:	e4ee      	b.n	8009a00 <_dtoa_r+0xa0>
 800a022:	9f00      	ldr	r7, [sp, #0]
 800a024:	462b      	mov	r3, r5
 800a026:	461d      	mov	r5, r3
 800a028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a02c:	2a39      	cmp	r2, #57	; 0x39
 800a02e:	d106      	bne.n	800a03e <_dtoa_r+0x6de>
 800a030:	9a01      	ldr	r2, [sp, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d1f7      	bne.n	800a026 <_dtoa_r+0x6c6>
 800a036:	9901      	ldr	r1, [sp, #4]
 800a038:	2230      	movs	r2, #48	; 0x30
 800a03a:	3701      	adds	r7, #1
 800a03c:	700a      	strb	r2, [r1, #0]
 800a03e:	781a      	ldrb	r2, [r3, #0]
 800a040:	3201      	adds	r2, #1
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	e790      	b.n	8009f68 <_dtoa_r+0x608>
 800a046:	4ba6      	ldr	r3, [pc, #664]	; (800a2e0 <_dtoa_r+0x980>)
 800a048:	2200      	movs	r2, #0
 800a04a:	f7f6 fadd 	bl	8000608 <__aeabi_dmul>
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	f7f6 fd3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d09d      	beq.n	8009f9a <_dtoa_r+0x63a>
 800a05e:	e7cf      	b.n	800a000 <_dtoa_r+0x6a0>
 800a060:	9a08      	ldr	r2, [sp, #32]
 800a062:	2a00      	cmp	r2, #0
 800a064:	f000 80d7 	beq.w	800a216 <_dtoa_r+0x8b6>
 800a068:	9a06      	ldr	r2, [sp, #24]
 800a06a:	2a01      	cmp	r2, #1
 800a06c:	f300 80ba 	bgt.w	800a1e4 <_dtoa_r+0x884>
 800a070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a072:	2a00      	cmp	r2, #0
 800a074:	f000 80b2 	beq.w	800a1dc <_dtoa_r+0x87c>
 800a078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a07c:	9e07      	ldr	r6, [sp, #28]
 800a07e:	9d04      	ldr	r5, [sp, #16]
 800a080:	9a04      	ldr	r2, [sp, #16]
 800a082:	441a      	add	r2, r3
 800a084:	9204      	str	r2, [sp, #16]
 800a086:	9a05      	ldr	r2, [sp, #20]
 800a088:	2101      	movs	r1, #1
 800a08a:	441a      	add	r2, r3
 800a08c:	4620      	mov	r0, r4
 800a08e:	9205      	str	r2, [sp, #20]
 800a090:	f000 fc52 	bl	800a938 <__i2b>
 800a094:	4607      	mov	r7, r0
 800a096:	2d00      	cmp	r5, #0
 800a098:	dd0c      	ble.n	800a0b4 <_dtoa_r+0x754>
 800a09a:	9b05      	ldr	r3, [sp, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd09      	ble.n	800a0b4 <_dtoa_r+0x754>
 800a0a0:	42ab      	cmp	r3, r5
 800a0a2:	9a04      	ldr	r2, [sp, #16]
 800a0a4:	bfa8      	it	ge
 800a0a6:	462b      	movge	r3, r5
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	9204      	str	r2, [sp, #16]
 800a0ac:	9a05      	ldr	r2, [sp, #20]
 800a0ae:	1aed      	subs	r5, r5, r3
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	b31b      	cbz	r3, 800a100 <_dtoa_r+0x7a0>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80af 	beq.w	800a21e <_dtoa_r+0x8be>
 800a0c0:	2e00      	cmp	r6, #0
 800a0c2:	dd13      	ble.n	800a0ec <_dtoa_r+0x78c>
 800a0c4:	4639      	mov	r1, r7
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fcf5 	bl	800aab8 <__pow5mult>
 800a0ce:	ee18 2a10 	vmov	r2, s16
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 fc44 	bl	800a964 <__multiply>
 800a0dc:	ee18 1a10 	vmov	r1, s16
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 fb70 	bl	800a7c8 <_Bfree>
 800a0e8:	ee08 8a10 	vmov	s16, r8
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	1b9a      	subs	r2, r3, r6
 800a0f0:	d006      	beq.n	800a100 <_dtoa_r+0x7a0>
 800a0f2:	ee18 1a10 	vmov	r1, s16
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fcde 	bl	800aab8 <__pow5mult>
 800a0fc:	ee08 0a10 	vmov	s16, r0
 800a100:	2101      	movs	r1, #1
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fc18 	bl	800a938 <__i2b>
 800a108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	4606      	mov	r6, r0
 800a10e:	f340 8088 	ble.w	800a222 <_dtoa_r+0x8c2>
 800a112:	461a      	mov	r2, r3
 800a114:	4601      	mov	r1, r0
 800a116:	4620      	mov	r0, r4
 800a118:	f000 fcce 	bl	800aab8 <__pow5mult>
 800a11c:	9b06      	ldr	r3, [sp, #24]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	4606      	mov	r6, r0
 800a122:	f340 8081 	ble.w	800a228 <_dtoa_r+0x8c8>
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	6933      	ldr	r3, [r6, #16]
 800a12c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a130:	6918      	ldr	r0, [r3, #16]
 800a132:	f000 fbb1 	bl	800a898 <__hi0bits>
 800a136:	f1c0 0020 	rsb	r0, r0, #32
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	4418      	add	r0, r3
 800a13e:	f010 001f 	ands.w	r0, r0, #31
 800a142:	f000 8092 	beq.w	800a26a <_dtoa_r+0x90a>
 800a146:	f1c0 0320 	rsb	r3, r0, #32
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	f340 808a 	ble.w	800a264 <_dtoa_r+0x904>
 800a150:	f1c0 001c 	rsb	r0, r0, #28
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	4403      	add	r3, r0
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	4403      	add	r3, r0
 800a15e:	4405      	add	r5, r0
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd07      	ble.n	800a178 <_dtoa_r+0x818>
 800a168:	ee18 1a10 	vmov	r1, s16
 800a16c:	461a      	mov	r2, r3
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 fcfc 	bl	800ab6c <__lshift>
 800a174:	ee08 0a10 	vmov	s16, r0
 800a178:	9b05      	ldr	r3, [sp, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dd05      	ble.n	800a18a <_dtoa_r+0x82a>
 800a17e:	4631      	mov	r1, r6
 800a180:	461a      	mov	r2, r3
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fcf2 	bl	800ab6c <__lshift>
 800a188:	4606      	mov	r6, r0
 800a18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d06e      	beq.n	800a26e <_dtoa_r+0x90e>
 800a190:	ee18 0a10 	vmov	r0, s16
 800a194:	4631      	mov	r1, r6
 800a196:	f000 fd59 	bl	800ac4c <__mcmp>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	da67      	bge.n	800a26e <_dtoa_r+0x90e>
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	ee18 1a10 	vmov	r1, s16
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f000 fb2d 	bl	800a80c <__multadd>
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	ee08 0a10 	vmov	s16, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 81b1 	beq.w	800a520 <_dtoa_r+0xbc0>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fb21 	bl	800a80c <__multadd>
 800a1ca:	9b02      	ldr	r3, [sp, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	f300 808e 	bgt.w	800a2f0 <_dtoa_r+0x990>
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	dc51      	bgt.n	800a27e <_dtoa_r+0x91e>
 800a1da:	e089      	b.n	800a2f0 <_dtoa_r+0x990>
 800a1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1e2:	e74b      	b.n	800a07c <_dtoa_r+0x71c>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	1e5e      	subs	r6, r3, #1
 800a1e8:	9b07      	ldr	r3, [sp, #28]
 800a1ea:	42b3      	cmp	r3, r6
 800a1ec:	bfbf      	itttt	lt
 800a1ee:	9b07      	ldrlt	r3, [sp, #28]
 800a1f0:	9607      	strlt	r6, [sp, #28]
 800a1f2:	1af2      	sublt	r2, r6, r3
 800a1f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1f6:	bfb6      	itet	lt
 800a1f8:	189b      	addlt	r3, r3, r2
 800a1fa:	1b9e      	subge	r6, r3, r6
 800a1fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	bfb8      	it	lt
 800a202:	2600      	movlt	r6, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfb7      	itett	lt
 800a208:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a20c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a210:	1a9d      	sublt	r5, r3, r2
 800a212:	2300      	movlt	r3, #0
 800a214:	e734      	b.n	800a080 <_dtoa_r+0x720>
 800a216:	9e07      	ldr	r6, [sp, #28]
 800a218:	9d04      	ldr	r5, [sp, #16]
 800a21a:	9f08      	ldr	r7, [sp, #32]
 800a21c:	e73b      	b.n	800a096 <_dtoa_r+0x736>
 800a21e:	9a07      	ldr	r2, [sp, #28]
 800a220:	e767      	b.n	800a0f2 <_dtoa_r+0x792>
 800a222:	9b06      	ldr	r3, [sp, #24]
 800a224:	2b01      	cmp	r3, #1
 800a226:	dc18      	bgt.n	800a25a <_dtoa_r+0x8fa>
 800a228:	f1ba 0f00 	cmp.w	sl, #0
 800a22c:	d115      	bne.n	800a25a <_dtoa_r+0x8fa>
 800a22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a232:	b993      	cbnz	r3, 800a25a <_dtoa_r+0x8fa>
 800a234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a238:	0d1b      	lsrs	r3, r3, #20
 800a23a:	051b      	lsls	r3, r3, #20
 800a23c:	b183      	cbz	r3, 800a260 <_dtoa_r+0x900>
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	3301      	adds	r3, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	9b05      	ldr	r3, [sp, #20]
 800a246:	3301      	adds	r3, #1
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	f04f 0801 	mov.w	r8, #1
 800a24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	f47f af6a 	bne.w	800a12a <_dtoa_r+0x7ca>
 800a256:	2001      	movs	r0, #1
 800a258:	e76f      	b.n	800a13a <_dtoa_r+0x7da>
 800a25a:	f04f 0800 	mov.w	r8, #0
 800a25e:	e7f6      	b.n	800a24e <_dtoa_r+0x8ee>
 800a260:	4698      	mov	r8, r3
 800a262:	e7f4      	b.n	800a24e <_dtoa_r+0x8ee>
 800a264:	f43f af7d 	beq.w	800a162 <_dtoa_r+0x802>
 800a268:	4618      	mov	r0, r3
 800a26a:	301c      	adds	r0, #28
 800a26c:	e772      	b.n	800a154 <_dtoa_r+0x7f4>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	dc37      	bgt.n	800a2e4 <_dtoa_r+0x984>
 800a274:	9b06      	ldr	r3, [sp, #24]
 800a276:	2b02      	cmp	r3, #2
 800a278:	dd34      	ble.n	800a2e4 <_dtoa_r+0x984>
 800a27a:	9b03      	ldr	r3, [sp, #12]
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	b96b      	cbnz	r3, 800a29e <_dtoa_r+0x93e>
 800a282:	4631      	mov	r1, r6
 800a284:	2205      	movs	r2, #5
 800a286:	4620      	mov	r0, r4
 800a288:	f000 fac0 	bl	800a80c <__multadd>
 800a28c:	4601      	mov	r1, r0
 800a28e:	4606      	mov	r6, r0
 800a290:	ee18 0a10 	vmov	r0, s16
 800a294:	f000 fcda 	bl	800ac4c <__mcmp>
 800a298:	2800      	cmp	r0, #0
 800a29a:	f73f adbb 	bgt.w	8009e14 <_dtoa_r+0x4b4>
 800a29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a0:	9d01      	ldr	r5, [sp, #4]
 800a2a2:	43db      	mvns	r3, r3
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	f04f 0800 	mov.w	r8, #0
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fa8b 	bl	800a7c8 <_Bfree>
 800a2b2:	2f00      	cmp	r7, #0
 800a2b4:	f43f aea4 	beq.w	800a000 <_dtoa_r+0x6a0>
 800a2b8:	f1b8 0f00 	cmp.w	r8, #0
 800a2bc:	d005      	beq.n	800a2ca <_dtoa_r+0x96a>
 800a2be:	45b8      	cmp	r8, r7
 800a2c0:	d003      	beq.n	800a2ca <_dtoa_r+0x96a>
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 fa7f 	bl	800a7c8 <_Bfree>
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fa7b 	bl	800a7c8 <_Bfree>
 800a2d2:	e695      	b.n	800a000 <_dtoa_r+0x6a0>
 800a2d4:	2600      	movs	r6, #0
 800a2d6:	4637      	mov	r7, r6
 800a2d8:	e7e1      	b.n	800a29e <_dtoa_r+0x93e>
 800a2da:	9700      	str	r7, [sp, #0]
 800a2dc:	4637      	mov	r7, r6
 800a2de:	e599      	b.n	8009e14 <_dtoa_r+0x4b4>
 800a2e0:	40240000 	.word	0x40240000
 800a2e4:	9b08      	ldr	r3, [sp, #32]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80ca 	beq.w	800a480 <_dtoa_r+0xb20>
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	dd05      	ble.n	800a300 <_dtoa_r+0x9a0>
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fc37 	bl	800ab6c <__lshift>
 800a2fe:	4607      	mov	r7, r0
 800a300:	f1b8 0f00 	cmp.w	r8, #0
 800a304:	d05b      	beq.n	800a3be <_dtoa_r+0xa5e>
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 fa1d 	bl	800a748 <_Balloc>
 800a30e:	4605      	mov	r5, r0
 800a310:	b928      	cbnz	r0, 800a31e <_dtoa_r+0x9be>
 800a312:	4b87      	ldr	r3, [pc, #540]	; (800a530 <_dtoa_r+0xbd0>)
 800a314:	4602      	mov	r2, r0
 800a316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a31a:	f7ff bb3b 	b.w	8009994 <_dtoa_r+0x34>
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	3202      	adds	r2, #2
 800a322:	0092      	lsls	r2, r2, #2
 800a324:	f107 010c 	add.w	r1, r7, #12
 800a328:	300c      	adds	r0, #12
 800a32a:	f7fe fdf3 	bl	8008f14 <memcpy>
 800a32e:	2201      	movs	r2, #1
 800a330:	4629      	mov	r1, r5
 800a332:	4620      	mov	r0, r4
 800a334:	f000 fc1a 	bl	800ab6c <__lshift>
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	f103 0901 	add.w	r9, r3, #1
 800a33e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a342:	4413      	add	r3, r2
 800a344:	9305      	str	r3, [sp, #20]
 800a346:	f00a 0301 	and.w	r3, sl, #1
 800a34a:	46b8      	mov	r8, r7
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	4607      	mov	r7, r0
 800a350:	4631      	mov	r1, r6
 800a352:	ee18 0a10 	vmov	r0, s16
 800a356:	f7ff fa75 	bl	8009844 <quorem>
 800a35a:	4641      	mov	r1, r8
 800a35c:	9002      	str	r0, [sp, #8]
 800a35e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a362:	ee18 0a10 	vmov	r0, s16
 800a366:	f000 fc71 	bl	800ac4c <__mcmp>
 800a36a:	463a      	mov	r2, r7
 800a36c:	9003      	str	r0, [sp, #12]
 800a36e:	4631      	mov	r1, r6
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fc87 	bl	800ac84 <__mdiff>
 800a376:	68c2      	ldr	r2, [r0, #12]
 800a378:	f109 3bff 	add.w	fp, r9, #4294967295
 800a37c:	4605      	mov	r5, r0
 800a37e:	bb02      	cbnz	r2, 800a3c2 <_dtoa_r+0xa62>
 800a380:	4601      	mov	r1, r0
 800a382:	ee18 0a10 	vmov	r0, s16
 800a386:	f000 fc61 	bl	800ac4c <__mcmp>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4629      	mov	r1, r5
 800a38e:	4620      	mov	r0, r4
 800a390:	9207      	str	r2, [sp, #28]
 800a392:	f000 fa19 	bl	800a7c8 <_Bfree>
 800a396:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a39a:	ea43 0102 	orr.w	r1, r3, r2
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	464d      	mov	r5, r9
 800a3a4:	d10f      	bne.n	800a3c6 <_dtoa_r+0xa66>
 800a3a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3aa:	d02a      	beq.n	800a402 <_dtoa_r+0xaa2>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dd02      	ble.n	800a3b8 <_dtoa_r+0xa58>
 800a3b2:	9b02      	ldr	r3, [sp, #8]
 800a3b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3b8:	f88b a000 	strb.w	sl, [fp]
 800a3bc:	e775      	b.n	800a2aa <_dtoa_r+0x94a>
 800a3be:	4638      	mov	r0, r7
 800a3c0:	e7ba      	b.n	800a338 <_dtoa_r+0x9d8>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	e7e2      	b.n	800a38c <_dtoa_r+0xa2c>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	db04      	blt.n	800a3d6 <_dtoa_r+0xa76>
 800a3cc:	9906      	ldr	r1, [sp, #24]
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	9904      	ldr	r1, [sp, #16]
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	d122      	bne.n	800a41c <_dtoa_r+0xabc>
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	ddee      	ble.n	800a3b8 <_dtoa_r+0xa58>
 800a3da:	ee18 1a10 	vmov	r1, s16
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f000 fbc3 	bl	800ab6c <__lshift>
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	ee08 0a10 	vmov	s16, r0
 800a3ec:	f000 fc2e 	bl	800ac4c <__mcmp>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dc03      	bgt.n	800a3fc <_dtoa_r+0xa9c>
 800a3f4:	d1e0      	bne.n	800a3b8 <_dtoa_r+0xa58>
 800a3f6:	f01a 0f01 	tst.w	sl, #1
 800a3fa:	d0dd      	beq.n	800a3b8 <_dtoa_r+0xa58>
 800a3fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a400:	d1d7      	bne.n	800a3b2 <_dtoa_r+0xa52>
 800a402:	2339      	movs	r3, #57	; 0x39
 800a404:	f88b 3000 	strb.w	r3, [fp]
 800a408:	462b      	mov	r3, r5
 800a40a:	461d      	mov	r5, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a412:	2a39      	cmp	r2, #57	; 0x39
 800a414:	d071      	beq.n	800a4fa <_dtoa_r+0xb9a>
 800a416:	3201      	adds	r2, #1
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	e746      	b.n	800a2aa <_dtoa_r+0x94a>
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	dd07      	ble.n	800a430 <_dtoa_r+0xad0>
 800a420:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a424:	d0ed      	beq.n	800a402 <_dtoa_r+0xaa2>
 800a426:	f10a 0301 	add.w	r3, sl, #1
 800a42a:	f88b 3000 	strb.w	r3, [fp]
 800a42e:	e73c      	b.n	800a2aa <_dtoa_r+0x94a>
 800a430:	9b05      	ldr	r3, [sp, #20]
 800a432:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a436:	4599      	cmp	r9, r3
 800a438:	d047      	beq.n	800a4ca <_dtoa_r+0xb6a>
 800a43a:	ee18 1a10 	vmov	r1, s16
 800a43e:	2300      	movs	r3, #0
 800a440:	220a      	movs	r2, #10
 800a442:	4620      	mov	r0, r4
 800a444:	f000 f9e2 	bl	800a80c <__multadd>
 800a448:	45b8      	cmp	r8, r7
 800a44a:	ee08 0a10 	vmov	s16, r0
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	f04f 020a 	mov.w	r2, #10
 800a456:	4641      	mov	r1, r8
 800a458:	4620      	mov	r0, r4
 800a45a:	d106      	bne.n	800a46a <_dtoa_r+0xb0a>
 800a45c:	f000 f9d6 	bl	800a80c <__multadd>
 800a460:	4680      	mov	r8, r0
 800a462:	4607      	mov	r7, r0
 800a464:	f109 0901 	add.w	r9, r9, #1
 800a468:	e772      	b.n	800a350 <_dtoa_r+0x9f0>
 800a46a:	f000 f9cf 	bl	800a80c <__multadd>
 800a46e:	4639      	mov	r1, r7
 800a470:	4680      	mov	r8, r0
 800a472:	2300      	movs	r3, #0
 800a474:	220a      	movs	r2, #10
 800a476:	4620      	mov	r0, r4
 800a478:	f000 f9c8 	bl	800a80c <__multadd>
 800a47c:	4607      	mov	r7, r0
 800a47e:	e7f1      	b.n	800a464 <_dtoa_r+0xb04>
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	9d01      	ldr	r5, [sp, #4]
 800a486:	ee18 0a10 	vmov	r0, s16
 800a48a:	4631      	mov	r1, r6
 800a48c:	f7ff f9da 	bl	8009844 <quorem>
 800a490:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	f805 ab01 	strb.w	sl, [r5], #1
 800a49a:	1aea      	subs	r2, r5, r3
 800a49c:	9b02      	ldr	r3, [sp, #8]
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	dd09      	ble.n	800a4b6 <_dtoa_r+0xb56>
 800a4a2:	ee18 1a10 	vmov	r1, s16
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	220a      	movs	r2, #10
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f9ae 	bl	800a80c <__multadd>
 800a4b0:	ee08 0a10 	vmov	s16, r0
 800a4b4:	e7e7      	b.n	800a486 <_dtoa_r+0xb26>
 800a4b6:	9b02      	ldr	r3, [sp, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfc8      	it	gt
 800a4bc:	461d      	movgt	r5, r3
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	bfd8      	it	le
 800a4c2:	2501      	movle	r5, #1
 800a4c4:	441d      	add	r5, r3
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	ee18 1a10 	vmov	r1, s16
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fb4b 	bl	800ab6c <__lshift>
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	ee08 0a10 	vmov	s16, r0
 800a4dc:	f000 fbb6 	bl	800ac4c <__mcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	dc91      	bgt.n	800a408 <_dtoa_r+0xaa8>
 800a4e4:	d102      	bne.n	800a4ec <_dtoa_r+0xb8c>
 800a4e6:	f01a 0f01 	tst.w	sl, #1
 800a4ea:	d18d      	bne.n	800a408 <_dtoa_r+0xaa8>
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	461d      	mov	r5, r3
 800a4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4f4:	2a30      	cmp	r2, #48	; 0x30
 800a4f6:	d0fa      	beq.n	800a4ee <_dtoa_r+0xb8e>
 800a4f8:	e6d7      	b.n	800a2aa <_dtoa_r+0x94a>
 800a4fa:	9a01      	ldr	r2, [sp, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d184      	bne.n	800a40a <_dtoa_r+0xaaa>
 800a500:	9b00      	ldr	r3, [sp, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	2331      	movs	r3, #49	; 0x31
 800a508:	7013      	strb	r3, [r2, #0]
 800a50a:	e6ce      	b.n	800a2aa <_dtoa_r+0x94a>
 800a50c:	4b09      	ldr	r3, [pc, #36]	; (800a534 <_dtoa_r+0xbd4>)
 800a50e:	f7ff ba95 	b.w	8009a3c <_dtoa_r+0xdc>
 800a512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a514:	2b00      	cmp	r3, #0
 800a516:	f47f aa6e 	bne.w	80099f6 <_dtoa_r+0x96>
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <_dtoa_r+0xbd8>)
 800a51c:	f7ff ba8e 	b.w	8009a3c <_dtoa_r+0xdc>
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	dcae      	bgt.n	800a484 <_dtoa_r+0xb24>
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	f73f aea8 	bgt.w	800a27e <_dtoa_r+0x91e>
 800a52e:	e7a9      	b.n	800a484 <_dtoa_r+0xb24>
 800a530:	0800c7bf 	.word	0x0800c7bf
 800a534:	0800c71c 	.word	0x0800c71c
 800a538:	0800c740 	.word	0x0800c740

0800a53c <std>:
 800a53c:	2300      	movs	r3, #0
 800a53e:	b510      	push	{r4, lr}
 800a540:	4604      	mov	r4, r0
 800a542:	e9c0 3300 	strd	r3, r3, [r0]
 800a546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a54a:	6083      	str	r3, [r0, #8]
 800a54c:	8181      	strh	r1, [r0, #12]
 800a54e:	6643      	str	r3, [r0, #100]	; 0x64
 800a550:	81c2      	strh	r2, [r0, #14]
 800a552:	6183      	str	r3, [r0, #24]
 800a554:	4619      	mov	r1, r3
 800a556:	2208      	movs	r2, #8
 800a558:	305c      	adds	r0, #92	; 0x5c
 800a55a:	f7fe fce9 	bl	8008f30 <memset>
 800a55e:	4b05      	ldr	r3, [pc, #20]	; (800a574 <std+0x38>)
 800a560:	6263      	str	r3, [r4, #36]	; 0x24
 800a562:	4b05      	ldr	r3, [pc, #20]	; (800a578 <std+0x3c>)
 800a564:	62a3      	str	r3, [r4, #40]	; 0x28
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <std+0x40>)
 800a568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a56a:	4b05      	ldr	r3, [pc, #20]	; (800a580 <std+0x44>)
 800a56c:	6224      	str	r4, [r4, #32]
 800a56e:	6323      	str	r3, [r4, #48]	; 0x30
 800a570:	bd10      	pop	{r4, pc}
 800a572:	bf00      	nop
 800a574:	0800b311 	.word	0x0800b311
 800a578:	0800b333 	.word	0x0800b333
 800a57c:	0800b36b 	.word	0x0800b36b
 800a580:	0800b38f 	.word	0x0800b38f

0800a584 <_cleanup_r>:
 800a584:	4901      	ldr	r1, [pc, #4]	; (800a58c <_cleanup_r+0x8>)
 800a586:	f000 b8af 	b.w	800a6e8 <_fwalk_reent>
 800a58a:	bf00      	nop
 800a58c:	0800b6a5 	.word	0x0800b6a5

0800a590 <__sfmoreglue>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	2268      	movs	r2, #104	; 0x68
 800a594:	1e4d      	subs	r5, r1, #1
 800a596:	4355      	muls	r5, r2
 800a598:	460e      	mov	r6, r1
 800a59a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a59e:	f000 fcd9 	bl	800af54 <_malloc_r>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	b140      	cbz	r0, 800a5b8 <__sfmoreglue+0x28>
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	e9c0 1600 	strd	r1, r6, [r0]
 800a5ac:	300c      	adds	r0, #12
 800a5ae:	60a0      	str	r0, [r4, #8]
 800a5b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5b4:	f7fe fcbc 	bl	8008f30 <memset>
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}

0800a5bc <__sfp_lock_acquire>:
 800a5bc:	4801      	ldr	r0, [pc, #4]	; (800a5c4 <__sfp_lock_acquire+0x8>)
 800a5be:	f000 b8b8 	b.w	800a732 <__retarget_lock_acquire_recursive>
 800a5c2:	bf00      	nop
 800a5c4:	20000429 	.word	0x20000429

0800a5c8 <__sfp_lock_release>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__sfp_lock_release+0x8>)
 800a5ca:	f000 b8b3 	b.w	800a734 <__retarget_lock_release_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	20000429 	.word	0x20000429

0800a5d4 <__sinit_lock_acquire>:
 800a5d4:	4801      	ldr	r0, [pc, #4]	; (800a5dc <__sinit_lock_acquire+0x8>)
 800a5d6:	f000 b8ac 	b.w	800a732 <__retarget_lock_acquire_recursive>
 800a5da:	bf00      	nop
 800a5dc:	2000042a 	.word	0x2000042a

0800a5e0 <__sinit_lock_release>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	; (800a5e8 <__sinit_lock_release+0x8>)
 800a5e2:	f000 b8a7 	b.w	800a734 <__retarget_lock_release_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	2000042a 	.word	0x2000042a

0800a5ec <__sinit>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	f7ff fff0 	bl	800a5d4 <__sinit_lock_acquire>
 800a5f4:	69a3      	ldr	r3, [r4, #24]
 800a5f6:	b11b      	cbz	r3, 800a600 <__sinit+0x14>
 800a5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5fc:	f7ff bff0 	b.w	800a5e0 <__sinit_lock_release>
 800a600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a604:	6523      	str	r3, [r4, #80]	; 0x50
 800a606:	4b13      	ldr	r3, [pc, #76]	; (800a654 <__sinit+0x68>)
 800a608:	4a13      	ldr	r2, [pc, #76]	; (800a658 <__sinit+0x6c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a60e:	42a3      	cmp	r3, r4
 800a610:	bf04      	itt	eq
 800a612:	2301      	moveq	r3, #1
 800a614:	61a3      	streq	r3, [r4, #24]
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f820 	bl	800a65c <__sfp>
 800a61c:	6060      	str	r0, [r4, #4]
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f81c 	bl	800a65c <__sfp>
 800a624:	60a0      	str	r0, [r4, #8]
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f818 	bl	800a65c <__sfp>
 800a62c:	2200      	movs	r2, #0
 800a62e:	60e0      	str	r0, [r4, #12]
 800a630:	2104      	movs	r1, #4
 800a632:	6860      	ldr	r0, [r4, #4]
 800a634:	f7ff ff82 	bl	800a53c <std>
 800a638:	68a0      	ldr	r0, [r4, #8]
 800a63a:	2201      	movs	r2, #1
 800a63c:	2109      	movs	r1, #9
 800a63e:	f7ff ff7d 	bl	800a53c <std>
 800a642:	68e0      	ldr	r0, [r4, #12]
 800a644:	2202      	movs	r2, #2
 800a646:	2112      	movs	r1, #18
 800a648:	f7ff ff78 	bl	800a53c <std>
 800a64c:	2301      	movs	r3, #1
 800a64e:	61a3      	str	r3, [r4, #24]
 800a650:	e7d2      	b.n	800a5f8 <__sinit+0xc>
 800a652:	bf00      	nop
 800a654:	0800c708 	.word	0x0800c708
 800a658:	0800a585 	.word	0x0800a585

0800a65c <__sfp>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	4607      	mov	r7, r0
 800a660:	f7ff ffac 	bl	800a5bc <__sfp_lock_acquire>
 800a664:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <__sfp+0x84>)
 800a666:	681e      	ldr	r6, [r3, #0]
 800a668:	69b3      	ldr	r3, [r6, #24]
 800a66a:	b913      	cbnz	r3, 800a672 <__sfp+0x16>
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff ffbd 	bl	800a5ec <__sinit>
 800a672:	3648      	adds	r6, #72	; 0x48
 800a674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a678:	3b01      	subs	r3, #1
 800a67a:	d503      	bpl.n	800a684 <__sfp+0x28>
 800a67c:	6833      	ldr	r3, [r6, #0]
 800a67e:	b30b      	cbz	r3, 800a6c4 <__sfp+0x68>
 800a680:	6836      	ldr	r6, [r6, #0]
 800a682:	e7f7      	b.n	800a674 <__sfp+0x18>
 800a684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a688:	b9d5      	cbnz	r5, 800a6c0 <__sfp+0x64>
 800a68a:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <__sfp+0x88>)
 800a68c:	60e3      	str	r3, [r4, #12]
 800a68e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a692:	6665      	str	r5, [r4, #100]	; 0x64
 800a694:	f000 f84c 	bl	800a730 <__retarget_lock_init_recursive>
 800a698:	f7ff ff96 	bl	800a5c8 <__sfp_lock_release>
 800a69c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6a4:	6025      	str	r5, [r4, #0]
 800a6a6:	61a5      	str	r5, [r4, #24]
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6b0:	f7fe fc3e 	bl	8008f30 <memset>
 800a6b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6bc:	4620      	mov	r0, r4
 800a6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c0:	3468      	adds	r4, #104	; 0x68
 800a6c2:	e7d9      	b.n	800a678 <__sfp+0x1c>
 800a6c4:	2104      	movs	r1, #4
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	f7ff ff62 	bl	800a590 <__sfmoreglue>
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	6030      	str	r0, [r6, #0]
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d1d5      	bne.n	800a680 <__sfp+0x24>
 800a6d4:	f7ff ff78 	bl	800a5c8 <__sfp_lock_release>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	e7ee      	b.n	800a6bc <__sfp+0x60>
 800a6de:	bf00      	nop
 800a6e0:	0800c708 	.word	0x0800c708
 800a6e4:	ffff0001 	.word	0xffff0001

0800a6e8 <_fwalk_reent>:
 800a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	4688      	mov	r8, r1
 800a6f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6f4:	2700      	movs	r7, #0
 800a6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6fa:	f1b9 0901 	subs.w	r9, r9, #1
 800a6fe:	d505      	bpl.n	800a70c <_fwalk_reent+0x24>
 800a700:	6824      	ldr	r4, [r4, #0]
 800a702:	2c00      	cmp	r4, #0
 800a704:	d1f7      	bne.n	800a6f6 <_fwalk_reent+0xe>
 800a706:	4638      	mov	r0, r7
 800a708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a70c:	89ab      	ldrh	r3, [r5, #12]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d907      	bls.n	800a722 <_fwalk_reent+0x3a>
 800a712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a716:	3301      	adds	r3, #1
 800a718:	d003      	beq.n	800a722 <_fwalk_reent+0x3a>
 800a71a:	4629      	mov	r1, r5
 800a71c:	4630      	mov	r0, r6
 800a71e:	47c0      	blx	r8
 800a720:	4307      	orrs	r7, r0
 800a722:	3568      	adds	r5, #104	; 0x68
 800a724:	e7e9      	b.n	800a6fa <_fwalk_reent+0x12>
	...

0800a728 <_localeconv_r>:
 800a728:	4800      	ldr	r0, [pc, #0]	; (800a72c <_localeconv_r+0x4>)
 800a72a:	4770      	bx	lr
 800a72c:	2000019c 	.word	0x2000019c

0800a730 <__retarget_lock_init_recursive>:
 800a730:	4770      	bx	lr

0800a732 <__retarget_lock_acquire_recursive>:
 800a732:	4770      	bx	lr

0800a734 <__retarget_lock_release_recursive>:
 800a734:	4770      	bx	lr
	...

0800a738 <malloc>:
 800a738:	4b02      	ldr	r3, [pc, #8]	; (800a744 <malloc+0xc>)
 800a73a:	4601      	mov	r1, r0
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f000 bc09 	b.w	800af54 <_malloc_r>
 800a742:	bf00      	nop
 800a744:	20000048 	.word	0x20000048

0800a748 <_Balloc>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a74c:	4604      	mov	r4, r0
 800a74e:	460d      	mov	r5, r1
 800a750:	b976      	cbnz	r6, 800a770 <_Balloc+0x28>
 800a752:	2010      	movs	r0, #16
 800a754:	f7ff fff0 	bl	800a738 <malloc>
 800a758:	4602      	mov	r2, r0
 800a75a:	6260      	str	r0, [r4, #36]	; 0x24
 800a75c:	b920      	cbnz	r0, 800a768 <_Balloc+0x20>
 800a75e:	4b18      	ldr	r3, [pc, #96]	; (800a7c0 <_Balloc+0x78>)
 800a760:	4818      	ldr	r0, [pc, #96]	; (800a7c4 <_Balloc+0x7c>)
 800a762:	2166      	movs	r1, #102	; 0x66
 800a764:	f000 feea 	bl	800b53c <__assert_func>
 800a768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a76c:	6006      	str	r6, [r0, #0]
 800a76e:	60c6      	str	r6, [r0, #12]
 800a770:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a772:	68f3      	ldr	r3, [r6, #12]
 800a774:	b183      	cbz	r3, 800a798 <_Balloc+0x50>
 800a776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a77e:	b9b8      	cbnz	r0, 800a7b0 <_Balloc+0x68>
 800a780:	2101      	movs	r1, #1
 800a782:	fa01 f605 	lsl.w	r6, r1, r5
 800a786:	1d72      	adds	r2, r6, #5
 800a788:	0092      	lsls	r2, r2, #2
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 fb60 	bl	800ae50 <_calloc_r>
 800a790:	b160      	cbz	r0, 800a7ac <_Balloc+0x64>
 800a792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a796:	e00e      	b.n	800a7b6 <_Balloc+0x6e>
 800a798:	2221      	movs	r2, #33	; 0x21
 800a79a:	2104      	movs	r1, #4
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fb57 	bl	800ae50 <_calloc_r>
 800a7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a4:	60f0      	str	r0, [r6, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e4      	bne.n	800a776 <_Balloc+0x2e>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	6802      	ldr	r2, [r0, #0]
 800a7b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7bc:	e7f7      	b.n	800a7ae <_Balloc+0x66>
 800a7be:	bf00      	nop
 800a7c0:	0800c74d 	.word	0x0800c74d
 800a7c4:	0800c830 	.word	0x0800c830

0800a7c8 <_Bfree>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	b976      	cbnz	r6, 800a7f0 <_Bfree+0x28>
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	f7ff ffb0 	bl	800a738 <malloc>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6268      	str	r0, [r5, #36]	; 0x24
 800a7dc:	b920      	cbnz	r0, 800a7e8 <_Bfree+0x20>
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <_Bfree+0x3c>)
 800a7e0:	4809      	ldr	r0, [pc, #36]	; (800a808 <_Bfree+0x40>)
 800a7e2:	218a      	movs	r1, #138	; 0x8a
 800a7e4:	f000 feaa 	bl	800b53c <__assert_func>
 800a7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7ec:	6006      	str	r6, [r0, #0]
 800a7ee:	60c6      	str	r6, [r0, #12]
 800a7f0:	b13c      	cbz	r4, 800a802 <_Bfree+0x3a>
 800a7f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7f4:	6862      	ldr	r2, [r4, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7fc:	6021      	str	r1, [r4, #0]
 800a7fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	0800c74d 	.word	0x0800c74d
 800a808:	0800c830 	.word	0x0800c830

0800a80c <__multadd>:
 800a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	690d      	ldr	r5, [r1, #16]
 800a812:	4607      	mov	r7, r0
 800a814:	460c      	mov	r4, r1
 800a816:	461e      	mov	r6, r3
 800a818:	f101 0c14 	add.w	ip, r1, #20
 800a81c:	2000      	movs	r0, #0
 800a81e:	f8dc 3000 	ldr.w	r3, [ip]
 800a822:	b299      	uxth	r1, r3
 800a824:	fb02 6101 	mla	r1, r2, r1, r6
 800a828:	0c1e      	lsrs	r6, r3, #16
 800a82a:	0c0b      	lsrs	r3, r1, #16
 800a82c:	fb02 3306 	mla	r3, r2, r6, r3
 800a830:	b289      	uxth	r1, r1
 800a832:	3001      	adds	r0, #1
 800a834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a838:	4285      	cmp	r5, r0
 800a83a:	f84c 1b04 	str.w	r1, [ip], #4
 800a83e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a842:	dcec      	bgt.n	800a81e <__multadd+0x12>
 800a844:	b30e      	cbz	r6, 800a88a <__multadd+0x7e>
 800a846:	68a3      	ldr	r3, [r4, #8]
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dc19      	bgt.n	800a880 <__multadd+0x74>
 800a84c:	6861      	ldr	r1, [r4, #4]
 800a84e:	4638      	mov	r0, r7
 800a850:	3101      	adds	r1, #1
 800a852:	f7ff ff79 	bl	800a748 <_Balloc>
 800a856:	4680      	mov	r8, r0
 800a858:	b928      	cbnz	r0, 800a866 <__multadd+0x5a>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <__multadd+0x84>)
 800a85e:	480d      	ldr	r0, [pc, #52]	; (800a894 <__multadd+0x88>)
 800a860:	21b5      	movs	r1, #181	; 0xb5
 800a862:	f000 fe6b 	bl	800b53c <__assert_func>
 800a866:	6922      	ldr	r2, [r4, #16]
 800a868:	3202      	adds	r2, #2
 800a86a:	f104 010c 	add.w	r1, r4, #12
 800a86e:	0092      	lsls	r2, r2, #2
 800a870:	300c      	adds	r0, #12
 800a872:	f7fe fb4f 	bl	8008f14 <memcpy>
 800a876:	4621      	mov	r1, r4
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff ffa5 	bl	800a7c8 <_Bfree>
 800a87e:	4644      	mov	r4, r8
 800a880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a884:	3501      	adds	r5, #1
 800a886:	615e      	str	r6, [r3, #20]
 800a888:	6125      	str	r5, [r4, #16]
 800a88a:	4620      	mov	r0, r4
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	0800c7bf 	.word	0x0800c7bf
 800a894:	0800c830 	.word	0x0800c830

0800a898 <__hi0bits>:
 800a898:	0c03      	lsrs	r3, r0, #16
 800a89a:	041b      	lsls	r3, r3, #16
 800a89c:	b9d3      	cbnz	r3, 800a8d4 <__hi0bits+0x3c>
 800a89e:	0400      	lsls	r0, r0, #16
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8a6:	bf04      	itt	eq
 800a8a8:	0200      	lsleq	r0, r0, #8
 800a8aa:	3308      	addeq	r3, #8
 800a8ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8b0:	bf04      	itt	eq
 800a8b2:	0100      	lsleq	r0, r0, #4
 800a8b4:	3304      	addeq	r3, #4
 800a8b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8ba:	bf04      	itt	eq
 800a8bc:	0080      	lsleq	r0, r0, #2
 800a8be:	3302      	addeq	r3, #2
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	db05      	blt.n	800a8d0 <__hi0bits+0x38>
 800a8c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8c8:	f103 0301 	add.w	r3, r3, #1
 800a8cc:	bf08      	it	eq
 800a8ce:	2320      	moveq	r3, #32
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	4770      	bx	lr
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e7e4      	b.n	800a8a2 <__hi0bits+0xa>

0800a8d8 <__lo0bits>:
 800a8d8:	6803      	ldr	r3, [r0, #0]
 800a8da:	f013 0207 	ands.w	r2, r3, #7
 800a8de:	4601      	mov	r1, r0
 800a8e0:	d00b      	beq.n	800a8fa <__lo0bits+0x22>
 800a8e2:	07da      	lsls	r2, r3, #31
 800a8e4:	d423      	bmi.n	800a92e <__lo0bits+0x56>
 800a8e6:	0798      	lsls	r0, r3, #30
 800a8e8:	bf49      	itett	mi
 800a8ea:	085b      	lsrmi	r3, r3, #1
 800a8ec:	089b      	lsrpl	r3, r3, #2
 800a8ee:	2001      	movmi	r0, #1
 800a8f0:	600b      	strmi	r3, [r1, #0]
 800a8f2:	bf5c      	itt	pl
 800a8f4:	600b      	strpl	r3, [r1, #0]
 800a8f6:	2002      	movpl	r0, #2
 800a8f8:	4770      	bx	lr
 800a8fa:	b298      	uxth	r0, r3
 800a8fc:	b9a8      	cbnz	r0, 800a92a <__lo0bits+0x52>
 800a8fe:	0c1b      	lsrs	r3, r3, #16
 800a900:	2010      	movs	r0, #16
 800a902:	b2da      	uxtb	r2, r3
 800a904:	b90a      	cbnz	r2, 800a90a <__lo0bits+0x32>
 800a906:	3008      	adds	r0, #8
 800a908:	0a1b      	lsrs	r3, r3, #8
 800a90a:	071a      	lsls	r2, r3, #28
 800a90c:	bf04      	itt	eq
 800a90e:	091b      	lsreq	r3, r3, #4
 800a910:	3004      	addeq	r0, #4
 800a912:	079a      	lsls	r2, r3, #30
 800a914:	bf04      	itt	eq
 800a916:	089b      	lsreq	r3, r3, #2
 800a918:	3002      	addeq	r0, #2
 800a91a:	07da      	lsls	r2, r3, #31
 800a91c:	d403      	bmi.n	800a926 <__lo0bits+0x4e>
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	f100 0001 	add.w	r0, r0, #1
 800a924:	d005      	beq.n	800a932 <__lo0bits+0x5a>
 800a926:	600b      	str	r3, [r1, #0]
 800a928:	4770      	bx	lr
 800a92a:	4610      	mov	r0, r2
 800a92c:	e7e9      	b.n	800a902 <__lo0bits+0x2a>
 800a92e:	2000      	movs	r0, #0
 800a930:	4770      	bx	lr
 800a932:	2020      	movs	r0, #32
 800a934:	4770      	bx	lr
	...

0800a938 <__i2b>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	2101      	movs	r1, #1
 800a93e:	f7ff ff03 	bl	800a748 <_Balloc>
 800a942:	4602      	mov	r2, r0
 800a944:	b928      	cbnz	r0, 800a952 <__i2b+0x1a>
 800a946:	4b05      	ldr	r3, [pc, #20]	; (800a95c <__i2b+0x24>)
 800a948:	4805      	ldr	r0, [pc, #20]	; (800a960 <__i2b+0x28>)
 800a94a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a94e:	f000 fdf5 	bl	800b53c <__assert_func>
 800a952:	2301      	movs	r3, #1
 800a954:	6144      	str	r4, [r0, #20]
 800a956:	6103      	str	r3, [r0, #16]
 800a958:	bd10      	pop	{r4, pc}
 800a95a:	bf00      	nop
 800a95c:	0800c7bf 	.word	0x0800c7bf
 800a960:	0800c830 	.word	0x0800c830

0800a964 <__multiply>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	4691      	mov	r9, r2
 800a96a:	690a      	ldr	r2, [r1, #16]
 800a96c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a970:	429a      	cmp	r2, r3
 800a972:	bfb8      	it	lt
 800a974:	460b      	movlt	r3, r1
 800a976:	460c      	mov	r4, r1
 800a978:	bfbc      	itt	lt
 800a97a:	464c      	movlt	r4, r9
 800a97c:	4699      	movlt	r9, r3
 800a97e:	6927      	ldr	r7, [r4, #16]
 800a980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a984:	68a3      	ldr	r3, [r4, #8]
 800a986:	6861      	ldr	r1, [r4, #4]
 800a988:	eb07 060a 	add.w	r6, r7, sl
 800a98c:	42b3      	cmp	r3, r6
 800a98e:	b085      	sub	sp, #20
 800a990:	bfb8      	it	lt
 800a992:	3101      	addlt	r1, #1
 800a994:	f7ff fed8 	bl	800a748 <_Balloc>
 800a998:	b930      	cbnz	r0, 800a9a8 <__multiply+0x44>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b44      	ldr	r3, [pc, #272]	; (800aab0 <__multiply+0x14c>)
 800a99e:	4845      	ldr	r0, [pc, #276]	; (800aab4 <__multiply+0x150>)
 800a9a0:	f240 115d 	movw	r1, #349	; 0x15d
 800a9a4:	f000 fdca 	bl	800b53c <__assert_func>
 800a9a8:	f100 0514 	add.w	r5, r0, #20
 800a9ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9b0:	462b      	mov	r3, r5
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4543      	cmp	r3, r8
 800a9b6:	d321      	bcc.n	800a9fc <__multiply+0x98>
 800a9b8:	f104 0314 	add.w	r3, r4, #20
 800a9bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9c0:	f109 0314 	add.w	r3, r9, #20
 800a9c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9c8:	9202      	str	r2, [sp, #8]
 800a9ca:	1b3a      	subs	r2, r7, r4
 800a9cc:	3a15      	subs	r2, #21
 800a9ce:	f022 0203 	bic.w	r2, r2, #3
 800a9d2:	3204      	adds	r2, #4
 800a9d4:	f104 0115 	add.w	r1, r4, #21
 800a9d8:	428f      	cmp	r7, r1
 800a9da:	bf38      	it	cc
 800a9dc:	2204      	movcc	r2, #4
 800a9de:	9201      	str	r2, [sp, #4]
 800a9e0:	9a02      	ldr	r2, [sp, #8]
 800a9e2:	9303      	str	r3, [sp, #12]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d80c      	bhi.n	800aa02 <__multiply+0x9e>
 800a9e8:	2e00      	cmp	r6, #0
 800a9ea:	dd03      	ble.n	800a9f4 <__multiply+0x90>
 800a9ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d05a      	beq.n	800aaaa <__multiply+0x146>
 800a9f4:	6106      	str	r6, [r0, #16]
 800a9f6:	b005      	add	sp, #20
 800a9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fc:	f843 2b04 	str.w	r2, [r3], #4
 800aa00:	e7d8      	b.n	800a9b4 <__multiply+0x50>
 800aa02:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa06:	f1ba 0f00 	cmp.w	sl, #0
 800aa0a:	d024      	beq.n	800aa56 <__multiply+0xf2>
 800aa0c:	f104 0e14 	add.w	lr, r4, #20
 800aa10:	46a9      	mov	r9, r5
 800aa12:	f04f 0c00 	mov.w	ip, #0
 800aa16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa1a:	f8d9 1000 	ldr.w	r1, [r9]
 800aa1e:	fa1f fb82 	uxth.w	fp, r2
 800aa22:	b289      	uxth	r1, r1
 800aa24:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa2c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa30:	4461      	add	r1, ip
 800aa32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa36:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa3e:	b289      	uxth	r1, r1
 800aa40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa44:	4577      	cmp	r7, lr
 800aa46:	f849 1b04 	str.w	r1, [r9], #4
 800aa4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa4e:	d8e2      	bhi.n	800aa16 <__multiply+0xb2>
 800aa50:	9a01      	ldr	r2, [sp, #4]
 800aa52:	f845 c002 	str.w	ip, [r5, r2]
 800aa56:	9a03      	ldr	r2, [sp, #12]
 800aa58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	f1b9 0f00 	cmp.w	r9, #0
 800aa62:	d020      	beq.n	800aaa6 <__multiply+0x142>
 800aa64:	6829      	ldr	r1, [r5, #0]
 800aa66:	f104 0c14 	add.w	ip, r4, #20
 800aa6a:	46ae      	mov	lr, r5
 800aa6c:	f04f 0a00 	mov.w	sl, #0
 800aa70:	f8bc b000 	ldrh.w	fp, [ip]
 800aa74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa78:	fb09 220b 	mla	r2, r9, fp, r2
 800aa7c:	4492      	add	sl, r2
 800aa7e:	b289      	uxth	r1, r1
 800aa80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aa84:	f84e 1b04 	str.w	r1, [lr], #4
 800aa88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa8c:	f8be 1000 	ldrh.w	r1, [lr]
 800aa90:	0c12      	lsrs	r2, r2, #16
 800aa92:	fb09 1102 	mla	r1, r9, r2, r1
 800aa96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa9a:	4567      	cmp	r7, ip
 800aa9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aaa0:	d8e6      	bhi.n	800aa70 <__multiply+0x10c>
 800aaa2:	9a01      	ldr	r2, [sp, #4]
 800aaa4:	50a9      	str	r1, [r5, r2]
 800aaa6:	3504      	adds	r5, #4
 800aaa8:	e79a      	b.n	800a9e0 <__multiply+0x7c>
 800aaaa:	3e01      	subs	r6, #1
 800aaac:	e79c      	b.n	800a9e8 <__multiply+0x84>
 800aaae:	bf00      	nop
 800aab0:	0800c7bf 	.word	0x0800c7bf
 800aab4:	0800c830 	.word	0x0800c830

0800aab8 <__pow5mult>:
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	4615      	mov	r5, r2
 800aabe:	f012 0203 	ands.w	r2, r2, #3
 800aac2:	4606      	mov	r6, r0
 800aac4:	460f      	mov	r7, r1
 800aac6:	d007      	beq.n	800aad8 <__pow5mult+0x20>
 800aac8:	4c25      	ldr	r4, [pc, #148]	; (800ab60 <__pow5mult+0xa8>)
 800aaca:	3a01      	subs	r2, #1
 800aacc:	2300      	movs	r3, #0
 800aace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aad2:	f7ff fe9b 	bl	800a80c <__multadd>
 800aad6:	4607      	mov	r7, r0
 800aad8:	10ad      	asrs	r5, r5, #2
 800aada:	d03d      	beq.n	800ab58 <__pow5mult+0xa0>
 800aadc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aade:	b97c      	cbnz	r4, 800ab00 <__pow5mult+0x48>
 800aae0:	2010      	movs	r0, #16
 800aae2:	f7ff fe29 	bl	800a738 <malloc>
 800aae6:	4602      	mov	r2, r0
 800aae8:	6270      	str	r0, [r6, #36]	; 0x24
 800aaea:	b928      	cbnz	r0, 800aaf8 <__pow5mult+0x40>
 800aaec:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <__pow5mult+0xac>)
 800aaee:	481e      	ldr	r0, [pc, #120]	; (800ab68 <__pow5mult+0xb0>)
 800aaf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aaf4:	f000 fd22 	bl	800b53c <__assert_func>
 800aaf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aafc:	6004      	str	r4, [r0, #0]
 800aafe:	60c4      	str	r4, [r0, #12]
 800ab00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab08:	b94c      	cbnz	r4, 800ab1e <__pow5mult+0x66>
 800ab0a:	f240 2171 	movw	r1, #625	; 0x271
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7ff ff12 	bl	800a938 <__i2b>
 800ab14:	2300      	movs	r3, #0
 800ab16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	6003      	str	r3, [r0, #0]
 800ab1e:	f04f 0900 	mov.w	r9, #0
 800ab22:	07eb      	lsls	r3, r5, #31
 800ab24:	d50a      	bpl.n	800ab3c <__pow5mult+0x84>
 800ab26:	4639      	mov	r1, r7
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f7ff ff1a 	bl	800a964 <__multiply>
 800ab30:	4639      	mov	r1, r7
 800ab32:	4680      	mov	r8, r0
 800ab34:	4630      	mov	r0, r6
 800ab36:	f7ff fe47 	bl	800a7c8 <_Bfree>
 800ab3a:	4647      	mov	r7, r8
 800ab3c:	106d      	asrs	r5, r5, #1
 800ab3e:	d00b      	beq.n	800ab58 <__pow5mult+0xa0>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	b938      	cbnz	r0, 800ab54 <__pow5mult+0x9c>
 800ab44:	4622      	mov	r2, r4
 800ab46:	4621      	mov	r1, r4
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff ff0b 	bl	800a964 <__multiply>
 800ab4e:	6020      	str	r0, [r4, #0]
 800ab50:	f8c0 9000 	str.w	r9, [r0]
 800ab54:	4604      	mov	r4, r0
 800ab56:	e7e4      	b.n	800ab22 <__pow5mult+0x6a>
 800ab58:	4638      	mov	r0, r7
 800ab5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5e:	bf00      	nop
 800ab60:	0800c980 	.word	0x0800c980
 800ab64:	0800c74d 	.word	0x0800c74d
 800ab68:	0800c830 	.word	0x0800c830

0800ab6c <__lshift>:
 800ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	460c      	mov	r4, r1
 800ab72:	6849      	ldr	r1, [r1, #4]
 800ab74:	6923      	ldr	r3, [r4, #16]
 800ab76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	4691      	mov	r9, r2
 800ab80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab84:	f108 0601 	add.w	r6, r8, #1
 800ab88:	42b3      	cmp	r3, r6
 800ab8a:	db0b      	blt.n	800aba4 <__lshift+0x38>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	f7ff fddb 	bl	800a748 <_Balloc>
 800ab92:	4605      	mov	r5, r0
 800ab94:	b948      	cbnz	r0, 800abaa <__lshift+0x3e>
 800ab96:	4602      	mov	r2, r0
 800ab98:	4b2a      	ldr	r3, [pc, #168]	; (800ac44 <__lshift+0xd8>)
 800ab9a:	482b      	ldr	r0, [pc, #172]	; (800ac48 <__lshift+0xdc>)
 800ab9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aba0:	f000 fccc 	bl	800b53c <__assert_func>
 800aba4:	3101      	adds	r1, #1
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	e7ee      	b.n	800ab88 <__lshift+0x1c>
 800abaa:	2300      	movs	r3, #0
 800abac:	f100 0114 	add.w	r1, r0, #20
 800abb0:	f100 0210 	add.w	r2, r0, #16
 800abb4:	4618      	mov	r0, r3
 800abb6:	4553      	cmp	r3, sl
 800abb8:	db37      	blt.n	800ac2a <__lshift+0xbe>
 800abba:	6920      	ldr	r0, [r4, #16]
 800abbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abc0:	f104 0314 	add.w	r3, r4, #20
 800abc4:	f019 091f 	ands.w	r9, r9, #31
 800abc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abd0:	d02f      	beq.n	800ac32 <__lshift+0xc6>
 800abd2:	f1c9 0e20 	rsb	lr, r9, #32
 800abd6:	468a      	mov	sl, r1
 800abd8:	f04f 0c00 	mov.w	ip, #0
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	fa02 f209 	lsl.w	r2, r2, r9
 800abe2:	ea42 020c 	orr.w	r2, r2, ip
 800abe6:	f84a 2b04 	str.w	r2, [sl], #4
 800abea:	f853 2b04 	ldr.w	r2, [r3], #4
 800abee:	4298      	cmp	r0, r3
 800abf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800abf4:	d8f2      	bhi.n	800abdc <__lshift+0x70>
 800abf6:	1b03      	subs	r3, r0, r4
 800abf8:	3b15      	subs	r3, #21
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	3304      	adds	r3, #4
 800ac00:	f104 0215 	add.w	r2, r4, #21
 800ac04:	4290      	cmp	r0, r2
 800ac06:	bf38      	it	cc
 800ac08:	2304      	movcc	r3, #4
 800ac0a:	f841 c003 	str.w	ip, [r1, r3]
 800ac0e:	f1bc 0f00 	cmp.w	ip, #0
 800ac12:	d001      	beq.n	800ac18 <__lshift+0xac>
 800ac14:	f108 0602 	add.w	r6, r8, #2
 800ac18:	3e01      	subs	r6, #1
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	612e      	str	r6, [r5, #16]
 800ac1e:	4621      	mov	r1, r4
 800ac20:	f7ff fdd2 	bl	800a7c8 <_Bfree>
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac2e:	3301      	adds	r3, #1
 800ac30:	e7c1      	b.n	800abb6 <__lshift+0x4a>
 800ac32:	3904      	subs	r1, #4
 800ac34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac3c:	4298      	cmp	r0, r3
 800ac3e:	d8f9      	bhi.n	800ac34 <__lshift+0xc8>
 800ac40:	e7ea      	b.n	800ac18 <__lshift+0xac>
 800ac42:	bf00      	nop
 800ac44:	0800c7bf 	.word	0x0800c7bf
 800ac48:	0800c830 	.word	0x0800c830

0800ac4c <__mcmp>:
 800ac4c:	b530      	push	{r4, r5, lr}
 800ac4e:	6902      	ldr	r2, [r0, #16]
 800ac50:	690c      	ldr	r4, [r1, #16]
 800ac52:	1b12      	subs	r2, r2, r4
 800ac54:	d10e      	bne.n	800ac74 <__mcmp+0x28>
 800ac56:	f100 0314 	add.w	r3, r0, #20
 800ac5a:	3114      	adds	r1, #20
 800ac5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac6c:	42a5      	cmp	r5, r4
 800ac6e:	d003      	beq.n	800ac78 <__mcmp+0x2c>
 800ac70:	d305      	bcc.n	800ac7e <__mcmp+0x32>
 800ac72:	2201      	movs	r2, #1
 800ac74:	4610      	mov	r0, r2
 800ac76:	bd30      	pop	{r4, r5, pc}
 800ac78:	4283      	cmp	r3, r0
 800ac7a:	d3f3      	bcc.n	800ac64 <__mcmp+0x18>
 800ac7c:	e7fa      	b.n	800ac74 <__mcmp+0x28>
 800ac7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac82:	e7f7      	b.n	800ac74 <__mcmp+0x28>

0800ac84 <__mdiff>:
 800ac84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	460c      	mov	r4, r1
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4620      	mov	r0, r4
 800ac90:	4690      	mov	r8, r2
 800ac92:	f7ff ffdb 	bl	800ac4c <__mcmp>
 800ac96:	1e05      	subs	r5, r0, #0
 800ac98:	d110      	bne.n	800acbc <__mdiff+0x38>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff fd53 	bl	800a748 <_Balloc>
 800aca2:	b930      	cbnz	r0, 800acb2 <__mdiff+0x2e>
 800aca4:	4b3a      	ldr	r3, [pc, #232]	; (800ad90 <__mdiff+0x10c>)
 800aca6:	4602      	mov	r2, r0
 800aca8:	f240 2132 	movw	r1, #562	; 0x232
 800acac:	4839      	ldr	r0, [pc, #228]	; (800ad94 <__mdiff+0x110>)
 800acae:	f000 fc45 	bl	800b53c <__assert_func>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbc:	bfa4      	itt	ge
 800acbe:	4643      	movge	r3, r8
 800acc0:	46a0      	movge	r8, r4
 800acc2:	4630      	mov	r0, r6
 800acc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acc8:	bfa6      	itte	ge
 800acca:	461c      	movge	r4, r3
 800accc:	2500      	movge	r5, #0
 800acce:	2501      	movlt	r5, #1
 800acd0:	f7ff fd3a 	bl	800a748 <_Balloc>
 800acd4:	b920      	cbnz	r0, 800ace0 <__mdiff+0x5c>
 800acd6:	4b2e      	ldr	r3, [pc, #184]	; (800ad90 <__mdiff+0x10c>)
 800acd8:	4602      	mov	r2, r0
 800acda:	f44f 7110 	mov.w	r1, #576	; 0x240
 800acde:	e7e5      	b.n	800acac <__mdiff+0x28>
 800ace0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ace4:	6926      	ldr	r6, [r4, #16]
 800ace6:	60c5      	str	r5, [r0, #12]
 800ace8:	f104 0914 	add.w	r9, r4, #20
 800acec:	f108 0514 	add.w	r5, r8, #20
 800acf0:	f100 0e14 	add.w	lr, r0, #20
 800acf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800acf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800acfc:	f108 0210 	add.w	r2, r8, #16
 800ad00:	46f2      	mov	sl, lr
 800ad02:	2100      	movs	r1, #0
 800ad04:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad0c:	fa1f f883 	uxth.w	r8, r3
 800ad10:	fa11 f18b 	uxtah	r1, r1, fp
 800ad14:	0c1b      	lsrs	r3, r3, #16
 800ad16:	eba1 0808 	sub.w	r8, r1, r8
 800ad1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad22:	fa1f f888 	uxth.w	r8, r8
 800ad26:	1419      	asrs	r1, r3, #16
 800ad28:	454e      	cmp	r6, r9
 800ad2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad2e:	f84a 3b04 	str.w	r3, [sl], #4
 800ad32:	d8e7      	bhi.n	800ad04 <__mdiff+0x80>
 800ad34:	1b33      	subs	r3, r6, r4
 800ad36:	3b15      	subs	r3, #21
 800ad38:	f023 0303 	bic.w	r3, r3, #3
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	3415      	adds	r4, #21
 800ad40:	42a6      	cmp	r6, r4
 800ad42:	bf38      	it	cc
 800ad44:	2304      	movcc	r3, #4
 800ad46:	441d      	add	r5, r3
 800ad48:	4473      	add	r3, lr
 800ad4a:	469e      	mov	lr, r3
 800ad4c:	462e      	mov	r6, r5
 800ad4e:	4566      	cmp	r6, ip
 800ad50:	d30e      	bcc.n	800ad70 <__mdiff+0xec>
 800ad52:	f10c 0203 	add.w	r2, ip, #3
 800ad56:	1b52      	subs	r2, r2, r5
 800ad58:	f022 0203 	bic.w	r2, r2, #3
 800ad5c:	3d03      	subs	r5, #3
 800ad5e:	45ac      	cmp	ip, r5
 800ad60:	bf38      	it	cc
 800ad62:	2200      	movcc	r2, #0
 800ad64:	441a      	add	r2, r3
 800ad66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad6a:	b17b      	cbz	r3, 800ad8c <__mdiff+0x108>
 800ad6c:	6107      	str	r7, [r0, #16]
 800ad6e:	e7a3      	b.n	800acb8 <__mdiff+0x34>
 800ad70:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad74:	fa11 f288 	uxtah	r2, r1, r8
 800ad78:	1414      	asrs	r4, r2, #16
 800ad7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad7e:	b292      	uxth	r2, r2
 800ad80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad84:	f84e 2b04 	str.w	r2, [lr], #4
 800ad88:	1421      	asrs	r1, r4, #16
 800ad8a:	e7e0      	b.n	800ad4e <__mdiff+0xca>
 800ad8c:	3f01      	subs	r7, #1
 800ad8e:	e7ea      	b.n	800ad66 <__mdiff+0xe2>
 800ad90:	0800c7bf 	.word	0x0800c7bf
 800ad94:	0800c830 	.word	0x0800c830

0800ad98 <__d2b>:
 800ad98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	4689      	mov	r9, r1
 800ad9e:	2101      	movs	r1, #1
 800ada0:	ec57 6b10 	vmov	r6, r7, d0
 800ada4:	4690      	mov	r8, r2
 800ada6:	f7ff fccf 	bl	800a748 <_Balloc>
 800adaa:	4604      	mov	r4, r0
 800adac:	b930      	cbnz	r0, 800adbc <__d2b+0x24>
 800adae:	4602      	mov	r2, r0
 800adb0:	4b25      	ldr	r3, [pc, #148]	; (800ae48 <__d2b+0xb0>)
 800adb2:	4826      	ldr	r0, [pc, #152]	; (800ae4c <__d2b+0xb4>)
 800adb4:	f240 310a 	movw	r1, #778	; 0x30a
 800adb8:	f000 fbc0 	bl	800b53c <__assert_func>
 800adbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800adc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adc4:	bb35      	cbnz	r5, 800ae14 <__d2b+0x7c>
 800adc6:	2e00      	cmp	r6, #0
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	d028      	beq.n	800ae1e <__d2b+0x86>
 800adcc:	4668      	mov	r0, sp
 800adce:	9600      	str	r6, [sp, #0]
 800add0:	f7ff fd82 	bl	800a8d8 <__lo0bits>
 800add4:	9900      	ldr	r1, [sp, #0]
 800add6:	b300      	cbz	r0, 800ae1a <__d2b+0x82>
 800add8:	9a01      	ldr	r2, [sp, #4]
 800adda:	f1c0 0320 	rsb	r3, r0, #32
 800adde:	fa02 f303 	lsl.w	r3, r2, r3
 800ade2:	430b      	orrs	r3, r1
 800ade4:	40c2      	lsrs	r2, r0
 800ade6:	6163      	str	r3, [r4, #20]
 800ade8:	9201      	str	r2, [sp, #4]
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	61a3      	str	r3, [r4, #24]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bf14      	ite	ne
 800adf2:	2202      	movne	r2, #2
 800adf4:	2201      	moveq	r2, #1
 800adf6:	6122      	str	r2, [r4, #16]
 800adf8:	b1d5      	cbz	r5, 800ae30 <__d2b+0x98>
 800adfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adfe:	4405      	add	r5, r0
 800ae00:	f8c9 5000 	str.w	r5, [r9]
 800ae04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae08:	f8c8 0000 	str.w	r0, [r8]
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	b003      	add	sp, #12
 800ae10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae18:	e7d5      	b.n	800adc6 <__d2b+0x2e>
 800ae1a:	6161      	str	r1, [r4, #20]
 800ae1c:	e7e5      	b.n	800adea <__d2b+0x52>
 800ae1e:	a801      	add	r0, sp, #4
 800ae20:	f7ff fd5a 	bl	800a8d8 <__lo0bits>
 800ae24:	9b01      	ldr	r3, [sp, #4]
 800ae26:	6163      	str	r3, [r4, #20]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	6122      	str	r2, [r4, #16]
 800ae2c:	3020      	adds	r0, #32
 800ae2e:	e7e3      	b.n	800adf8 <__d2b+0x60>
 800ae30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae38:	f8c9 0000 	str.w	r0, [r9]
 800ae3c:	6918      	ldr	r0, [r3, #16]
 800ae3e:	f7ff fd2b 	bl	800a898 <__hi0bits>
 800ae42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae46:	e7df      	b.n	800ae08 <__d2b+0x70>
 800ae48:	0800c7bf 	.word	0x0800c7bf
 800ae4c:	0800c830 	.word	0x0800c830

0800ae50 <_calloc_r>:
 800ae50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae52:	fba1 2402 	umull	r2, r4, r1, r2
 800ae56:	b94c      	cbnz	r4, 800ae6c <_calloc_r+0x1c>
 800ae58:	4611      	mov	r1, r2
 800ae5a:	9201      	str	r2, [sp, #4]
 800ae5c:	f000 f87a 	bl	800af54 <_malloc_r>
 800ae60:	9a01      	ldr	r2, [sp, #4]
 800ae62:	4605      	mov	r5, r0
 800ae64:	b930      	cbnz	r0, 800ae74 <_calloc_r+0x24>
 800ae66:	4628      	mov	r0, r5
 800ae68:	b003      	add	sp, #12
 800ae6a:	bd30      	pop	{r4, r5, pc}
 800ae6c:	220c      	movs	r2, #12
 800ae6e:	6002      	str	r2, [r0, #0]
 800ae70:	2500      	movs	r5, #0
 800ae72:	e7f8      	b.n	800ae66 <_calloc_r+0x16>
 800ae74:	4621      	mov	r1, r4
 800ae76:	f7fe f85b 	bl	8008f30 <memset>
 800ae7a:	e7f4      	b.n	800ae66 <_calloc_r+0x16>

0800ae7c <_free_r>:
 800ae7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	d044      	beq.n	800af0c <_free_r+0x90>
 800ae82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae86:	9001      	str	r0, [sp, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae8e:	bfb8      	it	lt
 800ae90:	18e4      	addlt	r4, r4, r3
 800ae92:	f000 fcdf 	bl	800b854 <__malloc_lock>
 800ae96:	4a1e      	ldr	r2, [pc, #120]	; (800af10 <_free_r+0x94>)
 800ae98:	9801      	ldr	r0, [sp, #4]
 800ae9a:	6813      	ldr	r3, [r2, #0]
 800ae9c:	b933      	cbnz	r3, 800aeac <_free_r+0x30>
 800ae9e:	6063      	str	r3, [r4, #4]
 800aea0:	6014      	str	r4, [r2, #0]
 800aea2:	b003      	add	sp, #12
 800aea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aea8:	f000 bcda 	b.w	800b860 <__malloc_unlock>
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	d908      	bls.n	800aec2 <_free_r+0x46>
 800aeb0:	6825      	ldr	r5, [r4, #0]
 800aeb2:	1961      	adds	r1, r4, r5
 800aeb4:	428b      	cmp	r3, r1
 800aeb6:	bf01      	itttt	eq
 800aeb8:	6819      	ldreq	r1, [r3, #0]
 800aeba:	685b      	ldreq	r3, [r3, #4]
 800aebc:	1949      	addeq	r1, r1, r5
 800aebe:	6021      	streq	r1, [r4, #0]
 800aec0:	e7ed      	b.n	800ae9e <_free_r+0x22>
 800aec2:	461a      	mov	r2, r3
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	b10b      	cbz	r3, 800aecc <_free_r+0x50>
 800aec8:	42a3      	cmp	r3, r4
 800aeca:	d9fa      	bls.n	800aec2 <_free_r+0x46>
 800aecc:	6811      	ldr	r1, [r2, #0]
 800aece:	1855      	adds	r5, r2, r1
 800aed0:	42a5      	cmp	r5, r4
 800aed2:	d10b      	bne.n	800aeec <_free_r+0x70>
 800aed4:	6824      	ldr	r4, [r4, #0]
 800aed6:	4421      	add	r1, r4
 800aed8:	1854      	adds	r4, r2, r1
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	d1e0      	bne.n	800aea2 <_free_r+0x26>
 800aee0:	681c      	ldr	r4, [r3, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	6053      	str	r3, [r2, #4]
 800aee6:	4421      	add	r1, r4
 800aee8:	6011      	str	r1, [r2, #0]
 800aeea:	e7da      	b.n	800aea2 <_free_r+0x26>
 800aeec:	d902      	bls.n	800aef4 <_free_r+0x78>
 800aeee:	230c      	movs	r3, #12
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	e7d6      	b.n	800aea2 <_free_r+0x26>
 800aef4:	6825      	ldr	r5, [r4, #0]
 800aef6:	1961      	adds	r1, r4, r5
 800aef8:	428b      	cmp	r3, r1
 800aefa:	bf04      	itt	eq
 800aefc:	6819      	ldreq	r1, [r3, #0]
 800aefe:	685b      	ldreq	r3, [r3, #4]
 800af00:	6063      	str	r3, [r4, #4]
 800af02:	bf04      	itt	eq
 800af04:	1949      	addeq	r1, r1, r5
 800af06:	6021      	streq	r1, [r4, #0]
 800af08:	6054      	str	r4, [r2, #4]
 800af0a:	e7ca      	b.n	800aea2 <_free_r+0x26>
 800af0c:	b003      	add	sp, #12
 800af0e:	bd30      	pop	{r4, r5, pc}
 800af10:	2000042c 	.word	0x2000042c

0800af14 <sbrk_aligned>:
 800af14:	b570      	push	{r4, r5, r6, lr}
 800af16:	4e0e      	ldr	r6, [pc, #56]	; (800af50 <sbrk_aligned+0x3c>)
 800af18:	460c      	mov	r4, r1
 800af1a:	6831      	ldr	r1, [r6, #0]
 800af1c:	4605      	mov	r5, r0
 800af1e:	b911      	cbnz	r1, 800af26 <sbrk_aligned+0x12>
 800af20:	f000 f9e6 	bl	800b2f0 <_sbrk_r>
 800af24:	6030      	str	r0, [r6, #0]
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f000 f9e1 	bl	800b2f0 <_sbrk_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d00a      	beq.n	800af48 <sbrk_aligned+0x34>
 800af32:	1cc4      	adds	r4, r0, #3
 800af34:	f024 0403 	bic.w	r4, r4, #3
 800af38:	42a0      	cmp	r0, r4
 800af3a:	d007      	beq.n	800af4c <sbrk_aligned+0x38>
 800af3c:	1a21      	subs	r1, r4, r0
 800af3e:	4628      	mov	r0, r5
 800af40:	f000 f9d6 	bl	800b2f0 <_sbrk_r>
 800af44:	3001      	adds	r0, #1
 800af46:	d101      	bne.n	800af4c <sbrk_aligned+0x38>
 800af48:	f04f 34ff 	mov.w	r4, #4294967295
 800af4c:	4620      	mov	r0, r4
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	20000430 	.word	0x20000430

0800af54 <_malloc_r>:
 800af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af58:	1ccd      	adds	r5, r1, #3
 800af5a:	f025 0503 	bic.w	r5, r5, #3
 800af5e:	3508      	adds	r5, #8
 800af60:	2d0c      	cmp	r5, #12
 800af62:	bf38      	it	cc
 800af64:	250c      	movcc	r5, #12
 800af66:	2d00      	cmp	r5, #0
 800af68:	4607      	mov	r7, r0
 800af6a:	db01      	blt.n	800af70 <_malloc_r+0x1c>
 800af6c:	42a9      	cmp	r1, r5
 800af6e:	d905      	bls.n	800af7c <_malloc_r+0x28>
 800af70:	230c      	movs	r3, #12
 800af72:	603b      	str	r3, [r7, #0]
 800af74:	2600      	movs	r6, #0
 800af76:	4630      	mov	r0, r6
 800af78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7c:	4e2e      	ldr	r6, [pc, #184]	; (800b038 <_malloc_r+0xe4>)
 800af7e:	f000 fc69 	bl	800b854 <__malloc_lock>
 800af82:	6833      	ldr	r3, [r6, #0]
 800af84:	461c      	mov	r4, r3
 800af86:	bb34      	cbnz	r4, 800afd6 <_malloc_r+0x82>
 800af88:	4629      	mov	r1, r5
 800af8a:	4638      	mov	r0, r7
 800af8c:	f7ff ffc2 	bl	800af14 <sbrk_aligned>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	4604      	mov	r4, r0
 800af94:	d14d      	bne.n	800b032 <_malloc_r+0xde>
 800af96:	6834      	ldr	r4, [r6, #0]
 800af98:	4626      	mov	r6, r4
 800af9a:	2e00      	cmp	r6, #0
 800af9c:	d140      	bne.n	800b020 <_malloc_r+0xcc>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	4631      	mov	r1, r6
 800afa2:	4638      	mov	r0, r7
 800afa4:	eb04 0803 	add.w	r8, r4, r3
 800afa8:	f000 f9a2 	bl	800b2f0 <_sbrk_r>
 800afac:	4580      	cmp	r8, r0
 800afae:	d13a      	bne.n	800b026 <_malloc_r+0xd2>
 800afb0:	6821      	ldr	r1, [r4, #0]
 800afb2:	3503      	adds	r5, #3
 800afb4:	1a6d      	subs	r5, r5, r1
 800afb6:	f025 0503 	bic.w	r5, r5, #3
 800afba:	3508      	adds	r5, #8
 800afbc:	2d0c      	cmp	r5, #12
 800afbe:	bf38      	it	cc
 800afc0:	250c      	movcc	r5, #12
 800afc2:	4629      	mov	r1, r5
 800afc4:	4638      	mov	r0, r7
 800afc6:	f7ff ffa5 	bl	800af14 <sbrk_aligned>
 800afca:	3001      	adds	r0, #1
 800afcc:	d02b      	beq.n	800b026 <_malloc_r+0xd2>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	442b      	add	r3, r5
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	e00e      	b.n	800aff4 <_malloc_r+0xa0>
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	1b52      	subs	r2, r2, r5
 800afda:	d41e      	bmi.n	800b01a <_malloc_r+0xc6>
 800afdc:	2a0b      	cmp	r2, #11
 800afde:	d916      	bls.n	800b00e <_malloc_r+0xba>
 800afe0:	1961      	adds	r1, r4, r5
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	6025      	str	r5, [r4, #0]
 800afe6:	bf18      	it	ne
 800afe8:	6059      	strne	r1, [r3, #4]
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	bf08      	it	eq
 800afee:	6031      	streq	r1, [r6, #0]
 800aff0:	5162      	str	r2, [r4, r5]
 800aff2:	604b      	str	r3, [r1, #4]
 800aff4:	4638      	mov	r0, r7
 800aff6:	f104 060b 	add.w	r6, r4, #11
 800affa:	f000 fc31 	bl	800b860 <__malloc_unlock>
 800affe:	f026 0607 	bic.w	r6, r6, #7
 800b002:	1d23      	adds	r3, r4, #4
 800b004:	1af2      	subs	r2, r6, r3
 800b006:	d0b6      	beq.n	800af76 <_malloc_r+0x22>
 800b008:	1b9b      	subs	r3, r3, r6
 800b00a:	50a3      	str	r3, [r4, r2]
 800b00c:	e7b3      	b.n	800af76 <_malloc_r+0x22>
 800b00e:	6862      	ldr	r2, [r4, #4]
 800b010:	42a3      	cmp	r3, r4
 800b012:	bf0c      	ite	eq
 800b014:	6032      	streq	r2, [r6, #0]
 800b016:	605a      	strne	r2, [r3, #4]
 800b018:	e7ec      	b.n	800aff4 <_malloc_r+0xa0>
 800b01a:	4623      	mov	r3, r4
 800b01c:	6864      	ldr	r4, [r4, #4]
 800b01e:	e7b2      	b.n	800af86 <_malloc_r+0x32>
 800b020:	4634      	mov	r4, r6
 800b022:	6876      	ldr	r6, [r6, #4]
 800b024:	e7b9      	b.n	800af9a <_malloc_r+0x46>
 800b026:	230c      	movs	r3, #12
 800b028:	603b      	str	r3, [r7, #0]
 800b02a:	4638      	mov	r0, r7
 800b02c:	f000 fc18 	bl	800b860 <__malloc_unlock>
 800b030:	e7a1      	b.n	800af76 <_malloc_r+0x22>
 800b032:	6025      	str	r5, [r4, #0]
 800b034:	e7de      	b.n	800aff4 <_malloc_r+0xa0>
 800b036:	bf00      	nop
 800b038:	2000042c 	.word	0x2000042c

0800b03c <__sfputc_r>:
 800b03c:	6893      	ldr	r3, [r2, #8]
 800b03e:	3b01      	subs	r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	b410      	push	{r4}
 800b044:	6093      	str	r3, [r2, #8]
 800b046:	da08      	bge.n	800b05a <__sfputc_r+0x1e>
 800b048:	6994      	ldr	r4, [r2, #24]
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	db01      	blt.n	800b052 <__sfputc_r+0x16>
 800b04e:	290a      	cmp	r1, #10
 800b050:	d103      	bne.n	800b05a <__sfputc_r+0x1e>
 800b052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b056:	f000 b99f 	b.w	800b398 <__swbuf_r>
 800b05a:	6813      	ldr	r3, [r2, #0]
 800b05c:	1c58      	adds	r0, r3, #1
 800b05e:	6010      	str	r0, [r2, #0]
 800b060:	7019      	strb	r1, [r3, #0]
 800b062:	4608      	mov	r0, r1
 800b064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <__sfputs_r>:
 800b06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06c:	4606      	mov	r6, r0
 800b06e:	460f      	mov	r7, r1
 800b070:	4614      	mov	r4, r2
 800b072:	18d5      	adds	r5, r2, r3
 800b074:	42ac      	cmp	r4, r5
 800b076:	d101      	bne.n	800b07c <__sfputs_r+0x12>
 800b078:	2000      	movs	r0, #0
 800b07a:	e007      	b.n	800b08c <__sfputs_r+0x22>
 800b07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b080:	463a      	mov	r2, r7
 800b082:	4630      	mov	r0, r6
 800b084:	f7ff ffda 	bl	800b03c <__sfputc_r>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d1f3      	bne.n	800b074 <__sfputs_r+0xa>
 800b08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b090 <_vfiprintf_r>:
 800b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b094:	460d      	mov	r5, r1
 800b096:	b09d      	sub	sp, #116	; 0x74
 800b098:	4614      	mov	r4, r2
 800b09a:	4698      	mov	r8, r3
 800b09c:	4606      	mov	r6, r0
 800b09e:	b118      	cbz	r0, 800b0a8 <_vfiprintf_r+0x18>
 800b0a0:	6983      	ldr	r3, [r0, #24]
 800b0a2:	b90b      	cbnz	r3, 800b0a8 <_vfiprintf_r+0x18>
 800b0a4:	f7ff faa2 	bl	800a5ec <__sinit>
 800b0a8:	4b89      	ldr	r3, [pc, #548]	; (800b2d0 <_vfiprintf_r+0x240>)
 800b0aa:	429d      	cmp	r5, r3
 800b0ac:	d11b      	bne.n	800b0e6 <_vfiprintf_r+0x56>
 800b0ae:	6875      	ldr	r5, [r6, #4]
 800b0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b2:	07d9      	lsls	r1, r3, #31
 800b0b4:	d405      	bmi.n	800b0c2 <_vfiprintf_r+0x32>
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	059a      	lsls	r2, r3, #22
 800b0ba:	d402      	bmi.n	800b0c2 <_vfiprintf_r+0x32>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0be:	f7ff fb38 	bl	800a732 <__retarget_lock_acquire_recursive>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	071b      	lsls	r3, r3, #28
 800b0c6:	d501      	bpl.n	800b0cc <_vfiprintf_r+0x3c>
 800b0c8:	692b      	ldr	r3, [r5, #16]
 800b0ca:	b9eb      	cbnz	r3, 800b108 <_vfiprintf_r+0x78>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f000 f9c6 	bl	800b460 <__swsetup_r>
 800b0d4:	b1c0      	cbz	r0, 800b108 <_vfiprintf_r+0x78>
 800b0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0d8:	07dc      	lsls	r4, r3, #31
 800b0da:	d50e      	bpl.n	800b0fa <_vfiprintf_r+0x6a>
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e0:	b01d      	add	sp, #116	; 0x74
 800b0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e6:	4b7b      	ldr	r3, [pc, #492]	; (800b2d4 <_vfiprintf_r+0x244>)
 800b0e8:	429d      	cmp	r5, r3
 800b0ea:	d101      	bne.n	800b0f0 <_vfiprintf_r+0x60>
 800b0ec:	68b5      	ldr	r5, [r6, #8]
 800b0ee:	e7df      	b.n	800b0b0 <_vfiprintf_r+0x20>
 800b0f0:	4b79      	ldr	r3, [pc, #484]	; (800b2d8 <_vfiprintf_r+0x248>)
 800b0f2:	429d      	cmp	r5, r3
 800b0f4:	bf08      	it	eq
 800b0f6:	68f5      	ldreq	r5, [r6, #12]
 800b0f8:	e7da      	b.n	800b0b0 <_vfiprintf_r+0x20>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	0598      	lsls	r0, r3, #22
 800b0fe:	d4ed      	bmi.n	800b0dc <_vfiprintf_r+0x4c>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7ff fb17 	bl	800a734 <__retarget_lock_release_recursive>
 800b106:	e7e9      	b.n	800b0dc <_vfiprintf_r+0x4c>
 800b108:	2300      	movs	r3, #0
 800b10a:	9309      	str	r3, [sp, #36]	; 0x24
 800b10c:	2320      	movs	r3, #32
 800b10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b112:	f8cd 800c 	str.w	r8, [sp, #12]
 800b116:	2330      	movs	r3, #48	; 0x30
 800b118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2dc <_vfiprintf_r+0x24c>
 800b11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b120:	f04f 0901 	mov.w	r9, #1
 800b124:	4623      	mov	r3, r4
 800b126:	469a      	mov	sl, r3
 800b128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b12c:	b10a      	cbz	r2, 800b132 <_vfiprintf_r+0xa2>
 800b12e:	2a25      	cmp	r2, #37	; 0x25
 800b130:	d1f9      	bne.n	800b126 <_vfiprintf_r+0x96>
 800b132:	ebba 0b04 	subs.w	fp, sl, r4
 800b136:	d00b      	beq.n	800b150 <_vfiprintf_r+0xc0>
 800b138:	465b      	mov	r3, fp
 800b13a:	4622      	mov	r2, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	4630      	mov	r0, r6
 800b140:	f7ff ff93 	bl	800b06a <__sfputs_r>
 800b144:	3001      	adds	r0, #1
 800b146:	f000 80aa 	beq.w	800b29e <_vfiprintf_r+0x20e>
 800b14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b14c:	445a      	add	r2, fp
 800b14e:	9209      	str	r2, [sp, #36]	; 0x24
 800b150:	f89a 3000 	ldrb.w	r3, [sl]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 80a2 	beq.w	800b29e <_vfiprintf_r+0x20e>
 800b15a:	2300      	movs	r3, #0
 800b15c:	f04f 32ff 	mov.w	r2, #4294967295
 800b160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b164:	f10a 0a01 	add.w	sl, sl, #1
 800b168:	9304      	str	r3, [sp, #16]
 800b16a:	9307      	str	r3, [sp, #28]
 800b16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b170:	931a      	str	r3, [sp, #104]	; 0x68
 800b172:	4654      	mov	r4, sl
 800b174:	2205      	movs	r2, #5
 800b176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b17a:	4858      	ldr	r0, [pc, #352]	; (800b2dc <_vfiprintf_r+0x24c>)
 800b17c:	f7f5 f838 	bl	80001f0 <memchr>
 800b180:	9a04      	ldr	r2, [sp, #16]
 800b182:	b9d8      	cbnz	r0, 800b1bc <_vfiprintf_r+0x12c>
 800b184:	06d1      	lsls	r1, r2, #27
 800b186:	bf44      	itt	mi
 800b188:	2320      	movmi	r3, #32
 800b18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18e:	0713      	lsls	r3, r2, #28
 800b190:	bf44      	itt	mi
 800b192:	232b      	movmi	r3, #43	; 0x2b
 800b194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b198:	f89a 3000 	ldrb.w	r3, [sl]
 800b19c:	2b2a      	cmp	r3, #42	; 0x2a
 800b19e:	d015      	beq.n	800b1cc <_vfiprintf_r+0x13c>
 800b1a0:	9a07      	ldr	r2, [sp, #28]
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	f04f 0c0a 	mov.w	ip, #10
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1b0:	3b30      	subs	r3, #48	; 0x30
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	d94e      	bls.n	800b254 <_vfiprintf_r+0x1c4>
 800b1b6:	b1b0      	cbz	r0, 800b1e6 <_vfiprintf_r+0x156>
 800b1b8:	9207      	str	r2, [sp, #28]
 800b1ba:	e014      	b.n	800b1e6 <_vfiprintf_r+0x156>
 800b1bc:	eba0 0308 	sub.w	r3, r0, r8
 800b1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	46a2      	mov	sl, r4
 800b1ca:	e7d2      	b.n	800b172 <_vfiprintf_r+0xe2>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	1d19      	adds	r1, r3, #4
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	9103      	str	r1, [sp, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfbb      	ittet	lt
 800b1d8:	425b      	neglt	r3, r3
 800b1da:	f042 0202 	orrlt.w	r2, r2, #2
 800b1de:	9307      	strge	r3, [sp, #28]
 800b1e0:	9307      	strlt	r3, [sp, #28]
 800b1e2:	bfb8      	it	lt
 800b1e4:	9204      	strlt	r2, [sp, #16]
 800b1e6:	7823      	ldrb	r3, [r4, #0]
 800b1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ea:	d10c      	bne.n	800b206 <_vfiprintf_r+0x176>
 800b1ec:	7863      	ldrb	r3, [r4, #1]
 800b1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f0:	d135      	bne.n	800b25e <_vfiprintf_r+0x1ce>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	9203      	str	r2, [sp, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb8      	it	lt
 800b1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800b202:	3402      	adds	r4, #2
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2ec <_vfiprintf_r+0x25c>
 800b20a:	7821      	ldrb	r1, [r4, #0]
 800b20c:	2203      	movs	r2, #3
 800b20e:	4650      	mov	r0, sl
 800b210:	f7f4 ffee 	bl	80001f0 <memchr>
 800b214:	b140      	cbz	r0, 800b228 <_vfiprintf_r+0x198>
 800b216:	2340      	movs	r3, #64	; 0x40
 800b218:	eba0 000a 	sub.w	r0, r0, sl
 800b21c:	fa03 f000 	lsl.w	r0, r3, r0
 800b220:	9b04      	ldr	r3, [sp, #16]
 800b222:	4303      	orrs	r3, r0
 800b224:	3401      	adds	r4, #1
 800b226:	9304      	str	r3, [sp, #16]
 800b228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22c:	482c      	ldr	r0, [pc, #176]	; (800b2e0 <_vfiprintf_r+0x250>)
 800b22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b232:	2206      	movs	r2, #6
 800b234:	f7f4 ffdc 	bl	80001f0 <memchr>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d03f      	beq.n	800b2bc <_vfiprintf_r+0x22c>
 800b23c:	4b29      	ldr	r3, [pc, #164]	; (800b2e4 <_vfiprintf_r+0x254>)
 800b23e:	bb1b      	cbnz	r3, 800b288 <_vfiprintf_r+0x1f8>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	3307      	adds	r3, #7
 800b244:	f023 0307 	bic.w	r3, r3, #7
 800b248:	3308      	adds	r3, #8
 800b24a:	9303      	str	r3, [sp, #12]
 800b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24e:	443b      	add	r3, r7
 800b250:	9309      	str	r3, [sp, #36]	; 0x24
 800b252:	e767      	b.n	800b124 <_vfiprintf_r+0x94>
 800b254:	fb0c 3202 	mla	r2, ip, r2, r3
 800b258:	460c      	mov	r4, r1
 800b25a:	2001      	movs	r0, #1
 800b25c:	e7a5      	b.n	800b1aa <_vfiprintf_r+0x11a>
 800b25e:	2300      	movs	r3, #0
 800b260:	3401      	adds	r4, #1
 800b262:	9305      	str	r3, [sp, #20]
 800b264:	4619      	mov	r1, r3
 800b266:	f04f 0c0a 	mov.w	ip, #10
 800b26a:	4620      	mov	r0, r4
 800b26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b270:	3a30      	subs	r2, #48	; 0x30
 800b272:	2a09      	cmp	r2, #9
 800b274:	d903      	bls.n	800b27e <_vfiprintf_r+0x1ee>
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0c5      	beq.n	800b206 <_vfiprintf_r+0x176>
 800b27a:	9105      	str	r1, [sp, #20]
 800b27c:	e7c3      	b.n	800b206 <_vfiprintf_r+0x176>
 800b27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b282:	4604      	mov	r4, r0
 800b284:	2301      	movs	r3, #1
 800b286:	e7f0      	b.n	800b26a <_vfiprintf_r+0x1da>
 800b288:	ab03      	add	r3, sp, #12
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	462a      	mov	r2, r5
 800b28e:	4b16      	ldr	r3, [pc, #88]	; (800b2e8 <_vfiprintf_r+0x258>)
 800b290:	a904      	add	r1, sp, #16
 800b292:	4630      	mov	r0, r6
 800b294:	f7fd fef4 	bl	8009080 <_printf_float>
 800b298:	4607      	mov	r7, r0
 800b29a:	1c78      	adds	r0, r7, #1
 800b29c:	d1d6      	bne.n	800b24c <_vfiprintf_r+0x1bc>
 800b29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2a0:	07d9      	lsls	r1, r3, #31
 800b2a2:	d405      	bmi.n	800b2b0 <_vfiprintf_r+0x220>
 800b2a4:	89ab      	ldrh	r3, [r5, #12]
 800b2a6:	059a      	lsls	r2, r3, #22
 800b2a8:	d402      	bmi.n	800b2b0 <_vfiprintf_r+0x220>
 800b2aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ac:	f7ff fa42 	bl	800a734 <__retarget_lock_release_recursive>
 800b2b0:	89ab      	ldrh	r3, [r5, #12]
 800b2b2:	065b      	lsls	r3, r3, #25
 800b2b4:	f53f af12 	bmi.w	800b0dc <_vfiprintf_r+0x4c>
 800b2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ba:	e711      	b.n	800b0e0 <_vfiprintf_r+0x50>
 800b2bc:	ab03      	add	r3, sp, #12
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <_vfiprintf_r+0x258>)
 800b2c4:	a904      	add	r1, sp, #16
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7fe f97e 	bl	80095c8 <_printf_i>
 800b2cc:	e7e4      	b.n	800b298 <_vfiprintf_r+0x208>
 800b2ce:	bf00      	nop
 800b2d0:	0800c7f0 	.word	0x0800c7f0
 800b2d4:	0800c810 	.word	0x0800c810
 800b2d8:	0800c7d0 	.word	0x0800c7d0
 800b2dc:	0800c98c 	.word	0x0800c98c
 800b2e0:	0800c996 	.word	0x0800c996
 800b2e4:	08009081 	.word	0x08009081
 800b2e8:	0800b06b 	.word	0x0800b06b
 800b2ec:	0800c992 	.word	0x0800c992

0800b2f0 <_sbrk_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d06      	ldr	r5, [pc, #24]	; (800b30c <_sbrk_r+0x1c>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	f7f9 ffce 	bl	800529c <_sbrk>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_sbrk_r+0x1a>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_sbrk_r+0x1a>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	20000434 	.word	0x20000434

0800b310 <__sread>:
 800b310:	b510      	push	{r4, lr}
 800b312:	460c      	mov	r4, r1
 800b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b318:	f000 faa8 	bl	800b86c <_read_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	bfab      	itete	ge
 800b320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b322:	89a3      	ldrhlt	r3, [r4, #12]
 800b324:	181b      	addge	r3, r3, r0
 800b326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b32a:	bfac      	ite	ge
 800b32c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b32e:	81a3      	strhlt	r3, [r4, #12]
 800b330:	bd10      	pop	{r4, pc}

0800b332 <__swrite>:
 800b332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b336:	461f      	mov	r7, r3
 800b338:	898b      	ldrh	r3, [r1, #12]
 800b33a:	05db      	lsls	r3, r3, #23
 800b33c:	4605      	mov	r5, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	4616      	mov	r6, r2
 800b342:	d505      	bpl.n	800b350 <__swrite+0x1e>
 800b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b348:	2302      	movs	r3, #2
 800b34a:	2200      	movs	r2, #0
 800b34c:	f000 f9f8 	bl	800b740 <_lseek_r>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	4632      	mov	r2, r6
 800b35e:	463b      	mov	r3, r7
 800b360:	4628      	mov	r0, r5
 800b362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b366:	f000 b869 	b.w	800b43c <_write_r>

0800b36a <__sseek>:
 800b36a:	b510      	push	{r4, lr}
 800b36c:	460c      	mov	r4, r1
 800b36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b372:	f000 f9e5 	bl	800b740 <_lseek_r>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	bf15      	itete	ne
 800b37c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b386:	81a3      	strheq	r3, [r4, #12]
 800b388:	bf18      	it	ne
 800b38a:	81a3      	strhne	r3, [r4, #12]
 800b38c:	bd10      	pop	{r4, pc}

0800b38e <__sclose>:
 800b38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b392:	f000 b8f1 	b.w	800b578 <_close_r>
	...

0800b398 <__swbuf_r>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	460e      	mov	r6, r1
 800b39c:	4614      	mov	r4, r2
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b118      	cbz	r0, 800b3aa <__swbuf_r+0x12>
 800b3a2:	6983      	ldr	r3, [r0, #24]
 800b3a4:	b90b      	cbnz	r3, 800b3aa <__swbuf_r+0x12>
 800b3a6:	f7ff f921 	bl	800a5ec <__sinit>
 800b3aa:	4b21      	ldr	r3, [pc, #132]	; (800b430 <__swbuf_r+0x98>)
 800b3ac:	429c      	cmp	r4, r3
 800b3ae:	d12b      	bne.n	800b408 <__swbuf_r+0x70>
 800b3b0:	686c      	ldr	r4, [r5, #4]
 800b3b2:	69a3      	ldr	r3, [r4, #24]
 800b3b4:	60a3      	str	r3, [r4, #8]
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	071a      	lsls	r2, r3, #28
 800b3ba:	d52f      	bpl.n	800b41c <__swbuf_r+0x84>
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	b36b      	cbz	r3, 800b41c <__swbuf_r+0x84>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	6820      	ldr	r0, [r4, #0]
 800b3c4:	1ac0      	subs	r0, r0, r3
 800b3c6:	6963      	ldr	r3, [r4, #20]
 800b3c8:	b2f6      	uxtb	r6, r6
 800b3ca:	4283      	cmp	r3, r0
 800b3cc:	4637      	mov	r7, r6
 800b3ce:	dc04      	bgt.n	800b3da <__swbuf_r+0x42>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f000 f966 	bl	800b6a4 <_fflush_r>
 800b3d8:	bb30      	cbnz	r0, 800b428 <__swbuf_r+0x90>
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	60a3      	str	r3, [r4, #8]
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	6022      	str	r2, [r4, #0]
 800b3e6:	701e      	strb	r6, [r3, #0]
 800b3e8:	6963      	ldr	r3, [r4, #20]
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	4283      	cmp	r3, r0
 800b3ee:	d004      	beq.n	800b3fa <__swbuf_r+0x62>
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	07db      	lsls	r3, r3, #31
 800b3f4:	d506      	bpl.n	800b404 <__swbuf_r+0x6c>
 800b3f6:	2e0a      	cmp	r6, #10
 800b3f8:	d104      	bne.n	800b404 <__swbuf_r+0x6c>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f000 f951 	bl	800b6a4 <_fflush_r>
 800b402:	b988      	cbnz	r0, 800b428 <__swbuf_r+0x90>
 800b404:	4638      	mov	r0, r7
 800b406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <__swbuf_r+0x9c>)
 800b40a:	429c      	cmp	r4, r3
 800b40c:	d101      	bne.n	800b412 <__swbuf_r+0x7a>
 800b40e:	68ac      	ldr	r4, [r5, #8]
 800b410:	e7cf      	b.n	800b3b2 <__swbuf_r+0x1a>
 800b412:	4b09      	ldr	r3, [pc, #36]	; (800b438 <__swbuf_r+0xa0>)
 800b414:	429c      	cmp	r4, r3
 800b416:	bf08      	it	eq
 800b418:	68ec      	ldreq	r4, [r5, #12]
 800b41a:	e7ca      	b.n	800b3b2 <__swbuf_r+0x1a>
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 f81e 	bl	800b460 <__swsetup_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	d0cb      	beq.n	800b3c0 <__swbuf_r+0x28>
 800b428:	f04f 37ff 	mov.w	r7, #4294967295
 800b42c:	e7ea      	b.n	800b404 <__swbuf_r+0x6c>
 800b42e:	bf00      	nop
 800b430:	0800c7f0 	.word	0x0800c7f0
 800b434:	0800c810 	.word	0x0800c810
 800b438:	0800c7d0 	.word	0x0800c7d0

0800b43c <_write_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d07      	ldr	r5, [pc, #28]	; (800b45c <_write_r+0x20>)
 800b440:	4604      	mov	r4, r0
 800b442:	4608      	mov	r0, r1
 800b444:	4611      	mov	r1, r2
 800b446:	2200      	movs	r2, #0
 800b448:	602a      	str	r2, [r5, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f7f9 fdfc 	bl	8005048 <_write>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_write_r+0x1e>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_write_r+0x1e>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20000434 	.word	0x20000434

0800b460 <__swsetup_r>:
 800b460:	4b32      	ldr	r3, [pc, #200]	; (800b52c <__swsetup_r+0xcc>)
 800b462:	b570      	push	{r4, r5, r6, lr}
 800b464:	681d      	ldr	r5, [r3, #0]
 800b466:	4606      	mov	r6, r0
 800b468:	460c      	mov	r4, r1
 800b46a:	b125      	cbz	r5, 800b476 <__swsetup_r+0x16>
 800b46c:	69ab      	ldr	r3, [r5, #24]
 800b46e:	b913      	cbnz	r3, 800b476 <__swsetup_r+0x16>
 800b470:	4628      	mov	r0, r5
 800b472:	f7ff f8bb 	bl	800a5ec <__sinit>
 800b476:	4b2e      	ldr	r3, [pc, #184]	; (800b530 <__swsetup_r+0xd0>)
 800b478:	429c      	cmp	r4, r3
 800b47a:	d10f      	bne.n	800b49c <__swsetup_r+0x3c>
 800b47c:	686c      	ldr	r4, [r5, #4]
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b484:	0719      	lsls	r1, r3, #28
 800b486:	d42c      	bmi.n	800b4e2 <__swsetup_r+0x82>
 800b488:	06dd      	lsls	r5, r3, #27
 800b48a:	d411      	bmi.n	800b4b0 <__swsetup_r+0x50>
 800b48c:	2309      	movs	r3, #9
 800b48e:	6033      	str	r3, [r6, #0]
 800b490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	f04f 30ff 	mov.w	r0, #4294967295
 800b49a:	e03e      	b.n	800b51a <__swsetup_r+0xba>
 800b49c:	4b25      	ldr	r3, [pc, #148]	; (800b534 <__swsetup_r+0xd4>)
 800b49e:	429c      	cmp	r4, r3
 800b4a0:	d101      	bne.n	800b4a6 <__swsetup_r+0x46>
 800b4a2:	68ac      	ldr	r4, [r5, #8]
 800b4a4:	e7eb      	b.n	800b47e <__swsetup_r+0x1e>
 800b4a6:	4b24      	ldr	r3, [pc, #144]	; (800b538 <__swsetup_r+0xd8>)
 800b4a8:	429c      	cmp	r4, r3
 800b4aa:	bf08      	it	eq
 800b4ac:	68ec      	ldreq	r4, [r5, #12]
 800b4ae:	e7e6      	b.n	800b47e <__swsetup_r+0x1e>
 800b4b0:	0758      	lsls	r0, r3, #29
 800b4b2:	d512      	bpl.n	800b4da <__swsetup_r+0x7a>
 800b4b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b6:	b141      	cbz	r1, 800b4ca <__swsetup_r+0x6a>
 800b4b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d002      	beq.n	800b4c6 <__swsetup_r+0x66>
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff fcdb 	bl	800ae7c <_free_r>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4ca:	89a3      	ldrh	r3, [r4, #12]
 800b4cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6063      	str	r3, [r4, #4]
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	f043 0308 	orr.w	r3, r3, #8
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	b94b      	cbnz	r3, 800b4fa <__swsetup_r+0x9a>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f0:	d003      	beq.n	800b4fa <__swsetup_r+0x9a>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f95b 	bl	800b7b0 <__smakebuf_r>
 800b4fa:	89a0      	ldrh	r0, [r4, #12]
 800b4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b500:	f010 0301 	ands.w	r3, r0, #1
 800b504:	d00a      	beq.n	800b51c <__swsetup_r+0xbc>
 800b506:	2300      	movs	r3, #0
 800b508:	60a3      	str	r3, [r4, #8]
 800b50a:	6963      	ldr	r3, [r4, #20]
 800b50c:	425b      	negs	r3, r3
 800b50e:	61a3      	str	r3, [r4, #24]
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	b943      	cbnz	r3, 800b526 <__swsetup_r+0xc6>
 800b514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b518:	d1ba      	bne.n	800b490 <__swsetup_r+0x30>
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
 800b51c:	0781      	lsls	r1, r0, #30
 800b51e:	bf58      	it	pl
 800b520:	6963      	ldrpl	r3, [r4, #20]
 800b522:	60a3      	str	r3, [r4, #8]
 800b524:	e7f4      	b.n	800b510 <__swsetup_r+0xb0>
 800b526:	2000      	movs	r0, #0
 800b528:	e7f7      	b.n	800b51a <__swsetup_r+0xba>
 800b52a:	bf00      	nop
 800b52c:	20000048 	.word	0x20000048
 800b530:	0800c7f0 	.word	0x0800c7f0
 800b534:	0800c810 	.word	0x0800c810
 800b538:	0800c7d0 	.word	0x0800c7d0

0800b53c <__assert_func>:
 800b53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b53e:	4614      	mov	r4, r2
 800b540:	461a      	mov	r2, r3
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <__assert_func+0x2c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4605      	mov	r5, r0
 800b548:	68d8      	ldr	r0, [r3, #12]
 800b54a:	b14c      	cbz	r4, 800b560 <__assert_func+0x24>
 800b54c:	4b07      	ldr	r3, [pc, #28]	; (800b56c <__assert_func+0x30>)
 800b54e:	9100      	str	r1, [sp, #0]
 800b550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b554:	4906      	ldr	r1, [pc, #24]	; (800b570 <__assert_func+0x34>)
 800b556:	462b      	mov	r3, r5
 800b558:	f000 f8e0 	bl	800b71c <fiprintf>
 800b55c:	f000 f9a5 	bl	800b8aa <abort>
 800b560:	4b04      	ldr	r3, [pc, #16]	; (800b574 <__assert_func+0x38>)
 800b562:	461c      	mov	r4, r3
 800b564:	e7f3      	b.n	800b54e <__assert_func+0x12>
 800b566:	bf00      	nop
 800b568:	20000048 	.word	0x20000048
 800b56c:	0800c99d 	.word	0x0800c99d
 800b570:	0800c9aa 	.word	0x0800c9aa
 800b574:	0800c9d8 	.word	0x0800c9d8

0800b578 <_close_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d06      	ldr	r5, [pc, #24]	; (800b594 <_close_r+0x1c>)
 800b57c:	2300      	movs	r3, #0
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f9 fe55 	bl	8005232 <_close>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_close_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_close_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	20000434 	.word	0x20000434

0800b598 <__sflush_r>:
 800b598:	898a      	ldrh	r2, [r1, #12]
 800b59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	4605      	mov	r5, r0
 800b5a0:	0710      	lsls	r0, r2, #28
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	d458      	bmi.n	800b658 <__sflush_r+0xc0>
 800b5a6:	684b      	ldr	r3, [r1, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dc05      	bgt.n	800b5b8 <__sflush_r+0x20>
 800b5ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dc02      	bgt.n	800b5b8 <__sflush_r+0x20>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d0f9      	beq.n	800b5b2 <__sflush_r+0x1a>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5c4:	682f      	ldr	r7, [r5, #0]
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	d032      	beq.n	800b630 <__sflush_r+0x98>
 800b5ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	075a      	lsls	r2, r3, #29
 800b5d0:	d505      	bpl.n	800b5de <__sflush_r+0x46>
 800b5d2:	6863      	ldr	r3, [r4, #4]
 800b5d4:	1ac0      	subs	r0, r0, r3
 800b5d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5d8:	b10b      	cbz	r3, 800b5de <__sflush_r+0x46>
 800b5da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5dc:	1ac0      	subs	r0, r0, r3
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e4:	6a21      	ldr	r1, [r4, #32]
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b0      	blx	r6
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	d106      	bne.n	800b5fe <__sflush_r+0x66>
 800b5f0:	6829      	ldr	r1, [r5, #0]
 800b5f2:	291d      	cmp	r1, #29
 800b5f4:	d82c      	bhi.n	800b650 <__sflush_r+0xb8>
 800b5f6:	4a2a      	ldr	r2, [pc, #168]	; (800b6a0 <__sflush_r+0x108>)
 800b5f8:	40ca      	lsrs	r2, r1
 800b5fa:	07d6      	lsls	r6, r2, #31
 800b5fc:	d528      	bpl.n	800b650 <__sflush_r+0xb8>
 800b5fe:	2200      	movs	r2, #0
 800b600:	6062      	str	r2, [r4, #4]
 800b602:	04d9      	lsls	r1, r3, #19
 800b604:	6922      	ldr	r2, [r4, #16]
 800b606:	6022      	str	r2, [r4, #0]
 800b608:	d504      	bpl.n	800b614 <__sflush_r+0x7c>
 800b60a:	1c42      	adds	r2, r0, #1
 800b60c:	d101      	bne.n	800b612 <__sflush_r+0x7a>
 800b60e:	682b      	ldr	r3, [r5, #0]
 800b610:	b903      	cbnz	r3, 800b614 <__sflush_r+0x7c>
 800b612:	6560      	str	r0, [r4, #84]	; 0x54
 800b614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b616:	602f      	str	r7, [r5, #0]
 800b618:	2900      	cmp	r1, #0
 800b61a:	d0ca      	beq.n	800b5b2 <__sflush_r+0x1a>
 800b61c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b620:	4299      	cmp	r1, r3
 800b622:	d002      	beq.n	800b62a <__sflush_r+0x92>
 800b624:	4628      	mov	r0, r5
 800b626:	f7ff fc29 	bl	800ae7c <_free_r>
 800b62a:	2000      	movs	r0, #0
 800b62c:	6360      	str	r0, [r4, #52]	; 0x34
 800b62e:	e7c1      	b.n	800b5b4 <__sflush_r+0x1c>
 800b630:	6a21      	ldr	r1, [r4, #32]
 800b632:	2301      	movs	r3, #1
 800b634:	4628      	mov	r0, r5
 800b636:	47b0      	blx	r6
 800b638:	1c41      	adds	r1, r0, #1
 800b63a:	d1c7      	bne.n	800b5cc <__sflush_r+0x34>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d0c4      	beq.n	800b5cc <__sflush_r+0x34>
 800b642:	2b1d      	cmp	r3, #29
 800b644:	d001      	beq.n	800b64a <__sflush_r+0xb2>
 800b646:	2b16      	cmp	r3, #22
 800b648:	d101      	bne.n	800b64e <__sflush_r+0xb6>
 800b64a:	602f      	str	r7, [r5, #0]
 800b64c:	e7b1      	b.n	800b5b2 <__sflush_r+0x1a>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	e7ad      	b.n	800b5b4 <__sflush_r+0x1c>
 800b658:	690f      	ldr	r7, [r1, #16]
 800b65a:	2f00      	cmp	r7, #0
 800b65c:	d0a9      	beq.n	800b5b2 <__sflush_r+0x1a>
 800b65e:	0793      	lsls	r3, r2, #30
 800b660:	680e      	ldr	r6, [r1, #0]
 800b662:	bf08      	it	eq
 800b664:	694b      	ldreq	r3, [r1, #20]
 800b666:	600f      	str	r7, [r1, #0]
 800b668:	bf18      	it	ne
 800b66a:	2300      	movne	r3, #0
 800b66c:	eba6 0807 	sub.w	r8, r6, r7
 800b670:	608b      	str	r3, [r1, #8]
 800b672:	f1b8 0f00 	cmp.w	r8, #0
 800b676:	dd9c      	ble.n	800b5b2 <__sflush_r+0x1a>
 800b678:	6a21      	ldr	r1, [r4, #32]
 800b67a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b67c:	4643      	mov	r3, r8
 800b67e:	463a      	mov	r2, r7
 800b680:	4628      	mov	r0, r5
 800b682:	47b0      	blx	r6
 800b684:	2800      	cmp	r0, #0
 800b686:	dc06      	bgt.n	800b696 <__sflush_r+0xfe>
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	e78e      	b.n	800b5b4 <__sflush_r+0x1c>
 800b696:	4407      	add	r7, r0
 800b698:	eba8 0800 	sub.w	r8, r8, r0
 800b69c:	e7e9      	b.n	800b672 <__sflush_r+0xda>
 800b69e:	bf00      	nop
 800b6a0:	20400001 	.word	0x20400001

0800b6a4 <_fflush_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	690b      	ldr	r3, [r1, #16]
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	b913      	cbnz	r3, 800b6b4 <_fflush_r+0x10>
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	b118      	cbz	r0, 800b6be <_fflush_r+0x1a>
 800b6b6:	6983      	ldr	r3, [r0, #24]
 800b6b8:	b90b      	cbnz	r3, 800b6be <_fflush_r+0x1a>
 800b6ba:	f7fe ff97 	bl	800a5ec <__sinit>
 800b6be:	4b14      	ldr	r3, [pc, #80]	; (800b710 <_fflush_r+0x6c>)
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	d11b      	bne.n	800b6fc <_fflush_r+0x58>
 800b6c4:	686c      	ldr	r4, [r5, #4]
 800b6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0ef      	beq.n	800b6ae <_fflush_r+0xa>
 800b6ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6d0:	07d0      	lsls	r0, r2, #31
 800b6d2:	d404      	bmi.n	800b6de <_fflush_r+0x3a>
 800b6d4:	0599      	lsls	r1, r3, #22
 800b6d6:	d402      	bmi.n	800b6de <_fflush_r+0x3a>
 800b6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6da:	f7ff f82a 	bl	800a732 <__retarget_lock_acquire_recursive>
 800b6de:	4628      	mov	r0, r5
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	f7ff ff59 	bl	800b598 <__sflush_r>
 800b6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6e8:	07da      	lsls	r2, r3, #31
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	d4e0      	bmi.n	800b6b0 <_fflush_r+0xc>
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	059b      	lsls	r3, r3, #22
 800b6f2:	d4dd      	bmi.n	800b6b0 <_fflush_r+0xc>
 800b6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f6:	f7ff f81d 	bl	800a734 <__retarget_lock_release_recursive>
 800b6fa:	e7d9      	b.n	800b6b0 <_fflush_r+0xc>
 800b6fc:	4b05      	ldr	r3, [pc, #20]	; (800b714 <_fflush_r+0x70>)
 800b6fe:	429c      	cmp	r4, r3
 800b700:	d101      	bne.n	800b706 <_fflush_r+0x62>
 800b702:	68ac      	ldr	r4, [r5, #8]
 800b704:	e7df      	b.n	800b6c6 <_fflush_r+0x22>
 800b706:	4b04      	ldr	r3, [pc, #16]	; (800b718 <_fflush_r+0x74>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	bf08      	it	eq
 800b70c:	68ec      	ldreq	r4, [r5, #12]
 800b70e:	e7da      	b.n	800b6c6 <_fflush_r+0x22>
 800b710:	0800c7f0 	.word	0x0800c7f0
 800b714:	0800c810 	.word	0x0800c810
 800b718:	0800c7d0 	.word	0x0800c7d0

0800b71c <fiprintf>:
 800b71c:	b40e      	push	{r1, r2, r3}
 800b71e:	b503      	push	{r0, r1, lr}
 800b720:	4601      	mov	r1, r0
 800b722:	ab03      	add	r3, sp, #12
 800b724:	4805      	ldr	r0, [pc, #20]	; (800b73c <fiprintf+0x20>)
 800b726:	f853 2b04 	ldr.w	r2, [r3], #4
 800b72a:	6800      	ldr	r0, [r0, #0]
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	f7ff fcaf 	bl	800b090 <_vfiprintf_r>
 800b732:	b002      	add	sp, #8
 800b734:	f85d eb04 	ldr.w	lr, [sp], #4
 800b738:	b003      	add	sp, #12
 800b73a:	4770      	bx	lr
 800b73c:	20000048 	.word	0x20000048

0800b740 <_lseek_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d07      	ldr	r5, [pc, #28]	; (800b760 <_lseek_r+0x20>)
 800b744:	4604      	mov	r4, r0
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f9 fd96 	bl	8005280 <_lseek>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_lseek_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_lseek_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20000434 	.word	0x20000434

0800b764 <__swhatbuf_r>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	460e      	mov	r6, r1
 800b768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76c:	2900      	cmp	r1, #0
 800b76e:	b096      	sub	sp, #88	; 0x58
 800b770:	4614      	mov	r4, r2
 800b772:	461d      	mov	r5, r3
 800b774:	da08      	bge.n	800b788 <__swhatbuf_r+0x24>
 800b776:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	602a      	str	r2, [r5, #0]
 800b77e:	061a      	lsls	r2, r3, #24
 800b780:	d410      	bmi.n	800b7a4 <__swhatbuf_r+0x40>
 800b782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b786:	e00e      	b.n	800b7a6 <__swhatbuf_r+0x42>
 800b788:	466a      	mov	r2, sp
 800b78a:	f000 f895 	bl	800b8b8 <_fstat_r>
 800b78e:	2800      	cmp	r0, #0
 800b790:	dbf1      	blt.n	800b776 <__swhatbuf_r+0x12>
 800b792:	9a01      	ldr	r2, [sp, #4]
 800b794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b79c:	425a      	negs	r2, r3
 800b79e:	415a      	adcs	r2, r3
 800b7a0:	602a      	str	r2, [r5, #0]
 800b7a2:	e7ee      	b.n	800b782 <__swhatbuf_r+0x1e>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	b016      	add	sp, #88	; 0x58
 800b7ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7b0 <__smakebuf_r>:
 800b7b0:	898b      	ldrh	r3, [r1, #12]
 800b7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7b4:	079d      	lsls	r5, r3, #30
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	d507      	bpl.n	800b7cc <__smakebuf_r+0x1c>
 800b7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	6163      	str	r3, [r4, #20]
 800b7c8:	b002      	add	sp, #8
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
 800b7cc:	ab01      	add	r3, sp, #4
 800b7ce:	466a      	mov	r2, sp
 800b7d0:	f7ff ffc8 	bl	800b764 <__swhatbuf_r>
 800b7d4:	9900      	ldr	r1, [sp, #0]
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7ff fbbb 	bl	800af54 <_malloc_r>
 800b7de:	b948      	cbnz	r0, 800b7f4 <__smakebuf_r+0x44>
 800b7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e4:	059a      	lsls	r2, r3, #22
 800b7e6:	d4ef      	bmi.n	800b7c8 <__smakebuf_r+0x18>
 800b7e8:	f023 0303 	bic.w	r3, r3, #3
 800b7ec:	f043 0302 	orr.w	r3, r3, #2
 800b7f0:	81a3      	strh	r3, [r4, #12]
 800b7f2:	e7e3      	b.n	800b7bc <__smakebuf_r+0xc>
 800b7f4:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <__smakebuf_r+0x7c>)
 800b7f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	6020      	str	r0, [r4, #0]
 800b7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	9b00      	ldr	r3, [sp, #0]
 800b804:	6163      	str	r3, [r4, #20]
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	6120      	str	r0, [r4, #16]
 800b80a:	b15b      	cbz	r3, 800b824 <__smakebuf_r+0x74>
 800b80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b810:	4630      	mov	r0, r6
 800b812:	f000 f863 	bl	800b8dc <_isatty_r>
 800b816:	b128      	cbz	r0, 800b824 <__smakebuf_r+0x74>
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	f023 0303 	bic.w	r3, r3, #3
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	89a0      	ldrh	r0, [r4, #12]
 800b826:	4305      	orrs	r5, r0
 800b828:	81a5      	strh	r5, [r4, #12]
 800b82a:	e7cd      	b.n	800b7c8 <__smakebuf_r+0x18>
 800b82c:	0800a585 	.word	0x0800a585

0800b830 <__ascii_mbtowc>:
 800b830:	b082      	sub	sp, #8
 800b832:	b901      	cbnz	r1, 800b836 <__ascii_mbtowc+0x6>
 800b834:	a901      	add	r1, sp, #4
 800b836:	b142      	cbz	r2, 800b84a <__ascii_mbtowc+0x1a>
 800b838:	b14b      	cbz	r3, 800b84e <__ascii_mbtowc+0x1e>
 800b83a:	7813      	ldrb	r3, [r2, #0]
 800b83c:	600b      	str	r3, [r1, #0]
 800b83e:	7812      	ldrb	r2, [r2, #0]
 800b840:	1e10      	subs	r0, r2, #0
 800b842:	bf18      	it	ne
 800b844:	2001      	movne	r0, #1
 800b846:	b002      	add	sp, #8
 800b848:	4770      	bx	lr
 800b84a:	4610      	mov	r0, r2
 800b84c:	e7fb      	b.n	800b846 <__ascii_mbtowc+0x16>
 800b84e:	f06f 0001 	mvn.w	r0, #1
 800b852:	e7f8      	b.n	800b846 <__ascii_mbtowc+0x16>

0800b854 <__malloc_lock>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__malloc_lock+0x8>)
 800b856:	f7fe bf6c 	b.w	800a732 <__retarget_lock_acquire_recursive>
 800b85a:	bf00      	nop
 800b85c:	20000428 	.word	0x20000428

0800b860 <__malloc_unlock>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__malloc_unlock+0x8>)
 800b862:	f7fe bf67 	b.w	800a734 <__retarget_lock_release_recursive>
 800b866:	bf00      	nop
 800b868:	20000428 	.word	0x20000428

0800b86c <_read_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d07      	ldr	r5, [pc, #28]	; (800b88c <_read_r+0x20>)
 800b870:	4604      	mov	r4, r0
 800b872:	4608      	mov	r0, r1
 800b874:	4611      	mov	r1, r2
 800b876:	2200      	movs	r2, #0
 800b878:	602a      	str	r2, [r5, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f7f9 fcbc 	bl	80051f8 <_read>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_read_r+0x1e>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_read_r+0x1e>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20000434 	.word	0x20000434

0800b890 <__ascii_wctomb>:
 800b890:	b149      	cbz	r1, 800b8a6 <__ascii_wctomb+0x16>
 800b892:	2aff      	cmp	r2, #255	; 0xff
 800b894:	bf85      	ittet	hi
 800b896:	238a      	movhi	r3, #138	; 0x8a
 800b898:	6003      	strhi	r3, [r0, #0]
 800b89a:	700a      	strbls	r2, [r1, #0]
 800b89c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8a0:	bf98      	it	ls
 800b8a2:	2001      	movls	r0, #1
 800b8a4:	4770      	bx	lr
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	4770      	bx	lr

0800b8aa <abort>:
 800b8aa:	b508      	push	{r3, lr}
 800b8ac:	2006      	movs	r0, #6
 800b8ae:	f000 f84d 	bl	800b94c <raise>
 800b8b2:	2001      	movs	r0, #1
 800b8b4:	f7f9 fc96 	bl	80051e4 <_exit>

0800b8b8 <_fstat_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	; (800b8d8 <_fstat_r+0x20>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	f7f9 fcc0 	bl	800524a <_fstat>
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	d102      	bne.n	800b8d4 <_fstat_r+0x1c>
 800b8ce:	682b      	ldr	r3, [r5, #0]
 800b8d0:	b103      	cbz	r3, 800b8d4 <_fstat_r+0x1c>
 800b8d2:	6023      	str	r3, [r4, #0]
 800b8d4:	bd38      	pop	{r3, r4, r5, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000434 	.word	0x20000434

0800b8dc <_isatty_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	; (800b8f8 <_isatty_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f9 fcbf 	bl	800526a <_isatty>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_isatty_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_isatty_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20000434 	.word	0x20000434

0800b8fc <_raise_r>:
 800b8fc:	291f      	cmp	r1, #31
 800b8fe:	b538      	push	{r3, r4, r5, lr}
 800b900:	4604      	mov	r4, r0
 800b902:	460d      	mov	r5, r1
 800b904:	d904      	bls.n	800b910 <_raise_r+0x14>
 800b906:	2316      	movs	r3, #22
 800b908:	6003      	str	r3, [r0, #0]
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b912:	b112      	cbz	r2, 800b91a <_raise_r+0x1e>
 800b914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b918:	b94b      	cbnz	r3, 800b92e <_raise_r+0x32>
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 f830 	bl	800b980 <_getpid_r>
 800b920:	462a      	mov	r2, r5
 800b922:	4601      	mov	r1, r0
 800b924:	4620      	mov	r0, r4
 800b926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b92a:	f000 b817 	b.w	800b95c <_kill_r>
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d00a      	beq.n	800b948 <_raise_r+0x4c>
 800b932:	1c59      	adds	r1, r3, #1
 800b934:	d103      	bne.n	800b93e <_raise_r+0x42>
 800b936:	2316      	movs	r3, #22
 800b938:	6003      	str	r3, [r0, #0]
 800b93a:	2001      	movs	r0, #1
 800b93c:	e7e7      	b.n	800b90e <_raise_r+0x12>
 800b93e:	2400      	movs	r4, #0
 800b940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b944:	4628      	mov	r0, r5
 800b946:	4798      	blx	r3
 800b948:	2000      	movs	r0, #0
 800b94a:	e7e0      	b.n	800b90e <_raise_r+0x12>

0800b94c <raise>:
 800b94c:	4b02      	ldr	r3, [pc, #8]	; (800b958 <raise+0xc>)
 800b94e:	4601      	mov	r1, r0
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	f7ff bfd3 	b.w	800b8fc <_raise_r>
 800b956:	bf00      	nop
 800b958:	20000048 	.word	0x20000048

0800b95c <_kill_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	; (800b97c <_kill_r+0x20>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	4611      	mov	r1, r2
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	f7f9 fc2b 	bl	80051c4 <_kill>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d102      	bne.n	800b978 <_kill_r+0x1c>
 800b972:	682b      	ldr	r3, [r5, #0]
 800b974:	b103      	cbz	r3, 800b978 <_kill_r+0x1c>
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	20000434 	.word	0x20000434

0800b980 <_getpid_r>:
 800b980:	f7f9 bc18 	b.w	80051b4 <_getpid>

0800b984 <_init>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	bf00      	nop
 800b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98a:	bc08      	pop	{r3}
 800b98c:	469e      	mov	lr, r3
 800b98e:	4770      	bx	lr

0800b990 <_fini>:
 800b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b992:	bf00      	nop
 800b994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b996:	bc08      	pop	{r3}
 800b998:	469e      	mov	lr, r3
 800b99a:	4770      	bx	lr
