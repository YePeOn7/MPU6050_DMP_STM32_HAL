
MPU6050_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001174  0800b870  0800b870  0001b870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e4  0800c9e4  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9ec  0800c9ec  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f0  0800c9f0  0001c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800c9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000218  0800cc0c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800cc0c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a58  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da9  00000000  00000000  00034ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00037a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00038d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d2  00000000  00000000  00039fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a6c  00000000  00000000  00055172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae53  00000000  00000000  0006cbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107a31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006444  00000000  00000000  00107a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b854 	.word	0x0800b854

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800b854 	.word	0x0800b854

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <IIC_Init>:
#include "IOI2C.h"

I2C_HandleTypeDef i2c_handle;

void IIC_Init(I2C_HandleTypeDef i2cHandle)
{			
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
 8001002:	f107 0c08 	add.w	ip, r7, #8
 8001006:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_handle = i2cHandle;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <IIC_Init+0x2c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2254      	movs	r2, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	f007 fee5 	bl	8008de4 <memcpy>
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000234 	.word	0x20000234

0800102c <i2cWrite>:
//}


  
int i2cWrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af04      	add	r7, sp, #16
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	460b      	mov	r3, r1
 800103a:	71bb      	strb	r3, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	717b      	strb	r3, [r7, #5]
    return (int)HAL_I2C_Mem_Write(&i2c_handle, addr << 1, reg, 1, data, len, I2C_TIMEOUT);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b29b      	uxth	r3, r3
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b299      	uxth	r1, r3
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	b29a      	uxth	r2, r3
 800104c:	797b      	ldrb	r3, [r7, #5]
 800104e:	b29b      	uxth	r3, r3
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	9002      	str	r0, [sp, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <i2cWrite+0x44>)
 8001060:	f004 fe56 	bl	8005d10 <HAL_I2C_Mem_Write>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000234 	.word	0x20000234

08001074 <i2cRead>:

int i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af04      	add	r7, sp, #16
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	460b      	mov	r3, r1
 8001082:	71bb      	strb	r3, [r7, #6]
 8001084:	4613      	mov	r3, r2
 8001086:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&i2c_handle, addr << 1, reg, 1, buf, len, I2C_TIMEOUT);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	b29b      	uxth	r3, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b299      	uxth	r1, r3
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	b29a      	uxth	r2, r3
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	b29b      	uxth	r3, r3
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	9002      	str	r0, [sp, #8]
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <i2cRead+0x44>)
 80010a8:	f004 ff2c 	bl	8005f04 <HAL_I2C_Mem_Read>
    return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000234 	.word	0x20000234

080010bc <I2C_ReadOneByte>:
����	I2C_Addr  Ŀ���豸��ַ
		addr	   �Ĵ�����ַ
����   ��������ֵ
*******************************************************************************/ 
unsigned char I2C_ReadOneByte(unsigned char I2C_Addr,unsigned char addr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
//	IIC_Wait_Ack();
//	res=IIC_Read_Byte(0);
//    IIC_Stop();//����һ��ֹͣ����
//
	unsigned char data;
	HAL_I2C_Mem_Read(&i2c_handle, I2C_Addr, addr, 1, &data, 1, I2C_TIMEOUT);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	b299      	uxth	r1, r3
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f107 030f 	add.w	r3, r7, #15
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <I2C_ReadOneByte+0x3c>)
 80010e8:	f004 ff0c 	bl	8005f04 <HAL_I2C_Mem_Read>

	return data;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000234 	.word	0x20000234

080010fc <IICwriteBytes>:
//    return count;
	HAL_I2C_Mem_Read(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
}


u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af04      	add	r7, sp, #16
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	460b      	mov	r3, r1
 800110a:	71bb      	strb	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	717b      	strb	r3, [r7, #5]
//		IIC_Send_Byte(data[count]);
//		IIC_Wait_Ack();
//	 }
//	IIC_Stop();//����һ��ֹͣ����

	HAL_I2C_Mem_Write(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	b299      	uxth	r1, r3
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	b29a      	uxth	r2, r3
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	b29b      	uxth	r3, r3
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	9002      	str	r0, [sp, #8]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <IICwriteBytes+0x40>)
 800112c:	f004 fdf0 	bl	8005d10 <HAL_I2C_Mem_Write>
    return 1; //status == 0;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000234 	.word	0x20000234

08001140 <IICreadByte>:
����	dev  Ŀ���豸��ַ
		reg	   �Ĵ�����ַ
		*data  ���������ݽ�Ҫ��ŵĵ�ַ
����   1
*******************************************************************************/ 
u8 IICreadByte(u8 dev, u8 reg, u8 *data){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	603a      	str	r2, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
	*data=I2C_ReadOneByte(dev, reg);
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffb0 	bl	80010bc <I2C_ReadOneByte>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	701a      	strb	r2, [r3, #0]
    return 1;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <IICwriteByte>:

unsigned char IICwriteByte(unsigned char dev, unsigned char reg, unsigned char data){
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	460b      	mov	r3, r1
 800117a:	71bb      	strb	r3, [r7, #6]
 800117c:	4613      	mov	r3, r2
 800117e:	717b      	strb	r3, [r7, #5]
    return IICwriteBytes(dev, reg, 1, &data);
 8001180:	1d7b      	adds	r3, r7, #5
 8001182:	79b9      	ldrb	r1, [r7, #6]
 8001184:	79f8      	ldrb	r0, [r7, #7]
 8001186:	2201      	movs	r2, #1
 8001188:	f7ff ffb8 	bl	80010fc <IICwriteBytes>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <IICwriteBits>:
		data    ��Ÿı�Ŀ���ֽ�λ��ֵ
����   �ɹ� Ϊ1 
 		ʧ��Ϊ0
*******************************************************************************/ 
u8 IICwriteBits(u8 dev,u8 reg,u8 bitStart,u8 length,u8 data)
{
 8001196:	b590      	push	{r4, r7, lr}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	4604      	mov	r4, r0
 800119e:	4608      	mov	r0, r1
 80011a0:	4611      	mov	r1, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	4623      	mov	r3, r4
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4603      	mov	r3, r0
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	460b      	mov	r3, r1
 80011ae:	717b      	strb	r3, [r7, #5]
 80011b0:	4613      	mov	r3, r2
 80011b2:	713b      	strb	r3, [r7, #4]

    u8 b;
    if (IICreadByte(dev, reg, &b) != 0) {
 80011b4:	f107 020e 	add.w	r2, r7, #14
 80011b8:	79b9      	ldrb	r1, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffbf 	bl	8001140 <IICreadByte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d037      	beq.n	8001238 <IICwriteBits+0xa2>
        u8 mask = (0xFF << (bitStart + 1)) | 0xFF >> ((8 - bitStart) + length - 1);
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	3301      	adds	r3, #1
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	f1c3 0108 	rsb	r1, r3, #8
 80011da:	793b      	ldrb	r3, [r7, #4]
 80011dc:	440b      	add	r3, r1
 80011de:	3b01      	subs	r3, #1
 80011e0:	21ff      	movs	r1, #255	; 0xff
 80011e2:	fa41 f303 	asr.w	r3, r1, r3
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
        data <<= (8 - length);
 80011ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011f2:	793b      	ldrb	r3, [r7, #4]
 80011f4:	f1c3 0308 	rsb	r3, r3, #8
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	f887 3020 	strb.w	r3, [r7, #32]
        data >>= (7 - bitStart);
 8001200:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	fa42 f303 	asr.w	r3, r2, r3
 800120e:	f887 3020 	strb.w	r3, [r7, #32]
        b &= mask;
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4013      	ands	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73bb      	strb	r3, [r7, #14]
        b |= data;
 800121c:	7bba      	ldrb	r2, [r7, #14]
 800121e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001222:	4313      	orrs	r3, r2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73bb      	strb	r3, [r7, #14]
        return IICwriteByte(dev, reg, b);
 8001228:	7bba      	ldrb	r2, [r7, #14]
 800122a:	79b9      	ldrb	r1, [r7, #6]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff9d 	bl	800116e <IICwriteByte>
 8001234:	4603      	mov	r3, r0
 8001236:	e000      	b.n	800123a <IICwriteBits+0xa4>
    } else {
        return 0;
 8001238:	2300      	movs	r3, #0
    }
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}

08001242 <IICwriteBit>:
		bitNum  Ҫ�޸�Ŀ���ֽڵ�bitNumλ
		data  Ϊ0 ʱ��Ŀ��λ������0 ���򽫱���λ
����   �ɹ� Ϊ1 
 		ʧ��Ϊ0
*******************************************************************************/ 
u8 IICwriteBit(u8 dev, u8 reg, u8 bitNum, u8 data){
 8001242:	b590      	push	{r4, r7, lr}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	4604      	mov	r4, r0
 800124a:	4608      	mov	r0, r1
 800124c:	4611      	mov	r1, r2
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4603      	mov	r3, r0
 8001256:	71bb      	strb	r3, [r7, #6]
 8001258:	460b      	mov	r3, r1
 800125a:	717b      	strb	r3, [r7, #5]
 800125c:	4613      	mov	r3, r2
 800125e:	713b      	strb	r3, [r7, #4]
    u8 b;
    IICreadByte(dev, reg, &b);
 8001260:	f107 020f 	add.w	r2, r7, #15
 8001264:	79b9      	ldrb	r1, [r7, #6]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff69 	bl	8001140 <IICreadByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00a      	beq.n	800128a <IICwriteBit+0x48>
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	2201      	movs	r2, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	b25a      	sxtb	r2, r3
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b25b      	sxtb	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	e00b      	b.n	80012a2 <IICwriteBit+0x60>
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	2201      	movs	r2, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	b25b      	sxtb	r3, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	b25a      	sxtb	r2, r3
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4013      	ands	r3, r2
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
    return IICwriteByte(dev, reg, b);
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	79b9      	ldrb	r1, [r7, #6]
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff5f 	bl	800116e <IICwriteByte>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
	...

080012bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012c0:	f3bf 8f4f 	dsb	sy
}
 80012c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <__NVIC_SystemReset+0x24>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012ce:	4904      	ldr	r1, [pc, #16]	; (80012e0 <__NVIC_SystemReset+0x24>)
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_SystemReset+0x28>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d6:	f3bf 8f4f 	dsb	sy
}
 80012da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <__NVIC_SystemReset+0x20>
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	05fa0004 	.word	0x05fa0004

080012e8 <inv_row_2_scale>:
static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};

static  unsigned short inv_row_2_scale(const signed char *row)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f993 3000 	ldrsb.w	r3, [r3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dd02      	ble.n	8001300 <inv_row_2_scale+0x18>
        b = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	81fb      	strh	r3, [r7, #14]
 80012fe:	e02d      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f993 3000 	ldrsb.w	r3, [r3]
 8001306:	2b00      	cmp	r3, #0
 8001308:	da02      	bge.n	8001310 <inv_row_2_scale+0x28>
        b = 4;
 800130a:	2304      	movs	r3, #4
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	e025      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	f993 3000 	ldrsb.w	r3, [r3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd02      	ble.n	8001322 <inv_row_2_scale+0x3a>
        b = 1;
 800131c:	2301      	movs	r3, #1
 800131e:	81fb      	strh	r3, [r7, #14]
 8001320:	e01c      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	f993 3000 	ldrsb.w	r3, [r3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	da02      	bge.n	8001334 <inv_row_2_scale+0x4c>
        b = 5;
 800132e:	2305      	movs	r3, #5
 8001330:	81fb      	strh	r3, [r7, #14]
 8001332:	e013      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3302      	adds	r3, #2
 8001338:	f993 3000 	ldrsb.w	r3, [r3]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd02      	ble.n	8001346 <inv_row_2_scale+0x5e>
        b = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	81fb      	strh	r3, [r7, #14]
 8001344:	e00a      	b.n	800135c <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3302      	adds	r3, #2
 800134a:	f993 3000 	ldrsb.w	r3, [r3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da02      	bge.n	8001358 <inv_row_2_scale+0x70>
        b = 6;
 8001352:	2306      	movs	r3, #6
 8001354:	81fb      	strh	r3, [r7, #14]
 8001356:	e001      	b.n	800135c <inv_row_2_scale+0x74>
    else
        b = 7;            // error
 8001358:	2307      	movs	r3, #7
 800135a:	81fb      	strh	r3, [r7, #14]
    return b;
 800135c:	89fb      	ldrh	r3, [r7, #14]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb8 	bl	80012e8 <inv_row_2_scale>
 8001378:	4603      	mov	r3, r0
 800137a:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3303      	adds	r3, #3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffb1 	bl	80012e8 <inv_row_2_scale>
 8001386:	4603      	mov	r3, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b21a      	sxth	r2, r3
 800138c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3306      	adds	r3, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffa4 	bl	80012e8 <inv_row_2_scale>
 80013a0:	4603      	mov	r3, r0
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	81fb      	strh	r3, [r7, #14]

    return scalar;
 80013b0:	89fb      	ldrh	r3, [r7, #14]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <run_self_test>:

static void run_self_test(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b08a      	sub	sp, #40	; 0x28
 80013be:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f89a 	bl	8003504 <mpu_run_self_test>
 80013d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0x03) {                   //����0x03ΪMPU6050
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d14b      	bne.n	8001470 <run_self_test+0xb6>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);			//��ȡ��ǰ�����ǵ�״̬
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 f85f 	bl	80024a0 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001414:	ee17 3a90 	vmov	r3, s15
 8001418:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001424:	edd7 7a02 	vldr	s15, [r7, #8]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);			//���ݶ�ȡ��״̬����У׼
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fbb2 	bl	8003ba4 <dmp_set_gyro_bias>
		
        mpu_get_accel_sens(&accel_sens);	//��ȡ��ǰ���ٶȼƵ�״̬
 8001440:	1dbb      	adds	r3, r7, #6
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f864 	bl	8002510 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);			//���ݶ�ȡ��״̬����У׼
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fca4 	bl	8003db8 <dmp_set_accel_bias>
		//printf("setting bias succesfully ......\r\n");
    }
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
*******************************************************************************/
void MPU6050_setClockSource(uint8_t source){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2303      	movs	r3, #3
 8001488:	2202      	movs	r2, #2
 800148a:	216b      	movs	r1, #107	; 0x6b
 800148c:	20d0      	movs	r0, #208	; 0xd0
 800148e:	f7ff fe82 	bl	8001196 <IICwriteBits>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af02      	add	r7, sp, #8
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	2204      	movs	r2, #4
 80014ac:	211b      	movs	r1, #27
 80014ae:	20d0      	movs	r0, #208	; 0xd0
 80014b0:	f7ff fe71 	bl	8001196 <IICwriteBits>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <MPU6050_setFullScaleAccelRange>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setFullScaleAccelRange(uint8_t range)
*��������:	    ����  MPU6050 ���ٶȼƵ��������
*******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2302      	movs	r3, #2
 80014cc:	2204      	movs	r2, #4
 80014ce:	211c      	movs	r1, #28
 80014d0:	20d0      	movs	r0, #208	; 0xd0
 80014d2:	f7ff fe60 	bl	8001196 <IICwriteBits>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <MPU6050_setSleepEnabled>:
*����ԭ��:		void MPU6050_setSleepEnabled(uint8_t enabled)
*��������:	    ����  MPU6050 �Ƿ����˯��ģʽ
				enabled =1   ˯��
			    enabled =0   ����
*******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2206      	movs	r2, #6
 80014ec:	216b      	movs	r1, #107	; 0x6b
 80014ee:	20d0      	movs	r0, #208	; 0xd0
 80014f0:	f7ff fea7 	bl	8001242 <IICwriteBit>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <MPU6050_setI2CMasterModeEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2205      	movs	r2, #5
 800150a:	216a      	movs	r1, #106	; 0x6a
 800150c:	20d0      	movs	r0, #208	; 0xd0
 800150e:	f7ff fe98 	bl	8001242 <IICwriteBit>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <MPU6050_setI2CBypassEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2201      	movs	r2, #1
 8001528:	2137      	movs	r1, #55	; 0x37
 800152a:	20d0      	movs	r0, #208	; 0xd0
 800152c:	f7ff fe89 	bl	8001242 <IICwriteBit>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <MPU6050_initialize>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_initialize(void)
*��������:	    ��ʼ�� 	MPU6050 �Խ������״̬��
*******************************************************************************/
void MPU6050_initialize(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 800153e:	2300      	movs	r3, #0
 8001540:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2201      	movs	r2, #1
 800154a:	2175      	movs	r1, #117	; 0x75
 800154c:	2068      	movs	r0, #104	; 0x68
 800154e:	f7ff fd91 	bl	8001074 <i2cRead>
	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2201      	movs	r2, #1
 8001556:	2175      	movs	r1, #117	; 0x75
 8001558:	2068      	movs	r0, #104	; 0x68
 800155a:	f7ff fd8b 	bl	8001074 <i2cRead>
		retry++;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3301      	adds	r3, #1
 8001562:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <MPU6050_initialize+0x36>
 800156a:	f7ff fea7 	bl	80012bc <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 800156e:	793b      	ldrb	r3, [r7, #4]
 8001570:	2b68      	cmp	r3, #104	; 0x68
 8001572:	d1ee      	bne.n	8001552 <MPU6050_initialize+0x1a>

	MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO); //����ʱ��
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff ff7f 	bl	8001478 <MPU6050_setClockSource>
	MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250);//������������� +-2000��ÿ��
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff ff8d 	bl	800149a <MPU6050_setFullScaleGyroRange>
	MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);	//���ٶȶ�������� +-2G
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff9b 	bl	80014bc <MPU6050_setFullScaleAccelRange>
	MPU6050_setSleepEnabled(0); //���빤��״̬
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff ffa9 	bl	80014de <MPU6050_setSleepEnabled>
	MPU6050_setI2CMasterModeEnabled(0);	 //����MPU6050 ����AUXI2C
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ffb5 	bl	80014fc <MPU6050_setI2CMasterModeEnabled>
	MPU6050_setI2CBypassEnabled(0);	 //����������I2C��	MPU6050��AUXI2C	ֱͨ������������ֱ�ӷ���HMC5883L
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff ffc1 	bl	800151a <MPU6050_setI2CBypassEnabled>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <MPU6050_DMPInit>:
�������ܣ�MPU6050����DMP�ĳ�ʼ��
��ڲ�������
����  ֵ����
**************************************************************************/
void MPU6050_DMPInit(void)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 80015a6:	2300      	movs	r3, #0
 80015a8:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2201      	movs	r2, #1
 80015b2:	2175      	movs	r1, #117	; 0x75
 80015b4:	2068      	movs	r0, #104	; 0x68
 80015b6:	f7ff fd5d 	bl	8001074 <i2cRead>
//	printf("%d\n", temp[0]);

	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2201      	movs	r2, #1
 80015be:	2175      	movs	r1, #117	; 0x75
 80015c0:	2068      	movs	r0, #104	; 0x68
 80015c2:	f7ff fd57 	bl	8001074 <i2cRead>
		retry++;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	3301      	adds	r3, #1
 80015ca:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <MPU6050_DMPInit+0x36>
 80015d2:	f7ff fe73 	bl	80012bc <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 80015d6:	793b      	ldrb	r3, [r7, #4]
 80015d8:	2b68      	cmp	r3, #104	; 0x68
 80015da:	d1ee      	bne.n	80015ba <MPU6050_DMPInit+0x1a>

	HAL_Delay(100);
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f003 ff65 	bl	80054ac <HAL_Delay>
//	if(temp[0]!=0x68)NVIC_SystemReset();
	if(!mpu_init())
 80015e2:	f000 faab 	bl	8001b3c <mpu_init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11d      	bne.n	8001628 <MPU6050_DMPInit+0x88>
	{
//		printf("mpu_setting_sensor.....\r\n");
		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 80015ec:	2078      	movs	r0, #120	; 0x78
 80015ee:	f001 f831 	bl	8002654 <mpu_set_sensors>
		{
//			printf("mpu_set_sensor complete ......\r\n");
		}
//		printf("mpu configure fifo........\r\n");
		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 80015f2:	2078      	movs	r0, #120	; 0x78
 80015f4:	f000 ffdc 	bl	80025b0 <mpu_configure_fifo>
		{
//			printf("mpu_configure_fifo complete ......\r\n");
		}
//		printf("mpu setting sample rate......\r\n");
		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 80015f8:	20c8      	movs	r0, #200	; 0xc8
 80015fa:	f000 feeb 	bl	80023d4 <mpu_set_sample_rate>
		{
//			printf("mpu_set_sample_rate complete ......\r\n");
		}
//		printf("loading firmware......\r\n");
		if(!dmp_load_motion_driver_firmware())
 80015fe:	f002 f9d5 	bl	80039ac <dmp_load_motion_driver_firmware>
		{
//			printf("dmp_load_motion_driver_firmware complete ......\r\n");
		}
//		printf("setting orientation.....\r\n");
		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <MPU6050_DMPInit+0x90>)
 8001604:	f7ff feb1 	bl	800136a <inv_orientation_matrix_to_scalar>
 8001608:	4603      	mov	r3, r0
 800160a:	4618      	mov	r0, r3
 800160c:	f002 f9de 	bl	80039cc <dmp_set_orientation>
		{
//			printf("dmp set_orientation complete ......\r\n");
		}
//		printf("enabling dmp features ......\r\n");
		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 8001610:	f240 1073 	movw	r0, #371	; 0x173
 8001614:	f002 ff5c 	bl	80044d0 <dmp_enable_feature>
		DMP_FEATURE_GYRO_CAL))
		{
//			printf("dmp_enable_feature complete ......\r\n");
		}
//		printf("dmp setting fifo rate ......\r\n");
		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 8001618:	20c8      	movs	r0, #200	; 0xc8
 800161a:	f002 fccf 	bl	8003fbc <dmp_set_fifo_rate>
		{
//			printf("dmp_set_fifo_rate complete ......\r\n");
		}
		run_self_test();
 800161e:	f7ff fecc 	bl	80013ba <run_self_test>
//		printf("setting dmp state.....\r\n");
		if(!mpu_set_dmp_state(1))
 8001622:	2001      	movs	r0, #1
 8001624:	f002 f964 	bl	80038f0 <mpu_set_dmp_state>
		{
//			printf("mpu_set_dmp_state complete ......\r\n");
		}
	}
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000004 	.word	0x20000004
 8001634:	00000000 	.word	0x00000000

08001638 <MPU6050_readDMPAll>:
		 MPU6050_Yaw = yaw;
	}
}

void MPU6050_readDMPAll(float* Pitch, float* Roll, float* Yaw)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b090      	sub	sp, #64	; 0x40
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	float pitch, roll, yaw;

	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 8001644:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001648:	f107 0214 	add.w	r2, r7, #20
 800164c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	4bd7      	ldr	r3, [pc, #860]	; (80019b0 <MPU6050_readDMPAll+0x378>)
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	460b      	mov	r3, r1
 8001658:	49d6      	ldr	r1, [pc, #856]	; (80019b4 <MPU6050_readDMPAll+0x37c>)
 800165a:	48d7      	ldr	r0, [pc, #860]	; (80019b8 <MPU6050_readDMPAll+0x380>)
 800165c:	f003 f922 	bl	80048a4 <dmp_read_fifo>
	if (sensors & INV_WXYZ_QUAT )
 8001660:	4bd3      	ldr	r3, [pc, #844]	; (80019b0 <MPU6050_readDMPAll+0x378>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 81c2 	beq.w	80019f6 <MPU6050_readDMPAll+0x3be>
	{
		 q0=quat[0] / q30;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	eddf 6acf 	vldr	s13, [pc, #828]	; 80019bc <MPU6050_readDMPAll+0x384>
 8001680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001684:	4bce      	ldr	r3, [pc, #824]	; (80019c0 <MPU6050_readDMPAll+0x388>)
 8001686:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001694:	eddf 6ac9 	vldr	s13, [pc, #804]	; 80019bc <MPU6050_readDMPAll+0x384>
 8001698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169c:	4bc9      	ldr	r3, [pc, #804]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 800169e:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ac:	eddf 6ac3 	vldr	s13, [pc, #780]	; 80019bc <MPU6050_readDMPAll+0x384>
 80016b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b4:	4bc4      	ldr	r3, [pc, #784]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c4:	eddf 6abd 	vldr	s13, [pc, #756]	; 80019bc <MPU6050_readDMPAll+0x384>
 80016c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016cc:	4bbf      	ldr	r3, [pc, #764]	; (80019cc <MPU6050_readDMPAll+0x394>)
 80016ce:	edc3 7a00 	vstr	s15, [r3]
		 pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;
 80016d2:	4bbc      	ldr	r3, [pc, #752]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80016dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016e0:	4bba      	ldr	r3, [pc, #744]	; (80019cc <MPU6050_readDMPAll+0x394>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ea:	4bb5      	ldr	r3, [pc, #724]	; (80019c0 <MPU6050_readDMPAll+0x388>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016f4:	4bb4      	ldr	r3, [pc, #720]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001702:	ee17 0a90 	vmov	r0, s15
 8001706:	f7fe ff27 	bl	8000558 <__aeabi_f2d>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b10 	vmov	d0, r2, r3
 8001712:	f006 fc6f 	bl	8007ff4 <asin>
 8001716:	ec51 0b10 	vmov	r0, r1, d0
 800171a:	a3a1      	add	r3, pc, #644	; (adr r3, 80019a0 <MPU6050_readDMPAll+0x368>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff72 	bl	8000608 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff fa44 	bl	8000bb8 <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
		 roll= atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;
 8001734:	4ba4      	ldr	r3, [pc, #656]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800173e:	4ba3      	ldr	r3, [pc, #652]	; (80019cc <MPU6050_readDMPAll+0x394>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001748:	4b9d      	ldr	r3, [pc, #628]	; (80019c0 <MPU6050_readDMPAll+0x388>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001752:	4b9c      	ldr	r3, [pc, #624]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe fef8 	bl	8000558 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800177a:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001784:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800178e:	4b8e      	ldr	r3, [pc, #568]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a4:	ee17 0a90 	vmov	r0, s15
 80017a8:	f7fe fed6 	bl	8000558 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	ec43 2b11 	vmov	d1, r2, r3
 80017b4:	ec45 4b10 	vmov	d0, r4, r5
 80017b8:	f006 fc50 	bl	800805c <atan2>
 80017bc:	ec51 0b10 	vmov	r0, r1, d0
 80017c0:	a377      	add	r3, pc, #476	; (adr r3, 80019a0 <MPU6050_readDMPAll+0x368>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe ff1f 	bl	8000608 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f9f1 	bl	8000bb8 <__aeabi_d2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 80017da:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ea:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <MPU6050_readDMPAll+0x388>)
 80017ec:	edd3 6a00 	vldr	s13, [r3]
 80017f0:	4b76      	ldr	r3, [pc, #472]	; (80019cc <MPU6050_readDMPAll+0x394>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001802:	ee17 0a90 	vmov	r0, s15
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
 800180e:	4b6c      	ldr	r3, [pc, #432]	; (80019c0 <MPU6050_readDMPAll+0x388>)
 8001810:	ed93 7a00 	vldr	s14, [r3]
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <MPU6050_readDMPAll+0x388>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 8001820:	edd3 6a00 	vldr	s13, [r3]
 8001824:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <MPU6050_readDMPAll+0x38c>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <MPU6050_readDMPAll+0x390>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001842:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001846:	4b61      	ldr	r3, [pc, #388]	; (80019cc <MPU6050_readDMPAll+0x394>)
 8001848:	edd3 6a00 	vldr	s13, [r3]
 800184c:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <MPU6050_readDMPAll+0x394>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fe7b 	bl	8000558 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ec43 2b11 	vmov	d1, r2, r3
 800186a:	ec45 4b10 	vmov	d0, r4, r5
 800186e:	f006 fbf5 	bl	800805c <atan2>
 8001872:	ec51 0b10 	vmov	r0, r1, d0
 8001876:	a34a      	add	r3, pc, #296	; (adr r3, 80019a0 <MPU6050_readDMPAll+0x368>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fec4 	bl	8000608 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f996 	bl	8000bb8 <__aeabi_d2f>
 800188c:	4603      	mov	r3, r0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c

		 pitch += MPU6050_PitchCorrector;
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <MPU6050_readDMPAll+0x398>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		 pitch = fmod(pitch, 360);
 80018a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018a4:	f7fe fe58 	bl	8000558 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 80019a8 <MPU6050_readDMPAll+0x370>
 80018b0:	ec43 2b10 	vmov	d0, r2, r3
 80018b4:	f006 fbd4 	bl	8008060 <fmod>
 80018b8:	ec53 2b10 	vmov	r2, r3, d0
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f97a 	bl	8000bb8 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
		 if(pitch > 180) pitch -= 360;
 80018c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018cc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80019d4 <MPU6050_readDMPAll+0x39c>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	dd07      	ble.n	80018ea <MPU6050_readDMPAll+0x2b2>
 80018da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018de:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80019d8 <MPU6050_readDMPAll+0x3a0>
 80018e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		 roll += MPU6050_RollCorrector;
 80018ea:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <MPU6050_readDMPAll+0x3a4>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		 roll = fmod(roll, 360);
 80018fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018fe:	f7fe fe2b 	bl	8000558 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80019a8 <MPU6050_readDMPAll+0x370>
 800190a:	ec43 2b10 	vmov	d0, r2, r3
 800190e:	f006 fba7 	bl	8008060 <fmod>
 8001912:	ec53 2b10 	vmov	r2, r3, d0
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f94d 	bl	8000bb8 <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
		 if(roll > 180) roll -= 360;
 8001922:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001926:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80019d4 <MPU6050_readDMPAll+0x39c>
 800192a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	dd07      	ble.n	8001944 <MPU6050_readDMPAll+0x30c>
 8001934:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001938:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80019d8 <MPU6050_readDMPAll+0x3a0>
 800193c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001940:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		 yaw += MPU6050_YawCorrector;
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MPU6050_readDMPAll+0x3a8>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800194e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001952:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		 yaw = fmod(yaw, 360);
 8001956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001958:	f7fe fdfe 	bl	8000558 <__aeabi_f2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80019a8 <MPU6050_readDMPAll+0x370>
 8001964:	ec43 2b10 	vmov	d0, r2, r3
 8001968:	f006 fb7a 	bl	8008060 <fmod>
 800196c:	ec53 2b10 	vmov	r2, r3, d0
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f920 	bl	8000bb8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
		 if(yaw > 180) yaw -= 360;
 800197c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001980:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80019d4 <MPU6050_readDMPAll+0x39c>
 8001984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	dd2a      	ble.n	80019e4 <MPU6050_readDMPAll+0x3ac>
 800198e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001992:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80019d8 <MPU6050_readDMPAll+0x3a0>
 8001996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800199a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800199e:	e021      	b.n	80019e4 <MPU6050_readDMPAll+0x3ac>
 80019a0:	66666666 	.word	0x66666666
 80019a4:	404ca666 	.word	0x404ca666
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40768000 	.word	0x40768000
 80019b0:	20000296 	.word	0x20000296
 80019b4:	20000290 	.word	0x20000290
 80019b8:	20000288 	.word	0x20000288
 80019bc:	4e800000 	.word	0x4e800000
 80019c0:	20000000 	.word	0x20000000
 80019c4:	200002b0 	.word	0x200002b0
 80019c8:	200002b4 	.word	0x200002b4
 80019cc:	200002b8 	.word	0x200002b8
 80019d0:	200002a4 	.word	0x200002a4
 80019d4:	43340000 	.word	0x43340000
 80019d8:	43b40000 	.word	0x43b40000
 80019dc:	200002a8 	.word	0x200002a8
 80019e0:	200002ac 	.word	0x200002ac

		 *Pitch = pitch;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e8:	601a      	str	r2, [r3, #0]
		 *Roll = roll;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ee:	601a      	str	r2, [r3, #0]
		 *Yaw = yaw;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f4:	601a      	str	r2, [r3, #0]
	}
}
 80019f6:	bf00      	nop
 80019f8:	3738      	adds	r7, #56	; 0x38
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}
 80019fe:	bf00      	nop

08001a00 <MPU6050_setYawCorrectorRate>:
{
	MPU6050_RollCorrectorRate = rollCorrectorRate;
}

void MPU6050_setYawCorrectorRate(float yawCorrectorRate)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	ed87 0a01 	vstr	s0, [r7, #4]
	MPU6050_YawCorrectorRate = yawCorrectorRate;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <MPU6050_setYawCorrectorRate+0x1c>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	200002a0 	.word	0x200002a0

08001a20 <MPU6050_updateAngleCorrector>:

void MPU6050_updateAngleCorrector(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	MPU6050_PitchCorrector += MPU6050_PitchCorrectorRate;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MPU6050_updateAngleCorrector+0x50>)
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MPU6050_updateAngleCorrector+0x54>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MPU6050_updateAngleCorrector+0x50>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_RollCorrector += MPU6050_RollCorrectorRate;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MPU6050_updateAngleCorrector+0x58>)
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MPU6050_updateAngleCorrector+0x5c>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MPU6050_updateAngleCorrector+0x58>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_YawCorrector += MPU6050_YawCorrectorRate;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MPU6050_updateAngleCorrector+0x60>)
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MPU6050_updateAngleCorrector+0x64>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MPU6050_updateAngleCorrector+0x60>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	200002a4 	.word	0x200002a4
 8001a74:	20000298 	.word	0x20000298
 8001a78:	200002a8 	.word	0x200002a8
 8001a7c:	2000029c 	.word	0x2000029c
 8001a80:	200002ac 	.word	0x200002ac
 8001a84:	200002a0 	.word	0x200002a0

08001a88 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <set_int_enable+0xb0>)
 8001a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01c      	beq.n	8001ad6 <set_int_enable+0x4e>
        if (enable)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e001      	b.n	8001aac <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <set_int_enable+0xb0>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	7818      	ldrb	r0, [r3, #0]
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <set_int_enable+0xb0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	7bd9      	ldrb	r1, [r3, #15]
 8001ab8:	f107 030f 	add.w	r3, r7, #15
 8001abc:	2201      	movs	r2, #1
 8001abe:	f7ff fab5 	bl	800102c <i2cWrite>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <set_int_enable+0x46>
            return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001acc:	e030      	b.n	8001b30 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <set_int_enable+0xb0>)
 8001ad2:	745a      	strb	r2, [r3, #17]
 8001ad4:	e02b      	b.n	8001b2e <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <set_int_enable+0xb0>)
 8001ad8:	7a9b      	ldrb	r3, [r3, #10]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <set_int_enable+0x5c>
            return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae2:	e025      	b.n	8001b30 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <set_int_enable+0x6e>
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <set_int_enable+0xb0>)
 8001aec:	7c5b      	ldrb	r3, [r3, #17]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <set_int_enable+0x6e>
            return 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e01c      	b.n	8001b30 <set_int_enable+0xa8>
        if (enable)
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e001      	b.n	8001b06 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <set_int_enable+0xb0>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	7818      	ldrb	r0, [r3, #0]
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <set_int_enable+0xb0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	7bd9      	ldrb	r1, [r3, #15]
 8001b12:	f107 030f 	add.w	r3, r7, #15
 8001b16:	2201      	movs	r2, #1
 8001b18:	f7ff fa88 	bl	800102c <i2cWrite>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <set_int_enable+0xa0>
            return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b26:	e003      	b.n	8001b30 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <set_int_enable+0xb0>)
 8001b2c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000010 	.word	0x20000010

08001b3c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <mpu_init+0x1fc>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	7818      	ldrb	r0, [r3, #0]
 8001b4c:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <mpu_init+0x1fc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	7c99      	ldrb	r1, [r3, #18]
 8001b52:	463b      	mov	r3, r7
 8001b54:	2201      	movs	r2, #1
 8001b56:	f7ff fa69 	bl	800102c <i2cWrite>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <mpu_init+0x2a>
        return -1;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b64:	e0e4      	b.n	8001d30 <mpu_init+0x1f4>
    delay_ms(100);
 8001b66:	2064      	movs	r0, #100	; 0x64
 8001b68:	f003 fca0 	bl	80054ac <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001b70:	4b71      	ldr	r3, [pc, #452]	; (8001d38 <mpu_init+0x1fc>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	7818      	ldrb	r0, [r3, #0]
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <mpu_init+0x1fc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	7c99      	ldrb	r1, [r3, #18]
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f7ff fa54 	bl	800102c <i2cWrite>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <mpu_init+0x54>
        return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8e:	e0cf      	b.n	8001d30 <mpu_init+0x1f4>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8001b90:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <mpu_init+0x1fc>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	7818      	ldrb	r0, [r3, #0]
 8001b96:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <mpu_init+0x1fc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	7d99      	ldrb	r1, [r3, #22]
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2206      	movs	r2, #6
 8001ba0:	f7ff fa68 	bl	8001074 <i2cRead>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <mpu_init+0x74>
        return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bae:	e0bf      	b.n	8001d30 <mpu_init+0x1f4>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <mpu_init+0xc8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d103      	bne.n	8001bf0 <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <mpu_init+0x1fc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	74da      	strb	r2, [r3, #19]
 8001bee:	e02d      	b.n	8001c4c <mpu_init+0x110>
        else if (rev == 2)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d103      	bne.n	8001bfe <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 8001bf6:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <mpu_init+0x1fc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	74da      	strb	r2, [r3, #19]
 8001bfc:	e026      	b.n	8001c4c <mpu_init+0x110>
        else {
            //log_e("Unsupported software product rev %d.\n",rev);
            return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c02:	e095      	b.n	8001d30 <mpu_init+0x1f4>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <mpu_init+0x1fc>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	7818      	ldrb	r0, [r3, #0]
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <mpu_init+0x1fc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	78d9      	ldrb	r1, [r3, #3]
 8001c10:	463b      	mov	r3, r7
 8001c12:	2201      	movs	r2, #1
 8001c14:	f7ff fa2e 	bl	8001074 <i2cRead>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <mpu_init+0xe8>
            return -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	e085      	b.n	8001d30 <mpu_init+0x1f4>
        rev = data[0] & 0x0F;
 8001c24:	783b      	ldrb	r3, [r7, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <mpu_init+0xfc>
            //log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
            return -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	e07b      	b.n	8001d30 <mpu_init+0x1f4>
        } else if (rev == 4) {
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d103      	bne.n	8001c46 <mpu_init+0x10a>
            //log_i("Half sensitivity part found.\r\n");
            st.chip_cfg.accel_half = 1;
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <mpu_init+0x1fc>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	74da      	strb	r2, [r3, #19]
 8001c44:	e002      	b.n	8001c4c <mpu_init+0x110>
        } else
            st.chip_cfg.accel_half = 0;
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <mpu_init+0x1fc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <mpu_init+0x1fc>)
 8001c4e:	22ff      	movs	r2, #255	; 0xff
 8001c50:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <mpu_init+0x1fc>)
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <mpu_init+0x1fc>)
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <mpu_init+0x1fc>)
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <mpu_init+0x1fc>)
 8001c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <mpu_init+0x1fc>)
 8001c6e:	22ff      	movs	r2, #255	; 0xff
 8001c70:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <mpu_init+0x1fc>)
 8001c74:	22ff      	movs	r2, #255	; 0xff
 8001c76:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <mpu_init+0x1fc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <mpu_init+0x1fc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <mpu_init+0x1fc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <mpu_init+0x1fc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <mpu_init+0x1fc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4827      	ldr	r0, [pc, #156]	; (8001d3c <mpu_init+0x200>)
 8001ca0:	f007 f8ae 	bl	8008e00 <memset>
    st.chip_cfg.dmp_on = 0;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <mpu_init+0x1fc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <mpu_init+0x1fc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <mpu_init+0x1fc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8001cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cbe:	f000 f9ed 	bl	800209c <mpu_set_gyro_fsr>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <mpu_init+0x192>
        return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ccc:	e030      	b.n	8001d30 <mpu_init+0x1f4>
    if (mpu_set_accel_fsr(2))
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f000 fa72 	bl	80021b8 <mpu_set_accel_fsr>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <mpu_init+0x1a4>
        return -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	e027      	b.n	8001d30 <mpu_init+0x1f4>
    if (mpu_set_lpf(42))
 8001ce0:	202a      	movs	r0, #42	; 0x2a
 8001ce2:	f000 fb0f 	bl	8002304 <mpu_set_lpf>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <mpu_init+0x1b6>
        return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cf0:	e01e      	b.n	8001d30 <mpu_init+0x1f4>
    if (mpu_set_sample_rate(50))
 8001cf2:	2032      	movs	r0, #50	; 0x32
 8001cf4:	f000 fb6e 	bl	80023d4 <mpu_set_sample_rate>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <mpu_init+0x1c8>
        return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d02:	e015      	b.n	8001d30 <mpu_init+0x1f4>
    if (mpu_configure_fifo(0))
 8001d04:	2000      	movs	r0, #0
 8001d06:	f000 fc53 	bl	80025b0 <mpu_configure_fifo>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <mpu_init+0x1da>
        return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d14:	e00c      	b.n	8001d30 <mpu_init+0x1f4>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8001d16:	2000      	movs	r0, #0
 8001d18:	f000 fda4 	bl	8002864 <mpu_set_bypass>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <mpu_init+0x1ec>
        return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d26:	e003      	b.n	8001d30 <mpu_init+0x1f4>
#endif

    mpu_set_sensors(0);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 fc93 	bl	8002654 <mpu_set_sensors>
    return 0;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	20000026 	.word	0x20000026

08001d40 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b28      	cmp	r3, #40	; 0x28
 8001d4e:	d902      	bls.n	8001d56 <mpu_lp_accel_mode+0x16>
        return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d54:	e06a      	b.n	8001e2c <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d11c      	bne.n	8001d96 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 fe47 	bl	80029f0 <mpu_set_int_latched>
        tmp[0] = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001d66:	2307      	movs	r3, #7
 8001d68:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	7818      	ldrb	r0, [r3, #0]
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	7c99      	ldrb	r1, [r3, #18]
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f7ff f956 	bl	800102c <i2cWrite>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <mpu_lp_accel_mode+0x4c>
            return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8a:	e04f      	b.n	8001e2c <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	751a      	strb	r2, [r3, #20]
        return 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e04a      	b.n	8001e2c <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 fe2a 	bl	80029f0 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8001da6:	2300      	movs	r3, #0
 8001da8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001daa:	2005      	movs	r0, #5
 8001dac:	f000 faaa 	bl	8002304 <mpu_set_lpf>
 8001db0:	e016      	b.n	8001de0 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d805      	bhi.n	8001dc4 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8001db8:	2301      	movs	r3, #1
 8001dba:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001dbc:	2005      	movs	r0, #5
 8001dbe:	f000 faa1 	bl	8002304 <mpu_set_lpf>
 8001dc2:	e00d      	b.n	8001de0 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b14      	cmp	r3, #20
 8001dc8:	d805      	bhi.n	8001dd6 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f000 fa98 	bl	8002304 <mpu_set_lpf>
 8001dd4:	e004      	b.n	8001de0 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001dda:	2014      	movs	r0, #20
 8001ddc:	f000 fa92 	bl	8002304 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	019b      	lsls	r3, r3, #6
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	f043 0307 	orr.w	r3, r3, #7
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	7818      	ldrb	r0, [r3, #0]
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	7c99      	ldrb	r1, [r3, #18]
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2202      	movs	r2, #2
 8001e02:	f7ff f913 	bl	800102c <i2cWrite>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <mpu_lp_accel_mode+0xd2>
        return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e10:	e00c      	b.n	8001e2c <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001e14:	2208      	movs	r2, #8
 8001e16:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <mpu_lp_accel_mode+0xf4>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 fbc3 	bl	80025b0 <mpu_configure_fifo>

    return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000010 	.word	0x20000010

08001e38 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001e3e:	4b7b      	ldr	r3, [pc, #492]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e40:	7a9b      	ldrb	r3, [r3, #10]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <mpu_reset_fifo+0x14>
        return -1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4a:	e0eb      	b.n	8002024 <mpu_reset_fifo+0x1ec>

    data = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001e50:	4b76      	ldr	r3, [pc, #472]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	7818      	ldrb	r0, [r3, #0]
 8001e56:	4b75      	ldr	r3, [pc, #468]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	7bd9      	ldrb	r1, [r3, #15]
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f7ff f8e4 	bl	800102c <i2cWrite>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <mpu_reset_fifo+0x38>
        return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e6e:	e0d9      	b.n	8002024 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001e70:	4b6e      	ldr	r3, [pc, #440]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	7818      	ldrb	r0, [r3, #0]
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	7959      	ldrb	r1, [r3, #5]
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f7ff f8d4 	bl	800102c <i2cWrite>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <mpu_reset_fifo+0x58>
        return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8e:	e0c9      	b.n	8002024 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	7818      	ldrb	r0, [r3, #0]
 8001e96:	4b65      	ldr	r3, [pc, #404]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	7919      	ldrb	r1, [r3, #4]
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f7ff f8c4 	bl	800102c <i2cWrite>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <mpu_reset_fifo+0x78>
        return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eae:	e0b9      	b.n	8002024 <mpu_reset_fifo+0x1ec>

    if (st.chip_cfg.dmp_on) {
 8001eb0:	4b5e      	ldr	r3, [pc, #376]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d059      	beq.n	8001f6e <mpu_reset_fifo+0x136>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001eba:	230c      	movs	r3, #12
 8001ebc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	7818      	ldrb	r0, [r3, #0]
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	7919      	ldrb	r1, [r3, #4]
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f7ff f8ad 	bl	800102c <i2cWrite>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <mpu_reset_fifo+0xa6>
            return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001edc:	e0a2      	b.n	8002024 <mpu_reset_fifo+0x1ec>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001ee2:	4b52      	ldr	r3, [pc, #328]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001ee4:	7a9b      	ldrb	r3, [r3, #10]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <mpu_reset_fifo+0xc0>
            data |= BIT_AUX_IF_EN;
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f043 0320 	orr.w	r3, r3, #32
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	7818      	ldrb	r0, [r3, #0]
 8001efe:	4b4b      	ldr	r3, [pc, #300]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	7919      	ldrb	r1, [r3, #4]
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	2201      	movs	r2, #1
 8001f08:	f7ff f890 	bl	800102c <i2cWrite>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <mpu_reset_fifo+0xe0>
            return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f16:	e085      	b.n	8002024 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.int_enable)
 8001f18:	4b44      	ldr	r3, [pc, #272]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f1a:	7c5b      	ldrb	r3, [r3, #17]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <mpu_reset_fifo+0xee>
            data = BIT_DMP_INT_EN;
 8001f20:	2302      	movs	r3, #2
 8001f22:	71fb      	strb	r3, [r7, #7]
 8001f24:	e001      	b.n	8001f2a <mpu_reset_fifo+0xf2>
        else
            data = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	7818      	ldrb	r0, [r3, #0]
 8001f30:	4b3e      	ldr	r3, [pc, #248]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	7bd9      	ldrb	r1, [r3, #15]
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f7ff f877 	bl	800102c <i2cWrite>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <mpu_reset_fifo+0x112>
            return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f48:	e06c      	b.n	8002024 <mpu_reset_fifo+0x1ec>
        data = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	7818      	ldrb	r0, [r3, #0]
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	7959      	ldrb	r1, [r3, #5]
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f7ff f865 	bl	800102c <i2cWrite>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d05c      	beq.n	8002022 <mpu_reset_fifo+0x1ea>
            return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6c:	e05a      	b.n	8002024 <mpu_reset_fifo+0x1ec>
    } else {
        data = BIT_FIFO_RST;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	7818      	ldrb	r0, [r3, #0]
 8001f78:	4b2c      	ldr	r3, [pc, #176]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	7919      	ldrb	r1, [r3, #4]
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	2201      	movs	r2, #1
 8001f82:	f7ff f853 	bl	800102c <i2cWrite>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <mpu_reset_fifo+0x15a>
            return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f90:	e048      	b.n	8002024 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f94:	7c9b      	ldrb	r3, [r3, #18]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <mpu_reset_fifo+0x16e>
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001f9c:	7a9b      	ldrb	r3, [r3, #10]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <mpu_reset_fifo+0x174>
            data = BIT_FIFO_EN;
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	e001      	b.n	8001fb0 <mpu_reset_fifo+0x178>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001fac:	2360      	movs	r3, #96	; 0x60
 8001fae:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	7818      	ldrb	r0, [r3, #0]
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	7919      	ldrb	r1, [r3, #4]
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f7ff f834 	bl	800102c <i2cWrite>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <mpu_reset_fifo+0x198>
            return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fce:	e029      	b.n	8002024 <mpu_reset_fifo+0x1ec>
    
        if (st.chip_cfg.int_enable)
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001fd2:	7c5b      	ldrb	r3, [r3, #17]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <mpu_reset_fifo+0x1a6>
            data = BIT_DATA_RDY_EN;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	e001      	b.n	8001fe2 <mpu_reset_fifo+0x1aa>
        else
            data = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	7818      	ldrb	r0, [r3, #0]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <mpu_reset_fifo+0x1f4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	7bd9      	ldrb	r1, [r3, #15]
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f7ff f81b 	bl	800102c <i2cWrite>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <mpu_reset_fifo+0x1ca>
            return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002000:	e010      	b.n	8002024 <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <mpu_reset_fifo+0x1f4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	7818      	ldrb	r0, [r3, #0]
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <mpu_reset_fifo+0x1f4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	7959      	ldrb	r1, [r3, #5]
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <mpu_reset_fifo+0x1f8>)
 8002010:	2201      	movs	r2, #1
 8002012:	f7ff f80b 	bl	800102c <i2cWrite>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <mpu_reset_fifo+0x1ea>
            return -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002020:	e000      	b.n	8002024 <mpu_reset_fifo+0x1ec>
    }
    return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000010 	.word	0x20000010
 8002030:	20000020 	.word	0x20000020

08002034 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <mpu_get_gyro_fsr+0x64>)
 800203e:	7a1b      	ldrb	r3, [r3, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d81e      	bhi.n	8002082 <mpu_get_gyro_fsr+0x4e>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <mpu_get_gyro_fsr+0x18>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	08002065 	.word	0x08002065
 8002054:	0800206f 	.word	0x0800206f
 8002058:	08002079 	.word	0x08002079
    case INV_FSR_250DPS:
        fsr[0] = 250;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	22fa      	movs	r2, #250	; 0xfa
 8002060:	801a      	strh	r2, [r3, #0]
        break;
 8002062:	e012      	b.n	800208a <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800206a:	801a      	strh	r2, [r3, #0]
        break;
 800206c:	e00d      	b.n	800208a <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002074:	801a      	strh	r2, [r3, #0]
        break;
 8002076:	e008      	b.n	800208a <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800207e:	801a      	strh	r2, [r3, #0]
        break;
 8002080:	e003      	b.n	800208a <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	801a      	strh	r2, [r3, #0]
        break;
 8002088:	bf00      	nop
    }
    return 0;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20000010 	.word	0x20000010

0800209c <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <mpu_set_gyro_fsr+0xa4>)
 80020a8:	7a9b      	ldrb	r3, [r3, #10]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <mpu_set_gyro_fsr+0x18>
        return -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b2:	e041      	b.n	8002138 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020ba:	d017      	beq.n	80020ec <mpu_set_gyro_fsr+0x50>
 80020bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020c0:	dc17      	bgt.n	80020f2 <mpu_set_gyro_fsr+0x56>
 80020c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c6:	d00e      	beq.n	80020e6 <mpu_set_gyro_fsr+0x4a>
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020cc:	dc11      	bgt.n	80020f2 <mpu_set_gyro_fsr+0x56>
 80020ce:	2bfa      	cmp	r3, #250	; 0xfa
 80020d0:	d003      	beq.n	80020da <mpu_set_gyro_fsr+0x3e>
 80020d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020d6:	d003      	beq.n	80020e0 <mpu_set_gyro_fsr+0x44>
 80020d8:	e00b      	b.n	80020f2 <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
        break;
 80020de:	e00b      	b.n	80020f8 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 80020e0:	2308      	movs	r3, #8
 80020e2:	73fb      	strb	r3, [r7, #15]
        break;
 80020e4:	e008      	b.n	80020f8 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80020e6:	2310      	movs	r3, #16
 80020e8:	73fb      	strb	r3, [r7, #15]
        break;
 80020ea:	e005      	b.n	80020f8 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80020ec:	2318      	movs	r3, #24
 80020ee:	73fb      	strb	r3, [r7, #15]
        break;
 80020f0:	e002      	b.n	80020f8 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f6:	e01f      	b.n	8002138 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <mpu_set_gyro_fsr+0xa4>)
 80020fa:	7a1a      	ldrb	r2, [r3, #8]
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	429a      	cmp	r2, r3
 8002104:	d101      	bne.n	800210a <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002106:	2300      	movs	r3, #0
 8002108:	e016      	b.n	8002138 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <mpu_set_gyro_fsr+0xa4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	7818      	ldrb	r0, [r3, #0]
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <mpu_set_gyro_fsr+0xa4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	7999      	ldrb	r1, [r3, #6]
 8002116:	f107 030f 	add.w	r3, r7, #15
 800211a:	2201      	movs	r2, #1
 800211c:	f7fe ff86 	bl	800102c <i2cWrite>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <mpu_set_gyro_fsr+0x90>
        return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212a:	e005      	b.n	8002138 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	08db      	lsrs	r3, r3, #3
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <mpu_set_gyro_fsr+0xa4>)
 8002134:	721a      	strb	r2, [r3, #8]
    return 0;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000010 	.word	0x20000010

08002144 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <mpu_get_accel_fsr+0x70>)
 800214e:	7a5b      	ldrb	r3, [r3, #9]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d81b      	bhi.n	800218c <mpu_get_accel_fsr+0x48>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <mpu_get_accel_fsr+0x18>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	08002175 	.word	0x08002175
 8002164:	0800217d 	.word	0x0800217d
 8002168:	08002185 	.word	0x08002185
    case INV_FSR_2G:
        fsr[0] = 2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
        break;
 8002172:	e00e      	b.n	8002192 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2204      	movs	r2, #4
 8002178:	701a      	strb	r2, [r3, #0]
        break;
 800217a:	e00a      	b.n	8002192 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2208      	movs	r2, #8
 8002180:	701a      	strb	r2, [r3, #0]
        break;
 8002182:	e006      	b.n	8002192 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2210      	movs	r2, #16
 8002188:	701a      	strb	r2, [r3, #0]
        break;
 800218a:	e002      	b.n	8002192 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002190:	e00a      	b.n	80021a8 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <mpu_get_accel_fsr+0x70>)
 8002194:	7cdb      	ldrb	r3, [r3, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	701a      	strb	r2, [r3, #0]
    return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000010 	.word	0x20000010

080021b8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <mpu_set_accel_fsr+0xcc>)
 80021c4:	7a9b      	ldrb	r3, [r3, #10]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <mpu_set_accel_fsr+0x18>
        return -1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ce:	e054      	b.n	800227a <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	3b02      	subs	r3, #2
 80021d4:	2b0e      	cmp	r3, #14
 80021d6:	d82d      	bhi.n	8002234 <mpu_set_accel_fsr+0x7c>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <mpu_set_accel_fsr+0x28>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	0800221d 	.word	0x0800221d
 80021e4:	08002235 	.word	0x08002235
 80021e8:	08002223 	.word	0x08002223
 80021ec:	08002235 	.word	0x08002235
 80021f0:	08002235 	.word	0x08002235
 80021f4:	08002235 	.word	0x08002235
 80021f8:	08002229 	.word	0x08002229
 80021fc:	08002235 	.word	0x08002235
 8002200:	08002235 	.word	0x08002235
 8002204:	08002235 	.word	0x08002235
 8002208:	08002235 	.word	0x08002235
 800220c:	08002235 	.word	0x08002235
 8002210:	08002235 	.word	0x08002235
 8002214:	08002235 	.word	0x08002235
 8002218:	0800222f 	.word	0x0800222f
    case 2:
        data = INV_FSR_2G << 3;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
        break;
 8002220:	e00b      	b.n	800223a <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002222:	2308      	movs	r3, #8
 8002224:	73fb      	strb	r3, [r7, #15]
        break;
 8002226:	e008      	b.n	800223a <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002228:	2310      	movs	r3, #16
 800222a:	73fb      	strb	r3, [r7, #15]
        break;
 800222c:	e005      	b.n	800223a <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800222e:	2318      	movs	r3, #24
 8002230:	73fb      	strb	r3, [r7, #15]
        break;
 8002232:	e002      	b.n	800223a <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002238:	e01f      	b.n	800227a <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <mpu_set_accel_fsr+0xcc>)
 800223c:	7a5a      	ldrb	r2, [r3, #9]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	429a      	cmp	r2, r3
 8002246:	d101      	bne.n	800224c <mpu_set_accel_fsr+0x94>
        return 0;
 8002248:	2300      	movs	r3, #0
 800224a:	e016      	b.n	800227a <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <mpu_set_accel_fsr+0xcc>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	7818      	ldrb	r0, [r3, #0]
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <mpu_set_accel_fsr+0xcc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	79d9      	ldrb	r1, [r3, #7]
 8002258:	f107 030f 	add.w	r3, r7, #15
 800225c:	2201      	movs	r2, #1
 800225e:	f7fe fee5 	bl	800102c <i2cWrite>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <mpu_set_accel_fsr+0xb6>
        return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800226c:	e005      	b.n	800227a <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <mpu_set_accel_fsr+0xcc>)
 8002276:	725a      	strb	r2, [r3, #9]
    return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000010 	.word	0x20000010

08002288 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <mpu_get_lpf+0x78>)
 8002292:	7adb      	ldrb	r3, [r3, #11]
 8002294:	3b01      	subs	r3, #1
 8002296:	2b05      	cmp	r3, #5
 8002298:	d826      	bhi.n	80022e8 <mpu_get_lpf+0x60>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <mpu_get_lpf+0x18>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022b9 	.word	0x080022b9
 80022a4:	080022c1 	.word	0x080022c1
 80022a8:	080022c9 	.word	0x080022c9
 80022ac:	080022d1 	.word	0x080022d1
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	080022e1 	.word	0x080022e1
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	22bc      	movs	r2, #188	; 0xbc
 80022bc:	801a      	strh	r2, [r3, #0]
        break;
 80022be:	e017      	b.n	80022f0 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2262      	movs	r2, #98	; 0x62
 80022c4:	801a      	strh	r2, [r3, #0]
        break;
 80022c6:	e013      	b.n	80022f0 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	222a      	movs	r2, #42	; 0x2a
 80022cc:	801a      	strh	r2, [r3, #0]
        break;
 80022ce:	e00f      	b.n	80022f0 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2214      	movs	r2, #20
 80022d4:	801a      	strh	r2, [r3, #0]
        break;
 80022d6:	e00b      	b.n	80022f0 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	220a      	movs	r2, #10
 80022dc:	801a      	strh	r2, [r3, #0]
        break;
 80022de:	e007      	b.n	80022f0 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2205      	movs	r2, #5
 80022e4:	801a      	strh	r2, [r3, #0]
        break;
 80022e6:	e003      	b.n	80022f0 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	801a      	strh	r2, [r3, #0]
        break;
 80022ee:	bf00      	nop
    }
    return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000010 	.word	0x20000010

08002304 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <mpu_set_lpf+0x98>)
 8002310:	7a9b      	ldrb	r3, [r3, #10]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <mpu_set_lpf+0x18>
        return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231a:	e03b      	b.n	8002394 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2bbb      	cmp	r3, #187	; 0xbb
 8002320:	d902      	bls.n	8002328 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e019      	b.n	800235c <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	2b61      	cmp	r3, #97	; 0x61
 800232c:	d902      	bls.n	8002334 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800232e:	2302      	movs	r3, #2
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e013      	b.n	800235c <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	2b29      	cmp	r3, #41	; 0x29
 8002338:	d902      	bls.n	8002340 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800233a:	2303      	movs	r3, #3
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e00d      	b.n	800235c <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	2b13      	cmp	r3, #19
 8002344:	d902      	bls.n	800234c <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002346:	2304      	movs	r3, #4
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e007      	b.n	800235c <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	2b09      	cmp	r3, #9
 8002350:	d902      	bls.n	8002358 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8002352:	2305      	movs	r3, #5
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e001      	b.n	800235c <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8002358:	2306      	movs	r3, #6
 800235a:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <mpu_set_lpf+0x98>)
 800235e:	7ada      	ldrb	r2, [r3, #11]
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	429a      	cmp	r2, r3
 8002364:	d101      	bne.n	800236a <mpu_set_lpf+0x66>
        return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e014      	b.n	8002394 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <mpu_set_lpf+0x98>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	7818      	ldrb	r0, [r3, #0]
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <mpu_set_lpf+0x98>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	7899      	ldrb	r1, [r3, #2]
 8002376:	f107 030f 	add.w	r3, r7, #15
 800237a:	2201      	movs	r2, #1
 800237c:	f7fe fe56 	bl	800102c <i2cWrite>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <mpu_set_lpf+0x88>
        return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800238a:	e003      	b.n	8002394 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	4b03      	ldr	r3, [pc, #12]	; (800239c <mpu_set_lpf+0x98>)
 8002390:	72da      	strb	r2, [r3, #11]
    return 0;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000010 	.word	0x20000010

080023a0 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <mpu_get_sample_rate+0x30>)
 80023aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <mpu_get_sample_rate+0x18>
        return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b6:	e004      	b.n	80023c2 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <mpu_get_sample_rate+0x30>)
 80023ba:	89da      	ldrh	r2, [r3, #14]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	801a      	strh	r2, [r3, #0]
    return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000010 	.word	0x20000010

080023d4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <mpu_set_sample_rate+0xc8>)
 80023e0:	7a9b      	ldrb	r3, [r3, #10]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <mpu_set_sample_rate+0x18>
        return -1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ea:	e053      	b.n	8002494 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <mpu_set_sample_rate+0xc8>)
 80023ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <mpu_set_sample_rate+0x28>
        return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023fa:	e04b      	b.n	8002494 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <mpu_set_sample_rate+0xc8>)
 80023fe:	7d1b      	ldrb	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00f      	beq.n	8002424 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <mpu_set_sample_rate+0x4a>
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b28      	cmp	r3, #40	; 0x28
 800240e:	d806      	bhi.n	800241e <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fc93 	bl	8001d40 <mpu_lp_accel_mode>
                return 0;
 800241a:	2300      	movs	r3, #0
 800241c:	e03a      	b.n	8002494 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fc8e 	bl	8001d40 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d802      	bhi.n	8002430 <mpu_set_sample_rate+0x5c>
            rate = 4;
 800242a:	2304      	movs	r3, #4
 800242c:	80fb      	strh	r3, [r7, #6]
 800242e:	e006      	b.n	800243e <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002436:	d902      	bls.n	800243e <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8002438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243c:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002444:	fb92 f3f3 	sdiv	r3, r2, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <mpu_set_sample_rate+0xc8>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	7818      	ldrb	r0, [r3, #0]
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <mpu_set_sample_rate+0xc8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	7859      	ldrb	r1, [r3, #1]
 800245c:	f107 030f 	add.w	r3, r7, #15
 8002460:	2201      	movs	r2, #1
 8002462:	f7fe fde3 	bl	800102c <i2cWrite>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <mpu_set_sample_rate+0x9e>
            return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002470:	e010      	b.n	8002494 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	3301      	adds	r3, #1
 8002476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800247a:	fb92 f3f3 	sdiv	r3, r2, r3
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <mpu_set_sample_rate+0xc8>)
 8002482:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <mpu_set_sample_rate+0xc8>)
 8002486:	89db      	ldrh	r3, [r3, #14]
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff39 	bl	8002304 <mpu_set_lpf>
        return 0;
 8002492:	2300      	movs	r3, #0
    }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000010 	.word	0x20000010

080024a0 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <mpu_get_gyro_sens+0x5c>)
 80024aa:	7a1b      	ldrb	r3, [r3, #8]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d81b      	bhi.n	80024e8 <mpu_get_gyro_sens+0x48>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <mpu_get_gyro_sens+0x18>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024d1 	.word	0x080024d1
 80024c0:	080024d9 	.word	0x080024d9
 80024c4:	080024e1 	.word	0x080024e1
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <mpu_get_gyro_sens+0x60>)
 80024cc:	601a      	str	r2, [r3, #0]
        break;
 80024ce:	e00e      	b.n	80024ee <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <mpu_get_gyro_sens+0x64>)
 80024d4:	601a      	str	r2, [r3, #0]
        break;
 80024d6:	e00a      	b.n	80024ee <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <mpu_get_gyro_sens+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
        break;
 80024de:	e006      	b.n	80024ee <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <mpu_get_gyro_sens+0x6c>)
 80024e4:	601a      	str	r2, [r3, #0]
        break;
 80024e6:	e002      	b.n	80024ee <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ec:	e000      	b.n	80024f0 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	20000010 	.word	0x20000010
 8002500:	43030000 	.word	0x43030000
 8002504:	42830000 	.word	0x42830000
 8002508:	42033333 	.word	0x42033333
 800250c:	41833333 	.word	0x41833333

08002510 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <mpu_get_accel_sens+0x78>)
 800251a:	7a5b      	ldrb	r3, [r3, #9]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d81f      	bhi.n	8002560 <mpu_get_accel_sens+0x50>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <mpu_get_accel_sens+0x18>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	08002539 	.word	0x08002539
 800252c:	08002543 	.word	0x08002543
 8002530:	0800254d 	.word	0x0800254d
 8002534:	08002557 	.word	0x08002557
    case INV_FSR_2G:
        sens[0] = 16384;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253e:	801a      	strh	r2, [r3, #0]
        break;
 8002540:	e011      	b.n	8002566 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f641 729c 	movw	r2, #8092	; 0x1f9c
 8002548:	801a      	strh	r2, [r3, #0]
        break;
 800254a:	e00c      	b.n	8002566 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002552:	801a      	strh	r2, [r3, #0]
        break;
 8002554:	e007      	b.n	8002566 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800255c:	801a      	strh	r2, [r3, #0]
        break;
 800255e:	e002      	b.n	8002566 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002564:	e00a      	b.n	800257c <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <mpu_get_accel_sens+0x78>)
 8002568:	7cdb      	ldrb	r3, [r3, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	801a      	strh	r2, [r3, #0]
    return 0;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	20000010 	.word	0x20000010

0800258c <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <mpu_get_fifo_config+0x20>)
 8002596:	7c1a      	ldrb	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	701a      	strb	r2, [r3, #0]
    return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000010 	.word	0x20000010

080025b0 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <mpu_configure_fifo+0xa0>)
 80025c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <mpu_configure_fifo+0x24>
        return 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e038      	b.n	8002646 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80025d4:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <mpu_configure_fifo+0xa0>)
 80025d6:	7a9b      	ldrb	r3, [r3, #10]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <mpu_configure_fifo+0x32>
            return -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e0:	e031      	b.n	8002646 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <mpu_configure_fifo+0xa0>)
 80025e4:	7c1b      	ldrb	r3, [r3, #16]
 80025e6:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <mpu_configure_fifo+0xa0>)
 80025ea:	7a9a      	ldrb	r2, [r3, #10]
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	4013      	ands	r3, r2
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <mpu_configure_fifo+0xa0>)
 80025f4:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <mpu_configure_fifo+0xa0>)
 80025f8:	7c1b      	ldrb	r3, [r3, #16]
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d003      	beq.n	8002608 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e001      	b.n	800260c <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <mpu_configure_fifo+0x6a>
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <mpu_configure_fifo+0xa0>)
 8002614:	7d1b      	ldrb	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800261a:	2001      	movs	r0, #1
 800261c:	f7ff fa34 	bl	8001a88 <set_int_enable>
 8002620:	e002      	b.n	8002628 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fa30 	bl	8001a88 <set_int_enable>
        if (sensors) {
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800262e:	f7ff fc03 	bl	8001e38 <mpu_reset_fifo>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <mpu_configure_fifo+0xa0>)
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	7413      	strb	r3, [r2, #16]
                return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002642:	e000      	b.n	8002646 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8002644:	68fb      	ldr	r3, [r7, #12]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000010 	.word	0x20000010

08002654 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e007      	b.n	800267e <mpu_set_sensors+0x2a>
    else if (sensors)
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <mpu_set_sensors+0x26>
        data = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e001      	b.n	800267e <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <mpu_set_sensors+0x108>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	7818      	ldrb	r0, [r3, #0]
 8002684:	4b35      	ldr	r3, [pc, #212]	; (800275c <mpu_set_sensors+0x108>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	7c99      	ldrb	r1, [r3, #18]
 800268a:	f107 030f 	add.w	r3, r7, #15
 800268e:	2201      	movs	r2, #1
 8002690:	f7fe fccc 	bl	800102c <i2cWrite>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <mpu_set_sensors+0x108>)
 800269c:	2200      	movs	r2, #0
 800269e:	729a      	strb	r2, [r3, #10]
        return -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a4:	e056      	b.n	8002754 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b2b      	ldr	r3, [pc, #172]	; (800275c <mpu_set_sensors+0x108>)
 80026b0:	731a      	strb	r2, [r3, #12]

    data = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d104      	bne.n	8002706 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002702:	b2db      	uxtb	r3, r3
 8002704:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <mpu_set_sensors+0x108>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	7818      	ldrb	r0, [r3, #0]
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <mpu_set_sensors+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	7cd9      	ldrb	r1, [r3, #19]
 8002712:	f107 030f 	add.w	r3, r7, #15
 8002716:	2201      	movs	r2, #1
 8002718:	f7fe fc88 	bl	800102c <i2cWrite>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <mpu_set_sensors+0x108>)
 8002724:	2200      	movs	r2, #0
 8002726:	729a      	strb	r2, [r3, #10]
        return -1;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800272c:	e012      	b.n	8002754 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <mpu_set_sensors+0xec>
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d002      	beq.n	8002740 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800273a:	2000      	movs	r0, #0
 800273c:	f000 f958 	bl	80029f0 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <mpu_set_sensors+0x108>)
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <mpu_set_sensors+0x108>)
 8002748:	2200      	movs	r2, #0
 800274a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800274c:	2032      	movs	r0, #50	; 0x32
 800274e:	f002 fead 	bl	80054ac <HAL_Delay>
    return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000010 	.word	0x20000010

08002760 <mpu_read_fifo_stream>:
 *  @param[in]  more    Number of remaining packets.
 */
int fifoCnt;
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    int fifo_count;
    if (!st.chip_cfg.dmp_on)
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <mpu_read_fifo_stream+0xfc>)
 8002770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <mpu_read_fifo_stream+0x1e>
        return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277c:	e069      	b.n	8002852 <mpu_read_fifo_stream+0xf2>
    if (!st.chip_cfg.sensors)
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <mpu_read_fifo_stream+0xfc>)
 8002780:	7a9b      	ldrb	r3, [r3, #10]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <mpu_read_fifo_stream+0x2c>
        return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	e062      	b.n	8002852 <mpu_read_fifo_stream+0xf2>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <mpu_read_fifo_stream+0xfc>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	7818      	ldrb	r0, [r3, #0]
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <mpu_read_fifo_stream+0xfc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	7a99      	ldrb	r1, [r3, #10]
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	2202      	movs	r2, #2
 800279e:	f7fe fc69 	bl	8001074 <i2cRead>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <mpu_read_fifo_stream+0x4e>
        return -1;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ac:	e051      	b.n	8002852 <mpu_read_fifo_stream+0xf2>
    fifo_count = fifoCnt = (tmp[0] << 8) | tmp[1];
 80027ae:	7c3b      	ldrb	r3, [r7, #16]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	7c7a      	ldrb	r2, [r7, #17]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <mpu_read_fifo_stream+0x100>)
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <mpu_read_fifo_stream+0x100>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
    if (fifo_count < length) {
 80027c0:	89fb      	ldrh	r3, [r7, #14]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	da05      	bge.n	80027d4 <mpu_read_fifo_stream+0x74>
        more[0] = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
        return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d2:	e03e      	b.n	8002852 <mpu_read_fifo_stream+0xf2>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <mpu_read_fifo_stream+0xfc>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	885b      	ldrh	r3, [r3, #2]
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	4293      	cmp	r3, r2
 80027e4:	dd1a      	ble.n	800281c <mpu_read_fifo_stream+0xbc>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <mpu_read_fifo_stream+0xfc>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	7818      	ldrb	r0, [r3, #0]
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <mpu_read_fifo_stream+0xfc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	7c59      	ldrb	r1, [r3, #17]
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	2201      	movs	r2, #1
 80027f8:	f7fe fc3c 	bl	8001074 <i2cRead>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <mpu_read_fifo_stream+0xa8>
            return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002806:	e024      	b.n	8002852 <mpu_read_fifo_stream+0xf2>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002808:	7c3b      	ldrb	r3, [r7, #16]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <mpu_read_fifo_stream+0xbc>
            mpu_reset_fifo();
 8002812:	f7ff fb11 	bl	8001e38 <mpu_reset_fifo>
            return -2;
 8002816:	f06f 0301 	mvn.w	r3, #1
 800281a:	e01a      	b.n	8002852 <mpu_read_fifo_stream+0xf2>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <mpu_read_fifo_stream+0xfc>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	7818      	ldrb	r0, [r3, #0]
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <mpu_read_fifo_stream+0xfc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	7ad9      	ldrb	r1, [r3, #11]
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f7fe fc21 	bl	8001074 <i2cRead>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <mpu_read_fifo_stream+0xde>
        return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283c:	e009      	b.n	8002852 <mpu_read_fifo_stream+0xf2>
    more[0] = fifo_count / length - 1;
 800283e:	89fb      	ldrh	r3, [r7, #14]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	fb92 f3f3 	sdiv	r3, r2, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000010 	.word	0x20000010
 8002860:	200002bc 	.word	0x200002bc

08002864 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <mpu_set_bypass+0x188>)
 8002870:	7c9b      	ldrb	r3, [r3, #18]
 8002872:	79fa      	ldrb	r2, [r7, #7]
 8002874:	429a      	cmp	r2, r3
 8002876:	d101      	bne.n	800287c <mpu_set_bypass+0x18>
        return 0;
 8002878:	2300      	movs	r3, #0
 800287a:	e0b2      	b.n	80029e2 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d050      	beq.n	8002924 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002882:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <mpu_set_bypass+0x188>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	7818      	ldrb	r0, [r3, #0]
 8002888:	4b58      	ldr	r3, [pc, #352]	; (80029ec <mpu_set_bypass+0x188>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	7919      	ldrb	r1, [r3, #4]
 800288e:	f107 030f 	add.w	r3, r7, #15
 8002892:	2201      	movs	r2, #1
 8002894:	f7fe fbee 	bl	8001074 <i2cRead>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <mpu_set_bypass+0x40>
            return -1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a2:	e09e      	b.n	80029e2 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	f023 0320 	bic.w	r3, r3, #32
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80028ae:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <mpu_set_bypass+0x188>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	7818      	ldrb	r0, [r3, #0]
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <mpu_set_bypass+0x188>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	7919      	ldrb	r1, [r3, #4]
 80028ba:	f107 030f 	add.w	r3, r7, #15
 80028be:	2201      	movs	r2, #1
 80028c0:	f7fe fbb4 	bl	800102c <i2cWrite>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <mpu_set_bypass+0x6c>
            return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ce:	e088      	b.n	80029e2 <mpu_set_bypass+0x17e>
        delay_ms(3);
 80028d0:	2003      	movs	r0, #3
 80028d2:	f002 fdeb 	bl	80054ac <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 80028d6:	2302      	movs	r3, #2
 80028d8:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 80028da:	4b44      	ldr	r3, [pc, #272]	; (80029ec <mpu_set_bypass+0x188>)
 80028dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <mpu_set_bypass+0x188>)
 80028f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002902:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <mpu_set_bypass+0x188>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	7818      	ldrb	r0, [r3, #0]
 8002908:	4b38      	ldr	r3, [pc, #224]	; (80029ec <mpu_set_bypass+0x188>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	7d19      	ldrb	r1, [r3, #20]
 800290e:	f107 030f 	add.w	r3, r7, #15
 8002912:	2201      	movs	r2, #1
 8002914:	f7fe fb8a 	bl	800102c <i2cWrite>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d05d      	beq.n	80029da <mpu_set_bypass+0x176>
            return -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002922:	e05e      	b.n	80029e2 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002924:	4b31      	ldr	r3, [pc, #196]	; (80029ec <mpu_set_bypass+0x188>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	7818      	ldrb	r0, [r3, #0]
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <mpu_set_bypass+0x188>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	7919      	ldrb	r1, [r3, #4]
 8002930:	f107 030f 	add.w	r3, r7, #15
 8002934:	2201      	movs	r2, #1
 8002936:	f7fe fb9d 	bl	8001074 <i2cRead>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <mpu_set_bypass+0xe2>
            return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002944:	e04d      	b.n	80029e2 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <mpu_set_bypass+0x188>)
 8002948:	7a9b      	ldrb	r3, [r3, #10]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	f043 0320 	orr.w	r3, r3, #32
 8002958:	b2db      	uxtb	r3, r3
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e004      	b.n	8002968 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	f023 0320 	bic.w	r3, r3, #32
 8002964:	b2db      	uxtb	r3, r3
 8002966:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <mpu_set_bypass+0x188>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	7818      	ldrb	r0, [r3, #0]
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <mpu_set_bypass+0x188>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	7919      	ldrb	r1, [r3, #4]
 8002974:	f107 030f 	add.w	r3, r7, #15
 8002978:	2201      	movs	r2, #1
 800297a:	f7fe fb57 	bl	800102c <i2cWrite>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <mpu_set_bypass+0x126>
            return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002988:	e02b      	b.n	80029e2 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800298a:	2003      	movs	r0, #3
 800298c:	f002 fd8e 	bl	80054ac <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <mpu_set_bypass+0x188>)
 8002992:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e001      	b.n	80029a4 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <mpu_set_bypass+0x188>)
 80029a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <mpu_set_bypass+0x188>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	7818      	ldrb	r0, [r3, #0]
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <mpu_set_bypass+0x188>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	7d19      	ldrb	r1, [r3, #20]
 80029c4:	f107 030f 	add.w	r3, r7, #15
 80029c8:	2201      	movs	r2, #1
 80029ca:	f7fe fb2f 	bl	800102c <i2cWrite>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <mpu_set_bypass+0x176>
            return -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d8:	e003      	b.n	80029e2 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <mpu_set_bypass+0x188>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	7493      	strb	r3, [r2, #18]
    return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000010 	.word	0x20000010

080029f0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <mpu_set_int_latched+0x84>)
 80029fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a00:	79fa      	ldrb	r2, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d101      	bne.n	8002a0a <mpu_set_int_latched+0x1a>
        return 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e030      	b.n	8002a6c <mpu_set_int_latched+0x7c>

    if (enable)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002a10:	2330      	movs	r3, #48	; 0x30
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <mpu_set_int_latched+0x84>)
 8002a1c:	7c9b      	ldrb	r3, [r3, #18]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <mpu_set_int_latched+0x84>)
 8002a2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <mpu_set_int_latched+0x84>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	7818      	ldrb	r0, [r3, #0]
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <mpu_set_int_latched+0x84>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	7d19      	ldrb	r1, [r3, #20]
 8002a4c:	f107 030f 	add.w	r3, r7, #15
 8002a50:	2201      	movs	r2, #1
 8002a52:	f7fe faeb 	bl	800102c <i2cWrite>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <mpu_set_int_latched+0x72>
        return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a60:	e004      	b.n	8002a6c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <mpu_set_int_latched+0x84>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000010 	.word	0x20000010

08002a78 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002a80:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <get_accel_prod_shift+0x110>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	7818      	ldrb	r0, [r3, #0]
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	210d      	movs	r1, #13
 8002a8e:	f7fe faf1 	bl	8001074 <i2cRead>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <get_accel_prod_shift+0x24>
        return 0x07;
 8002a98:	2307      	movs	r3, #7
 8002a9a:	e071      	b.n	8002b80 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002a9c:	7c3b      	ldrb	r3, [r7, #16]
 8002a9e:	10db      	asrs	r3, r3, #3
 8002aa0:	b25b      	sxtb	r3, r3
 8002aa2:	f003 031c 	and.w	r3, r3, #28
 8002aa6:	b25a      	sxtb	r2, r3
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	111b      	asrs	r3, r3, #4
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002abc:	7c7b      	ldrb	r3, [r7, #17]
 8002abe:	10db      	asrs	r3, r3, #3
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	f003 031c 	and.w	r3, r3, #28
 8002ac6:	b25a      	sxtb	r2, r3
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	109b      	asrs	r3, r3, #2
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002adc:	7cbb      	ldrb	r3, [r7, #18]
 8002ade:	10db      	asrs	r3, r3, #3
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	f003 031c 	and.w	r3, r3, #28
 8002ae6:	b25a      	sxtb	r2, r3
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
 8002afe:	e03b      	b.n	8002b78 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	3318      	adds	r3, #24
 8002b04:	443b      	add	r3, r7
 8002b06:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
            continue;
 8002b1c:	e029      	b.n	8002b72 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <get_accel_prod_shift+0x114>)
 8002b28:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8002b2a:	e00f      	b.n	8002b4c <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b90 <get_accel_prod_shift+0x118>
 8002b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b48:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	f103 0218 	add.w	r2, r3, #24
 8002b52:	443a      	add	r2, r7
 8002b54:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	b2d1      	uxtb	r1, r2
 8002b5c:	f103 0218 	add.w	r2, r3, #24
 8002b60:	443a      	add	r2, r7
 8002b62:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8002b66:	3318      	adds	r3, #24
 8002b68:	443b      	add	r3, r7
 8002b6a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1dc      	bne.n	8002b2c <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	3301      	adds	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d9c0      	bls.n	8002b00 <get_accel_prod_shift+0x88>
    }
    return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	3eae147b 	.word	0x3eae147b
 8002b90:	3f845a1d 	.word	0x3f845a1d

08002b94 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff66 	bl	8002a78 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	e063      	b.n	8002c7a <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	440b      	add	r3, r1
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bfb8      	it	lt
 8002bcc:	425b      	neglt	r3, r3
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002c8c <accel_self_test+0xf8>
 8002bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bde:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3328      	adds	r3, #40	; 0x28
 8002be8:	443b      	add	r3, r7
 8002bea:	3b1c      	subs	r3, #28
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d023      	beq.n	8002c42 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	3328      	adds	r3, #40	; 0x28
 8002c00:	443b      	add	r3, r7
 8002c02:	3b1c      	subs	r3, #28
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c18:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8002c1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c20:	eef0 7ae7 	vabs.f32	s15, s15
 8002c24:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002c90 <accel_self_test+0xfc>
 8002c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	dd20      	ble.n	8002c74 <accel_self_test+0xe0>
                result |= 1 << jj;
 8002c32:	2201      	movs	r2, #1
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	6a3a      	ldr	r2, [r7, #32]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	e018      	b.n	8002c74 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 8002c42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c94 <accel_self_test+0x100>
 8002c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d408      	bmi.n	8002c66 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002c54:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002c98 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002c58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	dd06      	ble.n	8002c74 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002c66:	2201      	movs	r2, #1
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	3301      	adds	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	dd98      	ble.n	8002bb2 <accel_self_test+0x1e>
    }

    return result;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	47800000 	.word	0x47800000
 8002c90:	3e0f5c29 	.word	0x3e0f5c29
 8002c94:	3e99999a 	.word	0x3e99999a
 8002c98:	3f733333 	.word	0x3f733333

08002c9c <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <gyro_self_test+0x164>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	7818      	ldrb	r0, [r3, #0]
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	210d      	movs	r1, #13
 8002cb8:	f7fe f9dc 	bl	8001074 <i2cRead>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <gyro_self_test+0x2a>
        return 0x07;
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	e097      	b.n	8002df6 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 8002cc6:	7a3b      	ldrb	r3, [r7, #8]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8002cd0:	7a7b      	ldrb	r3, [r7, #9]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8002cda:	7abb      	ldrb	r3, [r7, #10]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	e080      	b.n	8002dec <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bfb8      	it	lt
 8002d04:	425b      	neglt	r3, r3
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002e04 <gyro_self_test+0x168>
 8002d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d16:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8002d1a:	f107 0208 	add.w	r2, r7, #8
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d045      	beq.n	8002db4 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 8002d28:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002e08 <gyro_self_test+0x16c>
 8002d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d30:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002e0c <gyro_self_test+0x170>
 8002d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d38:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002d3c:	e007      	b.n	8002d4e <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8002d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d42:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002e10 <gyro_self_test+0x174>
 8002d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4a:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002d4e:	f107 0208 	add.w	r2, r7, #8
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b2d9      	uxtb	r1, r3
 8002d5c:	f107 0208 	add.w	r2, r7, #8
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	460a      	mov	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e3      	bne.n	8002d3e <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002d76:	edd7 6a04 	vldr	s13, [r7, #16]
 8002d7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d8a:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8002d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d92:	eef0 7ae7 	vabs.f32	s15, s15
 8002d96:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e14 <gyro_self_test+0x178>
 8002d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	dd20      	ble.n	8002de6 <gyro_self_test+0x14a>
                result |= 1 << jj;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e018      	b.n	8002de6 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002db4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002db8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	d408      	bmi.n	8002dd8 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 8002dc6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e18 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 8002dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	dd06      	ble.n	8002de6 <gyro_self_test+0x14a>
            result |= 1 << jj;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	f77f af7b 	ble.w	8002cea <gyro_self_test+0x4e>
    }
    return result;
 8002df4:	69bb      	ldr	r3, [r7, #24]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000010 	.word	0x20000010
 8002e04:	47800000 	.word	0x47800000
 8002e08:	00000083 	.word	0x00000083
 8002e0c:	454cb000 	.word	0x454cb000
 8002e10:	3f85e354 	.word	0x3f85e354
 8002e14:	3e0f5c29 	.word	0x3e0f5c29
 8002e18:	42d20000 	.word	0x42d20000

08002e1c <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b0b8      	sub	sp, #224	; 0xe0
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8002e28:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8002e3e:	4ba5      	ldr	r3, [pc, #660]	; (80030d4 <get_st_biases+0x2b8>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	7818      	ldrb	r0, [r3, #0]
 8002e44:	4ba3      	ldr	r3, [pc, #652]	; (80030d4 <get_st_biases+0x2b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	7c99      	ldrb	r1, [r3, #18]
 8002e4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f7fe f8ec 	bl	800102c <i2cWrite>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <get_st_biases+0x44>
        return -1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e5e:	e34b      	b.n	80034f8 <get_st_biases+0x6dc>
    delay_ms(200);
 8002e60:	20c8      	movs	r0, #200	; 0xc8
 8002e62:	f002 fb23 	bl	80054ac <HAL_Delay>
    data[0] = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8002e6c:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <get_st_biases+0x2b8>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	7818      	ldrb	r0, [r3, #0]
 8002e72:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <get_st_biases+0x2b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	7bd9      	ldrb	r1, [r3, #15]
 8002e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f7fe f8d5 	bl	800102c <i2cWrite>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <get_st_biases+0x72>
        return -1;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e8c:	e334      	b.n	80034f8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002e8e:	4b91      	ldr	r3, [pc, #580]	; (80030d4 <get_st_biases+0x2b8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	7818      	ldrb	r0, [r3, #0]
 8002e94:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <get_st_biases+0x2b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	7959      	ldrb	r1, [r3, #5]
 8002e9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f7fe f8c4 	bl	800102c <i2cWrite>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <get_st_biases+0x94>
        return -1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eae:	e323      	b.n	80034f8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002eb0:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <get_st_biases+0x2b8>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	7818      	ldrb	r0, [r3, #0]
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <get_st_biases+0x2b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	7c99      	ldrb	r1, [r3, #18]
 8002ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f7fe f8b3 	bl	800102c <i2cWrite>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <get_st_biases+0xb6>
        return -1;
 8002ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed0:	e312      	b.n	80034f8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8002ed2:	4b80      	ldr	r3, [pc, #512]	; (80030d4 <get_st_biases+0x2b8>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	7818      	ldrb	r0, [r3, #0]
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <get_st_biases+0x2b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	7dd9      	ldrb	r1, [r3, #23]
 8002ede:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f7fe f8a2 	bl	800102c <i2cWrite>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <get_st_biases+0xd8>
        return -1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef2:	e301      	b.n	80034f8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002ef4:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <get_st_biases+0x2b8>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	7818      	ldrb	r0, [r3, #0]
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <get_st_biases+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	7919      	ldrb	r1, [r3, #4]
 8002f00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f04:	2201      	movs	r2, #1
 8002f06:	f7fe f891 	bl	800102c <i2cWrite>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <get_st_biases+0xfa>
        return -1;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f14:	e2f0      	b.n	80034f8 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002f16:	230c      	movs	r3, #12
 8002f18:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002f1c:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <get_st_biases+0x2b8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	7818      	ldrb	r0, [r3, #0]
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <get_st_biases+0x2b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	7919      	ldrb	r1, [r3, #4]
 8002f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f7fe f87d 	bl	800102c <i2cWrite>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <get_st_biases+0x122>
        return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3c:	e2dc      	b.n	80034f8 <get_st_biases+0x6dc>
    delay_ms(15);
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f002 fab4 	bl	80054ac <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002f44:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <get_st_biases+0x2b8>)
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	7a5b      	ldrb	r3, [r3, #9]
 8002f4a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8002f4e:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <get_st_biases+0x2b8>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	7818      	ldrb	r0, [r3, #0]
 8002f54:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <get_st_biases+0x2b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	7899      	ldrb	r1, [r3, #2]
 8002f5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f7fe f864 	bl	800102c <i2cWrite>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <get_st_biases+0x154>
        return -1;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6e:	e2c3      	b.n	80034f8 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8002f70:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <get_st_biases+0x2b8>)
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	7a1b      	ldrb	r3, [r3, #8]
 8002f76:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8002f7a:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <get_st_biases+0x2b8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	7818      	ldrb	r0, [r3, #0]
 8002f80:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <get_st_biases+0x2b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	7859      	ldrb	r1, [r3, #1]
 8002f86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f7fe f84e 	bl	800102c <i2cWrite>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <get_st_biases+0x180>
        return -1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f9a:	e2ad      	b.n	80034f8 <get_st_biases+0x6dc>
    if (hw_test)
 8002f9c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <get_st_biases+0x2b8>)
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	7a9b      	ldrb	r3, [r3, #10]
 8002faa:	f063 031f 	orn	r3, r3, #31
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8002fb4:	e004      	b.n	8002fc0 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <get_st_biases+0x2b8>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	7a9b      	ldrb	r3, [r3, #10]
 8002fbc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8002fc0:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <get_st_biases+0x2b8>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	7818      	ldrb	r0, [r3, #0]
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <get_st_biases+0x2b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	7999      	ldrb	r1, [r3, #6]
 8002fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f7fe f82b 	bl	800102c <i2cWrite>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <get_st_biases+0x1c6>
        return -1;
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fe0:	e28a      	b.n	80034f8 <get_st_biases+0x6dc>

    if (hw_test)
 8002fe2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <get_st_biases+0x2b8>)
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	7adb      	ldrb	r3, [r3, #11]
 8002ff0:	f063 031f 	orn	r3, r3, #31
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8002ffa:	e002      	b.n	8003002 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 8002ffc:	2318      	movs	r3, #24
 8002ffe:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <get_st_biases+0x2b8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	7818      	ldrb	r0, [r3, #0]
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <get_st_biases+0x2b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	79d9      	ldrb	r1, [r3, #7]
 800300e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003012:	2201      	movs	r2, #1
 8003014:	f7fe f80a 	bl	800102c <i2cWrite>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <get_st_biases+0x208>
        return -1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003022:	e269      	b.n	80034f8 <get_st_biases+0x6dc>
    if (hw_test)
 8003024:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <get_st_biases+0x216>
        delay_ms(200);
 800302c:	20c8      	movs	r0, #200	; 0xc8
 800302e:	f002 fa3d 	bl	80054ac <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003038:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <get_st_biases+0x2b8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	7818      	ldrb	r0, [r3, #0]
 800303e:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <get_st_biases+0x2b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	7919      	ldrb	r1, [r3, #4]
 8003044:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003048:	2201      	movs	r2, #1
 800304a:	f7fd ffef 	bl	800102c <i2cWrite>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <get_st_biases+0x23e>
        return -1;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003058:	e24e      	b.n	80034f8 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800305a:	2378      	movs	r3, #120	; 0x78
 800305c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <get_st_biases+0x2b8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	7818      	ldrb	r0, [r3, #0]
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <get_st_biases+0x2b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	7959      	ldrb	r1, [r3, #5]
 800306c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003070:	2201      	movs	r2, #1
 8003072:	f7fd ffdb 	bl	800102c <i2cWrite>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <get_st_biases+0x266>
        return -1;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003080:	e23a      	b.n	80034f8 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8003082:	2332      	movs	r3, #50	; 0x32
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fa11 	bl	80054ac <HAL_Delay>
    data[0] = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <get_st_biases+0x2b8>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	7818      	ldrb	r0, [r3, #0]
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <get_st_biases+0x2b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	7959      	ldrb	r1, [r3, #5]
 800309c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030a0:	2201      	movs	r2, #1
 80030a2:	f7fd ffc3 	bl	800102c <i2cWrite>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <get_st_biases+0x296>
        return -1;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030b0:	e222      	b.n	80034f8 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <get_st_biases+0x2b8>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	7818      	ldrb	r0, [r3, #0]
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <get_st_biases+0x2b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	7a99      	ldrb	r1, [r3, #10]
 80030be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030c2:	2202      	movs	r2, #2
 80030c4:	f7fd ffd6 	bl	8001074 <i2cRead>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d004      	beq.n	80030d8 <get_st_biases+0x2bc>
        return -1;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d2:	e211      	b.n	80034f8 <get_st_biases+0x6dc>
 80030d4:	20000010 	.word	0x20000010

    fifo_count = (data[0] << 8) | data[1];
 80030d8:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b21a      	sxth	r2, r3
 80030e0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80030ee:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <get_st_biases+0x34c>)
 80030f4:	fba3 2302 	umull	r2, r3, r3, r2
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8003100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003104:	f103 0108 	add.w	r1, r3, #8
 8003108:	2300      	movs	r3, #0
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003110:	1d1a      	adds	r2, r3, #4
 8003112:	680b      	ldr	r3, [r1, #0]
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800311c:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 800311e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003122:	f103 0108 	add.w	r1, r3, #8
 8003126:	2300      	movs	r3, #0
 8003128:	600b      	str	r3, [r1, #0]
 800312a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	680b      	ldr	r3, [r1, #0]
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800313a:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800313c:	2300      	movs	r3, #0
 800313e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003142:	e0a0      	b.n	8003286 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <get_st_biases+0x350>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	7818      	ldrb	r0, [r3, #0]
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <get_st_biases+0x350>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	7ad9      	ldrb	r1, [r3, #11]
 8003150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003154:	220c      	movs	r2, #12
 8003156:	f7fd ff8d 	bl	8001074 <i2cRead>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <get_st_biases+0x354>
            return -1;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003164:	e1c8      	b.n	80034f8 <get_st_biases+0x6dc>
 8003166:	bf00      	nop
 8003168:	aaaaaaab 	.word	0xaaaaaaab
 800316c:	20000010 	.word	0x20000010
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8003170:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	b21a      	sxth	r2, r3
 8003178:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800317c:	b21b      	sxth	r3, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	b21b      	sxth	r3, r3
 8003182:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8003186:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21a      	sxth	r2, r3
 800318e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8003192:	b21b      	sxth	r3, r3
 8003194:	4313      	orrs	r3, r2
 8003196:	b21b      	sxth	r3, r3
 8003198:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800319c:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 80031b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 80031bc:	441a      	add	r2, r3
 80031be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031c2:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 80031c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031c8:	3304      	adds	r3, #4
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80031d0:	4618      	mov	r0, r3
 80031d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	180b      	adds	r3, r1, r0
 80031da:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 80031dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031e0:	3308      	adds	r3, #8
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ee:	f103 0208 	add.w	r2, r3, #8
 80031f2:	180b      	adds	r3, r1, r0
 80031f4:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 80031f6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	b21a      	sxth	r2, r3
 80031fe:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003202:	b21b      	sxth	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b21b      	sxth	r3, r3
 8003208:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800320c:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b21a      	sxth	r2, r3
 8003214:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003218:	b21b      	sxth	r3, r3
 800321a:	4313      	orrs	r3, r2
 800321c:	b21b      	sxth	r3, r3
 800321e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8003222:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	b21a      	sxth	r2, r3
 800322a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800322e:	b21b      	sxth	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 8003238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8003242:	441a      	add	r2, r3
 8003244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003248:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800324a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800324e:	3304      	adds	r3, #4
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8003256:	4618      	mov	r0, r3
 8003258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	180b      	adds	r3, r1, r0
 8003260:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8003262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003266:	3308      	adds	r3, #8
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800326e:	4618      	mov	r0, r3
 8003270:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003274:	f103 0208 	add.w	r2, r3, #8
 8003278:	180b      	adds	r3, r1, r0
 800327a:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800327c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003280:	3301      	adds	r3, #1
 8003282:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003286:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 800328a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800328e:	429a      	cmp	r2, r3
 8003290:	f4ff af58 	bcc.w	8003144 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8003294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	17da      	asrs	r2, r3, #31
 800329c:	461c      	mov	r4, r3
 800329e:	4615      	mov	r5, r2
 80032a0:	1423      	asrs	r3, r4, #16
 80032a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032a6:	0423      	lsls	r3, r4, #16
 80032a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032ac:	2283      	movs	r2, #131	; 0x83
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80032b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032b8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80032bc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80032c0:	f7fd fcca 	bl	8000c58 <__aeabi_ldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032da:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80032de:	f7fd fcbb 	bl	8000c58 <__aeabi_ldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ea:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 80032ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	17da      	asrs	r2, r3, #31
 80032f6:	4698      	mov	r8, r3
 80032f8:	4691      	mov	r9, r2
 80032fa:	ea4f 4328 	mov.w	r3, r8, asr #16
 80032fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003302:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8003306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800330a:	2283      	movs	r2, #131	; 0x83
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003316:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800331a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800331e:	f7fd fc9b 	bl	8000c58 <__aeabi_ldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800332e:	2200      	movs	r2, #0
 8003330:	67bb      	str	r3, [r7, #120]	; 0x78
 8003332:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003334:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003338:	f7fd fc8e 	bl	8000c58 <__aeabi_ldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003348:	1d1a      	adds	r2, r3, #4
 800334a:	4603      	mov	r3, r0
 800334c:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800334e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003352:	3308      	adds	r3, #8
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	17da      	asrs	r2, r3, #31
 8003358:	469a      	mov	sl, r3
 800335a:	4693      	mov	fp, r2
 800335c:	ea4f 432a 	mov.w	r3, sl, asr #16
 8003360:	677b      	str	r3, [r7, #116]	; 0x74
 8003362:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8003366:	673b      	str	r3, [r7, #112]	; 0x70
 8003368:	2283      	movs	r2, #131	; 0x83
 800336a:	2300      	movs	r3, #0
 800336c:	66ba      	str	r2, [r7, #104]	; 0x68
 800336e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003370:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003374:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003378:	f7fd fc6e 	bl	8000c58 <__aeabi_ldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003388:	2200      	movs	r2, #0
 800338a:	663b      	str	r3, [r7, #96]	; 0x60
 800338c:	667a      	str	r2, [r7, #100]	; 0x64
 800338e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003392:	f7fd fc61 	bl	8000c58 <__aeabi_ldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033a2:	f103 0208 	add.w	r2, r3, #8
 80033a6:	4603      	mov	r3, r0
 80033a8:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 80033aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	17da      	asrs	r2, r3, #31
 80033b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80033b4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80033b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80033ba:	460b      	mov	r3, r1
 80033bc:	141b      	asrs	r3, r3, #16
 80033be:	657b      	str	r3, [r7, #84]	; 0x54
 80033c0:	460b      	mov	r3, r1
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	653b      	str	r3, [r7, #80]	; 0x50
 80033c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ca:	2300      	movs	r3, #0
 80033cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033d8:	f7fd fc3e 	bl	8000c58 <__aeabi_ldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80033e8:	2200      	movs	r2, #0
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
 80033ec:	647a      	str	r2, [r7, #68]	; 0x44
 80033ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033f2:	f7fd fc31 	bl	8000c58 <__aeabi_ldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033fe:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8003400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003404:	3304      	adds	r3, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	17da      	asrs	r2, r3, #31
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003412:	460b      	mov	r3, r1
 8003414:	141b      	asrs	r3, r3, #16
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
 8003418:	460b      	mov	r3, r1
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
 800341e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003422:	2300      	movs	r3, #0
 8003424:	62ba      	str	r2, [r7, #40]	; 0x28
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003430:	f7fd fc12 	bl	8000c58 <__aeabi_ldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003440:	2200      	movs	r2, #0
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	627a      	str	r2, [r7, #36]	; 0x24
 8003446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800344a:	f7fd fc05 	bl	8000c58 <__aeabi_ldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800345a:	3304      	adds	r3, #4
 800345c:	4602      	mov	r2, r0
 800345e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8003460:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003464:	3308      	adds	r3, #8
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	17da      	asrs	r2, r3, #31
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	61fa      	str	r2, [r7, #28]
 800346e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003472:	460b      	mov	r3, r1
 8003474:	141b      	asrs	r3, r3, #16
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	460b      	mov	r3, r1
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003482:	2300      	movs	r3, #0
 8003484:	60ba      	str	r2, [r7, #8]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800348c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003490:	f7fd fbe2 	bl	8000c58 <__aeabi_ldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80034a0:	2200      	movs	r2, #0
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034aa:	f7fd fbd5 	bl	8000c58 <__aeabi_ldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ba:	3308      	adds	r3, #8
 80034bc:	4602      	mov	r2, r0
 80034be:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 80034c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034c4:	3308      	adds	r3, #8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	dd0a      	ble.n	80034e2 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 80034cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034d0:	3308      	adds	r3, #8
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034d8:	3308      	adds	r3, #8
 80034da:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e009      	b.n	80034f6 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 80034e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034e6:	3308      	adds	r3, #8
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ee:	3308      	adds	r3, #8
 80034f0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80034f4:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	37e0      	adds	r7, #224	; 0xe0
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop

08003504 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 800350e:	2302      	movs	r3, #2
 8003510:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8003514:	4b64      	ldr	r3, [pc, #400]	; (80036a8 <mpu_run_self_test+0x1a4>)
 8003516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 800351e:	2000      	movs	r0, #0
 8003520:	f000 f9e6 	bl	80038f0 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800352a:	e002      	b.n	8003532 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fd7c 	bl	8002034 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800353c:	f107 030f 	add.w	r3, r7, #15
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fdff 	bl	8002144 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fe9c 	bl	8002288 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8003550:	f107 030a 	add.w	r3, r7, #10
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe ff23 	bl	80023a0 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800355a:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <mpu_run_self_test+0x1a4>)
 800355c:	7a9b      	ldrb	r3, [r3, #10]
 800355e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8003562:	f107 030e 	add.w	r3, r7, #14
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f810 	bl	800258c <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 800356c:	2300      	movs	r3, #0
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
 8003570:	e00a      	b.n	8003588 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8003572:	2200      	movs	r2, #0
 8003574:	6839      	ldr	r1, [r7, #0]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fc50 	bl	8002e1c <get_st_biases>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	3301      	adds	r3, #1
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
 8003588:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800358c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800358e:	429a      	cmp	r2, r3
 8003590:	dbef      	blt.n	8003572 <mpu_run_self_test+0x6e>
 8003592:	e000      	b.n	8003596 <mpu_run_self_test+0x92>
            break;
 8003594:	bf00      	nop
    if (ii == tries) {
 8003596:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800359a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800359c:	429a      	cmp	r2, r3
 800359e:	d102      	bne.n	80035a6 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 80035a4:	e045      	b.n	8003632 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
 80035aa:	e00d      	b.n	80035c8 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 80035ac:	f107 0110 	add.w	r1, r7, #16
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	2201      	movs	r2, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fc30 	bl	8002e1c <get_st_biases>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	3301      	adds	r3, #1
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
 80035c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbec      	blt.n	80035ac <mpu_run_self_test+0xa8>
 80035d2:	e000      	b.n	80035d6 <mpu_run_self_test+0xd2>
            break;
 80035d4:	bf00      	nop
    if (ii == tries) {
 80035d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035dc:	429a      	cmp	r2, r3
 80035de:	d102      	bne.n	80035e6 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 80035e4:	e025      	b.n	8003632 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 80035e6:	f107 0310 	add.w	r3, r7, #16
 80035ea:	4619      	mov	r1, r3
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f7ff fad1 	bl	8002b94 <accel_self_test>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 80035f8:	f107 031c 	add.w	r3, r7, #28
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fb4c 	bl	8002c9c <gyro_self_test>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 800360e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <mpu_run_self_test+0x11a>
        result |= 0x01;
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 800361e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
 800362e:	e000      	b.n	8003632 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003630:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <mpu_run_self_test+0x1a4>)
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <mpu_run_self_test+0x1a4>)
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <mpu_run_self_test+0x1a4>)
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003644:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <mpu_run_self_test+0x1a4>)
 8003646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <mpu_run_self_test+0x1a4>)
 800364e:	22ff      	movs	r2, #255	; 0xff
 8003650:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <mpu_run_self_test+0x1a4>)
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <mpu_run_self_test+0x1a4>)
 800365a:	2201      	movs	r2, #1
 800365c:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800365e:	89bb      	ldrh	r3, [r7, #12]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe fd1b 	bl	800209c <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fda5 	bl	80021b8 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fe47 	bl	8002304 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe feab 	bl	80023d4 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800367e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe ffe6 	bl	8002654 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8003688:	7bbb      	ldrb	r3, [r7, #14]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe ff90 	bl	80025b0 <mpu_configure_fifo>

    if (dmp_was_on)
 8003690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 8003698:	2001      	movs	r0, #1
 800369a:	f000 f929 	bl	80038f0 <mpu_set_dmp_state>

    return result;
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3738      	adds	r7, #56	; 0x38
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000010 	.word	0x20000010

080036ac <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	603a      	str	r2, [r7, #0]
 80036b6:	80fb      	strh	r3, [r7, #6]
 80036b8:	460b      	mov	r3, r1
 80036ba:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <mpu_write_mem+0x1c>
        return -1;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036c6:	e03d      	b.n	8003744 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <mpu_write_mem+0xa0>)
 80036ca:	7a9b      	ldrb	r3, [r3, #10]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <mpu_write_mem+0x2a>
        return -1;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d4:	e036      	b.n	8003744 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	b29b      	uxth	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80036e6:	7b7b      	ldrb	r3, [r7, #13]
 80036e8:	461a      	mov	r2, r3
 80036ea:	88bb      	ldrh	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <mpu_write_mem+0xa0>)
 80036f0:	6852      	ldr	r2, [r2, #4]
 80036f2:	8952      	ldrh	r2, [r2, #10]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	dd02      	ble.n	80036fe <mpu_write_mem+0x52>
        return -1;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036fc:	e022      	b.n	8003744 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <mpu_write_mem+0xa0>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	7818      	ldrb	r0, [r3, #0]
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <mpu_write_mem+0xa0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	7e19      	ldrb	r1, [r3, #24]
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	2202      	movs	r2, #2
 8003710:	f7fd fc8c 	bl	800102c <i2cWrite>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <mpu_write_mem+0x74>
        return -1;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371e:	e011      	b.n	8003744 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <mpu_write_mem+0xa0>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	7818      	ldrb	r0, [r3, #0]
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <mpu_write_mem+0xa0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	7d59      	ldrb	r1, [r3, #21]
 800372c:	88bb      	ldrh	r3, [r7, #4]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f7fd fc7b 	bl	800102c <i2cWrite>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <mpu_write_mem+0x96>
        return -1;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003740:	e000      	b.n	8003744 <mpu_write_mem+0x98>
    return 0;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000010 	.word	0x20000010

08003750 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	603a      	str	r2, [r7, #0]
 800375a:	80fb      	strh	r3, [r7, #6]
 800375c:	460b      	mov	r3, r1
 800375e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <mpu_read_mem+0x1c>
        return -1;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800376a:	e03d      	b.n	80037e8 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <mpu_read_mem+0xa0>)
 800376e:	7a9b      	ldrb	r3, [r3, #10]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <mpu_read_mem+0x2a>
        return -1;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003778:	e036      	b.n	80037e8 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	b29b      	uxth	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800378a:	7b7b      	ldrb	r3, [r7, #13]
 800378c:	461a      	mov	r2, r3
 800378e:	88bb      	ldrh	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <mpu_read_mem+0xa0>)
 8003794:	6852      	ldr	r2, [r2, #4]
 8003796:	8952      	ldrh	r2, [r2, #10]
 8003798:	4293      	cmp	r3, r2
 800379a:	dd02      	ble.n	80037a2 <mpu_read_mem+0x52>
        return -1;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a0:	e022      	b.n	80037e8 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <mpu_read_mem+0xa0>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	7818      	ldrb	r0, [r3, #0]
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <mpu_read_mem+0xa0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	7e19      	ldrb	r1, [r3, #24]
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	2202      	movs	r2, #2
 80037b4:	f7fd fc3a 	bl	800102c <i2cWrite>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <mpu_read_mem+0x74>
        return -1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	e011      	b.n	80037e8 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <mpu_read_mem+0xa0>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	7818      	ldrb	r0, [r3, #0]
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <mpu_read_mem+0xa0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	7d59      	ldrb	r1, [r3, #21]
 80037d0:	88bb      	ldrh	r3, [r7, #4]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f7fd fc4d 	bl	8001074 <i2cRead>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <mpu_read_mem+0x96>
        return -1;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e4:	e000      	b.n	80037e8 <mpu_read_mem+0x98>
    return 0;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000010 	.word	0x20000010

080037f4 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4611      	mov	r1, r2
 80037fe:	461a      	mov	r2, r3
 8003800:	4603      	mov	r3, r0
 8003802:	81fb      	strh	r3, [r7, #14]
 8003804:	460b      	mov	r3, r1
 8003806:	81bb      	strh	r3, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800380c:	4b37      	ldr	r3, [pc, #220]	; (80038ec <mpu_load_firmware+0xf8>)
 800380e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800381a:	e062      	b.n	80038e2 <mpu_load_firmware+0xee>

    if (!firmware)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <mpu_load_firmware+0x34>
        return -1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003826:	e05c      	b.n	80038e2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003828:	2300      	movs	r3, #0
 800382a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800382c:	e034      	b.n	8003898 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800382e:	89fa      	ldrh	r2, [r7, #14]
 8003830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b10      	cmp	r3, #16
 8003836:	bfa8      	it	ge
 8003838:	2310      	movge	r3, #16
 800383a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800383c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	441a      	add	r2, r3
 8003842:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff30 	bl	80036ac <mpu_write_mem>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <mpu_load_firmware+0x64>
            return -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003856:	e044      	b.n	80038e2 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8003858:	f107 0214 	add.w	r2, r7, #20
 800385c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800385e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff75 	bl	8003750 <mpu_read_mem>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <mpu_load_firmware+0x7e>
            return -1;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003870:	e037      	b.n	80038e2 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8003872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4413      	add	r3, r2
 8003878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800387a:	f107 0114 	add.w	r1, r7, #20
 800387e:	4618      	mov	r0, r3
 8003880:	f005 faa0 	bl	8008dc4 <memcmp>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <mpu_load_firmware+0x9c>
            return -2;
 800388a:	f06f 0301 	mvn.w	r3, #1
 800388e:	e028      	b.n	80038e2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003890:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003894:	4413      	add	r3, r2
 8003896:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003898:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800389a:	89fb      	ldrh	r3, [r7, #14]
 800389c:	429a      	cmp	r2, r3
 800389e:	d3c6      	bcc.n	800382e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80038a0:	89bb      	ldrh	r3, [r7, #12]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80038aa:	89bb      	ldrh	r3, [r7, #12]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <mpu_load_firmware+0xf8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	7818      	ldrb	r0, [r3, #0]
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <mpu_load_firmware+0xf8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	7e99      	ldrb	r1, [r3, #26]
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	2202      	movs	r2, #2
 80038c2:	f7fd fbb3 	bl	800102c <i2cWrite>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <mpu_load_firmware+0xde>
        return -1;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d0:	e007      	b.n	80038e2 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <mpu_load_firmware+0xf8>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <mpu_load_firmware+0xf8>)
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3728      	adds	r7, #40	; 0x28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000010 	.word	0x20000010

080038f0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <mpu_set_dmp_state+0xa4>)
 80038fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003900:	79fa      	ldrb	r2, [r7, #7]
 8003902:	429a      	cmp	r2, r3
 8003904:	d101      	bne.n	800390a <mpu_set_dmp_state+0x1a>
        return 0;
 8003906:	2300      	movs	r3, #0
 8003908:	e040      	b.n	800398c <mpu_set_dmp_state+0x9c>

    if (enable) {
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d027      	beq.n	8003960 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <mpu_set_dmp_state+0xa4>)
 8003912:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <mpu_set_dmp_state+0x30>
            return -1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391e:	e035      	b.n	800398c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003920:	2000      	movs	r0, #0
 8003922:	f7fe f8b1 	bl	8001a88 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8003926:	2000      	movs	r0, #0
 8003928:	f7fe ff9c 	bl	8002864 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <mpu_set_dmp_state+0xa4>)
 800392e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fd4f 	bl	80023d4 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <mpu_set_dmp_state+0xa4>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	7818      	ldrb	r0, [r3, #0]
 8003940:	f107 030f 	add.w	r3, r7, #15
 8003944:	2201      	movs	r2, #1
 8003946:	2123      	movs	r1, #35	; 0x23
 8003948:	f7fd fb70 	bl	800102c <i2cWrite>
        st.chip_cfg.dmp_on = 1;
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <mpu_set_dmp_state+0xa4>)
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8003954:	2001      	movs	r0, #1
 8003956:	f7fe f897 	bl	8001a88 <set_int_enable>
        mpu_reset_fifo();
 800395a:	f7fe fa6d 	bl	8001e38 <mpu_reset_fifo>
 800395e:	e014      	b.n	800398a <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003960:	2000      	movs	r0, #0
 8003962:	f7fe f891 	bl	8001a88 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <mpu_set_dmp_state+0xa4>)
 8003968:	7c1b      	ldrb	r3, [r3, #16]
 800396a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <mpu_set_dmp_state+0xa4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	7818      	ldrb	r0, [r3, #0]
 8003972:	f107 030f 	add.w	r3, r7, #15
 8003976:	2201      	movs	r2, #1
 8003978:	2123      	movs	r1, #35	; 0x23
 800397a:	f7fd fb57 	bl	800102c <i2cWrite>
        st.chip_cfg.dmp_on = 0;
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <mpu_set_dmp_state+0xa4>)
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8003986:	f7fe fa57 	bl	8001e38 <mpu_reset_fifo>
    }
    return 0;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000010 	.word	0x20000010

08003998 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80039b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b4:	23c8      	movs	r3, #200	; 0xc8
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <dmp_load_motion_driver_firmware+0x1c>)
 80039b8:	f640 30f6 	movw	r0, #3062	; 0xbf6
 80039bc:	f7ff ff1a 	bl	80037f4 <mpu_load_firmware>
 80039c0:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	0800b978 	.word	0x0800b978

080039cc <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 80039d6:	4a6e      	ldr	r2, [pc, #440]	; (8003b90 <dmp_set_orientation+0x1c4>)
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	4611      	mov	r1, r2
 80039e0:	8019      	strh	r1, [r3, #0]
 80039e2:	3302      	adds	r3, #2
 80039e4:	0c12      	lsrs	r2, r2, #16
 80039e6:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80039e8:	4a6a      	ldr	r2, [pc, #424]	; (8003b94 <dmp_set_orientation+0x1c8>)
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4611      	mov	r1, r2
 80039f2:	8019      	strh	r1, [r3, #0]
 80039f4:	3302      	adds	r3, #2
 80039f6:	0c12      	lsrs	r2, r2, #16
 80039f8:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 80039fa:	4a67      	ldr	r2, [pc, #412]	; (8003b98 <dmp_set_orientation+0x1cc>)
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	4611      	mov	r1, r2
 8003a04:	8019      	strh	r1, [r3, #0]
 8003a06:	3302      	adds	r3, #2
 8003a08:	0c12      	lsrs	r2, r2, #16
 8003a0a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003a0c:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <dmp_set_orientation+0x1d0>)
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	4611      	mov	r1, r2
 8003a16:	8019      	strh	r1, [r3, #0]
 8003a18:	3302      	adds	r3, #2
 8003a1a:	0c12      	lsrs	r2, r2, #16
 8003a1c:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3320      	adds	r3, #32
 8003a26:	443b      	add	r3, r7
 8003a28:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a2c:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	3320      	adds	r3, #32
 8003a3a:	443b      	add	r3, r7
 8003a3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a40:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	3320      	adds	r3, #32
 8003a4e:	443b      	add	r3, r7
 8003a50:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a54:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	3320      	adds	r3, #32
 8003a5e:	443b      	add	r3, r7
 8003a60:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a64:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	3320      	adds	r3, #32
 8003a72:	443b      	add	r3, r7
 8003a74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a78:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	3320      	adds	r3, #32
 8003a86:	443b      	add	r3, r7
 8003a88:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a8c:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8003a8e:	f107 031c 	add.w	r3, r7, #28
 8003a92:	461a      	mov	r2, r3
 8003a94:	2103      	movs	r1, #3
 8003a96:	f240 4026 	movw	r0, #1062	; 0x426
 8003a9a:	f7ff fe07 	bl	80036ac <mpu_write_mem>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <dmp_set_orientation+0xde>
        return -1;
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa8:	e06e      	b.n	8003b88 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003aaa:	f107 0318 	add.w	r3, r7, #24
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	f240 402a 	movw	r0, #1066	; 0x42a
 8003ab6:	f7ff fdf9 	bl	80036ac <mpu_write_mem>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <dmp_set_orientation+0xfa>
        return -1;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ac4:	e060      	b.n	8003b88 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003ac6:	f107 031c 	add.w	r3, r7, #28
 8003aca:	f107 020c 	add.w	r2, r7, #12
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	0c12      	lsrs	r2, r2, #16
 8003ad8:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003ada:	f107 0318 	add.w	r3, r7, #24
 8003ade:	f107 0208 	add.w	r2, r7, #8
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	8019      	strh	r1, [r3, #0]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	0c12      	lsrs	r2, r2, #16
 8003aec:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003af8:	7f3b      	ldrb	r3, [r7, #28]
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8003b02:	7e3b      	ldrb	r3, [r7, #24]
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8003b16:	7f7b      	ldrb	r3, [r7, #29]
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8003b20:	7e7b      	ldrb	r3, [r7, #25]
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8003b34:	7fbb      	ldrb	r3, [r7, #30]
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8003b3e:	7ebb      	ldrb	r3, [r7, #26]
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2103      	movs	r1, #3
 8003b50:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8003b54:	f7ff fdaa 	bl	80036ac <mpu_write_mem>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <dmp_set_orientation+0x198>
        return -1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b62:	e011      	b.n	8003b88 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	f240 4031 	movw	r0, #1073	; 0x431
 8003b70:	f7ff fd9c 	bl	80036ac <mpu_write_mem>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <dmp_set_orientation+0x1b4>
        return -1;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b7e:	e003      	b.n	8003b88 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8003b80:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <dmp_set_orientation+0x1d4>)
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	8113      	strh	r3, [r2, #8]
    return 0;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	0800b870 	.word	0x0800b870
 8003b94:	0800b874 	.word	0x0800b874
 8003b98:	0800b878 	.word	0x0800b878
 8003b9c:	0800b87c 	.word	0x0800b87c
 8003ba0:	200002c0 	.word	0x200002c0

08003ba4 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b08c      	sub	sp, #48	; 0x30
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8003bae:	4b80      	ldr	r3, [pc, #512]	; (8003db0 <dmp_set_gyro_bias+0x20c>)
 8003bb0:	891b      	ldrh	r3, [r3, #8]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 8003bc0:	4b7b      	ldr	r3, [pc, #492]	; (8003db0 <dmp_set_gyro_bias+0x20c>)
 8003bc2:	891b      	ldrh	r3, [r3, #8]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	425b      	negs	r3, r3
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003bd2:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <dmp_set_gyro_bias+0x20c>)
 8003bd4:	891b      	ldrh	r3, [r3, #8]
 8003bd6:	08db      	lsrs	r3, r3, #3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 8003be8:	4b71      	ldr	r3, [pc, #452]	; (8003db0 <dmp_set_gyro_bias+0x20c>)
 8003bea:	891b      	ldrh	r3, [r3, #8]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	425b      	negs	r3, r3
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <dmp_set_gyro_bias+0x20c>)
 8003bfc:	891b      	ldrh	r3, [r3, #8]
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 8003c10:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <dmp_set_gyro_bias+0x20c>)
 8003c12:	891b      	ldrh	r3, [r3, #8]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	425b      	negs	r3, r3
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	17da      	asrs	r2, r3, #31
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	617a      	str	r2, [r7, #20]
 8003c2a:	4b62      	ldr	r3, [pc, #392]	; (8003db4 <dmp_set_gyro_bias+0x210>)
 8003c2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c30:	460a      	mov	r2, r1
 8003c32:	fb03 f202 	mul.w	r2, r3, r2
 8003c36:	2300      	movs	r3, #0
 8003c38:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	4a5b      	ldr	r2, [pc, #364]	; (8003db4 <dmp_set_gyro_bias+0x210>)
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	fba1 ab02 	umull	sl, fp, r1, r2
 8003c4c:	445b      	add	r3, fp
 8003c4e:	469b      	mov	fp, r3
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003c5c:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003c60:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003c64:	4613      	mov	r3, r2
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	17da      	asrs	r2, r3, #31
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	60fa      	str	r2, [r7, #12]
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <dmp_set_gyro_bias+0x210>)
 8003c72:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c76:	465a      	mov	r2, fp
 8003c78:	fb03 f202 	mul.w	r2, r3, r2
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4651      	mov	r1, sl
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	4a4b      	ldr	r2, [pc, #300]	; (8003db4 <dmp_set_gyro_bias+0x210>)
 8003c88:	4651      	mov	r1, sl
 8003c8a:	fba1 8902 	umull	r8, r9, r1, r2
 8003c8e:	444b      	add	r3, r9
 8003c90:	4699      	mov	r9, r3
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003c9e:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003ca2:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	17da      	asrs	r2, r3, #31
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <dmp_set_gyro_bias+0x210>)
 8003cb4:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003cb8:	464a      	mov	r2, r9
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <dmp_set_gyro_bias+0x210>)
 8003cca:	4641      	mov	r1, r8
 8003ccc:	fba1 4502 	umull	r4, r5, r1, r2
 8003cd0:	442b      	add	r3, r5
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	0fa2      	lsrs	r2, r4, #30
 8003cde:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003ce2:	17ab      	asrs	r3, r5, #30
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	161b      	asrs	r3, r3, #24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	141b      	asrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	121b      	asrs	r3, r3, #8
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8003d0e:	f107 0320 	add.w	r3, r7, #32
 8003d12:	461a      	mov	r2, r3
 8003d14:	2104      	movs	r1, #4
 8003d16:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 8003d1a:	f7ff fcc7 	bl	80036ac <mpu_write_mem>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <dmp_set_gyro_bias+0x186>
        return -1;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d28:	e03c      	b.n	8003da4 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	161b      	asrs	r3, r3, #24
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	141b      	asrs	r3, r3, #16
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	121b      	asrs	r3, r3, #8
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8003d50:	f107 0320 	add.w	r3, r7, #32
 8003d54:	461a      	mov	r2, r3
 8003d56:	2104      	movs	r1, #4
 8003d58:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 8003d5c:	f7ff fca6 	bl	80036ac <mpu_write_mem>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <dmp_set_gyro_bias+0x1c8>
        return -1;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d6a:	e01b      	b.n	8003da4 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	161b      	asrs	r3, r3, #24
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	141b      	asrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	121b      	asrs	r3, r3, #8
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8003d92:	f107 0320 	add.w	r3, r7, #32
 8003d96:	461a      	mov	r2, r3
 8003d98:	2104      	movs	r1, #4
 8003d9a:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 8003d9e:	f7ff fc85 	bl	80036ac <mpu_write_mem>
 8003da2:	4603      	mov	r3, r0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3730      	adds	r7, #48	; 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	200002c0 	.word	0x200002c0
 8003db4:	02cae309 	.word	0x02cae309

08003db8 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b094      	sub	sp, #80	; 0x50
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8003dc2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fba2 	bl	8002510 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003dcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	61fa      	str	r2, [r7, #28]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	69f9      	ldr	r1, [r7, #28]
 8003de0:	03cb      	lsls	r3, r1, #15
 8003de2:	69b9      	ldr	r1, [r7, #24]
 8003de4:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	03ca      	lsls	r2, r1, #15
 8003dec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 8003df0:	4b71      	ldr	r3, [pc, #452]	; (8003fb8 <dmp_set_accel_bias+0x200>)
 8003df2:	891b      	ldrh	r3, [r3, #8]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	4413      	add	r3, r2
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 8003e02:	4b6d      	ldr	r3, [pc, #436]	; (8003fb8 <dmp_set_accel_bias+0x200>)
 8003e04:	891b      	ldrh	r3, [r3, #8]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e10:	425b      	negs	r3, r3
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003e14:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <dmp_set_accel_bias+0x200>)
 8003e16:	891b      	ldrh	r3, [r3, #8]
 8003e18:	08db      	lsrs	r3, r3, #3
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e24:	4413      	add	r3, r2
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <dmp_set_accel_bias+0x200>)
 8003e2c:	891b      	ldrh	r3, [r3, #8]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	425b      	negs	r3, r3
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003e3c:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <dmp_set_accel_bias+0x200>)
 8003e3e:	891b      	ldrh	r3, [r3, #8]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	4413      	add	r3, r2
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 8003e52:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <dmp_set_accel_bias+0x200>)
 8003e54:	891b      	ldrh	r3, [r3, #8]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e60:	425b      	negs	r3, r3
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	17da      	asrs	r2, r3, #31
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	617a      	str	r2, [r7, #20]
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e72:	460a      	mov	r2, r1
 8003e74:	fb02 f203 	mul.w	r2, r2, r3
 8003e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003e7e:	4601      	mov	r1, r0
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	fba2 ab01 	umull	sl, fp, r2, r1
 8003e8e:	445b      	add	r3, fp
 8003e90:	469b      	mov	fp, r3
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003e9e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003ea2:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eac:	17da      	asrs	r2, r3, #31
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	60fa      	str	r2, [r7, #12]
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003eb8:	465a      	mov	r2, fp
 8003eba:	fb02 f203 	mul.w	r2, r2, r3
 8003ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eca:	4651      	mov	r1, sl
 8003ecc:	fba2 8901 	umull	r8, r9, r2, r1
 8003ed0:	444b      	add	r3, r9
 8003ed2:	4699      	mov	r9, r3
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003ee0:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003ee4:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003ee8:	4613      	mov	r3, r2
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eee:	17da      	asrs	r2, r3, #31
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef6:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003efa:	464a      	mov	r2, r9
 8003efc:	fb02 f203 	mul.w	r2, r2, r3
 8003f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f02:	4641      	mov	r1, r8
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	fba2 4501 	umull	r4, r5, r2, r1
 8003f12:	442b      	add	r3, r5
 8003f14:	461d      	mov	r5, r3
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	0fa2      	lsrs	r2, r4, #30
 8003f20:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003f24:	17ab      	asrs	r3, r5, #30
 8003f26:	4613      	mov	r3, r2
 8003f28:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	161b      	asrs	r3, r3, #24
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	141b      	asrs	r3, r3, #16
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	121b      	asrs	r3, r3, #8
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	161b      	asrs	r3, r3, #24
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 8003f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5c:	141b      	asrs	r3, r3, #16
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	121b      	asrs	r3, r3, #8
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f78:	161b      	asrs	r3, r3, #24
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f82:	141b      	asrs	r3, r3, #16
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8003f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8c:	121b      	asrs	r3, r3, #8
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8003f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	210c      	movs	r1, #12
 8003fa4:	f44f 7025 	mov.w	r0, #660	; 0x294
 8003fa8:	f7ff fb80 	bl	80036ac <mpu_write_mem>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3750      	adds	r7, #80	; 0x50
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb8:	200002c0 	.word	0x200002c0

08003fbc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <dmp_set_fifo_rate+0x88>)
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2bc8      	cmp	r3, #200	; 0xc8
 8003fd6:	d902      	bls.n	8003fde <dmp_set_fifo_rate+0x22>
        return -1;
 8003fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fdc:	e02e      	b.n	800403c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	22c8      	movs	r2, #200	; 0xc8
 8003fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003fec:	8bfb      	ldrh	r3, [r7, #30]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003ff6:	8bfb      	ldrh	r3, [r7, #30]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	461a      	mov	r2, r3
 8004002:	2102      	movs	r1, #2
 8004004:	f240 2016 	movw	r0, #534	; 0x216
 8004008:	f7ff fb50 	bl	80036ac <mpu_write_mem>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <dmp_set_fifo_rate+0x5c>
        return -1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004016:	e011      	b.n	800403c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	461a      	mov	r2, r3
 800401e:	210c      	movs	r1, #12
 8004020:	f640 20c1 	movw	r0, #2753	; 0xac1
 8004024:	f7ff fb42 	bl	80036ac <mpu_write_mem>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <dmp_set_fifo_rate+0x78>
        return -1;
 800402e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004032:	e003      	b.n	800403c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <dmp_set_fifo_rate+0x8c>)
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	8193      	strh	r3, [r2, #12]
    return 0;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	0800b880 	.word	0x0800b880
 8004048:	200002c0 	.word	0x200002c0

0800404c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	460a      	mov	r2, r1
 8004056:	71fb      	strb	r3, [r7, #7]
 8004058:	4613      	mov	r3, r2
 800405a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <dmp_set_tap_thresh+0x22>
 8004066:	88bb      	ldrh	r3, [r7, #4]
 8004068:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800406c:	d902      	bls.n	8004074 <dmp_set_tap_thresh+0x28>
        return -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004072:	e10b      	b.n	800428c <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8004074:	88bb      	ldrh	r3, [r7, #4]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800407e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004294 <dmp_set_tap_thresh+0x248>
 8004082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004086:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800408a:	f107 030b 	add.w	r3, r7, #11
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe f858 	bl	8002144 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8004094:	7afb      	ldrb	r3, [r7, #11]
 8004096:	3b02      	subs	r3, #2
 8004098:	2b0e      	cmp	r3, #14
 800409a:	d87d      	bhi.n	8004198 <dmp_set_tap_thresh+0x14c>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <dmp_set_tap_thresh+0x58>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040e1 	.word	0x080040e1
 80040a8:	08004199 	.word	0x08004199
 80040ac:	0800410f 	.word	0x0800410f
 80040b0:	08004199 	.word	0x08004199
 80040b4:	08004199 	.word	0x08004199
 80040b8:	08004199 	.word	0x08004199
 80040bc:	0800413d 	.word	0x0800413d
 80040c0:	08004199 	.word	0x08004199
 80040c4:	08004199 	.word	0x08004199
 80040c8:	08004199 	.word	0x08004199
 80040cc:	08004199 	.word	0x08004199
 80040d0:	08004199 	.word	0x08004199
 80040d4:	08004199 	.word	0x08004199
 80040d8:	08004199 	.word	0x08004199
 80040dc:	0800416b 	.word	0x0800416b
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80040e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040e4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004298 <dmp_set_tap_thresh+0x24c>
 80040e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f0:	ee17 3a90 	vmov	r3, s15
 80040f4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 80040f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040fa:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800429c <dmp_set_tap_thresh+0x250>
 80040fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004106:	ee17 3a90 	vmov	r3, s15
 800410a:	82bb      	strh	r3, [r7, #20]
        break;
 800410c:	e047      	b.n	800419e <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800410e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004112:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80042a0 <dmp_set_tap_thresh+0x254>
 8004116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 3a90 	vmov	r3, s15
 8004122:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004124:	edd7 7a04 	vldr	s15, [r7, #16]
 8004128:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80042a4 <dmp_set_tap_thresh+0x258>
 800412c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004134:	ee17 3a90 	vmov	r3, s15
 8004138:	82bb      	strh	r3, [r7, #20]
        break;
 800413a:	e030      	b.n	800419e <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800413c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004140:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80042a8 <dmp_set_tap_thresh+0x25c>
 8004144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414c:	ee17 3a90 	vmov	r3, s15
 8004150:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8004152:	edd7 7a04 	vldr	s15, [r7, #16]
 8004156:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80042ac <dmp_set_tap_thresh+0x260>
 800415a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800415e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004162:	ee17 3a90 	vmov	r3, s15
 8004166:	82bb      	strh	r3, [r7, #20]
        break;
 8004168:	e019      	b.n	800419e <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800416a:	edd7 7a04 	vldr	s15, [r7, #16]
 800416e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80042b0 <dmp_set_tap_thresh+0x264>
 8004172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 3a90 	vmov	r3, s15
 800417e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004180:	edd7 7a04 	vldr	s15, [r7, #16]
 8004184:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80042b4 <dmp_set_tap_thresh+0x268>
 8004188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800418c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004190:	ee17 3a90 	vmov	r3, s15
 8004194:	82bb      	strh	r3, [r7, #20]
        break;
 8004196:	e002      	b.n	800419e <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419c:	e076      	b.n	800428c <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800419e:	8afb      	ldrh	r3, [r7, #22]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80041a8:	8afb      	ldrh	r3, [r7, #22]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80041ae:	8abb      	ldrh	r3, [r7, #20]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80041b8:	8abb      	ldrh	r3, [r7, #20]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01c      	beq.n	8004202 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	461a      	mov	r2, r3
 80041ce:	2102      	movs	r1, #2
 80041d0:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80041d4:	f7ff fa6a 	bl	80036ac <mpu_write_mem>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <dmp_set_tap_thresh+0x198>
            return -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e2:	e053      	b.n	800428c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80041e4:	f107 030c 	add.w	r3, r7, #12
 80041e8:	3302      	adds	r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	2102      	movs	r1, #2
 80041ee:	f44f 7092 	mov.w	r0, #292	; 0x124
 80041f2:	f7ff fa5b 	bl	80036ac <mpu_write_mem>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <dmp_set_tap_thresh+0x1b6>
            return -1;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004200:	e044      	b.n	800428c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800420c:	f107 030c 	add.w	r3, r7, #12
 8004210:	461a      	mov	r2, r3
 8004212:	2102      	movs	r1, #2
 8004214:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004218:	f7ff fa48 	bl	80036ac <mpu_write_mem>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004226:	e031      	b.n	800428c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	3302      	adds	r3, #2
 800422e:	461a      	mov	r2, r3
 8004230:	2102      	movs	r1, #2
 8004232:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004236:	f7ff fa39 	bl	80036ac <mpu_write_mem>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004244:	e022      	b.n	800428c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01c      	beq.n	800428a <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8004250:	f107 030c 	add.w	r3, r7, #12
 8004254:	461a      	mov	r2, r3
 8004256:	2102      	movs	r1, #2
 8004258:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800425c:	f7ff fa26 	bl	80036ac <mpu_write_mem>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <dmp_set_tap_thresh+0x220>
            return -1;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800426a:	e00f      	b.n	800428c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	3302      	adds	r3, #2
 8004272:	461a      	mov	r2, r3
 8004274:	2102      	movs	r1, #2
 8004276:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800427a:	f7ff fa17 	bl	80036ac <mpu_write_mem>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <dmp_set_tap_thresh+0x23e>
            return -1;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004288:	e000      	b.n	800428c <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	43480000 	.word	0x43480000
 8004298:	46800000 	.word	0x46800000
 800429c:	46400000 	.word	0x46400000
 80042a0:	46000000 	.word	0x46000000
 80042a4:	45c00000 	.word	0x45c00000
 80042a8:	45800000 	.word	0x45800000
 80042ac:	45400000 	.word	0x45400000
 80042b0:	45000000 	.word	0x45000000
 80042b4:	44c00000 	.word	0x44c00000

080042b8 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	f043 030c 	orr.w	r3, r3, #12
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	f043 0303 	orr.w	r3, r3, #3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8004302:	f107 030f 	add.w	r3, r7, #15
 8004306:	461a      	mov	r2, r3
 8004308:	2101      	movs	r1, #1
 800430a:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800430e:	f7ff f9cd 	bl	80036ac <mpu_write_mem>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800432c:	2301      	movs	r3, #1
 800432e:	71fb      	strb	r3, [r7, #7]
 8004330:	e004      	b.n	800433c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d901      	bls.n	800433c <dmp_set_tap_count+0x20>
        min_taps = 4;
 8004338:	2304      	movs	r3, #4
 800433a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	3b01      	subs	r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8004344:	f107 030f 	add.w	r3, r7, #15
 8004348:	461a      	mov	r2, r3
 800434a:	2101      	movs	r1, #1
 800434c:	f240 104f 	movw	r0, #335	; 0x14f
 8004350:	f7ff f9ac 	bl	80036ac <mpu_write_mem>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <dmp_set_tap_time+0x40>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004376:	89fb      	ldrh	r3, [r7, #14]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	b29b      	uxth	r3, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8004386:	f107 030c 	add.w	r3, r7, #12
 800438a:	461a      	mov	r2, r3
 800438c:	2102      	movs	r1, #2
 800438e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8004392:	f7ff f98b 	bl	80036ac <mpu_write_mem>
 8004396:	4603      	mov	r3, r0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	cccccccd 	.word	0xcccccccd

080043a4 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <dmp_set_tap_time_multi+0x40>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80043ba:	89fb      	ldrh	r3, [r7, #14]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	461a      	mov	r2, r3
 80043d0:	2102      	movs	r1, #2
 80043d2:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80043d6:	f7ff f969 	bl	80036ac <mpu_write_mem>
 80043da:	4603      	mov	r3, r0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	cccccccd 	.word	0xcccccccd

080043e8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <dmp_set_shake_reject_thresh+0x5c>)
 80043f8:	fb82 1203 	smull	r1, r2, r2, r3
 80043fc:	1192      	asrs	r2, r2, #6
 80043fe:	17db      	asrs	r3, r3, #31
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	161b      	asrs	r3, r3, #24
 800440e:	b2db      	uxtb	r3, r3
 8004410:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	141b      	asrs	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	121b      	asrs	r3, r3, #8
 800441e:	b2db      	uxtb	r3, r3
 8004420:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004428:	f107 0308 	add.w	r3, r7, #8
 800442c:	461a      	mov	r2, r3
 800442e:	2104      	movs	r1, #4
 8004430:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8004434:	f7ff f93a 	bl	80036ac <mpu_write_mem>
 8004438:	4603      	mov	r3, r0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	10624dd3 	.word	0x10624dd3

08004448 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <dmp_set_shake_reject_time+0x40>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	b29b      	uxth	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800446e:	f107 030c 	add.w	r3, r7, #12
 8004472:	461a      	mov	r2, r3
 8004474:	2102      	movs	r1, #2
 8004476:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800447a:	f7ff f917 	bl	80036ac <mpu_write_mem>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	cccccccd 	.word	0xcccccccd

0800448c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <dmp_set_shake_reject_timeout+0x40>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	461a      	mov	r2, r3
 80044b8:	2102      	movs	r1, #2
 80044ba:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80044be:	f7ff f8f5 	bl	80036ac <mpu_write_mem>
 80044c2:	4603      	mov	r3, r0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	cccccccd 	.word	0xcccccccd

080044d0 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80044da:	2302      	movs	r3, #2
 80044dc:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80044de:	23ca      	movs	r3, #202	; 0xca
 80044e0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80044e2:	23e3      	movs	r3, #227	; 0xe3
 80044e4:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80044e6:	2309      	movs	r3, #9
 80044e8:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	461a      	mov	r2, r3
 80044f0:	2104      	movs	r1, #4
 80044f2:	2068      	movs	r0, #104	; 0x68
 80044f4:	f7ff f8da 	bl	80036ac <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80044f8:	23a3      	movs	r3, #163	; 0xa3
 80044fa:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8004506:	23c0      	movs	r3, #192	; 0xc0
 8004508:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800450a:	23c8      	movs	r3, #200	; 0xc8
 800450c:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800450e:	23c2      	movs	r3, #194	; 0xc2
 8004510:	73fb      	strb	r3, [r7, #15]
 8004512:	e005      	b.n	8004520 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8004514:	23a3      	movs	r3, #163	; 0xa3
 8004516:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8004518:	23a3      	movs	r3, #163	; 0xa3
 800451a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800451c:	23a3      	movs	r3, #163	; 0xa3
 800451e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800452a:	23c4      	movs	r3, #196	; 0xc4
 800452c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800452e:	23cc      	movs	r3, #204	; 0xcc
 8004530:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8004532:	23c6      	movs	r3, #198	; 0xc6
 8004534:	74bb      	strb	r3, [r7, #18]
 8004536:	e005      	b.n	8004544 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8004538:	23a3      	movs	r3, #163	; 0xa3
 800453a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800453c:	23a3      	movs	r3, #163	; 0xa3
 800453e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8004540:	23a3      	movs	r3, #163	; 0xa3
 8004542:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8004544:	23a3      	movs	r3, #163	; 0xa3
 8004546:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8004548:	23a3      	movs	r3, #163	; 0xa3
 800454a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800454c:	23a3      	movs	r3, #163	; 0xa3
 800454e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	461a      	mov	r2, r3
 8004556:	210a      	movs	r1, #10
 8004558:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800455c:	f7ff f8a6 	bl	80036ac <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800456a:	2320      	movs	r3, #32
 800456c:	733b      	strb	r3, [r7, #12]
 800456e:	e001      	b.n	8004574 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8004570:	23d8      	movs	r3, #216	; 0xd8
 8004572:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	461a      	mov	r2, r3
 800457a:	2101      	movs	r1, #1
 800457c:	f640 20b6 	movw	r0, #2742	; 0xab6
 8004580:	f7ff f894 	bl	80036ac <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800458e:	2001      	movs	r0, #1
 8004590:	f000 f8c6 	bl	8004720 <dmp_enable_gyro_cal>
 8004594:	e002      	b.n	800459c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004596:	2000      	movs	r0, #0
 8004598:	f000 f8c2 	bl	8004720 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01d      	beq.n	80045e2 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 80045b0:	23b2      	movs	r3, #178	; 0xb2
 80045b2:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 80045b4:	238b      	movs	r3, #139	; 0x8b
 80045b6:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 80045b8:	23b6      	movs	r3, #182	; 0xb6
 80045ba:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 80045bc:	239b      	movs	r3, #155	; 0x9b
 80045be:	73fb      	strb	r3, [r7, #15]
 80045c0:	e007      	b.n	80045d2 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 80045c2:	23b0      	movs	r3, #176	; 0xb0
 80045c4:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80045ca:	23b4      	movs	r3, #180	; 0xb4
 80045cc:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80045ce:	2390      	movs	r3, #144	; 0x90
 80045d0:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	461a      	mov	r2, r3
 80045d8:	2104      	movs	r1, #4
 80045da:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80045de:	f7ff f865 	bl	80036ac <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d025      	beq.n	8004638 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 80045ec:	23f8      	movs	r3, #248	; 0xf8
 80045ee:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	461a      	mov	r2, r3
 80045f6:	2101      	movs	r1, #1
 80045f8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80045fc:	f7ff f856 	bl	80036ac <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004600:	21fa      	movs	r1, #250	; 0xfa
 8004602:	2007      	movs	r0, #7
 8004604:	f7ff fd22 	bl	800404c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004608:	2007      	movs	r0, #7
 800460a:	f7ff fe55 	bl	80042b8 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800460e:	2001      	movs	r0, #1
 8004610:	f7ff fe84 	bl	800431c <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	f7ff fea3 	bl	8004360 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800461a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800461e:	f7ff fec1 	bl	80043a4 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004622:	21c8      	movs	r1, #200	; 0xc8
 8004624:	483c      	ldr	r0, [pc, #240]	; (8004718 <dmp_enable_feature+0x248>)
 8004626:	f7ff fedf 	bl	80043e8 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800462a:	2028      	movs	r0, #40	; 0x28
 800462c:	f7ff ff0c 	bl	8004448 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004630:	200a      	movs	r0, #10
 8004632:	f7ff ff2b 	bl	800448c <dmp_set_shake_reject_timeout>
 8004636:	e009      	b.n	800464c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004638:	23d8      	movs	r3, #216	; 0xd8
 800463a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	461a      	mov	r2, r3
 8004642:	2101      	movs	r1, #1
 8004644:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004648:	f7ff f830 	bl	80036ac <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8004656:	23d9      	movs	r3, #217	; 0xd9
 8004658:	733b      	strb	r3, [r7, #12]
 800465a:	e001      	b.n	8004660 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800465c:	23d8      	movs	r3, #216	; 0xd8
 800465e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8004660:	f107 030c 	add.w	r3, r7, #12
 8004664:	461a      	mov	r2, r3
 8004666:	2101      	movs	r1, #1
 8004668:	f240 703d 	movw	r0, #1853	; 0x73d
 800466c:	f7ff f81e 	bl	80036ac <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800467a:	2001      	movs	r0, #1
 800467c:	f000 f880 	bl	8004780 <dmp_enable_lp_quat>
 8004680:	e002      	b.n	8004688 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8004682:	2000      	movs	r0, #0
 8004684:	f000 f87c 	bl	8004780 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8004692:	2001      	movs	r0, #1
 8004694:	f000 f89b 	bl	80047ce <dmp_enable_6x_lp_quat>
 8004698:	e002      	b.n	80046a0 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800469a:	2000      	movs	r0, #0
 800469c:	f000 f897 	bl	80047ce <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	f043 0308 	orr.w	r3, r3, #8
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <dmp_enable_feature+0x24c>)
 80046aa:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 80046ac:	f7fd fbc4 	bl	8001e38 <mpu_reset_fifo>

    dmp.packet_length = 0;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <dmp_enable_feature+0x24c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <dmp_enable_feature+0x24c>)
 80046c2:	7b9b      	ldrb	r3, [r3, #14]
 80046c4:	3306      	adds	r3, #6
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <dmp_enable_feature+0x24c>)
 80046ca:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <dmp_enable_feature+0x24c>)
 80046d8:	7b9b      	ldrb	r3, [r3, #14]
 80046da:	3306      	adds	r3, #6
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <dmp_enable_feature+0x24c>)
 80046e0:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	f003 0314 	and.w	r3, r3, #20
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <dmp_enable_feature+0x24c>)
 80046ee:	7b9b      	ldrb	r3, [r3, #14]
 80046f0:	3310      	adds	r3, #16
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <dmp_enable_feature+0x24c>)
 80046f6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <dmp_enable_feature+0x24c>)
 8004704:	7b9b      	ldrb	r3, [r3, #14]
 8004706:	3304      	adds	r3, #4
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <dmp_enable_feature+0x24c>)
 800470c:	739a      	strb	r2, [r3, #14]

    return 0;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	02cae309 	.word	0x02cae309
 800471c:	200002c0 	.word	0x200002c0

08004720 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8004730:	4a11      	ldr	r2, [pc, #68]	; (8004778 <dmp_enable_gyro_cal+0x58>)
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	ca07      	ldmia	r2, {r0, r1, r2}
 8004738:	c303      	stmia	r3!, {r0, r1}
 800473a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	461a      	mov	r2, r3
 8004742:	2109      	movs	r1, #9
 8004744:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004748:	f7fe ffb0 	bl	80036ac <mpu_write_mem>
 800474c:	4603      	mov	r3, r0
 800474e:	e00e      	b.n	800476e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <dmp_enable_gyro_cal+0x5c>)
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	ca07      	ldmia	r2, {r0, r1, r2}
 8004758:	c303      	stmia	r3!, {r0, r1}
 800475a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	461a      	mov	r2, r3
 8004762:	2109      	movs	r1, #9
 8004764:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004768:	f7fe ffa0 	bl	80036ac <mpu_write_mem>
 800476c:	4603      	mov	r3, r0
    }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	0800b88c 	.word	0x0800b88c
 800477c:	0800b898 	.word	0x0800b898

08004780 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8004790:	23c0      	movs	r3, #192	; 0xc0
 8004792:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004794:	23c2      	movs	r3, #194	; 0xc2
 8004796:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004798:	23c4      	movs	r3, #196	; 0xc4
 800479a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800479c:	23c6      	movs	r3, #198	; 0xc6
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	e006      	b.n	80047b0 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	2204      	movs	r2, #4
 80047a8:	218b      	movs	r1, #139	; 0x8b
 80047aa:	4618      	mov	r0, r3
 80047ac:	f004 fb28 	bl	8008e00 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	461a      	mov	r2, r3
 80047b6:	2104      	movs	r1, #4
 80047b8:	f640 2098 	movw	r0, #2712	; 0xa98
 80047bc:	f7fe ff76 	bl	80036ac <mpu_write_mem>

    return mpu_reset_fifo();
 80047c0:	f7fd fb3a 	bl	8001e38 <mpu_reset_fifo>
 80047c4:	4603      	mov	r3, r0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	4603      	mov	r3, r0
 80047d6:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 80047de:	2320      	movs	r3, #32
 80047e0:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 80047e2:	2328      	movs	r3, #40	; 0x28
 80047e4:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 80047e6:	2330      	movs	r3, #48	; 0x30
 80047e8:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 80047ea:	2338      	movs	r3, #56	; 0x38
 80047ec:	73fb      	strb	r3, [r7, #15]
 80047ee:	e006      	b.n	80047fe <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 80047f0:	f107 030c 	add.w	r3, r7, #12
 80047f4:	2204      	movs	r2, #4
 80047f6:	21a3      	movs	r1, #163	; 0xa3
 80047f8:	4618      	mov	r0, r3
 80047fa:	f004 fb01 	bl	8008e00 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	461a      	mov	r2, r3
 8004804:	2104      	movs	r1, #4
 8004806:	f640 209e 	movw	r0, #2718	; 0xa9e
 800480a:	f7fe ff4f 	bl	80036ac <mpu_write_mem>

    return mpu_reset_fifo();
 800480e:	f7fd fb13 	bl	8001e38 <mpu_reset_fifo>
 8004812:	4603      	mov	r3, r0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3303      	adds	r3, #3
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800482e:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3303      	adds	r3, #3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483a:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3301      	adds	r3, #1
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d012      	beq.n	8004870 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <decode_gesture+0x84>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <decode_gesture+0x84>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	7b39      	ldrb	r1, [r7, #12]
 800486a:	7b7a      	ldrb	r2, [r7, #13]
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3301      	adds	r3, #1
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <decode_gesture+0x84>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <decode_gesture+0x84>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	0992      	lsrs	r2, r2, #6
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	4610      	mov	r0, r2
 8004892:	4798      	blx	r3
    }

    return 0;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200002c0 	.word	0x200002c0

080048a4 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b092      	sub	sp, #72	; 0x48
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    sensors[0] = 0;
 80048b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ba:	2200      	movs	r2, #0
 80048bc:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 80048be:	4bae      	ldr	r3, [pc, #696]	; (8004b78 <dmp_read_fifo+0x2d4>)
 80048c0:	7b9b      	ldrb	r3, [r3, #14]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f107 0120 	add.w	r1, r7, #32
 80048c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd ff48 	bl	8002760 <mpu_read_fifo_stream>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <dmp_read_fifo+0x38>
        return -1;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048da:	e148      	b.n	8004b6e <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 80048dc:	4ba6      	ldr	r3, [pc, #664]	; (8004b78 <dmp_read_fifo+0x2d4>)
 80048de:	895b      	ldrh	r3, [r3, #10]
 80048e0:	f003 0314 	and.w	r3, r3, #20
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 808a 	beq.w	80049fe <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80048ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048ee:	061a      	lsls	r2, r3, #24
 80048f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80048f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80048fc:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80048fe:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004900:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004904:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800490a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800490e:	061a      	lsls	r2, r3, #24
 8004910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800491c:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800491e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004924:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800492a:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800492c:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004932:	061a      	lsls	r2, r3, #24
 8004934:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800493c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004940:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004942:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004944:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004948:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800494e:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004950:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004952:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004956:	061a      	lsls	r2, r3, #24
 8004958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004960:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004964:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004966:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800496c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004972:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004974:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800497a:	3310      	adds	r3, #16
 800497c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	141b      	asrs	r3, r3, #16
 8004986:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	141b      	asrs	r3, r3, #16
 8004990:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3308      	adds	r3, #8
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	141b      	asrs	r3, r3, #16
 800499a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	330c      	adds	r3, #12
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	141b      	asrs	r3, r3, #16
 80049a4:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	fb03 f202 	mul.w	r2, r3, r2
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80049c0:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	69f9      	ldr	r1, [r7, #28]
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80049ca:	4413      	add	r3, r2
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80049ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049d4:	db03      	blt.n	80049de <dmp_read_fifo+0x13a>
 80049d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d8:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 80049dc:	dd07      	ble.n	80049ee <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 80049de:	f7fd fa2b 	bl	8001e38 <mpu_reset_fifo>
            sensors[0] = 0;
 80049e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e4:	2200      	movs	r2, #0
 80049e6:	801a      	strh	r2, [r3, #0]
            return -1;
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ec:	e0bf      	b.n	8004b6e <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 80049ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	b21a      	sxth	r2, r3
 80049fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049fc:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80049fe:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <dmp_read_fifo+0x2d4>)
 8004a00:	895b      	ldrh	r3, [r3, #10]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d04c      	beq.n	8004aa4 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004a0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a0e:	3348      	adds	r3, #72	; 0x48
 8004a10:	443b      	add	r3, r7
 8004a12:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	b21a      	sxth	r2, r3
 8004a1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a1e:	3301      	adds	r3, #1
 8004a20:	3348      	adds	r3, #72	; 0x48
 8004a22:	443b      	add	r3, r7
 8004a24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	b21a      	sxth	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004a32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a36:	3302      	adds	r3, #2
 8004a38:	3348      	adds	r3, #72	; 0x48
 8004a3a:	443b      	add	r3, r7
 8004a3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	b219      	sxth	r1, r3
 8004a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a48:	3303      	adds	r3, #3
 8004a4a:	3348      	adds	r3, #72	; 0x48
 8004a4c:	443b      	add	r3, r7
 8004a4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a52:	b21a      	sxth	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3302      	adds	r3, #2
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	b212      	sxth	r2, r2
 8004a5c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004a5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a62:	3304      	adds	r3, #4
 8004a64:	3348      	adds	r3, #72	; 0x48
 8004a66:	443b      	add	r3, r7
 8004a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	b219      	sxth	r1, r3
 8004a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a74:	3305      	adds	r3, #5
 8004a76:	3348      	adds	r3, #72	; 0x48
 8004a78:	443b      	add	r3, r7
 8004a7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a7e:	b21a      	sxth	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3304      	adds	r3, #4
 8004a84:	430a      	orrs	r2, r1
 8004a86:	b212      	sxth	r2, r2
 8004a88:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004a8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a8e:	3306      	adds	r3, #6
 8004a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a9a:	f043 0308 	orr.w	r3, r3, #8
 8004a9e:	b21a      	sxth	r2, r3
 8004aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa2:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <dmp_read_fifo+0x2d4>)
 8004aa6:	895b      	ldrh	r3, [r3, #10]
 8004aa8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d04c      	beq.n	8004b4a <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ab4:	3348      	adds	r3, #72	; 0x48
 8004ab6:	443b      	add	r3, r7
 8004ab8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	b21a      	sxth	r2, r3
 8004ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	3348      	adds	r3, #72	; 0x48
 8004ac8:	443b      	add	r3, r7
 8004aca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004ad8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004adc:	3302      	adds	r3, #2
 8004ade:	3348      	adds	r3, #72	; 0x48
 8004ae0:	443b      	add	r3, r7
 8004ae2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	b219      	sxth	r1, r3
 8004aea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004aee:	3303      	adds	r3, #3
 8004af0:	3348      	adds	r3, #72	; 0x48
 8004af2:	443b      	add	r3, r7
 8004af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3302      	adds	r3, #2
 8004afe:	430a      	orrs	r2, r1
 8004b00:	b212      	sxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004b04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b08:	3304      	adds	r3, #4
 8004b0a:	3348      	adds	r3, #72	; 0x48
 8004b0c:	443b      	add	r3, r7
 8004b0e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	b219      	sxth	r1, r3
 8004b16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b1a:	3305      	adds	r3, #5
 8004b1c:	3348      	adds	r3, #72	; 0x48
 8004b1e:	443b      	add	r3, r7
 8004b20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b24:	b21a      	sxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	b212      	sxth	r2, r2
 8004b2e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004b30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b34:	3306      	adds	r3, #6
 8004b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8004b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b40:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004b44:	b21a      	sxth	r2, r3
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <dmp_read_fifo+0x2d4>)
 8004b4c:	895b      	ldrh	r3, [r3, #10]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8004b56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b5a:	f107 0220 	add.w	r2, r7, #32
 8004b5e:	4413      	add	r3, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fe5b 	bl	800481c <decode_gesture>

    myget_ms(timestamp);
 8004b66:	6838      	ldr	r0, [r7, #0]
 8004b68:	f7fe ff16 	bl	8003998 <myget_ms>
    return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3748      	adds	r7, #72	; 0x48
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200002c0 	.word	0x200002c0

08004b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <MX_GPIO_Init+0xd0>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8004c02:	2200      	movs	r2, #0
 8004c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c08:	4811      	ldr	r0, [pc, #68]	; (8004c50 <MX_GPIO_Init+0xd4>)
 8004c0a:	f000 ff09 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480c      	ldr	r0, [pc, #48]	; (8004c54 <MX_GPIO_Init+0xd8>)
 8004c22:	f000 fd79 	bl	8005718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4804      	ldr	r0, [pc, #16]	; (8004c50 <MX_GPIO_Init+0xd4>)
 8004c40:	f000 fd6a 	bl	8005718 <HAL_GPIO_Init>

}
 8004c44:	bf00      	nop
 8004c46:	3728      	adds	r7, #40	; 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40020c00 	.word	0x40020c00
 8004c54:	40020000 	.word	0x40020000

08004c58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c5e:	4a13      	ldr	r2, [pc, #76]	; (8004cac <MX_I2C1_Init+0x54>)
 8004c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c64:	4a12      	ldr	r2, [pc, #72]	; (8004cb0 <MX_I2C1_Init+0x58>)
 8004c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c94:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <MX_I2C1_Init+0x50>)
 8004c96:	f000 fef7 	bl	8005a88 <HAL_I2C_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ca0:	f000 f98a 	bl	8004fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004ca4:	bf00      	nop
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	200002d0 	.word	0x200002d0
 8004cac:	40005400 	.word	0x40005400
 8004cb0:	00061a80 	.word	0x00061a80

08004cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a19      	ldr	r2, [pc, #100]	; (8004d38 <HAL_I2C_MspInit+0x84>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d12b      	bne.n	8004d2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cf2:	23c0      	movs	r3, #192	; 0xc0
 8004cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cf6:	2312      	movs	r3, #18
 8004cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d02:	2304      	movs	r3, #4
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	480c      	ldr	r0, [pc, #48]	; (8004d40 <HAL_I2C_MspInit+0x8c>)
 8004d0e:	f000 fd03 	bl	8005718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004d2e:	bf00      	nop
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40005400 	.word	0x40005400
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40020400 	.word	0x40020400

08004d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d48:	b094      	sub	sp, #80	; 0x50
 8004d4a:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d4c:	f000 fb3c 	bl	80053c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d50:	f000 f88a 	bl	8004e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d54:	f7ff ff12 	bl	8004b7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004d58:	f7ff ff7e 	bl	8004c58 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004d5c:	f000 fa98 	bl	8005290 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8004d60:	f000 fa4a 	bl	80051f8 <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8004d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d68:	f000 fba0 	bl	80054ac <HAL_Delay>
  if(I2C1->SR2&2)
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <main+0xf8>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <main+0x4c>
  {
	  I2C1->CR1 |= (1<<15);
 8004d78:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <main+0xf8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <main+0xf8>)
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	6013      	str	r3, [r2, #0]
	  I2C1->CR1 &= ~(1<<15);
 8004d84:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <main+0xf8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <main+0xf8>)
 8004d8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d8e:	6013      	str	r3, [r2, #0]
//	  while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
//	  I2C1->CR1 &= ~(1<<15);
  }


  IIC_Init(hi2c1);
 8004d90:	4c2b      	ldr	r4, [pc, #172]	; (8004e40 <main+0xfc>)
 8004d92:	4668      	mov	r0, sp
 8004d94:	f104 0310 	add.w	r3, r4, #16
 8004d98:	2244      	movs	r2, #68	; 0x44
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f004 f822 	bl	8008de4 <memcpy>
 8004da0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004da4:	f7fc f92a 	bl	8000ffc <IIC_Init>
  printf("\n\rMPU6050 is initializing....\n\r");
 8004da8:	4826      	ldr	r0, [pc, #152]	; (8004e44 <main+0x100>)
 8004daa:	f004 fc9b 	bl	80096e4 <iprintf>
  MPU6050_initialize();
 8004dae:	f7fc fbc3 	bl	8001538 <MPU6050_initialize>
  printf("\n\rMPU6050 has been initialized....\n\r");
 8004db2:	4825      	ldr	r0, [pc, #148]	; (8004e48 <main+0x104>)
 8004db4:	f004 fc96 	bl	80096e4 <iprintf>
  MPU6050_DMPInit();
 8004db8:	f7fc fbf2 	bl	80015a0 <MPU6050_DMPInit>
  MPU6050_setYawCorrectorRate(-0.00415); // put the drifting rate of Yaw to be corrected
 8004dbc:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004e4c <main+0x108>
 8004dc0:	f7fc fe1e 	bl	8001a00 <MPU6050_setYawCorrectorRate>
//  HAL_I2C_
  HAL_TIM_Base_Start_IT(&htim11);
 8004dc4:	4822      	ldr	r0, [pc, #136]	; (8004e50 <main+0x10c>)
 8004dc6:	f002 fb2d 	bl	8007424 <HAL_TIM_Base_Start_IT>
  long last_tick = HAL_GetTick();
 8004dca:	f000 fb63 	bl	8005494 <HAL_GetTick>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_readDMPAll(&pitch, &roll, &yaw);
 8004dd2:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <main+0x110>)
 8004dd4:	4920      	ldr	r1, [pc, #128]	; (8004e58 <main+0x114>)
 8004dd6:	4821      	ldr	r0, [pc, #132]	; (8004e5c <main+0x118>)
 8004dd8:	f7fc fc2e 	bl	8001638 <MPU6050_readDMPAll>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8004ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004de0:	481f      	ldr	r0, [pc, #124]	; (8004e60 <main+0x11c>)
 8004de2:	f000 fe36 	bl	8005a52 <HAL_GPIO_TogglePin>
	  if(HAL_GetTick()- last_tick > 1000)
 8004de6:	f000 fb55 	bl	8005494 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df4:	d9ed      	bls.n	8004dd2 <main+0x8e>
	  {
		  last_tick = HAL_GetTick();
 8004df6:	f000 fb4d 	bl	8005494 <HAL_GetTick>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	607b      	str	r3, [r7, #4]
		  printf("pitch: %.2f roll: %.2f yaw: %.2f \n\r", pitch, roll, yaw);
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <main+0x118>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fba8 	bl	8000558 <__aeabi_f2d>
 8004e08:	4680      	mov	r8, r0
 8004e0a:	4689      	mov	r9, r1
 8004e0c:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <main+0x114>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fb fba1 	bl	8000558 <__aeabi_f2d>
 8004e16:	4604      	mov	r4, r0
 8004e18:	460d      	mov	r5, r1
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <main+0x110>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb fb9a 	bl	8000558 <__aeabi_f2d>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e2c:	e9cd 4500 	strd	r4, r5, [sp]
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	480b      	ldr	r0, [pc, #44]	; (8004e64 <main+0x120>)
 8004e36:	f004 fc55 	bl	80096e4 <iprintf>
	  MPU6050_readDMPAll(&pitch, &roll, &yaw);
 8004e3a:	e7ca      	b.n	8004dd2 <main+0x8e>
 8004e3c:	40005400 	.word	0x40005400
 8004e40:	200002d0 	.word	0x200002d0
 8004e44:	0800b8bc 	.word	0x0800b8bc
 8004e48:	0800b8dc 	.word	0x0800b8dc
 8004e4c:	bb87fcb9 	.word	0xbb87fcb9
 8004e50:	20000338 	.word	0x20000338
 8004e54:	20000330 	.word	0x20000330
 8004e58:	2000032c 	.word	0x2000032c
 8004e5c:	20000328 	.word	0x20000328
 8004e60:	40020c00 	.word	0x40020c00
 8004e64:	0800b904 	.word	0x0800b904

08004e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b094      	sub	sp, #80	; 0x50
 8004e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e6e:	f107 0320 	add.w	r3, r7, #32
 8004e72:	2230      	movs	r2, #48	; 0x30
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f003 ffc2 	bl	8008e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e7c:	f107 030c 	add.w	r3, r7, #12
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <SystemClock_Config+0xcc>)
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <SystemClock_Config+0xcc>)
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <SystemClock_Config+0xcc>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <SystemClock_Config+0xd0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <SystemClock_Config+0xd0>)
 8004eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <SystemClock_Config+0xd0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004ed8:	2304      	movs	r3, #4
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004edc:	2364      	movs	r3, #100	; 0x64
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ee8:	f107 0320 	add.w	r3, r7, #32
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fd8b 	bl	8006a08 <HAL_RCC_OscConfig>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004ef8:	f000 f85e 	bl	8004fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004efc:	230f      	movs	r3, #15
 8004efe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f00:	2302      	movs	r3, #2
 8004f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	2103      	movs	r1, #3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 ffed 	bl	8006ef8 <HAL_RCC_ClockConfig>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f24:	f000 f848 	bl	8004fb8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004f28:	f002 f8cc 	bl	80070c4 <HAL_RCC_EnableCSS>
}
 8004f2c:	bf00      	nop
 8004f2e:	3750      	adds	r7, #80	; 0x50
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40007000 	.word	0x40007000

08004f3c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	4804      	ldr	r0, [pc, #16]	; (8004f64 <_write+0x28>)
 8004f54:	f002 fcd9 	bl	800790a <HAL_UART_Transmit>
	return len;
 8004f58:	687b      	ldr	r3, [r7, #4]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000380 	.word	0x20000380

08004f68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d115      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		cnt11++;
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004f80:	6013      	str	r3, [r2, #0]

		if(cnt11%1000 == 0)
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004f88:	fb83 1302 	smull	r1, r3, r3, r2
 8004f8c:	1199      	asrs	r1, r3, #6
 8004f8e:	17d3      	asrs	r3, r2, #31
 8004f90:	1acb      	subs	r3, r1, r3
 8004f92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
//			MPU6050_getDriftingRate(&pr, &rr, &yr);		// it uses to check drifting rate
			MPU6050_updateAngleCorrector();
 8004fa0:	f7fc fd3e 	bl	8001a20 <MPU6050_updateAngleCorrector>
		}
	}
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000338 	.word	0x20000338
 8004fb0:	20000324 	.word	0x20000324
 8004fb4:	10624dd3 	.word	0x10624dd3

08004fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004fbc:	b672      	cpsid	i
}
 8004fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fc0:	e7fe      	b.n	8004fc0 <Error_Handler+0x8>
	...

08004fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <HAL_MspInit+0x4c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <HAL_MspInit+0x4c>)
 8004fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <HAL_MspInit+0x4c>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_MspInit+0x4c>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	4a08      	ldr	r2, [pc, #32]	; (8005010 <HAL_MspInit+0x4c>)
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_MspInit+0x4c>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800

08005014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005018:	f002 f99a 	bl	8007350 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800501c:	e7fe      	b.n	800501c <NMI_Handler+0x8>

0800501e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <HardFault_Handler+0x4>

08005024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005028:	e7fe      	b.n	8005028 <MemManage_Handler+0x4>

0800502a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800502e:	e7fe      	b.n	800502e <BusFault_Handler+0x4>

08005030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005034:	e7fe      	b.n	8005034 <UsageFault_Handler+0x4>

08005036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005064:	f000 fa02 	bl	800546c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}

0800506c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005072:	f002 fa39 	bl	80074e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000338 	.word	0x20000338

08005080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	return 1;
 8005084:	2301      	movs	r3, #1
}
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_kill>:

int _kill(int pid, int sig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800509a:	f003 fe69 	bl	8008d70 <__errno>
 800509e:	4603      	mov	r3, r0
 80050a0:	2216      	movs	r2, #22
 80050a2:	601a      	str	r2, [r3, #0]
	return -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_exit>:

void _exit (int status)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ffe7 	bl	8005090 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050c2:	e7fe      	b.n	80050c2 <_exit+0x12>

080050c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e00a      	b.n	80050ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050d6:	f3af 8000 	nop.w
 80050da:	4601      	mov	r1, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	60ba      	str	r2, [r7, #8]
 80050e2:	b2ca      	uxtb	r2, r1
 80050e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	3301      	adds	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	dbf0      	blt.n	80050d6 <_read+0x12>
	}

return len;
 80050f4:	687b      	ldr	r3, [r7, #4]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
	return -1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005126:	605a      	str	r2, [r3, #4]
	return 0;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <_isatty>:

int _isatty(int file)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	return 1;
 800513e:	2301      	movs	r3, #1
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	return 0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <_sbrk+0x5c>)
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <_sbrk+0x60>)
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <_sbrk+0x64>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <_sbrk+0x64>)
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <_sbrk+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800518a:	4b10      	ldr	r3, [pc, #64]	; (80051cc <_sbrk+0x64>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	429a      	cmp	r2, r3
 8005196:	d207      	bcs.n	80051a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005198:	f003 fdea 	bl	8008d70 <__errno>
 800519c:	4603      	mov	r3, r0
 800519e:	220c      	movs	r2, #12
 80051a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a6:	e009      	b.n	80051bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <_sbrk+0x64>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <_sbrk+0x64>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <_sbrk+0x64>)
 80051b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20020000 	.word	0x20020000
 80051c8:	00000400 	.word	0x00000400
 80051cc:	20000334 	.word	0x20000334
 80051d0:	200003d8 	.word	0x200003d8

080051d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051d8:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <SystemInit+0x20>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	4a05      	ldr	r2, [pc, #20]	; (80051f4 <SystemInit+0x20>)
 80051e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <MX_TIM11_Init+0x40>)
 80051fe:	4a0f      	ldr	r2, [pc, #60]	; (800523c <MX_TIM11_Init+0x44>)
 8005200:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <MX_TIM11_Init+0x40>)
 8005204:	2263      	movs	r2, #99	; 0x63
 8005206:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <MX_TIM11_Init+0x40>)
 800520a:	2200      	movs	r2, #0
 800520c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <MX_TIM11_Init+0x40>)
 8005210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005214:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <MX_TIM11_Init+0x40>)
 8005218:	2200      	movs	r2, #0
 800521a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <MX_TIM11_Init+0x40>)
 800521e:	2200      	movs	r2, #0
 8005220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005222:	4805      	ldr	r0, [pc, #20]	; (8005238 <MX_TIM11_Init+0x40>)
 8005224:	f002 f8af 	bl	8007386 <HAL_TIM_Base_Init>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800522e:	f7ff fec3 	bl	8004fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000338 	.word	0x20000338
 800523c:	40014800 	.word	0x40014800

08005240 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0e      	ldr	r2, [pc, #56]	; (8005288 <HAL_TIM_Base_MspInit+0x48>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d115      	bne.n	800527e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_TIM_Base_MspInit+0x4c>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	4a0c      	ldr	r2, [pc, #48]	; (800528c <HAL_TIM_Base_MspInit+0x4c>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005260:	6453      	str	r3, [r2, #68]	; 0x44
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_TIM_Base_MspInit+0x4c>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800526e:	2200      	movs	r2, #0
 8005270:	2100      	movs	r1, #0
 8005272:	201a      	movs	r0, #26
 8005274:	f000 fa19 	bl	80056aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005278:	201a      	movs	r0, #26
 800527a:	f000 fa32 	bl	80056e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40014800 	.word	0x40014800
 800528c:	40023800 	.word	0x40023800

08005290 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <MX_USART1_UART_Init+0x50>)
 8005298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 800529c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052c8:	f002 fad2 	bl	8007870 <HAL_UART_Init>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052d2:	f7ff fe71 	bl	8004fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000380 	.word	0x20000380
 80052e0:	40011000 	.word	0x40011000

080052e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_UART_MspInit+0x84>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d12c      	bne.n	8005360 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_UART_MspInit+0x88>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_UART_MspInit+0x88>)
 8005310:	f043 0310 	orr.w	r3, r3, #16
 8005314:	6453      	str	r3, [r2, #68]	; 0x44
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_UART_MspInit+0x88>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <HAL_UART_MspInit+0x88>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	4a10      	ldr	r2, [pc, #64]	; (800536c <HAL_UART_MspInit+0x88>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6313      	str	r3, [r2, #48]	; 0x30
 8005332:	4b0e      	ldr	r3, [pc, #56]	; (800536c <HAL_UART_MspInit+0x88>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800533e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8005342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534c:	2303      	movs	r3, #3
 800534e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005350:	2307      	movs	r3, #7
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	4619      	mov	r1, r3
 800535a:	4805      	ldr	r0, [pc, #20]	; (8005370 <HAL_UART_MspInit+0x8c>)
 800535c:	f000 f9dc 	bl	8005718 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005360:	bf00      	nop
 8005362:	3728      	adds	r7, #40	; 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40011000 	.word	0x40011000
 800536c:	40023800 	.word	0x40023800
 8005370:	40020000 	.word	0x40020000

08005374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005378:	480d      	ldr	r0, [pc, #52]	; (80053b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800537a:	490e      	ldr	r1, [pc, #56]	; (80053b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800537e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005380:	e002      	b.n	8005388 <LoopCopyDataInit>

08005382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005386:	3304      	adds	r3, #4

08005388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800538a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800538c:	d3f9      	bcc.n	8005382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800538e:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005390:	4c0b      	ldr	r4, [pc, #44]	; (80053c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005394:	e001      	b.n	800539a <LoopFillZerobss>

08005396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005398:	3204      	adds	r2, #4

0800539a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800539a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800539c:	d3fb      	bcc.n	8005396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800539e:	f7ff ff19 	bl	80051d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053a2:	f003 fceb 	bl	8008d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053a6:	f7ff fccd 	bl	8004d44 <main>
  bx  lr    
 80053aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80053ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053b4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80053b8:	0800c9f4 	.word	0x0800c9f4
  ldr r2, =_sbss
 80053bc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80053c0:	200003d8 	.word	0x200003d8

080053c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053c4:	e7fe      	b.n	80053c4 <ADC_IRQHandler>
	...

080053c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <HAL_Init+0x40>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0d      	ldr	r2, [pc, #52]	; (8005408 <HAL_Init+0x40>)
 80053d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_Init+0x40>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_Init+0x40>)
 80053de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <HAL_Init+0x40>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a07      	ldr	r2, [pc, #28]	; (8005408 <HAL_Init+0x40>)
 80053ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f0:	2003      	movs	r0, #3
 80053f2:	f000 f94f 	bl	8005694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053f6:	200f      	movs	r0, #15
 80053f8:	f000 f808 	bl	800540c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053fc:	f7ff fde2 	bl	8004fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023c00 	.word	0x40023c00

0800540c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_InitTick+0x54>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_InitTick+0x58>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	4619      	mov	r1, r3
 800541e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005422:	fbb3 f3f1 	udiv	r3, r3, r1
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f967 	bl	80056fe <HAL_SYSTICK_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e00e      	b.n	8005458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b0f      	cmp	r3, #15
 800543e:	d80a      	bhi.n	8005456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005440:	2200      	movs	r2, #0
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005448:	f000 f92f 	bl	80056aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800544c:	4a06      	ldr	r2, [pc, #24]	; (8005468 <HAL_InitTick+0x5c>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	2000003c 	.word	0x2000003c
 8005464:	20000044 	.word	0x20000044
 8005468:	20000040 	.word	0x20000040

0800546c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_IncTick+0x20>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_IncTick+0x24>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4413      	add	r3, r2
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <HAL_IncTick+0x24>)
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000044 	.word	0x20000044
 8005490:	200003c4 	.word	0x200003c4

08005494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  return uwTick;
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <HAL_GetTick+0x14>)
 800549a:	681b      	ldr	r3, [r3, #0]
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	200003c4 	.word	0x200003c4

080054ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b4:	f7ff ffee 	bl	8005494 <HAL_GetTick>
 80054b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c4:	d005      	beq.n	80054d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_Delay+0x44>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054d2:	bf00      	nop
 80054d4:	f7ff ffde 	bl	8005494 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d8f7      	bhi.n	80054d4 <HAL_Delay+0x28>
  {
  }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000044 	.word	0x20000044

080054f4 <__NVIC_SetPriorityGrouping>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005510:	4013      	ands	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800551c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005526:	4a04      	ldr	r2, [pc, #16]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	60d3      	str	r3, [r2, #12]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <__NVIC_GetPriorityGrouping>:
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <__NVIC_GetPriorityGrouping+0x18>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 0307 	and.w	r3, r3, #7
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_EnableIRQ>:
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005566:	2b00      	cmp	r3, #0
 8005568:	db0b      	blt.n	8005582 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	f003 021f 	and.w	r2, r3, #31
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <__NVIC_EnableIRQ+0x38>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2001      	movs	r0, #1
 800557a:	fa00 f202 	lsl.w	r2, r0, r2
 800557e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000e100 	.word	0xe000e100

08005594 <__NVIC_SetPriority>:
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	6039      	str	r1, [r7, #0]
 800559e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	db0a      	blt.n	80055be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	490c      	ldr	r1, [pc, #48]	; (80055e0 <__NVIC_SetPriority+0x4c>)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	0112      	lsls	r2, r2, #4
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	440b      	add	r3, r1
 80055b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055bc:	e00a      	b.n	80055d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	4908      	ldr	r1, [pc, #32]	; (80055e4 <__NVIC_SetPriority+0x50>)
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	3b04      	subs	r3, #4
 80055cc:	0112      	lsls	r2, r2, #4
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	440b      	add	r3, r1
 80055d2:	761a      	strb	r2, [r3, #24]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000e100 	.word	0xe000e100
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <NVIC_EncodePriority>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f1c3 0307 	rsb	r3, r3, #7
 8005602:	2b04      	cmp	r3, #4
 8005604:	bf28      	it	cs
 8005606:	2304      	movcs	r3, #4
 8005608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3304      	adds	r3, #4
 800560e:	2b06      	cmp	r3, #6
 8005610:	d902      	bls.n	8005618 <NVIC_EncodePriority+0x30>
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3b03      	subs	r3, #3
 8005616:	e000      	b.n	800561a <NVIC_EncodePriority+0x32>
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800561c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	401a      	ands	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	43d9      	mvns	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005640:	4313      	orrs	r3, r2
}
 8005642:	4618      	mov	r0, r3
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3b01      	subs	r3, #1
 800565c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005660:	d301      	bcc.n	8005666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005662:	2301      	movs	r3, #1
 8005664:	e00f      	b.n	8005686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <SysTick_Config+0x40>)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3b01      	subs	r3, #1
 800566c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800566e:	210f      	movs	r1, #15
 8005670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005674:	f7ff ff8e 	bl	8005594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <SysTick_Config+0x40>)
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <SysTick_Config+0x40>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	e000e010 	.word	0xe000e010

08005694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff29 	bl	80054f4 <__NVIC_SetPriorityGrouping>
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	4603      	mov	r3, r0
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056bc:	f7ff ff3e 	bl	800553c <__NVIC_GetPriorityGrouping>
 80056c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	6978      	ldr	r0, [r7, #20]
 80056c8:	f7ff ff8e 	bl	80055e8 <NVIC_EncodePriority>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff ff5d 	bl	8005594 <__NVIC_SetPriority>
}
 80056da:	bf00      	nop
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	4603      	mov	r3, r0
 80056ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff31 	bl	8005558 <__NVIC_EnableIRQ>
}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ffa2 	bl	8005650 <SysTick_Config>
 800570c:	4603      	mov	r3, r0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	e159      	b.n	80059e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005734:	2201      	movs	r2, #1
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	429a      	cmp	r2, r3
 800574e:	f040 8148 	bne.w	80059e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b01      	cmp	r3, #1
 800575c:	d005      	beq.n	800576a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005766:	2b02      	cmp	r3, #2
 8005768:	d130      	bne.n	80057cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	2203      	movs	r2, #3
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057a0:	2201      	movs	r2, #1
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	f003 0201 	and.w	r2, r3, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d017      	beq.n	8005808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	2203      	movs	r2, #3
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d123      	bne.n	800585c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	08da      	lsrs	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3208      	adds	r2, #8
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	220f      	movs	r2, #15
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	08da      	lsrs	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3208      	adds	r2, #8
 8005856:	69b9      	ldr	r1, [r7, #24]
 8005858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	2203      	movs	r2, #3
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 0203 	and.w	r2, r3, #3
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4313      	orrs	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80a2 	beq.w	80059e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	4b57      	ldr	r3, [pc, #348]	; (8005a00 <HAL_GPIO_Init+0x2e8>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	4a56      	ldr	r2, [pc, #344]	; (8005a00 <HAL_GPIO_Init+0x2e8>)
 80058a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ac:	6453      	str	r3, [r2, #68]	; 0x44
 80058ae:	4b54      	ldr	r3, [pc, #336]	; (8005a00 <HAL_GPIO_Init+0x2e8>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ba:	4a52      	ldr	r2, [pc, #328]	; (8005a04 <HAL_GPIO_Init+0x2ec>)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	3302      	adds	r3, #2
 80058c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	220f      	movs	r2, #15
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a49      	ldr	r2, [pc, #292]	; (8005a08 <HAL_GPIO_Init+0x2f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d019      	beq.n	800591a <HAL_GPIO_Init+0x202>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a48      	ldr	r2, [pc, #288]	; (8005a0c <HAL_GPIO_Init+0x2f4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_GPIO_Init+0x1fe>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a47      	ldr	r2, [pc, #284]	; (8005a10 <HAL_GPIO_Init+0x2f8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00d      	beq.n	8005912 <HAL_GPIO_Init+0x1fa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a46      	ldr	r2, [pc, #280]	; (8005a14 <HAL_GPIO_Init+0x2fc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <HAL_GPIO_Init+0x1f6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a45      	ldr	r2, [pc, #276]	; (8005a18 <HAL_GPIO_Init+0x300>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_GPIO_Init+0x1f2>
 8005906:	2304      	movs	r3, #4
 8005908:	e008      	b.n	800591c <HAL_GPIO_Init+0x204>
 800590a:	2307      	movs	r3, #7
 800590c:	e006      	b.n	800591c <HAL_GPIO_Init+0x204>
 800590e:	2303      	movs	r3, #3
 8005910:	e004      	b.n	800591c <HAL_GPIO_Init+0x204>
 8005912:	2302      	movs	r3, #2
 8005914:	e002      	b.n	800591c <HAL_GPIO_Init+0x204>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <HAL_GPIO_Init+0x204>
 800591a:	2300      	movs	r3, #0
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	f002 0203 	and.w	r2, r2, #3
 8005922:	0092      	lsls	r2, r2, #2
 8005924:	4093      	lsls	r3, r2
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800592c:	4935      	ldr	r1, [pc, #212]	; (8005a04 <HAL_GPIO_Init+0x2ec>)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	089b      	lsrs	r3, r3, #2
 8005932:	3302      	adds	r3, #2
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800593a:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <HAL_GPIO_Init+0x304>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	43db      	mvns	r3, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4013      	ands	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <HAL_GPIO_Init+0x304>)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005964:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <HAL_GPIO_Init+0x304>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	43db      	mvns	r3, r3
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4013      	ands	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005988:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <HAL_GPIO_Init+0x304>)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <HAL_GPIO_Init+0x304>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	43db      	mvns	r3, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4013      	ands	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059b2:	4a1a      	ldr	r2, [pc, #104]	; (8005a1c <HAL_GPIO_Init+0x304>)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059b8:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <HAL_GPIO_Init+0x304>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059dc:	4a0f      	ldr	r2, [pc, #60]	; (8005a1c <HAL_GPIO_Init+0x304>)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	f67f aea2 	bls.w	8005734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40013800 	.word	0x40013800
 8005a08:	40020000 	.word	0x40020000
 8005a0c:	40020400 	.word	0x40020400
 8005a10:	40020800 	.word	0x40020800
 8005a14:	40020c00 	.word	0x40020c00
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40013c00 	.word	0x40013c00

08005a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a30:	787b      	ldrb	r3, [r7, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a3c:	e003      	b.n	8005a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a3e:	887b      	ldrh	r3, [r7, #2]
 8005a40:	041a      	lsls	r2, r3, #16
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	619a      	str	r2, [r3, #24]
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	041a      	lsls	r2, r3, #16
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	43d9      	mvns	r1, r3
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	400b      	ands	r3, r1
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e12b      	b.n	8005cf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff f900 	bl	8004cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005aec:	f001 fc08 	bl	8007300 <HAL_RCC_GetPCLK1Freq>
 8005af0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4a81      	ldr	r2, [pc, #516]	; (8005cfc <HAL_I2C_Init+0x274>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d807      	bhi.n	8005b0c <HAL_I2C_Init+0x84>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a80      	ldr	r2, [pc, #512]	; (8005d00 <HAL_I2C_Init+0x278>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bf94      	ite	ls
 8005b04:	2301      	movls	r3, #1
 8005b06:	2300      	movhi	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e006      	b.n	8005b1a <HAL_I2C_Init+0x92>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a7d      	ldr	r2, [pc, #500]	; (8005d04 <HAL_I2C_Init+0x27c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bf94      	ite	ls
 8005b14:	2301      	movls	r3, #1
 8005b16:	2300      	movhi	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0e7      	b.n	8005cf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a78      	ldr	r2, [pc, #480]	; (8005d08 <HAL_I2C_Init+0x280>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	0c9b      	lsrs	r3, r3, #18
 8005b2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <HAL_I2C_Init+0x274>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d802      	bhi.n	8005b5c <HAL_I2C_Init+0xd4>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	e009      	b.n	8005b70 <HAL_I2C_Init+0xe8>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	4a69      	ldr	r2, [pc, #420]	; (8005d0c <HAL_I2C_Init+0x284>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	3301      	adds	r3, #1
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	495c      	ldr	r1, [pc, #368]	; (8005cfc <HAL_I2C_Init+0x274>)
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	d819      	bhi.n	8005bc4 <HAL_I2C_Init+0x13c>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1e59      	subs	r1, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_I2C_Init+0x138>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1e59      	subs	r1, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb8:	3301      	adds	r3, #1
 8005bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bbe:	e051      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	e04f      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <HAL_I2C_Init+0x168>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1e58      	subs	r0, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	440b      	add	r3, r1
 8005bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bde:	3301      	adds	r3, #1
 8005be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e012      	b.n	8005c16 <HAL_I2C_Init+0x18e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1e58      	subs	r0, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	0099      	lsls	r1, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c06:	3301      	adds	r3, #1
 8005c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_I2C_Init+0x196>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e022      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <HAL_I2C_Init+0x1bc>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1e58      	subs	r0, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6859      	ldr	r1, [r3, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	440b      	add	r3, r1
 8005c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c38:	3301      	adds	r3, #1
 8005c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c42:	e00f      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	0099      	lsls	r1, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	6809      	ldr	r1, [r1, #0]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69da      	ldr	r2, [r3, #28]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6911      	ldr	r1, [r2, #16]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	68d2      	ldr	r2, [r2, #12]
 8005c9e:	4311      	orrs	r1, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	000186a0 	.word	0x000186a0
 8005d00:	001e847f 	.word	0x001e847f
 8005d04:	003d08ff 	.word	0x003d08ff
 8005d08:	431bde83 	.word	0x431bde83
 8005d0c:	10624dd3 	.word	0x10624dd3

08005d10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	460b      	mov	r3, r1
 8005d24:	813b      	strh	r3, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d2a:	f7ff fbb3 	bl	8005494 <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	f040 80d9 	bne.w	8005ef0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2319      	movs	r3, #25
 8005d44:	2201      	movs	r2, #1
 8005d46:	496d      	ldr	r1, [pc, #436]	; (8005efc <HAL_I2C_Mem_Write+0x1ec>)
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 fc7f 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
 8005d56:	e0cc      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_I2C_Mem_Write+0x56>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e0c5      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d007      	beq.n	8005d8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2221      	movs	r2, #33	; 0x21
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2240      	movs	r2, #64	; 0x40
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a4d      	ldr	r2, [pc, #308]	; (8005f00 <HAL_I2C_Mem_Write+0x1f0>)
 8005dcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dce:	88f8      	ldrh	r0, [r7, #6]
 8005dd0:	893a      	ldrh	r2, [r7, #8]
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	4603      	mov	r3, r0
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fab6 	bl	8006350 <I2C_RequestMemoryWrite>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d052      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e081      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fd00 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d107      	bne.n	8005e16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e06b      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d11b      	bne.n	8005e90 <HAL_I2C_Mem_Write+0x180>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1aa      	bne.n	8005dee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fcec 	bl	800687a <I2C_WaitOnBTFFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d107      	bne.n	8005ec0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e016      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	00100002 	.word	0x00100002
 8005f00:	ffff0000 	.word	0xffff0000

08005f04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08c      	sub	sp, #48	; 0x30
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	817b      	strh	r3, [r7, #10]
 8005f16:	460b      	mov	r3, r1
 8005f18:	813b      	strh	r3, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f1e:	f7ff fab9 	bl	8005494 <HAL_GetTick>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	f040 8208 	bne.w	8006342 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2319      	movs	r3, #25
 8005f38:	2201      	movs	r2, #1
 8005f3a:	497b      	ldr	r1, [pc, #492]	; (8006128 <HAL_I2C_Mem_Read+0x224>)
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fb85 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e1fb      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_Mem_Read+0x56>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e1f4      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d007      	beq.n	8005f80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2222      	movs	r2, #34	; 0x22
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2240      	movs	r2, #64	; 0x40
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a5b      	ldr	r2, [pc, #364]	; (800612c <HAL_I2C_Mem_Read+0x228>)
 8005fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fc2:	88f8      	ldrh	r0, [r7, #6]
 8005fc4:	893a      	ldrh	r2, [r7, #8]
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fa52 	bl	800647c <I2C_RequestMemoryRead>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e1b0      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d113      	bne.n	8006012 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fea:	2300      	movs	r3, #0
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	623b      	str	r3, [r7, #32]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e184      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	2b01      	cmp	r3, #1
 8006018:	d11b      	bne.n	8006052 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e164      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006056:	2b02      	cmp	r3, #2
 8006058:	d11b      	bne.n	8006092 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006068:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	e144      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060a8:	e138      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	f200 80f1 	bhi.w	8006296 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d123      	bne.n	8006104 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fc1b 	bl	80068fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e139      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006102:	e10b      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006108:	2b02      	cmp	r3, #2
 800610a:	d14e      	bne.n	80061aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	2200      	movs	r2, #0
 8006114:	4906      	ldr	r1, [pc, #24]	; (8006130 <HAL_I2C_Mem_Read+0x22c>)
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fa98 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e10e      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
 8006126:	bf00      	nop
 8006128:	00100002 	.word	0x00100002
 800612c:	ffff0000 	.word	0xffff0000
 8006130:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061a8:	e0b8      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2200      	movs	r2, #0
 80061b2:	4966      	ldr	r1, [pc, #408]	; (800634c <HAL_I2C_Mem_Read+0x448>)
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fa49 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0bf      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	2200      	movs	r2, #0
 800620e:	494f      	ldr	r1, [pc, #316]	; (800634c <HAL_I2C_Mem_Read+0x448>)
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fa1b 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e091      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006294:	e042      	b.n	800631c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fb2e 	bl	80068fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e04c      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d118      	bne.n	800631c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	2b00      	cmp	r3, #0
 8006322:	f47f aec2 	bne.w	80060aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006342:	2302      	movs	r3, #2
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3728      	adds	r7, #40	; 0x28
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	00010004 	.word	0x00010004

08006350 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	461a      	mov	r2, r3
 800635e:	4603      	mov	r3, r0
 8006360:	817b      	strh	r3, [r7, #10]
 8006362:	460b      	mov	r3, r1
 8006364:	813b      	strh	r3, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2200      	movs	r2, #0
 8006382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f960 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a0:	d103      	bne.n	80063aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e05f      	b.n	800646e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063ae:	897b      	ldrh	r3, [r7, #10]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	492d      	ldr	r1, [pc, #180]	; (8006478 <I2C_RequestMemoryWrite+0x128>)
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f998 	bl	80066fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e04c      	b.n	800646e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ec:	6a39      	ldr	r1, [r7, #32]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fa02 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d107      	bne.n	8006412 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e02b      	b.n	800646e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d105      	bne.n	8006428 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800641c:	893b      	ldrh	r3, [r7, #8]
 800641e:	b2da      	uxtb	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	611a      	str	r2, [r3, #16]
 8006426:	e021      	b.n	800646c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006428:	893b      	ldrh	r3, [r7, #8]
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	b29b      	uxth	r3, r3
 800642e:	b2da      	uxtb	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	6a39      	ldr	r1, [r7, #32]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f9dc 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	2b04      	cmp	r3, #4
 800644c:	d107      	bne.n	800645e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e005      	b.n	800646e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006462:	893b      	ldrh	r3, [r7, #8]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	00010002 	.word	0x00010002

0800647c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	817b      	strh	r3, [r7, #10]
 800648e:	460b      	mov	r3, r1
 8006490:	813b      	strh	r3, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	2200      	movs	r2, #0
 80064be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f8c2 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064dc:	d103      	bne.n	80064e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e0aa      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ea:	897b      	ldrh	r3, [r7, #10]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	4952      	ldr	r1, [pc, #328]	; (8006648 <I2C_RequestMemoryRead+0x1cc>)
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f8fa 	bl	80066fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e097      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006528:	6a39      	ldr	r1, [r7, #32]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f964 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00d      	beq.n	8006552 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	2b04      	cmp	r3, #4
 800653c:	d107      	bne.n	800654e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e076      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d105      	bne.n	8006564 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006558:	893b      	ldrh	r3, [r7, #8]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	611a      	str	r2, [r3, #16]
 8006562:	e021      	b.n	80065a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	b29b      	uxth	r3, r3
 800656a:	b2da      	uxtb	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006574:	6a39      	ldr	r1, [r7, #32]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f93e 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	2b04      	cmp	r3, #4
 8006588:	d107      	bne.n	800659a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e050      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800659e:	893b      	ldrh	r3, [r7, #8]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065aa:	6a39      	ldr	r1, [r7, #32]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f923 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d107      	bne.n	80065d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e035      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f82b 	bl	800664c <I2C_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00d      	beq.n	8006618 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660a:	d103      	bne.n	8006614 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e013      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006618:	897b      	ldrh	r3, [r7, #10]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	4906      	ldr	r1, [pc, #24]	; (8006648 <I2C_RequestMemoryRead+0x1cc>)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f863 	bl	80066fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	00010002 	.word	0x00010002

0800664c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	4613      	mov	r3, r2
 800665a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800665c:	e025      	b.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006664:	d021      	beq.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006666:	f7fe ff15 	bl	8005494 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d302      	bcc.n	800667c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d116      	bne.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e023      	b.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10d      	bne.n	80066d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	43da      	mvns	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	e00c      	b.n	80066ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	43da      	mvns	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4013      	ands	r3, r2
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d0b6      	beq.n	800665e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006708:	e051      	b.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006718:	d123      	bne.n	8006762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006728:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006732:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	f043 0204 	orr.w	r2, r3, #4
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e046      	b.n	80067f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006768:	d021      	beq.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676a:	f7fe fe93 	bl	8005494 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d302      	bcc.n	8006780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d116      	bne.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0220 	orr.w	r2, r3, #32
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e020      	b.n	80067f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10c      	bne.n	80067d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	43da      	mvns	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bf14      	ite	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	2300      	moveq	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	e00b      	b.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	43da      	mvns	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4013      	ands	r3, r2
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d18d      	bne.n	800670a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006804:	e02d      	b.n	8006862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f8ce 	bl	80069a8 <I2C_IsAcknowledgeFailed>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e02d      	b.n	8006872 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681c:	d021      	beq.n	8006862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fe fe39 	bl	8005494 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d116      	bne.n	8006862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e007      	b.n	8006872 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686c:	2b80      	cmp	r3, #128	; 0x80
 800686e:	d1ca      	bne.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006886:	e02d      	b.n	80068e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f88d 	bl	80069a8 <I2C_IsAcknowledgeFailed>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e02d      	b.n	80068f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800689e:	d021      	beq.n	80068e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a0:	f7fe fdf8 	bl	8005494 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d302      	bcc.n	80068b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d116      	bne.n	80068e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e007      	b.n	80068f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d1ca      	bne.n	8006888 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006908:	e042      	b.n	8006990 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b10      	cmp	r3, #16
 8006916:	d119      	bne.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0210 	mvn.w	r2, #16
 8006920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e029      	b.n	80069a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694c:	f7fe fda2 	bl	8005494 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	d302      	bcc.n	8006962 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d116      	bne.n	8006990 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	f043 0220 	orr.w	r2, r3, #32
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e007      	b.n	80069a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d1b5      	bne.n	800690a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d11b      	bne.n	80069f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	f043 0204 	orr.w	r2, r3, #4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e267      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d075      	beq.n	8006b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a26:	4b88      	ldr	r3, [pc, #544]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00c      	beq.n	8006a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a32:	4b85      	ldr	r3, [pc, #532]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d112      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3e:	4b82      	ldr	r3, [pc, #520]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a4a:	d10b      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a4c:	4b7e      	ldr	r3, [pc, #504]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d05b      	beq.n	8006b10 <HAL_RCC_OscConfig+0x108>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d157      	bne.n	8006b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e242      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6c:	d106      	bne.n	8006a7c <HAL_RCC_OscConfig+0x74>
 8006a6e:	4b76      	ldr	r3, [pc, #472]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a75      	ldr	r2, [pc, #468]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	e01d      	b.n	8006ab8 <HAL_RCC_OscConfig+0xb0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x98>
 8006a86:	4b70      	ldr	r3, [pc, #448]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a6f      	ldr	r2, [pc, #444]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b6d      	ldr	r3, [pc, #436]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6c      	ldr	r2, [pc, #432]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e00b      	b.n	8006ab8 <HAL_RCC_OscConfig+0xb0>
 8006aa0:	4b69      	ldr	r3, [pc, #420]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a68      	ldr	r2, [pc, #416]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a65      	ldr	r2, [pc, #404]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac0:	f7fe fce8 	bl	8005494 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fe fce4 	bl	8005494 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	; 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e207      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ada:	4b5b      	ldr	r3, [pc, #364]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xc0>
 8006ae6:	e014      	b.n	8006b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae8:	f7fe fcd4 	bl	8005494 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fe fcd0 	bl	8005494 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	; 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e1f3      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b02:	4b51      	ldr	r3, [pc, #324]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0xe8>
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d063      	beq.n	8006be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b1e:	4b4a      	ldr	r3, [pc, #296]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b2a:	4b47      	ldr	r3, [pc, #284]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d11c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b36:	4b44      	ldr	r3, [pc, #272]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b42:	4b41      	ldr	r3, [pc, #260]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_RCC_OscConfig+0x152>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d001      	beq.n	8006b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e1c7      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4937      	ldr	r1, [pc, #220]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b6e:	e03a      	b.n	8006be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d020      	beq.n	8006bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b78:	4b34      	ldr	r3, [pc, #208]	; (8006c4c <HAL_RCC_OscConfig+0x244>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7e:	f7fe fc89 	bl	8005494 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b86:	f7fe fc85 	bl	8005494 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e1a8      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f0      	beq.n	8006b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba4:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4925      	ldr	r1, [pc, #148]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	600b      	str	r3, [r1, #0]
 8006bb8:	e015      	b.n	8006be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bba:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <HAL_RCC_OscConfig+0x244>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fe fc68 	bl	8005494 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc8:	f7fe fc64 	bl	8005494 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e187      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bda:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d036      	beq.n	8006c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <HAL_RCC_OscConfig+0x248>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c00:	f7fe fc48 	bl	8005494 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fe fc44 	bl	8005494 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e167      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x200>
 8006c26:	e01b      	b.n	8006c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <HAL_RCC_OscConfig+0x248>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c2e:	f7fe fc31 	bl	8005494 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c34:	e00e      	b.n	8006c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c36:	f7fe fc2d 	bl	8005494 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d907      	bls.n	8006c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e150      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	42470000 	.word	0x42470000
 8006c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c54:	4b88      	ldr	r3, [pc, #544]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ea      	bne.n	8006c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8097 	beq.w	8006d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c72:	4b81      	ldr	r3, [pc, #516]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10f      	bne.n	8006c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	4b7d      	ldr	r3, [pc, #500]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	4a7c      	ldr	r2, [pc, #496]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c8e:	4b7a      	ldr	r3, [pc, #488]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c9e:	4b77      	ldr	r3, [pc, #476]	; (8006e7c <HAL_RCC_OscConfig+0x474>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d118      	bne.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006caa:	4b74      	ldr	r3, [pc, #464]	; (8006e7c <HAL_RCC_OscConfig+0x474>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a73      	ldr	r2, [pc, #460]	; (8006e7c <HAL_RCC_OscConfig+0x474>)
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cb6:	f7fe fbed 	bl	8005494 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fe fbe9 	bl	8005494 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e10c      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd0:	4b6a      	ldr	r3, [pc, #424]	; (8006e7c <HAL_RCC_OscConfig+0x474>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x2ea>
 8006ce4:	4b64      	ldr	r3, [pc, #400]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce8:	4a63      	ldr	r2, [pc, #396]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf0:	e01c      	b.n	8006d2c <HAL_RCC_OscConfig+0x324>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x30c>
 8006cfa:	4b5f      	ldr	r3, [pc, #380]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	4a5e      	ldr	r2, [pc, #376]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d00:	f043 0304 	orr.w	r3, r3, #4
 8006d04:	6713      	str	r3, [r2, #112]	; 0x70
 8006d06:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	4a5b      	ldr	r2, [pc, #364]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6713      	str	r3, [r2, #112]	; 0x70
 8006d12:	e00b      	b.n	8006d2c <HAL_RCC_OscConfig+0x324>
 8006d14:	4b58      	ldr	r3, [pc, #352]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d18:	4a57      	ldr	r2, [pc, #348]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d20:	4b55      	ldr	r3, [pc, #340]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	4a54      	ldr	r2, [pc, #336]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d26:	f023 0304 	bic.w	r3, r3, #4
 8006d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d34:	f7fe fbae 	bl	8005494 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3c:	f7fe fbaa 	bl	8005494 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e0cb      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d52:	4b49      	ldr	r3, [pc, #292]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ee      	beq.n	8006d3c <HAL_RCC_OscConfig+0x334>
 8006d5e:	e014      	b.n	8006d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d60:	f7fe fb98 	bl	8005494 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fe fb94 	bl	8005494 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e0b5      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d7e:	4b3e      	ldr	r3, [pc, #248]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1ee      	bne.n	8006d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d105      	bne.n	8006d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d90:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	4a38      	ldr	r2, [pc, #224]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80a1 	beq.w	8006ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006da6:	4b34      	ldr	r3, [pc, #208]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 030c 	and.w	r3, r3, #12
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d05c      	beq.n	8006e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d141      	bne.n	8006e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dba:	4b31      	ldr	r3, [pc, #196]	; (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7fe fb68 	bl	8005494 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc8:	f7fe fb64 	bl	8005494 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e087      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dda:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	019b      	lsls	r3, r3, #6
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	491b      	ldr	r1, [pc, #108]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e10:	4b1b      	ldr	r3, [pc, #108]	; (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e16:	f7fe fb3d 	bl	8005494 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e1e:	f7fe fb39 	bl	8005494 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e05c      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x416>
 8006e3c:	e054      	b.n	8006ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e3e:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e44:	f7fe fb26 	bl	8005494 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e4c:	f7fe fb22 	bl	8005494 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e045      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e5e:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <HAL_RCC_OscConfig+0x470>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f0      	bne.n	8006e4c <HAL_RCC_OscConfig+0x444>
 8006e6a:	e03d      	b.n	8006ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d107      	bne.n	8006e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e038      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	40007000 	.word	0x40007000
 8006e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e84:	4b1b      	ldr	r3, [pc, #108]	; (8006ef4 <HAL_RCC_OscConfig+0x4ec>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d028      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d121      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d11a      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d111      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800

08006ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0cc      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b68      	ldr	r3, [pc, #416]	; (80070b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d90c      	bls.n	8006f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b65      	ldr	r3, [pc, #404]	; (80070b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f22:	4b63      	ldr	r3, [pc, #396]	; (80070b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e0b8      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d020      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f4c:	4b59      	ldr	r3, [pc, #356]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4a58      	ldr	r2, [pc, #352]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f64:	4b53      	ldr	r3, [pc, #332]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4a52      	ldr	r2, [pc, #328]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f70:	4b50      	ldr	r3, [pc, #320]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	494d      	ldr	r1, [pc, #308]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d044      	beq.n	8007018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f96:	4b47      	ldr	r3, [pc, #284]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d119      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e07f      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d003      	beq.n	8006fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d107      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb6:	4b3f      	ldr	r3, [pc, #252]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e06f      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc6:	4b3b      	ldr	r3, [pc, #236]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e067      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fd6:	4b37      	ldr	r3, [pc, #220]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f023 0203 	bic.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4934      	ldr	r1, [pc, #208]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fe8:	f7fe fa54 	bl	8005494 <HAL_GetTick>
 8006fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	e00a      	b.n	8007006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff0:	f7fe fa50 	bl	8005494 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e04f      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007006:	4b2b      	ldr	r3, [pc, #172]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 020c 	and.w	r2, r3, #12
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	429a      	cmp	r2, r3
 8007016:	d1eb      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007018:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <HAL_RCC_ClockConfig+0x1b8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d20c      	bcs.n	8007040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007026:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d001      	beq.n	8007040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e032      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d008      	beq.n	800705e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800704c:	4b19      	ldr	r3, [pc, #100]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	4916      	ldr	r1, [pc, #88]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 800705a:	4313      	orrs	r3, r2
 800705c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	490e      	ldr	r1, [pc, #56]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	4313      	orrs	r3, r2
 800707c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800707e:	f000 f82d 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8007082:	4602      	mov	r2, r0
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	490a      	ldr	r1, [pc, #40]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007090:	5ccb      	ldrb	r3, [r1, r3]
 8007092:	fa22 f303 	lsr.w	r3, r2, r3
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8007098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <HAL_RCC_ClockConfig+0x1c8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe f9b4 	bl	800540c <HAL_InitTick>

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	40023c00 	.word	0x40023c00
 80070b4:	40023800 	.word	0x40023800
 80070b8:	0800c570 	.word	0x0800c570
 80070bc:	2000003c 	.word	0x2000003c
 80070c0:	20000040 	.word	0x20000040

080070c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80070c8:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <HAL_RCC_EnableCSS+0x14>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
}
 80070ce:	bf00      	nop
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	4247004c 	.word	0x4247004c

080070dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e0:	b094      	sub	sp, #80	; 0x50
 80070e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	647b      	str	r3, [r7, #68]	; 0x44
 80070e8:	2300      	movs	r3, #0
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ec:	2300      	movs	r3, #0
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070f4:	4b79      	ldr	r3, [pc, #484]	; (80072dc <HAL_RCC_GetSysClockFreq+0x200>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 030c 	and.w	r3, r3, #12
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d00d      	beq.n	800711c <HAL_RCC_GetSysClockFreq+0x40>
 8007100:	2b08      	cmp	r3, #8
 8007102:	f200 80e1 	bhi.w	80072c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x34>
 800710a:	2b04      	cmp	r3, #4
 800710c:	d003      	beq.n	8007116 <HAL_RCC_GetSysClockFreq+0x3a>
 800710e:	e0db      	b.n	80072c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007110:	4b73      	ldr	r3, [pc, #460]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007112:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007114:	e0db      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007116:	4b73      	ldr	r3, [pc, #460]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800711a:	e0d8      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800711c:	4b6f      	ldr	r3, [pc, #444]	; (80072dc <HAL_RCC_GetSysClockFreq+0x200>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007124:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007126:	4b6d      	ldr	r3, [pc, #436]	; (80072dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d063      	beq.n	80071fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007132:	4b6a      	ldr	r3, [pc, #424]	; (80072dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	099b      	lsrs	r3, r3, #6
 8007138:	2200      	movs	r2, #0
 800713a:	63bb      	str	r3, [r7, #56]	; 0x38
 800713c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007144:	633b      	str	r3, [r7, #48]	; 0x30
 8007146:	2300      	movs	r3, #0
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
 800714a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	0159      	lsls	r1, r3, #5
 800715c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007160:	0150      	lsls	r0, r2, #5
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4621      	mov	r1, r4
 8007168:	1a51      	subs	r1, r2, r1
 800716a:	6139      	str	r1, [r7, #16]
 800716c:	4629      	mov	r1, r5
 800716e:	eb63 0301 	sbc.w	r3, r3, r1
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007180:	4659      	mov	r1, fp
 8007182:	018b      	lsls	r3, r1, #6
 8007184:	4651      	mov	r1, sl
 8007186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800718a:	4651      	mov	r1, sl
 800718c:	018a      	lsls	r2, r1, #6
 800718e:	4651      	mov	r1, sl
 8007190:	ebb2 0801 	subs.w	r8, r2, r1
 8007194:	4659      	mov	r1, fp
 8007196:	eb63 0901 	sbc.w	r9, r3, r1
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ae:	4690      	mov	r8, r2
 80071b0:	4699      	mov	r9, r3
 80071b2:	4623      	mov	r3, r4
 80071b4:	eb18 0303 	adds.w	r3, r8, r3
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	462b      	mov	r3, r5
 80071bc:	eb49 0303 	adc.w	r3, r9, r3
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071ce:	4629      	mov	r1, r5
 80071d0:	024b      	lsls	r3, r1, #9
 80071d2:	4621      	mov	r1, r4
 80071d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071d8:	4621      	mov	r1, r4
 80071da:	024a      	lsls	r2, r1, #9
 80071dc:	4610      	mov	r0, r2
 80071de:	4619      	mov	r1, r3
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	2200      	movs	r2, #0
 80071e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ec:	f7f9 fd84 	bl	8000cf8 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4613      	mov	r3, r2
 80071f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f8:	e058      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fa:	4b38      	ldr	r3, [pc, #224]	; (80072dc <HAL_RCC_GetSysClockFreq+0x200>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	099b      	lsrs	r3, r3, #6
 8007200:	2200      	movs	r2, #0
 8007202:	4618      	mov	r0, r3
 8007204:	4611      	mov	r1, r2
 8007206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800720a:	623b      	str	r3, [r7, #32]
 800720c:	2300      	movs	r3, #0
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
 8007210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	f04f 0000 	mov.w	r0, #0
 800721c:	f04f 0100 	mov.w	r1, #0
 8007220:	0159      	lsls	r1, r3, #5
 8007222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007226:	0150      	lsls	r0, r2, #5
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4641      	mov	r1, r8
 800722e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007232:	4649      	mov	r1, r9
 8007234:	eb63 0b01 	sbc.w	fp, r3, r1
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800724c:	ebb2 040a 	subs.w	r4, r2, sl
 8007250:	eb63 050b 	sbc.w	r5, r3, fp
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	00eb      	lsls	r3, r5, #3
 800725e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007262:	00e2      	lsls	r2, r4, #3
 8007264:	4614      	mov	r4, r2
 8007266:	461d      	mov	r5, r3
 8007268:	4643      	mov	r3, r8
 800726a:	18e3      	adds	r3, r4, r3
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	464b      	mov	r3, r9
 8007270:	eb45 0303 	adc.w	r3, r5, r3
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007282:	4629      	mov	r1, r5
 8007284:	028b      	lsls	r3, r1, #10
 8007286:	4621      	mov	r1, r4
 8007288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800728c:	4621      	mov	r1, r4
 800728e:	028a      	lsls	r2, r1, #10
 8007290:	4610      	mov	r0, r2
 8007292:	4619      	mov	r1, r3
 8007294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007296:	2200      	movs	r2, #0
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	61fa      	str	r2, [r7, #28]
 800729c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a0:	f7f9 fd2a 	bl	8000cf8 <__aeabi_uldivmod>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4613      	mov	r3, r2
 80072aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_RCC_GetSysClockFreq+0x200>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	3301      	adds	r3, #1
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072c6:	e002      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80072ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3750      	adds	r7, #80	; 0x50
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800
 80072e0:	00f42400 	.word	0x00f42400
 80072e4:	007a1200 	.word	0x007a1200

080072e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072ec:	4b03      	ldr	r3, [pc, #12]	; (80072fc <HAL_RCC_GetHCLKFreq+0x14>)
 80072ee:	681b      	ldr	r3, [r3, #0]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	2000003c 	.word	0x2000003c

08007300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007304:	f7ff fff0 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8007308:	4602      	mov	r2, r0
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0a9b      	lsrs	r3, r3, #10
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	4903      	ldr	r1, [pc, #12]	; (8007324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007316:	5ccb      	ldrb	r3, [r1, r3]
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	0800c580 	.word	0x0800c580

08007328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800732c:	f7ff ffdc 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8007330:	4602      	mov	r2, r0
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	0b5b      	lsrs	r3, r3, #13
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	4903      	ldr	r1, [pc, #12]	; (800734c <HAL_RCC_GetPCLK2Freq+0x24>)
 800733e:	5ccb      	ldrb	r3, [r1, r3]
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40023800 	.word	0x40023800
 800734c:	0800c580 	.word	0x0800c580

08007350 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d104      	bne.n	800736a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007360:	f000 f80a 	bl	8007378 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007364:	4b03      	ldr	r3, [pc, #12]	; (8007374 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007366:	2280      	movs	r2, #128	; 0x80
 8007368:	701a      	strb	r2, [r3, #0]
  }
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40023800 	.word	0x40023800
 8007374:	4002380e 	.word	0x4002380e

08007378 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e041      	b.n	800741c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7fd ff47 	bl	8005240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f000 f9bf 	bl	8007748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	d001      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e044      	b.n	80074c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a1e      	ldr	r2, [pc, #120]	; (80074d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d018      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x6c>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007466:	d013      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x6c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00e      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x6c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a19      	ldr	r2, [pc, #100]	; (80074dc <HAL_TIM_Base_Start_IT+0xb8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d009      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x6c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x6c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d111      	bne.n	80074b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d010      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b2:	e007      	b.n	80074c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00
 80074e4:	40014000 	.word	0x40014000

080074e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d122      	bne.n	8007544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d11b      	bne.n	8007544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0202 	mvn.w	r2, #2
 8007514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f8ee 	bl	800770c <HAL_TIM_IC_CaptureCallback>
 8007530:	e005      	b.n	800753e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8e0 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8f1 	bl	8007720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b04      	cmp	r3, #4
 8007550:	d122      	bne.n	8007598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b04      	cmp	r3, #4
 800755e:	d11b      	bne.n	8007598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0204 	mvn.w	r2, #4
 8007568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8c4 	bl	800770c <HAL_TIM_IC_CaptureCallback>
 8007584:	e005      	b.n	8007592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8b6 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f8c7 	bl	8007720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b08      	cmp	r3, #8
 80075a4:	d122      	bne.n	80075ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d11b      	bne.n	80075ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0208 	mvn.w	r2, #8
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2204      	movs	r2, #4
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f89a 	bl	800770c <HAL_TIM_IC_CaptureCallback>
 80075d8:	e005      	b.n	80075e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f88c 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f89d 	bl	8007720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d122      	bne.n	8007640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b10      	cmp	r3, #16
 8007606:	d11b      	bne.n	8007640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0210 	mvn.w	r2, #16
 8007610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2208      	movs	r2, #8
 8007616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f870 	bl	800770c <HAL_TIM_IC_CaptureCallback>
 800762c:	e005      	b.n	800763a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f862 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f873 	bl	8007720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d10e      	bne.n	800766c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d107      	bne.n	800766c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0201 	mvn.w	r2, #1
 8007664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fd fc7e 	bl	8004f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007676:	2b80      	cmp	r3, #128	; 0x80
 8007678:	d10e      	bne.n	8007698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d107      	bne.n	8007698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8e2 	bl	800785c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d10e      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d107      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f838 	bl	8007734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d10e      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d107      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0220 	mvn.w	r2, #32
 80076e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8ac 	bl	8007848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a34      	ldr	r2, [pc, #208]	; (800782c <TIM_Base_SetConfig+0xe4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00f      	beq.n	8007780 <TIM_Base_SetConfig+0x38>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007766:	d00b      	beq.n	8007780 <TIM_Base_SetConfig+0x38>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a31      	ldr	r2, [pc, #196]	; (8007830 <TIM_Base_SetConfig+0xe8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d007      	beq.n	8007780 <TIM_Base_SetConfig+0x38>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a30      	ldr	r2, [pc, #192]	; (8007834 <TIM_Base_SetConfig+0xec>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_Base_SetConfig+0x38>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a2f      	ldr	r2, [pc, #188]	; (8007838 <TIM_Base_SetConfig+0xf0>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d108      	bne.n	8007792 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a25      	ldr	r2, [pc, #148]	; (800782c <TIM_Base_SetConfig+0xe4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01b      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a0:	d017      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a22      	ldr	r2, [pc, #136]	; (8007830 <TIM_Base_SetConfig+0xe8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d013      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a21      	ldr	r2, [pc, #132]	; (8007834 <TIM_Base_SetConfig+0xec>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00f      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a20      	ldr	r2, [pc, #128]	; (8007838 <TIM_Base_SetConfig+0xf0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00b      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a1f      	ldr	r2, [pc, #124]	; (800783c <TIM_Base_SetConfig+0xf4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d007      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a1e      	ldr	r2, [pc, #120]	; (8007840 <TIM_Base_SetConfig+0xf8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_Base_SetConfig+0x8a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <TIM_Base_SetConfig+0xfc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d108      	bne.n	80077e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a08      	ldr	r2, [pc, #32]	; (800782c <TIM_Base_SetConfig+0xe4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d103      	bne.n	8007818 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	615a      	str	r2, [r3, #20]
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40010000 	.word	0x40010000
 8007830:	40000400 	.word	0x40000400
 8007834:	40000800 	.word	0x40000800
 8007838:	40000c00 	.word	0x40000c00
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800

08007848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e03f      	b.n	8007902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d106      	bne.n	800789c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fd fd24 	bl	80052e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2224      	movs	r2, #36	; 0x24
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f929 	bl	8007b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b08a      	sub	sp, #40	; 0x28
 800790e:	af02      	add	r7, sp, #8
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b20      	cmp	r3, #32
 8007928:	d17c      	bne.n	8007a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_UART_Transmit+0x2c>
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e075      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_UART_Transmit+0x3e>
 8007944:	2302      	movs	r3, #2
 8007946:	e06e      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2221      	movs	r2, #33	; 0x21
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800795e:	f7fd fd99 	bl	8005494 <HAL_GetTick>
 8007962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007978:	d108      	bne.n	800798c <HAL_UART_Transmit+0x82>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e003      	b.n	8007994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800799c:	e02a      	b.n	80079f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	2180      	movs	r1, #128	; 0x80
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f840 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e036      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	3302      	adds	r3, #2
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	e007      	b.n	80079e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1cf      	bne.n	800799e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	2140      	movs	r1, #64	; 0x40
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f810 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e006      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e000      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
  }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b090      	sub	sp, #64	; 0x40
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	603b      	str	r3, [r7, #0]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a3e:	e050      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a46:	d04c      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8007a4e:	f7fd fd21 	bl	8005494 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d241      	bcs.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a7e:	637a      	str	r2, [r7, #52]	; 0x34
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e5      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3314      	adds	r3, #20
 8007a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
 8007aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab2:	623a      	str	r2, [r7, #32]
 8007ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	69f9      	ldr	r1, [r7, #28]
 8007ab8:	6a3a      	ldr	r2, [r7, #32]
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e5      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e00f      	b.n	8007b02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4013      	ands	r3, r2
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	bf0c      	ite	eq
 8007af2:	2301      	moveq	r3, #1
 8007af4:	2300      	movne	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d09f      	beq.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3740      	adds	r7, #64	; 0x40
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b10:	b0c0      	sub	sp, #256	; 0x100
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b28:	68d9      	ldr	r1, [r3, #12]
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	ea40 0301 	orr.w	r3, r0, r1
 8007b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b64:	f021 010c 	bic.w	r1, r1, #12
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b72:	430b      	orrs	r3, r1
 8007b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b86:	6999      	ldr	r1, [r3, #24]
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	ea40 0301 	orr.w	r3, r0, r1
 8007b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b8f      	ldr	r3, [pc, #572]	; (8007dd8 <UART_SetConfig+0x2cc>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d005      	beq.n	8007bac <UART_SetConfig+0xa0>
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4b8d      	ldr	r3, [pc, #564]	; (8007ddc <UART_SetConfig+0x2d0>)
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d104      	bne.n	8007bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bac:	f7ff fbbc 	bl	8007328 <HAL_RCC_GetPCLK2Freq>
 8007bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007bb4:	e003      	b.n	8007bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bb6:	f7ff fba3 	bl	8007300 <HAL_RCC_GetPCLK1Freq>
 8007bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc8:	f040 810c 	bne.w	8007de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	1891      	adds	r1, r2, r2
 8007be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007be6:	415b      	adcs	r3, r3
 8007be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bee:	4621      	mov	r1, r4
 8007bf0:	eb12 0801 	adds.w	r8, r2, r1
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	eb43 0901 	adc.w	r9, r3, r1
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c0e:	4690      	mov	r8, r2
 8007c10:	4699      	mov	r9, r3
 8007c12:	4623      	mov	r3, r4
 8007c14:	eb18 0303 	adds.w	r3, r8, r3
 8007c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	eb49 0303 	adc.w	r3, r9, r3
 8007c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	18db      	adds	r3, r3, r3
 8007c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c40:	4613      	mov	r3, r2
 8007c42:	eb42 0303 	adc.w	r3, r2, r3
 8007c46:	657b      	str	r3, [r7, #84]	; 0x54
 8007c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c50:	f7f9 f852 	bl	8000cf8 <__aeabi_uldivmod>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4b61      	ldr	r3, [pc, #388]	; (8007de0 <UART_SetConfig+0x2d4>)
 8007c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	011c      	lsls	r4, r3, #4
 8007c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	1891      	adds	r1, r2, r2
 8007c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c7c:	415b      	adcs	r3, r3
 8007c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c84:	4641      	mov	r1, r8
 8007c86:	eb12 0a01 	adds.w	sl, r2, r1
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ca4:	4692      	mov	sl, r2
 8007ca6:	469b      	mov	fp, r3
 8007ca8:	4643      	mov	r3, r8
 8007caa:	eb1a 0303 	adds.w	r3, sl, r3
 8007cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8007cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	18db      	adds	r3, r3, r3
 8007cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	eb42 0303 	adc.w	r3, r2, r3
 8007cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ce6:	f7f9 f807 	bl	8000cf8 <__aeabi_uldivmod>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	; (8007de0 <UART_SetConfig+0x2d4>)
 8007cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	2264      	movs	r2, #100	; 0x64
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	1acb      	subs	r3, r1, r3
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d06:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <UART_SetConfig+0x2d4>)
 8007d08:	fba3 2302 	umull	r2, r3, r3, r2
 8007d0c:	095b      	lsrs	r3, r3, #5
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d14:	441c      	add	r4, r3
 8007d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d28:	4642      	mov	r2, r8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	1891      	adds	r1, r2, r2
 8007d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d30:	415b      	adcs	r3, r3
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d38:	4641      	mov	r1, r8
 8007d3a:	1851      	adds	r1, r2, r1
 8007d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d3e:	4649      	mov	r1, r9
 8007d40:	414b      	adcs	r3, r1
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d50:	4659      	mov	r1, fp
 8007d52:	00cb      	lsls	r3, r1, #3
 8007d54:	4651      	mov	r1, sl
 8007d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d5a:	4651      	mov	r1, sl
 8007d5c:	00ca      	lsls	r2, r1, #3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	4642      	mov	r2, r8
 8007d66:	189b      	adds	r3, r3, r2
 8007d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	460a      	mov	r2, r1
 8007d70:	eb42 0303 	adc.w	r3, r2, r3
 8007d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	18db      	adds	r3, r3, r3
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d92:	4613      	mov	r3, r2
 8007d94:	eb42 0303 	adc.w	r3, r2, r3
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007da2:	f7f8 ffa9 	bl	8000cf8 <__aeabi_uldivmod>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4b0d      	ldr	r3, [pc, #52]	; (8007de0 <UART_SetConfig+0x2d4>)
 8007dac:	fba3 1302 	umull	r1, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	2164      	movs	r1, #100	; 0x64
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	3332      	adds	r3, #50	; 0x32
 8007dbe:	4a08      	ldr	r2, [pc, #32]	; (8007de0 <UART_SetConfig+0x2d4>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f003 0207 	and.w	r2, r3, #7
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4422      	add	r2, r4
 8007dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dd4:	e105      	b.n	8007fe2 <UART_SetConfig+0x4d6>
 8007dd6:	bf00      	nop
 8007dd8:	40011000 	.word	0x40011000
 8007ddc:	40011400 	.word	0x40011400
 8007de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	1891      	adds	r1, r2, r2
 8007dfc:	6239      	str	r1, [r7, #32]
 8007dfe:	415b      	adcs	r3, r3
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
 8007e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e06:	4641      	mov	r1, r8
 8007e08:	1854      	adds	r4, r2, r1
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	eb43 0501 	adc.w	r5, r3, r1
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	00eb      	lsls	r3, r5, #3
 8007e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e1e:	00e2      	lsls	r2, r4, #3
 8007e20:	4614      	mov	r4, r2
 8007e22:	461d      	mov	r5, r3
 8007e24:	4643      	mov	r3, r8
 8007e26:	18e3      	adds	r3, r4, r3
 8007e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	eb45 0303 	adc.w	r3, r5, r3
 8007e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e52:	4629      	mov	r1, r5
 8007e54:	008b      	lsls	r3, r1, #2
 8007e56:	4621      	mov	r1, r4
 8007e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	008a      	lsls	r2, r1, #2
 8007e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e64:	f7f8 ff48 	bl	8000cf8 <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4b60      	ldr	r3, [pc, #384]	; (8007ff0 <UART_SetConfig+0x4e4>)
 8007e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	011c      	lsls	r4, r3, #4
 8007e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	1891      	adds	r1, r2, r2
 8007e8e:	61b9      	str	r1, [r7, #24]
 8007e90:	415b      	adcs	r3, r3
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e98:	4641      	mov	r1, r8
 8007e9a:	1851      	adds	r1, r2, r1
 8007e9c:	6139      	str	r1, [r7, #16]
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	414b      	adcs	r3, r1
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	00cb      	lsls	r3, r1, #3
 8007eb4:	4651      	mov	r1, sl
 8007eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eba:	4651      	mov	r1, sl
 8007ebc:	00ca      	lsls	r2, r1, #3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	189b      	adds	r3, r3, r2
 8007ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ecc:	464b      	mov	r3, r9
 8007ece:	460a      	mov	r2, r1
 8007ed0:	eb42 0303 	adc.w	r3, r2, r3
 8007ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	008b      	lsls	r3, r1, #2
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007efa:	4641      	mov	r1, r8
 8007efc:	008a      	lsls	r2, r1, #2
 8007efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f02:	f7f8 fef9 	bl	8000cf8 <__aeabi_uldivmod>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4b39      	ldr	r3, [pc, #228]	; (8007ff0 <UART_SetConfig+0x4e4>)
 8007f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f10:	095b      	lsrs	r3, r3, #5
 8007f12:	2164      	movs	r1, #100	; 0x64
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	3332      	adds	r3, #50	; 0x32
 8007f1e:	4a34      	ldr	r2, [pc, #208]	; (8007ff0 <UART_SetConfig+0x4e4>)
 8007f20:	fba2 2303 	umull	r2, r3, r2, r3
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f2a:	441c      	add	r4, r3
 8007f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f30:	2200      	movs	r2, #0
 8007f32:	673b      	str	r3, [r7, #112]	; 0x70
 8007f34:	677a      	str	r2, [r7, #116]	; 0x74
 8007f36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	1891      	adds	r1, r2, r2
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	415b      	adcs	r3, r3
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	1851      	adds	r1, r2, r1
 8007f4e:	6039      	str	r1, [r7, #0]
 8007f50:	4649      	mov	r1, r9
 8007f52:	414b      	adcs	r3, r1
 8007f54:	607b      	str	r3, [r7, #4]
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f62:	4659      	mov	r1, fp
 8007f64:	00cb      	lsls	r3, r1, #3
 8007f66:	4651      	mov	r1, sl
 8007f68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	00ca      	lsls	r2, r1, #3
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	4642      	mov	r2, r8
 8007f78:	189b      	adds	r3, r3, r2
 8007f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	460a      	mov	r2, r1
 8007f80:	eb42 0303 	adc.w	r3, r2, r3
 8007f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f90:	667a      	str	r2, [r7, #100]	; 0x64
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	008b      	lsls	r3, r1, #2
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fa8:	4641      	mov	r1, r8
 8007faa:	008a      	lsls	r2, r1, #2
 8007fac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fb0:	f7f8 fea2 	bl	8000cf8 <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <UART_SetConfig+0x4e4>)
 8007fba:	fba3 1302 	umull	r1, r3, r3, r2
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	2164      	movs	r1, #100	; 0x64
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	3332      	adds	r3, #50	; 0x32
 8007fcc:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <UART_SetConfig+0x4e4>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4422      	add	r2, r4
 8007fe0:	609a      	str	r2, [r3, #8]
}
 8007fe2:	bf00      	nop
 8007fe4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fee:	bf00      	nop
 8007ff0:	51eb851f 	.word	0x51eb851f

08007ff4 <asin>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	ed2d 8b02 	vpush	{d8}
 8007ffa:	ec55 4b10 	vmov	r4, r5, d0
 8007ffe:	f000 f85f 	bl	80080c0 <__ieee754_asin>
 8008002:	4622      	mov	r2, r4
 8008004:	462b      	mov	r3, r5
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	eeb0 8a40 	vmov.f32	s16, s0
 800800e:	eef0 8a60 	vmov.f32	s17, s1
 8008012:	f7f8 fd93 	bl	8000b3c <__aeabi_dcmpun>
 8008016:	b9a8      	cbnz	r0, 8008044 <asin+0x50>
 8008018:	ec45 4b10 	vmov	d0, r4, r5
 800801c:	f000 fe94 	bl	8008d48 <fabs>
 8008020:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <asin+0x60>)
 8008022:	ec51 0b10 	vmov	r0, r1, d0
 8008026:	2200      	movs	r2, #0
 8008028:	f7f8 fd7e 	bl	8000b28 <__aeabi_dcmpgt>
 800802c:	b150      	cbz	r0, 8008044 <asin+0x50>
 800802e:	f000 fe9f 	bl	8008d70 <__errno>
 8008032:	ecbd 8b02 	vpop	{d8}
 8008036:	2321      	movs	r3, #33	; 0x21
 8008038:	6003      	str	r3, [r0, #0]
 800803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800803e:	4806      	ldr	r0, [pc, #24]	; (8008058 <asin+0x64>)
 8008040:	f000 be8e 	b.w	8008d60 <nan>
 8008044:	eeb0 0a48 	vmov.f32	s0, s16
 8008048:	eef0 0a68 	vmov.f32	s1, s17
 800804c:	ecbd 8b02 	vpop	{d8}
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	bf00      	nop
 8008054:	3ff00000 	.word	0x3ff00000
 8008058:	0800c8d8 	.word	0x0800c8d8

0800805c <atan2>:
 800805c:	f000 ba44 	b.w	80084e8 <__ieee754_atan2>

08008060 <fmod>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	ed2d 8b02 	vpush	{d8}
 8008066:	ec57 6b10 	vmov	r6, r7, d0
 800806a:	ec55 4b11 	vmov	r4, r5, d1
 800806e:	f000 fb05 	bl	800867c <__ieee754_fmod>
 8008072:	4622      	mov	r2, r4
 8008074:	462b      	mov	r3, r5
 8008076:	4630      	mov	r0, r6
 8008078:	4639      	mov	r1, r7
 800807a:	eeb0 8a40 	vmov.f32	s16, s0
 800807e:	eef0 8a60 	vmov.f32	s17, s1
 8008082:	f7f8 fd5b 	bl	8000b3c <__aeabi_dcmpun>
 8008086:	b990      	cbnz	r0, 80080ae <fmod+0x4e>
 8008088:	2200      	movs	r2, #0
 800808a:	2300      	movs	r3, #0
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8008094:	b158      	cbz	r0, 80080ae <fmod+0x4e>
 8008096:	f000 fe6b 	bl	8008d70 <__errno>
 800809a:	2321      	movs	r3, #33	; 0x21
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	2200      	movs	r2, #0
 80080a0:	2300      	movs	r3, #0
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7f8 fbd9 	bl	800085c <__aeabi_ddiv>
 80080aa:	ec41 0b18 	vmov	d8, r0, r1
 80080ae:	eeb0 0a48 	vmov.f32	s0, s16
 80080b2:	eef0 0a68 	vmov.f32	s1, s17
 80080b6:	ecbd 8b02 	vpop	{d8}
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	0000      	movs	r0, r0
	...

080080c0 <__ieee754_asin>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ed2d 8b04 	vpush	{d8-d9}
 80080c8:	ec55 4b10 	vmov	r4, r5, d0
 80080cc:	4bcc      	ldr	r3, [pc, #816]	; (8008400 <__ieee754_asin+0x340>)
 80080ce:	b083      	sub	sp, #12
 80080d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80080d4:	4598      	cmp	r8, r3
 80080d6:	9501      	str	r5, [sp, #4]
 80080d8:	dd35      	ble.n	8008146 <__ieee754_asin+0x86>
 80080da:	ee10 3a10 	vmov	r3, s0
 80080de:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80080e2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80080e6:	ea58 0303 	orrs.w	r3, r8, r3
 80080ea:	d117      	bne.n	800811c <__ieee754_asin+0x5c>
 80080ec:	a3aa      	add	r3, pc, #680	; (adr r3, 8008398 <__ieee754_asin+0x2d8>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	ee10 0a10 	vmov	r0, s0
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 fa86 	bl	8000608 <__aeabi_dmul>
 80080fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80083a0 <__ieee754_asin+0x2e0>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fa7d 	bl	8000608 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 f8c1 	bl	800029c <__adddf3>
 800811a:	e00b      	b.n	8008134 <__ieee754_asin+0x74>
 800811c:	ee10 2a10 	vmov	r2, s0
 8008120:	462b      	mov	r3, r5
 8008122:	ee10 0a10 	vmov	r0, s0
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 f8b6 	bl	8000298 <__aeabi_dsub>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	f7f8 fb94 	bl	800085c <__aeabi_ddiv>
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	ec45 4b10 	vmov	d0, r4, r5
 800813c:	b003      	add	sp, #12
 800813e:	ecbd 8b04 	vpop	{d8-d9}
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	4baf      	ldr	r3, [pc, #700]	; (8008404 <__ieee754_asin+0x344>)
 8008148:	4598      	cmp	r8, r3
 800814a:	dc11      	bgt.n	8008170 <__ieee754_asin+0xb0>
 800814c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008150:	f280 80ae 	bge.w	80082b0 <__ieee754_asin+0x1f0>
 8008154:	a394      	add	r3, pc, #592	; (adr r3, 80083a8 <__ieee754_asin+0x2e8>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	ee10 0a10 	vmov	r0, s0
 800815e:	4629      	mov	r1, r5
 8008160:	f7f8 f89c 	bl	800029c <__adddf3>
 8008164:	4ba8      	ldr	r3, [pc, #672]	; (8008408 <__ieee754_asin+0x348>)
 8008166:	2200      	movs	r2, #0
 8008168:	f7f8 fcde 	bl	8000b28 <__aeabi_dcmpgt>
 800816c:	2800      	cmp	r0, #0
 800816e:	d1e3      	bne.n	8008138 <__ieee754_asin+0x78>
 8008170:	ec45 4b10 	vmov	d0, r4, r5
 8008174:	f000 fde8 	bl	8008d48 <fabs>
 8008178:	49a3      	ldr	r1, [pc, #652]	; (8008408 <__ieee754_asin+0x348>)
 800817a:	ec53 2b10 	vmov	r2, r3, d0
 800817e:	2000      	movs	r0, #0
 8008180:	f7f8 f88a 	bl	8000298 <__aeabi_dsub>
 8008184:	4ba1      	ldr	r3, [pc, #644]	; (800840c <__ieee754_asin+0x34c>)
 8008186:	2200      	movs	r2, #0
 8008188:	f7f8 fa3e 	bl	8000608 <__aeabi_dmul>
 800818c:	a388      	add	r3, pc, #544	; (adr r3, 80083b0 <__ieee754_asin+0x2f0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	4604      	mov	r4, r0
 8008194:	460d      	mov	r5, r1
 8008196:	f7f8 fa37 	bl	8000608 <__aeabi_dmul>
 800819a:	a387      	add	r3, pc, #540	; (adr r3, 80083b8 <__ieee754_asin+0x2f8>)
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f7f8 f87c 	bl	800029c <__adddf3>
 80081a4:	4622      	mov	r2, r4
 80081a6:	462b      	mov	r3, r5
 80081a8:	f7f8 fa2e 	bl	8000608 <__aeabi_dmul>
 80081ac:	a384      	add	r3, pc, #528	; (adr r3, 80083c0 <__ieee754_asin+0x300>)
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	f7f8 f871 	bl	8000298 <__aeabi_dsub>
 80081b6:	4622      	mov	r2, r4
 80081b8:	462b      	mov	r3, r5
 80081ba:	f7f8 fa25 	bl	8000608 <__aeabi_dmul>
 80081be:	a382      	add	r3, pc, #520	; (adr r3, 80083c8 <__ieee754_asin+0x308>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f7f8 f86a 	bl	800029c <__adddf3>
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	f7f8 fa1c 	bl	8000608 <__aeabi_dmul>
 80081d0:	a37f      	add	r3, pc, #508	; (adr r3, 80083d0 <__ieee754_asin+0x310>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 f85f 	bl	8000298 <__aeabi_dsub>
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	f7f8 fa13 	bl	8000608 <__aeabi_dmul>
 80081e2:	a37d      	add	r3, pc, #500	; (adr r3, 80083d8 <__ieee754_asin+0x318>)
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f7f8 f858 	bl	800029c <__adddf3>
 80081ec:	4622      	mov	r2, r4
 80081ee:	462b      	mov	r3, r5
 80081f0:	f7f8 fa0a 	bl	8000608 <__aeabi_dmul>
 80081f4:	a37a      	add	r3, pc, #488	; (adr r3, 80083e0 <__ieee754_asin+0x320>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	ec41 0b18 	vmov	d8, r0, r1
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 fa01 	bl	8000608 <__aeabi_dmul>
 8008206:	a378      	add	r3, pc, #480	; (adr r3, 80083e8 <__ieee754_asin+0x328>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f844 	bl	8000298 <__aeabi_dsub>
 8008210:	4622      	mov	r2, r4
 8008212:	462b      	mov	r3, r5
 8008214:	f7f8 f9f8 	bl	8000608 <__aeabi_dmul>
 8008218:	a375      	add	r3, pc, #468	; (adr r3, 80083f0 <__ieee754_asin+0x330>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f8 f83d 	bl	800029c <__adddf3>
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	f7f8 f9ef 	bl	8000608 <__aeabi_dmul>
 800822a:	a373      	add	r3, pc, #460	; (adr r3, 80083f8 <__ieee754_asin+0x338>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f832 	bl	8000298 <__aeabi_dsub>
 8008234:	4622      	mov	r2, r4
 8008236:	462b      	mov	r3, r5
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	4b72      	ldr	r3, [pc, #456]	; (8008408 <__ieee754_asin+0x348>)
 800823e:	2200      	movs	r2, #0
 8008240:	f7f8 f82c 	bl	800029c <__adddf3>
 8008244:	ec45 4b10 	vmov	d0, r4, r5
 8008248:	4606      	mov	r6, r0
 800824a:	460f      	mov	r7, r1
 800824c:	f000 fb28 	bl	80088a0 <__ieee754_sqrt>
 8008250:	4b6f      	ldr	r3, [pc, #444]	; (8008410 <__ieee754_asin+0x350>)
 8008252:	4598      	cmp	r8, r3
 8008254:	ec5b ab10 	vmov	sl, fp, d0
 8008258:	f340 80dc 	ble.w	8008414 <__ieee754_asin+0x354>
 800825c:	4632      	mov	r2, r6
 800825e:	463b      	mov	r3, r7
 8008260:	ec51 0b18 	vmov	r0, r1, d8
 8008264:	f7f8 fafa 	bl	800085c <__aeabi_ddiv>
 8008268:	4652      	mov	r2, sl
 800826a:	465b      	mov	r3, fp
 800826c:	f7f8 f9cc 	bl	8000608 <__aeabi_dmul>
 8008270:	4652      	mov	r2, sl
 8008272:	465b      	mov	r3, fp
 8008274:	f7f8 f812 	bl	800029c <__adddf3>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	f7f8 f80e 	bl	800029c <__adddf3>
 8008280:	a347      	add	r3, pc, #284	; (adr r3, 80083a0 <__ieee754_asin+0x2e0>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f8 f807 	bl	8000298 <__aeabi_dsub>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	a142      	add	r1, pc, #264	; (adr r1, 8008398 <__ieee754_asin+0x2d8>)
 8008290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008294:	f7f8 f800 	bl	8000298 <__aeabi_dsub>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfdc      	itt	le
 800829e:	4602      	movle	r2, r0
 80082a0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80082a4:	4604      	mov	r4, r0
 80082a6:	460d      	mov	r5, r1
 80082a8:	bfdc      	itt	le
 80082aa:	4614      	movle	r4, r2
 80082ac:	461d      	movle	r5, r3
 80082ae:	e743      	b.n	8008138 <__ieee754_asin+0x78>
 80082b0:	ee10 2a10 	vmov	r2, s0
 80082b4:	ee10 0a10 	vmov	r0, s0
 80082b8:	462b      	mov	r3, r5
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7f8 f9a4 	bl	8000608 <__aeabi_dmul>
 80082c0:	a33b      	add	r3, pc, #236	; (adr r3, 80083b0 <__ieee754_asin+0x2f0>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	f7f8 f99d 	bl	8000608 <__aeabi_dmul>
 80082ce:	a33a      	add	r3, pc, #232	; (adr r3, 80083b8 <__ieee754_asin+0x2f8>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f7 ffe2 	bl	800029c <__adddf3>
 80082d8:	4632      	mov	r2, r6
 80082da:	463b      	mov	r3, r7
 80082dc:	f7f8 f994 	bl	8000608 <__aeabi_dmul>
 80082e0:	a337      	add	r3, pc, #220	; (adr r3, 80083c0 <__ieee754_asin+0x300>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ffd7 	bl	8000298 <__aeabi_dsub>
 80082ea:	4632      	mov	r2, r6
 80082ec:	463b      	mov	r3, r7
 80082ee:	f7f8 f98b 	bl	8000608 <__aeabi_dmul>
 80082f2:	a335      	add	r3, pc, #212	; (adr r3, 80083c8 <__ieee754_asin+0x308>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ffd0 	bl	800029c <__adddf3>
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	f7f8 f982 	bl	8000608 <__aeabi_dmul>
 8008304:	a332      	add	r3, pc, #200	; (adr r3, 80083d0 <__ieee754_asin+0x310>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffc5 	bl	8000298 <__aeabi_dsub>
 800830e:	4632      	mov	r2, r6
 8008310:	463b      	mov	r3, r7
 8008312:	f7f8 f979 	bl	8000608 <__aeabi_dmul>
 8008316:	a330      	add	r3, pc, #192	; (adr r3, 80083d8 <__ieee754_asin+0x318>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f7 ffbe 	bl	800029c <__adddf3>
 8008320:	4632      	mov	r2, r6
 8008322:	463b      	mov	r3, r7
 8008324:	f7f8 f970 	bl	8000608 <__aeabi_dmul>
 8008328:	a32d      	add	r3, pc, #180	; (adr r3, 80083e0 <__ieee754_asin+0x320>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	4680      	mov	r8, r0
 8008330:	4689      	mov	r9, r1
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f8 f967 	bl	8000608 <__aeabi_dmul>
 800833a:	a32b      	add	r3, pc, #172	; (adr r3, 80083e8 <__ieee754_asin+0x328>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f7f7 ffaa 	bl	8000298 <__aeabi_dsub>
 8008344:	4632      	mov	r2, r6
 8008346:	463b      	mov	r3, r7
 8008348:	f7f8 f95e 	bl	8000608 <__aeabi_dmul>
 800834c:	a328      	add	r3, pc, #160	; (adr r3, 80083f0 <__ieee754_asin+0x330>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f7 ffa3 	bl	800029c <__adddf3>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	f7f8 f955 	bl	8000608 <__aeabi_dmul>
 800835e:	a326      	add	r3, pc, #152	; (adr r3, 80083f8 <__ieee754_asin+0x338>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f7 ff98 	bl	8000298 <__aeabi_dsub>
 8008368:	4632      	mov	r2, r6
 800836a:	463b      	mov	r3, r7
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	4b25      	ldr	r3, [pc, #148]	; (8008408 <__ieee754_asin+0x348>)
 8008372:	2200      	movs	r2, #0
 8008374:	f7f7 ff92 	bl	800029c <__adddf3>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4640      	mov	r0, r8
 800837e:	4649      	mov	r1, r9
 8008380:	f7f8 fa6c 	bl	800085c <__aeabi_ddiv>
 8008384:	4622      	mov	r2, r4
 8008386:	462b      	mov	r3, r5
 8008388:	f7f8 f93e 	bl	8000608 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4620      	mov	r0, r4
 8008392:	4629      	mov	r1, r5
 8008394:	e6bf      	b.n	8008116 <__ieee754_asin+0x56>
 8008396:	bf00      	nop
 8008398:	54442d18 	.word	0x54442d18
 800839c:	3ff921fb 	.word	0x3ff921fb
 80083a0:	33145c07 	.word	0x33145c07
 80083a4:	3c91a626 	.word	0x3c91a626
 80083a8:	8800759c 	.word	0x8800759c
 80083ac:	7e37e43c 	.word	0x7e37e43c
 80083b0:	0dfdf709 	.word	0x0dfdf709
 80083b4:	3f023de1 	.word	0x3f023de1
 80083b8:	7501b288 	.word	0x7501b288
 80083bc:	3f49efe0 	.word	0x3f49efe0
 80083c0:	b5688f3b 	.word	0xb5688f3b
 80083c4:	3fa48228 	.word	0x3fa48228
 80083c8:	0e884455 	.word	0x0e884455
 80083cc:	3fc9c155 	.word	0x3fc9c155
 80083d0:	03eb6f7d 	.word	0x03eb6f7d
 80083d4:	3fd4d612 	.word	0x3fd4d612
 80083d8:	55555555 	.word	0x55555555
 80083dc:	3fc55555 	.word	0x3fc55555
 80083e0:	b12e9282 	.word	0xb12e9282
 80083e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80083e8:	1b8d0159 	.word	0x1b8d0159
 80083ec:	3fe6066c 	.word	0x3fe6066c
 80083f0:	9c598ac8 	.word	0x9c598ac8
 80083f4:	40002ae5 	.word	0x40002ae5
 80083f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80083fc:	40033a27 	.word	0x40033a27
 8008400:	3fefffff 	.word	0x3fefffff
 8008404:	3fdfffff 	.word	0x3fdfffff
 8008408:	3ff00000 	.word	0x3ff00000
 800840c:	3fe00000 	.word	0x3fe00000
 8008410:	3fef3332 	.word	0x3fef3332
 8008414:	ee10 2a10 	vmov	r2, s0
 8008418:	ee10 0a10 	vmov	r0, s0
 800841c:	465b      	mov	r3, fp
 800841e:	4659      	mov	r1, fp
 8008420:	f7f7 ff3c 	bl	800029c <__adddf3>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	ec41 0b19 	vmov	d9, r0, r1
 800842c:	ec51 0b18 	vmov	r0, r1, d8
 8008430:	f7f8 fa14 	bl	800085c <__aeabi_ddiv>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	ec51 0b19 	vmov	r0, r1, d9
 800843c:	f7f8 f8e4 	bl	8000608 <__aeabi_dmul>
 8008440:	f04f 0800 	mov.w	r8, #0
 8008444:	4606      	mov	r6, r0
 8008446:	460f      	mov	r7, r1
 8008448:	4642      	mov	r2, r8
 800844a:	465b      	mov	r3, fp
 800844c:	4640      	mov	r0, r8
 800844e:	4659      	mov	r1, fp
 8008450:	f7f8 f8da 	bl	8000608 <__aeabi_dmul>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4620      	mov	r0, r4
 800845a:	4629      	mov	r1, r5
 800845c:	f7f7 ff1c 	bl	8000298 <__aeabi_dsub>
 8008460:	4642      	mov	r2, r8
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	465b      	mov	r3, fp
 8008468:	4650      	mov	r0, sl
 800846a:	4659      	mov	r1, fp
 800846c:	f7f7 ff16 	bl	800029c <__adddf3>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4620      	mov	r0, r4
 8008476:	4629      	mov	r1, r5
 8008478:	f7f8 f9f0 	bl	800085c <__aeabi_ddiv>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	f7f7 ff0c 	bl	800029c <__adddf3>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	a113      	add	r1, pc, #76	; (adr r1, 80084d8 <__ieee754_asin+0x418>)
 800848a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800848e:	f7f7 ff03 	bl	8000298 <__aeabi_dsub>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4630      	mov	r0, r6
 8008498:	4639      	mov	r1, r7
 800849a:	f7f7 fefd 	bl	8000298 <__aeabi_dsub>
 800849e:	4642      	mov	r2, r8
 80084a0:	4604      	mov	r4, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	465b      	mov	r3, fp
 80084a6:	4640      	mov	r0, r8
 80084a8:	4659      	mov	r1, fp
 80084aa:	f7f7 fef7 	bl	800029c <__adddf3>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	a10b      	add	r1, pc, #44	; (adr r1, 80084e0 <__ieee754_asin+0x420>)
 80084b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b8:	f7f7 feee 	bl	8000298 <__aeabi_dsub>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4620      	mov	r0, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f7 fee8 	bl	8000298 <__aeabi_dsub>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	a104      	add	r1, pc, #16	; (adr r1, 80084e0 <__ieee754_asin+0x420>)
 80084ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d2:	e6df      	b.n	8008294 <__ieee754_asin+0x1d4>
 80084d4:	f3af 8000 	nop.w
 80084d8:	33145c07 	.word	0x33145c07
 80084dc:	3c91a626 	.word	0x3c91a626
 80084e0:	54442d18 	.word	0x54442d18
 80084e4:	3fe921fb 	.word	0x3fe921fb

080084e8 <__ieee754_atan2>:
 80084e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ec:	ec57 6b11 	vmov	r6, r7, d1
 80084f0:	4273      	negs	r3, r6
 80084f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008678 <__ieee754_atan2+0x190>
 80084f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80084fa:	4333      	orrs	r3, r6
 80084fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008500:	4573      	cmp	r3, lr
 8008502:	ec51 0b10 	vmov	r0, r1, d0
 8008506:	ee11 8a10 	vmov	r8, s2
 800850a:	d80a      	bhi.n	8008522 <__ieee754_atan2+0x3a>
 800850c:	4244      	negs	r4, r0
 800850e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008512:	4304      	orrs	r4, r0
 8008514:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008518:	4574      	cmp	r4, lr
 800851a:	ee10 9a10 	vmov	r9, s0
 800851e:	468c      	mov	ip, r1
 8008520:	d907      	bls.n	8008532 <__ieee754_atan2+0x4a>
 8008522:	4632      	mov	r2, r6
 8008524:	463b      	mov	r3, r7
 8008526:	f7f7 feb9 	bl	800029c <__adddf3>
 800852a:	ec41 0b10 	vmov	d0, r0, r1
 800852e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008532:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008536:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800853a:	4334      	orrs	r4, r6
 800853c:	d103      	bne.n	8008546 <__ieee754_atan2+0x5e>
 800853e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008542:	f000 ba61 	b.w	8008a08 <atan>
 8008546:	17bc      	asrs	r4, r7, #30
 8008548:	f004 0402 	and.w	r4, r4, #2
 800854c:	ea53 0909 	orrs.w	r9, r3, r9
 8008550:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008554:	d107      	bne.n	8008566 <__ieee754_atan2+0x7e>
 8008556:	2c02      	cmp	r4, #2
 8008558:	d060      	beq.n	800861c <__ieee754_atan2+0x134>
 800855a:	2c03      	cmp	r4, #3
 800855c:	d1e5      	bne.n	800852a <__ieee754_atan2+0x42>
 800855e:	a142      	add	r1, pc, #264	; (adr r1, 8008668 <__ieee754_atan2+0x180>)
 8008560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008564:	e7e1      	b.n	800852a <__ieee754_atan2+0x42>
 8008566:	ea52 0808 	orrs.w	r8, r2, r8
 800856a:	d106      	bne.n	800857a <__ieee754_atan2+0x92>
 800856c:	f1bc 0f00 	cmp.w	ip, #0
 8008570:	da5f      	bge.n	8008632 <__ieee754_atan2+0x14a>
 8008572:	a13f      	add	r1, pc, #252	; (adr r1, 8008670 <__ieee754_atan2+0x188>)
 8008574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008578:	e7d7      	b.n	800852a <__ieee754_atan2+0x42>
 800857a:	4572      	cmp	r2, lr
 800857c:	d10f      	bne.n	800859e <__ieee754_atan2+0xb6>
 800857e:	4293      	cmp	r3, r2
 8008580:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008584:	d107      	bne.n	8008596 <__ieee754_atan2+0xae>
 8008586:	2c02      	cmp	r4, #2
 8008588:	d84c      	bhi.n	8008624 <__ieee754_atan2+0x13c>
 800858a:	4b35      	ldr	r3, [pc, #212]	; (8008660 <__ieee754_atan2+0x178>)
 800858c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008590:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008594:	e7c9      	b.n	800852a <__ieee754_atan2+0x42>
 8008596:	2c02      	cmp	r4, #2
 8008598:	d848      	bhi.n	800862c <__ieee754_atan2+0x144>
 800859a:	4b32      	ldr	r3, [pc, #200]	; (8008664 <__ieee754_atan2+0x17c>)
 800859c:	e7f6      	b.n	800858c <__ieee754_atan2+0xa4>
 800859e:	4573      	cmp	r3, lr
 80085a0:	d0e4      	beq.n	800856c <__ieee754_atan2+0x84>
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80085a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085ac:	da1e      	bge.n	80085ec <__ieee754_atan2+0x104>
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	da01      	bge.n	80085b6 <__ieee754_atan2+0xce>
 80085b2:	323c      	adds	r2, #60	; 0x3c
 80085b4:	db1e      	blt.n	80085f4 <__ieee754_atan2+0x10c>
 80085b6:	4632      	mov	r2, r6
 80085b8:	463b      	mov	r3, r7
 80085ba:	f7f8 f94f 	bl	800085c <__aeabi_ddiv>
 80085be:	ec41 0b10 	vmov	d0, r0, r1
 80085c2:	f000 fbc1 	bl	8008d48 <fabs>
 80085c6:	f000 fa1f 	bl	8008a08 <atan>
 80085ca:	ec51 0b10 	vmov	r0, r1, d0
 80085ce:	2c01      	cmp	r4, #1
 80085d0:	d013      	beq.n	80085fa <__ieee754_atan2+0x112>
 80085d2:	2c02      	cmp	r4, #2
 80085d4:	d015      	beq.n	8008602 <__ieee754_atan2+0x11a>
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	d0a7      	beq.n	800852a <__ieee754_atan2+0x42>
 80085da:	a319      	add	r3, pc, #100	; (adr r3, 8008640 <__ieee754_atan2+0x158>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 fe5a 	bl	8000298 <__aeabi_dsub>
 80085e4:	a318      	add	r3, pc, #96	; (adr r3, 8008648 <__ieee754_atan2+0x160>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	e014      	b.n	8008616 <__ieee754_atan2+0x12e>
 80085ec:	a118      	add	r1, pc, #96	; (adr r1, 8008650 <__ieee754_atan2+0x168>)
 80085ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f2:	e7ec      	b.n	80085ce <__ieee754_atan2+0xe6>
 80085f4:	2000      	movs	r0, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	e7e9      	b.n	80085ce <__ieee754_atan2+0xe6>
 80085fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085fe:	4619      	mov	r1, r3
 8008600:	e793      	b.n	800852a <__ieee754_atan2+0x42>
 8008602:	a30f      	add	r3, pc, #60	; (adr r3, 8008640 <__ieee754_atan2+0x158>)
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f7f7 fe46 	bl	8000298 <__aeabi_dsub>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	a10d      	add	r1, pc, #52	; (adr r1, 8008648 <__ieee754_atan2+0x160>)
 8008612:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	e786      	b.n	800852a <__ieee754_atan2+0x42>
 800861c:	a10a      	add	r1, pc, #40	; (adr r1, 8008648 <__ieee754_atan2+0x160>)
 800861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008622:	e782      	b.n	800852a <__ieee754_atan2+0x42>
 8008624:	a10c      	add	r1, pc, #48	; (adr r1, 8008658 <__ieee754_atan2+0x170>)
 8008626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800862a:	e77e      	b.n	800852a <__ieee754_atan2+0x42>
 800862c:	2000      	movs	r0, #0
 800862e:	2100      	movs	r1, #0
 8008630:	e77b      	b.n	800852a <__ieee754_atan2+0x42>
 8008632:	a107      	add	r1, pc, #28	; (adr r1, 8008650 <__ieee754_atan2+0x168>)
 8008634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008638:	e777      	b.n	800852a <__ieee754_atan2+0x42>
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w
 8008640:	33145c07 	.word	0x33145c07
 8008644:	3ca1a626 	.word	0x3ca1a626
 8008648:	54442d18 	.word	0x54442d18
 800864c:	400921fb 	.word	0x400921fb
 8008650:	54442d18 	.word	0x54442d18
 8008654:	3ff921fb 	.word	0x3ff921fb
 8008658:	54442d18 	.word	0x54442d18
 800865c:	3fe921fb 	.word	0x3fe921fb
 8008660:	0800c588 	.word	0x0800c588
 8008664:	0800c5a0 	.word	0x0800c5a0
 8008668:	54442d18 	.word	0x54442d18
 800866c:	c00921fb 	.word	0xc00921fb
 8008670:	54442d18 	.word	0x54442d18
 8008674:	bff921fb 	.word	0xbff921fb
 8008678:	7ff00000 	.word	0x7ff00000

0800867c <__ieee754_fmod>:
 800867c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	ec53 2b11 	vmov	r2, r3, d1
 8008684:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008688:	ea5e 0402 	orrs.w	r4, lr, r2
 800868c:	ec51 0b10 	vmov	r0, r1, d0
 8008690:	ee11 7a10 	vmov	r7, s2
 8008694:	ee11 ca10 	vmov	ip, s2
 8008698:	461e      	mov	r6, r3
 800869a:	d00d      	beq.n	80086b8 <__ieee754_fmod+0x3c>
 800869c:	4c7a      	ldr	r4, [pc, #488]	; (8008888 <__ieee754_fmod+0x20c>)
 800869e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80086a2:	45a0      	cmp	r8, r4
 80086a4:	4689      	mov	r9, r1
 80086a6:	dc07      	bgt.n	80086b8 <__ieee754_fmod+0x3c>
 80086a8:	4254      	negs	r4, r2
 80086aa:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8008894 <__ieee754_fmod+0x218>
 80086ae:	4314      	orrs	r4, r2
 80086b0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80086b4:	455c      	cmp	r4, fp
 80086b6:	d909      	bls.n	80086cc <__ieee754_fmod+0x50>
 80086b8:	f7f7 ffa6 	bl	8000608 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	f7f8 f8cc 	bl	800085c <__aeabi_ddiv>
 80086c4:	ec41 0b10 	vmov	d0, r0, r1
 80086c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	45f0      	cmp	r8, lr
 80086ce:	ee10 aa10 	vmov	sl, s0
 80086d2:	ee10 4a10 	vmov	r4, s0
 80086d6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80086da:	dc09      	bgt.n	80086f0 <__ieee754_fmod+0x74>
 80086dc:	dbf2      	blt.n	80086c4 <__ieee754_fmod+0x48>
 80086de:	4290      	cmp	r0, r2
 80086e0:	d3f0      	bcc.n	80086c4 <__ieee754_fmod+0x48>
 80086e2:	d105      	bne.n	80086f0 <__ieee754_fmod+0x74>
 80086e4:	4b69      	ldr	r3, [pc, #420]	; (800888c <__ieee754_fmod+0x210>)
 80086e6:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80086ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80086ee:	e7e9      	b.n	80086c4 <__ieee754_fmod+0x48>
 80086f0:	ea19 0f0b 	tst.w	r9, fp
 80086f4:	d14a      	bne.n	800878c <__ieee754_fmod+0x110>
 80086f6:	f1b8 0f00 	cmp.w	r8, #0
 80086fa:	d13f      	bne.n	800877c <__ieee754_fmod+0x100>
 80086fc:	4964      	ldr	r1, [pc, #400]	; (8008890 <__ieee754_fmod+0x214>)
 80086fe:	4653      	mov	r3, sl
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc38      	bgt.n	8008776 <__ieee754_fmod+0xfa>
 8008704:	4b63      	ldr	r3, [pc, #396]	; (8008894 <__ieee754_fmod+0x218>)
 8008706:	4033      	ands	r3, r6
 8008708:	2b00      	cmp	r3, #0
 800870a:	d14f      	bne.n	80087ac <__ieee754_fmod+0x130>
 800870c:	f1be 0f00 	cmp.w	lr, #0
 8008710:	d144      	bne.n	800879c <__ieee754_fmod+0x120>
 8008712:	4a5f      	ldr	r2, [pc, #380]	; (8008890 <__ieee754_fmod+0x214>)
 8008714:	463b      	mov	r3, r7
 8008716:	2b00      	cmp	r3, #0
 8008718:	dc3d      	bgt.n	8008796 <__ieee754_fmod+0x11a>
 800871a:	4b5f      	ldr	r3, [pc, #380]	; (8008898 <__ieee754_fmod+0x21c>)
 800871c:	4299      	cmp	r1, r3
 800871e:	db4a      	blt.n	80087b6 <__ieee754_fmod+0x13a>
 8008720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008728:	485b      	ldr	r0, [pc, #364]	; (8008898 <__ieee754_fmod+0x21c>)
 800872a:	4282      	cmp	r2, r0
 800872c:	db57      	blt.n	80087de <__ieee754_fmod+0x162>
 800872e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008732:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008736:	1a89      	subs	r1, r1, r2
 8008738:	1b98      	subs	r0, r3, r6
 800873a:	eba4 070c 	sub.w	r7, r4, ip
 800873e:	2900      	cmp	r1, #0
 8008740:	d164      	bne.n	800880c <__ieee754_fmod+0x190>
 8008742:	4564      	cmp	r4, ip
 8008744:	bf38      	it	cc
 8008746:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800874a:	2800      	cmp	r0, #0
 800874c:	bfa4      	itt	ge
 800874e:	463c      	movge	r4, r7
 8008750:	4603      	movge	r3, r0
 8008752:	ea53 0104 	orrs.w	r1, r3, r4
 8008756:	d0c5      	beq.n	80086e4 <__ieee754_fmod+0x68>
 8008758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875c:	db6b      	blt.n	8008836 <__ieee754_fmod+0x1ba>
 800875e:	494e      	ldr	r1, [pc, #312]	; (8008898 <__ieee754_fmod+0x21c>)
 8008760:	428a      	cmp	r2, r1
 8008762:	db6e      	blt.n	8008842 <__ieee754_fmod+0x1c6>
 8008764:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008768:	431d      	orrs	r5, r3
 800876a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800876e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8008772:	4620      	mov	r0, r4
 8008774:	e7a6      	b.n	80086c4 <__ieee754_fmod+0x48>
 8008776:	3901      	subs	r1, #1
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	e7c1      	b.n	8008700 <__ieee754_fmod+0x84>
 800877c:	4946      	ldr	r1, [pc, #280]	; (8008898 <__ieee754_fmod+0x21c>)
 800877e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008782:	2b00      	cmp	r3, #0
 8008784:	ddbe      	ble.n	8008704 <__ieee754_fmod+0x88>
 8008786:	3901      	subs	r1, #1
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	e7fa      	b.n	8008782 <__ieee754_fmod+0x106>
 800878c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008790:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008794:	e7b6      	b.n	8008704 <__ieee754_fmod+0x88>
 8008796:	3a01      	subs	r2, #1
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	e7bc      	b.n	8008716 <__ieee754_fmod+0x9a>
 800879c:	4a3e      	ldr	r2, [pc, #248]	; (8008898 <__ieee754_fmod+0x21c>)
 800879e:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	ddb9      	ble.n	800871a <__ieee754_fmod+0x9e>
 80087a6:	3a01      	subs	r2, #1
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	e7fa      	b.n	80087a2 <__ieee754_fmod+0x126>
 80087ac:	ea4f 522e 	mov.w	r2, lr, asr #20
 80087b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80087b4:	e7b1      	b.n	800871a <__ieee754_fmod+0x9e>
 80087b6:	1a5c      	subs	r4, r3, r1
 80087b8:	2c1f      	cmp	r4, #31
 80087ba:	dc0a      	bgt.n	80087d2 <__ieee754_fmod+0x156>
 80087bc:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80087c0:	fa08 f804 	lsl.w	r8, r8, r4
 80087c4:	fa2a f303 	lsr.w	r3, sl, r3
 80087c8:	ea43 0308 	orr.w	r3, r3, r8
 80087cc:	fa0a f404 	lsl.w	r4, sl, r4
 80087d0:	e7aa      	b.n	8008728 <__ieee754_fmod+0xac>
 80087d2:	4b32      	ldr	r3, [pc, #200]	; (800889c <__ieee754_fmod+0x220>)
 80087d4:	1a5b      	subs	r3, r3, r1
 80087d6:	fa0a f303 	lsl.w	r3, sl, r3
 80087da:	2400      	movs	r4, #0
 80087dc:	e7a4      	b.n	8008728 <__ieee754_fmod+0xac>
 80087de:	eba0 0c02 	sub.w	ip, r0, r2
 80087e2:	f1bc 0f1f 	cmp.w	ip, #31
 80087e6:	dc0a      	bgt.n	80087fe <__ieee754_fmod+0x182>
 80087e8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80087ec:	fa0e fe0c 	lsl.w	lr, lr, ip
 80087f0:	fa27 f606 	lsr.w	r6, r7, r6
 80087f4:	ea46 060e 	orr.w	r6, r6, lr
 80087f8:	fa07 fc0c 	lsl.w	ip, r7, ip
 80087fc:	e79b      	b.n	8008736 <__ieee754_fmod+0xba>
 80087fe:	4e27      	ldr	r6, [pc, #156]	; (800889c <__ieee754_fmod+0x220>)
 8008800:	1ab6      	subs	r6, r6, r2
 8008802:	fa07 f606 	lsl.w	r6, r7, r6
 8008806:	f04f 0c00 	mov.w	ip, #0
 800880a:	e794      	b.n	8008736 <__ieee754_fmod+0xba>
 800880c:	4564      	cmp	r4, ip
 800880e:	bf38      	it	cc
 8008810:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8008814:	2800      	cmp	r0, #0
 8008816:	da05      	bge.n	8008824 <__ieee754_fmod+0x1a8>
 8008818:	0fe0      	lsrs	r0, r4, #31
 800881a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800881e:	0064      	lsls	r4, r4, #1
 8008820:	3901      	subs	r1, #1
 8008822:	e789      	b.n	8008738 <__ieee754_fmod+0xbc>
 8008824:	ea50 0307 	orrs.w	r3, r0, r7
 8008828:	f43f af5c 	beq.w	80086e4 <__ieee754_fmod+0x68>
 800882c:	0ffb      	lsrs	r3, r7, #31
 800882e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008832:	007c      	lsls	r4, r7, #1
 8008834:	e7f4      	b.n	8008820 <__ieee754_fmod+0x1a4>
 8008836:	0fe1      	lsrs	r1, r4, #31
 8008838:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800883c:	0064      	lsls	r4, r4, #1
 800883e:	3a01      	subs	r2, #1
 8008840:	e78a      	b.n	8008758 <__ieee754_fmod+0xdc>
 8008842:	1a89      	subs	r1, r1, r2
 8008844:	2914      	cmp	r1, #20
 8008846:	dc0a      	bgt.n	800885e <__ieee754_fmod+0x1e2>
 8008848:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800884c:	fa03 f202 	lsl.w	r2, r3, r2
 8008850:	40cc      	lsrs	r4, r1
 8008852:	4322      	orrs	r2, r4
 8008854:	410b      	asrs	r3, r1
 8008856:	ea43 0105 	orr.w	r1, r3, r5
 800885a:	4610      	mov	r0, r2
 800885c:	e732      	b.n	80086c4 <__ieee754_fmod+0x48>
 800885e:	291f      	cmp	r1, #31
 8008860:	dc07      	bgt.n	8008872 <__ieee754_fmod+0x1f6>
 8008862:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008866:	40cc      	lsrs	r4, r1
 8008868:	fa03 f202 	lsl.w	r2, r3, r2
 800886c:	4322      	orrs	r2, r4
 800886e:	462b      	mov	r3, r5
 8008870:	e7f1      	b.n	8008856 <__ieee754_fmod+0x1da>
 8008872:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8008876:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800887a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800887e:	32e2      	adds	r2, #226	; 0xe2
 8008880:	fa43 f202 	asr.w	r2, r3, r2
 8008884:	e7f3      	b.n	800886e <__ieee754_fmod+0x1f2>
 8008886:	bf00      	nop
 8008888:	7fefffff 	.word	0x7fefffff
 800888c:	0800c5b8 	.word	0x0800c5b8
 8008890:	fffffbed 	.word	0xfffffbed
 8008894:	7ff00000 	.word	0x7ff00000
 8008898:	fffffc02 	.word	0xfffffc02
 800889c:	fffffbe2 	.word	0xfffffbe2

080088a0 <__ieee754_sqrt>:
 80088a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a4:	ec55 4b10 	vmov	r4, r5, d0
 80088a8:	4e55      	ldr	r6, [pc, #340]	; (8008a00 <__ieee754_sqrt+0x160>)
 80088aa:	43ae      	bics	r6, r5
 80088ac:	ee10 0a10 	vmov	r0, s0
 80088b0:	ee10 3a10 	vmov	r3, s0
 80088b4:	462a      	mov	r2, r5
 80088b6:	4629      	mov	r1, r5
 80088b8:	d110      	bne.n	80088dc <__ieee754_sqrt+0x3c>
 80088ba:	ee10 2a10 	vmov	r2, s0
 80088be:	462b      	mov	r3, r5
 80088c0:	f7f7 fea2 	bl	8000608 <__aeabi_dmul>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4620      	mov	r0, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	f7f7 fce6 	bl	800029c <__adddf3>
 80088d0:	4604      	mov	r4, r0
 80088d2:	460d      	mov	r5, r1
 80088d4:	ec45 4b10 	vmov	d0, r4, r5
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	2d00      	cmp	r5, #0
 80088de:	dc10      	bgt.n	8008902 <__ieee754_sqrt+0x62>
 80088e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80088e4:	4330      	orrs	r0, r6
 80088e6:	d0f5      	beq.n	80088d4 <__ieee754_sqrt+0x34>
 80088e8:	b15d      	cbz	r5, 8008902 <__ieee754_sqrt+0x62>
 80088ea:	ee10 2a10 	vmov	r2, s0
 80088ee:	462b      	mov	r3, r5
 80088f0:	ee10 0a10 	vmov	r0, s0
 80088f4:	f7f7 fcd0 	bl	8000298 <__aeabi_dsub>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	f7f7 ffae 	bl	800085c <__aeabi_ddiv>
 8008900:	e7e6      	b.n	80088d0 <__ieee754_sqrt+0x30>
 8008902:	1512      	asrs	r2, r2, #20
 8008904:	d074      	beq.n	80089f0 <__ieee754_sqrt+0x150>
 8008906:	07d4      	lsls	r4, r2, #31
 8008908:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800890c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008914:	bf5e      	ittt	pl
 8008916:	0fda      	lsrpl	r2, r3, #31
 8008918:	005b      	lslpl	r3, r3, #1
 800891a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800891e:	2400      	movs	r4, #0
 8008920:	0fda      	lsrs	r2, r3, #31
 8008922:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008926:	107f      	asrs	r7, r7, #1
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	2516      	movs	r5, #22
 800892c:	4620      	mov	r0, r4
 800892e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008932:	1886      	adds	r6, r0, r2
 8008934:	428e      	cmp	r6, r1
 8008936:	bfde      	ittt	le
 8008938:	1b89      	suble	r1, r1, r6
 800893a:	18b0      	addle	r0, r6, r2
 800893c:	18a4      	addle	r4, r4, r2
 800893e:	0049      	lsls	r1, r1, #1
 8008940:	3d01      	subs	r5, #1
 8008942:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008946:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800894a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800894e:	d1f0      	bne.n	8008932 <__ieee754_sqrt+0x92>
 8008950:	462a      	mov	r2, r5
 8008952:	f04f 0e20 	mov.w	lr, #32
 8008956:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800895a:	4281      	cmp	r1, r0
 800895c:	eb06 0c05 	add.w	ip, r6, r5
 8008960:	dc02      	bgt.n	8008968 <__ieee754_sqrt+0xc8>
 8008962:	d113      	bne.n	800898c <__ieee754_sqrt+0xec>
 8008964:	459c      	cmp	ip, r3
 8008966:	d811      	bhi.n	800898c <__ieee754_sqrt+0xec>
 8008968:	f1bc 0f00 	cmp.w	ip, #0
 800896c:	eb0c 0506 	add.w	r5, ip, r6
 8008970:	da43      	bge.n	80089fa <__ieee754_sqrt+0x15a>
 8008972:	2d00      	cmp	r5, #0
 8008974:	db41      	blt.n	80089fa <__ieee754_sqrt+0x15a>
 8008976:	f100 0801 	add.w	r8, r0, #1
 800897a:	1a09      	subs	r1, r1, r0
 800897c:	459c      	cmp	ip, r3
 800897e:	bf88      	it	hi
 8008980:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008984:	eba3 030c 	sub.w	r3, r3, ip
 8008988:	4432      	add	r2, r6
 800898a:	4640      	mov	r0, r8
 800898c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008990:	f1be 0e01 	subs.w	lr, lr, #1
 8008994:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008998:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800899c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80089a0:	d1db      	bne.n	800895a <__ieee754_sqrt+0xba>
 80089a2:	430b      	orrs	r3, r1
 80089a4:	d006      	beq.n	80089b4 <__ieee754_sqrt+0x114>
 80089a6:	1c50      	adds	r0, r2, #1
 80089a8:	bf13      	iteet	ne
 80089aa:	3201      	addne	r2, #1
 80089ac:	3401      	addeq	r4, #1
 80089ae:	4672      	moveq	r2, lr
 80089b0:	f022 0201 	bicne.w	r2, r2, #1
 80089b4:	1063      	asrs	r3, r4, #1
 80089b6:	0852      	lsrs	r2, r2, #1
 80089b8:	07e1      	lsls	r1, r4, #31
 80089ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089c2:	bf48      	it	mi
 80089c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80089c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80089cc:	4614      	mov	r4, r2
 80089ce:	e781      	b.n	80088d4 <__ieee754_sqrt+0x34>
 80089d0:	0ad9      	lsrs	r1, r3, #11
 80089d2:	3815      	subs	r0, #21
 80089d4:	055b      	lsls	r3, r3, #21
 80089d6:	2900      	cmp	r1, #0
 80089d8:	d0fa      	beq.n	80089d0 <__ieee754_sqrt+0x130>
 80089da:	02cd      	lsls	r5, r1, #11
 80089dc:	d50a      	bpl.n	80089f4 <__ieee754_sqrt+0x154>
 80089de:	f1c2 0420 	rsb	r4, r2, #32
 80089e2:	fa23 f404 	lsr.w	r4, r3, r4
 80089e6:	1e55      	subs	r5, r2, #1
 80089e8:	4093      	lsls	r3, r2
 80089ea:	4321      	orrs	r1, r4
 80089ec:	1b42      	subs	r2, r0, r5
 80089ee:	e78a      	b.n	8008906 <__ieee754_sqrt+0x66>
 80089f0:	4610      	mov	r0, r2
 80089f2:	e7f0      	b.n	80089d6 <__ieee754_sqrt+0x136>
 80089f4:	0049      	lsls	r1, r1, #1
 80089f6:	3201      	adds	r2, #1
 80089f8:	e7ef      	b.n	80089da <__ieee754_sqrt+0x13a>
 80089fa:	4680      	mov	r8, r0
 80089fc:	e7bd      	b.n	800897a <__ieee754_sqrt+0xda>
 80089fe:	bf00      	nop
 8008a00:	7ff00000 	.word	0x7ff00000
 8008a04:	00000000 	.word	0x00000000

08008a08 <atan>:
 8008a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	ec55 4b10 	vmov	r4, r5, d0
 8008a10:	4bc3      	ldr	r3, [pc, #780]	; (8008d20 <atan+0x318>)
 8008a12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a16:	429e      	cmp	r6, r3
 8008a18:	46ab      	mov	fp, r5
 8008a1a:	dd18      	ble.n	8008a4e <atan+0x46>
 8008a1c:	4bc1      	ldr	r3, [pc, #772]	; (8008d24 <atan+0x31c>)
 8008a1e:	429e      	cmp	r6, r3
 8008a20:	dc01      	bgt.n	8008a26 <atan+0x1e>
 8008a22:	d109      	bne.n	8008a38 <atan+0x30>
 8008a24:	b144      	cbz	r4, 8008a38 <atan+0x30>
 8008a26:	4622      	mov	r2, r4
 8008a28:	462b      	mov	r3, r5
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 fc35 	bl	800029c <__adddf3>
 8008a32:	4604      	mov	r4, r0
 8008a34:	460d      	mov	r5, r1
 8008a36:	e006      	b.n	8008a46 <atan+0x3e>
 8008a38:	f1bb 0f00 	cmp.w	fp, #0
 8008a3c:	f300 8131 	bgt.w	8008ca2 <atan+0x29a>
 8008a40:	a59b      	add	r5, pc, #620	; (adr r5, 8008cb0 <atan+0x2a8>)
 8008a42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a46:	ec45 4b10 	vmov	d0, r4, r5
 8008a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	4bb6      	ldr	r3, [pc, #728]	; (8008d28 <atan+0x320>)
 8008a50:	429e      	cmp	r6, r3
 8008a52:	dc14      	bgt.n	8008a7e <atan+0x76>
 8008a54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008a58:	429e      	cmp	r6, r3
 8008a5a:	dc0d      	bgt.n	8008a78 <atan+0x70>
 8008a5c:	a396      	add	r3, pc, #600	; (adr r3, 8008cb8 <atan+0x2b0>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	ee10 0a10 	vmov	r0, s0
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f7 fc18 	bl	800029c <__adddf3>
 8008a6c:	4baf      	ldr	r3, [pc, #700]	; (8008d2c <atan+0x324>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f7f8 f85a 	bl	8000b28 <__aeabi_dcmpgt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d1e6      	bne.n	8008a46 <atan+0x3e>
 8008a78:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008a7c:	e02b      	b.n	8008ad6 <atan+0xce>
 8008a7e:	f000 f963 	bl	8008d48 <fabs>
 8008a82:	4bab      	ldr	r3, [pc, #684]	; (8008d30 <atan+0x328>)
 8008a84:	429e      	cmp	r6, r3
 8008a86:	ec55 4b10 	vmov	r4, r5, d0
 8008a8a:	f300 80bf 	bgt.w	8008c0c <atan+0x204>
 8008a8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008a92:	429e      	cmp	r6, r3
 8008a94:	f300 80a0 	bgt.w	8008bd8 <atan+0x1d0>
 8008a98:	ee10 2a10 	vmov	r2, s0
 8008a9c:	ee10 0a10 	vmov	r0, s0
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbfa 	bl	800029c <__adddf3>
 8008aa8:	4ba0      	ldr	r3, [pc, #640]	; (8008d2c <atan+0x324>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f7f7 fbf4 	bl	8000298 <__aeabi_dsub>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fbed 	bl	800029c <__adddf3>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fec7 	bl	800085c <__aeabi_ddiv>
 8008ace:	f04f 0a00 	mov.w	sl, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	462b      	mov	r3, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fd93 	bl	8000608 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	f7f7 fd8d 	bl	8000608 <__aeabi_dmul>
 8008aee:	a374      	add	r3, pc, #464	; (adr r3, 8008cc0 <atan+0x2b8>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	f7f7 fd86 	bl	8000608 <__aeabi_dmul>
 8008afc:	a372      	add	r3, pc, #456	; (adr r3, 8008cc8 <atan+0x2c0>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fbcb 	bl	800029c <__adddf3>
 8008b06:	4632      	mov	r2, r6
 8008b08:	463b      	mov	r3, r7
 8008b0a:	f7f7 fd7d 	bl	8000608 <__aeabi_dmul>
 8008b0e:	a370      	add	r3, pc, #448	; (adr r3, 8008cd0 <atan+0x2c8>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fbc2 	bl	800029c <__adddf3>
 8008b18:	4632      	mov	r2, r6
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	f7f7 fd74 	bl	8000608 <__aeabi_dmul>
 8008b20:	a36d      	add	r3, pc, #436	; (adr r3, 8008cd8 <atan+0x2d0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fbb9 	bl	800029c <__adddf3>
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	f7f7 fd6b 	bl	8000608 <__aeabi_dmul>
 8008b32:	a36b      	add	r3, pc, #428	; (adr r3, 8008ce0 <atan+0x2d8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fbb0 	bl	800029c <__adddf3>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 fd62 	bl	8000608 <__aeabi_dmul>
 8008b44:	a368      	add	r3, pc, #416	; (adr r3, 8008ce8 <atan+0x2e0>)
 8008b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4a:	f7f7 fba7 	bl	800029c <__adddf3>
 8008b4e:	4642      	mov	r2, r8
 8008b50:	464b      	mov	r3, r9
 8008b52:	f7f7 fd59 	bl	8000608 <__aeabi_dmul>
 8008b56:	a366      	add	r3, pc, #408	; (adr r3, 8008cf0 <atan+0x2e8>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4689      	mov	r9, r1
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 fd50 	bl	8000608 <__aeabi_dmul>
 8008b68:	a363      	add	r3, pc, #396	; (adr r3, 8008cf8 <atan+0x2f0>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	4632      	mov	r2, r6
 8008b74:	463b      	mov	r3, r7
 8008b76:	f7f7 fd47 	bl	8000608 <__aeabi_dmul>
 8008b7a:	a361      	add	r3, pc, #388	; (adr r3, 8008d00 <atan+0x2f8>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fb8a 	bl	8000298 <__aeabi_dsub>
 8008b84:	4632      	mov	r2, r6
 8008b86:	463b      	mov	r3, r7
 8008b88:	f7f7 fd3e 	bl	8000608 <__aeabi_dmul>
 8008b8c:	a35e      	add	r3, pc, #376	; (adr r3, 8008d08 <atan+0x300>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb81 	bl	8000298 <__aeabi_dsub>
 8008b96:	4632      	mov	r2, r6
 8008b98:	463b      	mov	r3, r7
 8008b9a:	f7f7 fd35 	bl	8000608 <__aeabi_dmul>
 8008b9e:	a35c      	add	r3, pc, #368	; (adr r3, 8008d10 <atan+0x308>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fb78 	bl	8000298 <__aeabi_dsub>
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	f7f7 fd2c 	bl	8000608 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	f7f7 fb70 	bl	800029c <__adddf3>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	f7f7 fd22 	bl	8000608 <__aeabi_dmul>
 8008bc4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	d14b      	bne.n	8008c66 <atan+0x25e>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7f7 fb61 	bl	8000298 <__aeabi_dsub>
 8008bd6:	e72c      	b.n	8008a32 <atan+0x2a>
 8008bd8:	ee10 0a10 	vmov	r0, s0
 8008bdc:	4b53      	ldr	r3, [pc, #332]	; (8008d2c <atan+0x324>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fb59 	bl	8000298 <__aeabi_dsub>
 8008be6:	4b51      	ldr	r3, [pc, #324]	; (8008d2c <atan+0x324>)
 8008be8:	4606      	mov	r6, r0
 8008bea:	460f      	mov	r7, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7f7 fb53 	bl	800029c <__adddf3>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fe2d 	bl	800085c <__aeabi_ddiv>
 8008c02:	f04f 0a01 	mov.w	sl, #1
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	e764      	b.n	8008ad6 <atan+0xce>
 8008c0c:	4b49      	ldr	r3, [pc, #292]	; (8008d34 <atan+0x32c>)
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	da1d      	bge.n	8008c4e <atan+0x246>
 8008c12:	ee10 0a10 	vmov	r0, s0
 8008c16:	4b48      	ldr	r3, [pc, #288]	; (8008d38 <atan+0x330>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 fb3c 	bl	8000298 <__aeabi_dsub>
 8008c20:	4b45      	ldr	r3, [pc, #276]	; (8008d38 <atan+0x330>)
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	2200      	movs	r2, #0
 8008c28:	4620      	mov	r0, r4
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fcec 	bl	8000608 <__aeabi_dmul>
 8008c30:	4b3e      	ldr	r3, [pc, #248]	; (8008d2c <atan+0x324>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fb32 	bl	800029c <__adddf3>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 fe0c 	bl	800085c <__aeabi_ddiv>
 8008c44:	f04f 0a02 	mov.w	sl, #2
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	e743      	b.n	8008ad6 <atan+0xce>
 8008c4e:	462b      	mov	r3, r5
 8008c50:	ee10 2a10 	vmov	r2, s0
 8008c54:	4939      	ldr	r1, [pc, #228]	; (8008d3c <atan+0x334>)
 8008c56:	2000      	movs	r0, #0
 8008c58:	f7f7 fe00 	bl	800085c <__aeabi_ddiv>
 8008c5c:	f04f 0a03 	mov.w	sl, #3
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	e737      	b.n	8008ad6 <atan+0xce>
 8008c66:	4b36      	ldr	r3, [pc, #216]	; (8008d40 <atan+0x338>)
 8008c68:	4e36      	ldr	r6, [pc, #216]	; (8008d44 <atan+0x33c>)
 8008c6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008c6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008c72:	e9da 2300 	ldrd	r2, r3, [sl]
 8008c76:	f7f7 fb0f 	bl	8000298 <__aeabi_dsub>
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	f7f7 fb0b 	bl	8000298 <__aeabi_dsub>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008c8a:	f7f7 fb05 	bl	8000298 <__aeabi_dsub>
 8008c8e:	f1bb 0f00 	cmp.w	fp, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	460d      	mov	r5, r1
 8008c96:	f6bf aed6 	bge.w	8008a46 <atan+0x3e>
 8008c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	e6d1      	b.n	8008a46 <atan+0x3e>
 8008ca2:	a51d      	add	r5, pc, #116	; (adr r5, 8008d18 <atan+0x310>)
 8008ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ca8:	e6cd      	b.n	8008a46 <atan+0x3e>
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w
 8008cb0:	54442d18 	.word	0x54442d18
 8008cb4:	bff921fb 	.word	0xbff921fb
 8008cb8:	8800759c 	.word	0x8800759c
 8008cbc:	7e37e43c 	.word	0x7e37e43c
 8008cc0:	e322da11 	.word	0xe322da11
 8008cc4:	3f90ad3a 	.word	0x3f90ad3a
 8008cc8:	24760deb 	.word	0x24760deb
 8008ccc:	3fa97b4b 	.word	0x3fa97b4b
 8008cd0:	a0d03d51 	.word	0xa0d03d51
 8008cd4:	3fb10d66 	.word	0x3fb10d66
 8008cd8:	c54c206e 	.word	0xc54c206e
 8008cdc:	3fb745cd 	.word	0x3fb745cd
 8008ce0:	920083ff 	.word	0x920083ff
 8008ce4:	3fc24924 	.word	0x3fc24924
 8008ce8:	5555550d 	.word	0x5555550d
 8008cec:	3fd55555 	.word	0x3fd55555
 8008cf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008cf4:	bfa2b444 	.word	0xbfa2b444
 8008cf8:	52defd9a 	.word	0x52defd9a
 8008cfc:	3fadde2d 	.word	0x3fadde2d
 8008d00:	af749a6d 	.word	0xaf749a6d
 8008d04:	3fb3b0f2 	.word	0x3fb3b0f2
 8008d08:	fe231671 	.word	0xfe231671
 8008d0c:	3fbc71c6 	.word	0x3fbc71c6
 8008d10:	9998ebc4 	.word	0x9998ebc4
 8008d14:	3fc99999 	.word	0x3fc99999
 8008d18:	54442d18 	.word	0x54442d18
 8008d1c:	3ff921fb 	.word	0x3ff921fb
 8008d20:	440fffff 	.word	0x440fffff
 8008d24:	7ff00000 	.word	0x7ff00000
 8008d28:	3fdbffff 	.word	0x3fdbffff
 8008d2c:	3ff00000 	.word	0x3ff00000
 8008d30:	3ff2ffff 	.word	0x3ff2ffff
 8008d34:	40038000 	.word	0x40038000
 8008d38:	3ff80000 	.word	0x3ff80000
 8008d3c:	bff00000 	.word	0xbff00000
 8008d40:	0800c5e8 	.word	0x0800c5e8
 8008d44:	0800c5c8 	.word	0x0800c5c8

08008d48 <fabs>:
 8008d48:	ec51 0b10 	vmov	r0, r1, d0
 8008d4c:	ee10 2a10 	vmov	r2, s0
 8008d50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d54:	ec43 2b10 	vmov	d0, r2, r3
 8008d58:	4770      	bx	lr
 8008d5a:	0000      	movs	r0, r0
 8008d5c:	0000      	movs	r0, r0
	...

08008d60 <nan>:
 8008d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d68 <nan+0x8>
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	7ff80000 	.word	0x7ff80000

08008d70 <__errno>:
 8008d70:	4b01      	ldr	r3, [pc, #4]	; (8008d78 <__errno+0x8>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000048 	.word	0x20000048

08008d7c <__libc_init_array>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	4d0d      	ldr	r5, [pc, #52]	; (8008db4 <__libc_init_array+0x38>)
 8008d80:	4c0d      	ldr	r4, [pc, #52]	; (8008db8 <__libc_init_array+0x3c>)
 8008d82:	1b64      	subs	r4, r4, r5
 8008d84:	10a4      	asrs	r4, r4, #2
 8008d86:	2600      	movs	r6, #0
 8008d88:	42a6      	cmp	r6, r4
 8008d8a:	d109      	bne.n	8008da0 <__libc_init_array+0x24>
 8008d8c:	4d0b      	ldr	r5, [pc, #44]	; (8008dbc <__libc_init_array+0x40>)
 8008d8e:	4c0c      	ldr	r4, [pc, #48]	; (8008dc0 <__libc_init_array+0x44>)
 8008d90:	f002 fd60 	bl	800b854 <_init>
 8008d94:	1b64      	subs	r4, r4, r5
 8008d96:	10a4      	asrs	r4, r4, #2
 8008d98:	2600      	movs	r6, #0
 8008d9a:	42a6      	cmp	r6, r4
 8008d9c:	d105      	bne.n	8008daa <__libc_init_array+0x2e>
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da4:	4798      	blx	r3
 8008da6:	3601      	adds	r6, #1
 8008da8:	e7ee      	b.n	8008d88 <__libc_init_array+0xc>
 8008daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dae:	4798      	blx	r3
 8008db0:	3601      	adds	r6, #1
 8008db2:	e7f2      	b.n	8008d9a <__libc_init_array+0x1e>
 8008db4:	0800c9ec 	.word	0x0800c9ec
 8008db8:	0800c9ec 	.word	0x0800c9ec
 8008dbc:	0800c9ec 	.word	0x0800c9ec
 8008dc0:	0800c9f0 	.word	0x0800c9f0

08008dc4 <memcmp>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	3901      	subs	r1, #1
 8008dc8:	4402      	add	r2, r0
 8008dca:	4290      	cmp	r0, r2
 8008dcc:	d101      	bne.n	8008dd2 <memcmp+0xe>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	e005      	b.n	8008dde <memcmp+0x1a>
 8008dd2:	7803      	ldrb	r3, [r0, #0]
 8008dd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d001      	beq.n	8008de0 <memcmp+0x1c>
 8008ddc:	1b18      	subs	r0, r3, r4
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	3001      	adds	r0, #1
 8008de2:	e7f2      	b.n	8008dca <memcmp+0x6>

08008de4 <memcpy>:
 8008de4:	440a      	add	r2, r1
 8008de6:	4291      	cmp	r1, r2
 8008de8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008dec:	d100      	bne.n	8008df0 <memcpy+0xc>
 8008dee:	4770      	bx	lr
 8008df0:	b510      	push	{r4, lr}
 8008df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfa:	4291      	cmp	r1, r2
 8008dfc:	d1f9      	bne.n	8008df2 <memcpy+0xe>
 8008dfe:	bd10      	pop	{r4, pc}

08008e00 <memset>:
 8008e00:	4402      	add	r2, r0
 8008e02:	4603      	mov	r3, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <memset+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0e:	e7f9      	b.n	8008e04 <memset+0x4>

08008e10 <__cvt>:
 8008e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	ec55 4b10 	vmov	r4, r5, d0
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	460e      	mov	r6, r1
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	462b      	mov	r3, r5
 8008e20:	bfbb      	ittet	lt
 8008e22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e26:	461d      	movlt	r5, r3
 8008e28:	2300      	movge	r3, #0
 8008e2a:	232d      	movlt	r3, #45	; 0x2d
 8008e2c:	700b      	strb	r3, [r1, #0]
 8008e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e34:	4691      	mov	r9, r2
 8008e36:	f023 0820 	bic.w	r8, r3, #32
 8008e3a:	bfbc      	itt	lt
 8008e3c:	4622      	movlt	r2, r4
 8008e3e:	4614      	movlt	r4, r2
 8008e40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e44:	d005      	beq.n	8008e52 <__cvt+0x42>
 8008e46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e4a:	d100      	bne.n	8008e4e <__cvt+0x3e>
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	2102      	movs	r1, #2
 8008e50:	e000      	b.n	8008e54 <__cvt+0x44>
 8008e52:	2103      	movs	r1, #3
 8008e54:	ab03      	add	r3, sp, #12
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	ab02      	add	r3, sp, #8
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	ec45 4b10 	vmov	d0, r4, r5
 8008e60:	4653      	mov	r3, sl
 8008e62:	4632      	mov	r2, r6
 8008e64:	f000 fce4 	bl	8009830 <_dtoa_r>
 8008e68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	d102      	bne.n	8008e76 <__cvt+0x66>
 8008e70:	f019 0f01 	tst.w	r9, #1
 8008e74:	d022      	beq.n	8008ebc <__cvt+0xac>
 8008e76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e7a:	eb07 0906 	add.w	r9, r7, r6
 8008e7e:	d110      	bne.n	8008ea2 <__cvt+0x92>
 8008e80:	783b      	ldrb	r3, [r7, #0]
 8008e82:	2b30      	cmp	r3, #48	; 0x30
 8008e84:	d10a      	bne.n	8008e9c <__cvt+0x8c>
 8008e86:	2200      	movs	r2, #0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7f7 fe23 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e92:	b918      	cbnz	r0, 8008e9c <__cvt+0x8c>
 8008e94:	f1c6 0601 	rsb	r6, r6, #1
 8008e98:	f8ca 6000 	str.w	r6, [sl]
 8008e9c:	f8da 3000 	ldr.w	r3, [sl]
 8008ea0:	4499      	add	r9, r3
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eae:	b108      	cbz	r0, 8008eb4 <__cvt+0xa4>
 8008eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008eb4:	2230      	movs	r2, #48	; 0x30
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	454b      	cmp	r3, r9
 8008eba:	d307      	bcc.n	8008ecc <__cvt+0xbc>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ec0:	1bdb      	subs	r3, r3, r7
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	b004      	add	sp, #16
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	1c59      	adds	r1, r3, #1
 8008ece:	9103      	str	r1, [sp, #12]
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	e7f0      	b.n	8008eb6 <__cvt+0xa6>

08008ed4 <__exponent>:
 8008ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	bfb8      	it	lt
 8008edc:	4249      	neglt	r1, r1
 8008ede:	f803 2b02 	strb.w	r2, [r3], #2
 8008ee2:	bfb4      	ite	lt
 8008ee4:	222d      	movlt	r2, #45	; 0x2d
 8008ee6:	222b      	movge	r2, #43	; 0x2b
 8008ee8:	2909      	cmp	r1, #9
 8008eea:	7042      	strb	r2, [r0, #1]
 8008eec:	dd2a      	ble.n	8008f44 <__exponent+0x70>
 8008eee:	f10d 0407 	add.w	r4, sp, #7
 8008ef2:	46a4      	mov	ip, r4
 8008ef4:	270a      	movs	r7, #10
 8008ef6:	46a6      	mov	lr, r4
 8008ef8:	460a      	mov	r2, r1
 8008efa:	fb91 f6f7 	sdiv	r6, r1, r7
 8008efe:	fb07 1516 	mls	r5, r7, r6, r1
 8008f02:	3530      	adds	r5, #48	; 0x30
 8008f04:	2a63      	cmp	r2, #99	; 0x63
 8008f06:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008f0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f0e:	4631      	mov	r1, r6
 8008f10:	dcf1      	bgt.n	8008ef6 <__exponent+0x22>
 8008f12:	3130      	adds	r1, #48	; 0x30
 8008f14:	f1ae 0502 	sub.w	r5, lr, #2
 8008f18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f1c:	1c44      	adds	r4, r0, #1
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4561      	cmp	r1, ip
 8008f22:	d30a      	bcc.n	8008f3a <__exponent+0x66>
 8008f24:	f10d 0209 	add.w	r2, sp, #9
 8008f28:	eba2 020e 	sub.w	r2, r2, lr
 8008f2c:	4565      	cmp	r5, ip
 8008f2e:	bf88      	it	hi
 8008f30:	2200      	movhi	r2, #0
 8008f32:	4413      	add	r3, r2
 8008f34:	1a18      	subs	r0, r3, r0
 8008f36:	b003      	add	sp, #12
 8008f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f42:	e7ed      	b.n	8008f20 <__exponent+0x4c>
 8008f44:	2330      	movs	r3, #48	; 0x30
 8008f46:	3130      	adds	r1, #48	; 0x30
 8008f48:	7083      	strb	r3, [r0, #2]
 8008f4a:	70c1      	strb	r1, [r0, #3]
 8008f4c:	1d03      	adds	r3, r0, #4
 8008f4e:	e7f1      	b.n	8008f34 <__exponent+0x60>

08008f50 <_printf_float>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	ed2d 8b02 	vpush	{d8}
 8008f58:	b08d      	sub	sp, #52	; 0x34
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f60:	4616      	mov	r6, r2
 8008f62:	461f      	mov	r7, r3
 8008f64:	4605      	mov	r5, r0
 8008f66:	f001 fb47 	bl	800a5f8 <_localeconv_r>
 8008f6a:	f8d0 a000 	ldr.w	sl, [r0]
 8008f6e:	4650      	mov	r0, sl
 8008f70:	f7f7 f936 	bl	80001e0 <strlen>
 8008f74:	2300      	movs	r3, #0
 8008f76:	930a      	str	r3, [sp, #40]	; 0x28
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	9305      	str	r3, [sp, #20]
 8008f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f84:	3307      	adds	r3, #7
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	f103 0208 	add.w	r2, r3, #8
 8008f8e:	f8c8 2000 	str.w	r2, [r8]
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fa8:	ee08 0a10 	vmov	s16, r0
 8008fac:	4b9f      	ldr	r3, [pc, #636]	; (800922c <_printf_float+0x2dc>)
 8008fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fb6:	f7f7 fdc1 	bl	8000b3c <__aeabi_dcmpun>
 8008fba:	bb88      	cbnz	r0, 8009020 <_printf_float+0xd0>
 8008fbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fc0:	4b9a      	ldr	r3, [pc, #616]	; (800922c <_printf_float+0x2dc>)
 8008fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fc6:	f7f7 fd9b 	bl	8000b00 <__aeabi_dcmple>
 8008fca:	bb48      	cbnz	r0, 8009020 <_printf_float+0xd0>
 8008fcc:	2200      	movs	r2, #0
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	f7f7 fd8a 	bl	8000aec <__aeabi_dcmplt>
 8008fd8:	b110      	cbz	r0, 8008fe0 <_printf_float+0x90>
 8008fda:	232d      	movs	r3, #45	; 0x2d
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe0:	4b93      	ldr	r3, [pc, #588]	; (8009230 <_printf_float+0x2e0>)
 8008fe2:	4894      	ldr	r0, [pc, #592]	; (8009234 <_printf_float+0x2e4>)
 8008fe4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008fe8:	bf94      	ite	ls
 8008fea:	4698      	movls	r8, r3
 8008fec:	4680      	movhi	r8, r0
 8008fee:	2303      	movs	r3, #3
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	f023 0204 	bic.w	r2, r3, #4
 8008ff8:	6022      	str	r2, [r4, #0]
 8008ffa:	f04f 0900 	mov.w	r9, #0
 8008ffe:	9700      	str	r7, [sp, #0]
 8009000:	4633      	mov	r3, r6
 8009002:	aa0b      	add	r2, sp, #44	; 0x2c
 8009004:	4621      	mov	r1, r4
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f9d8 	bl	80093bc <_printf_common>
 800900c:	3001      	adds	r0, #1
 800900e:	f040 8090 	bne.w	8009132 <_printf_float+0x1e2>
 8009012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009016:	b00d      	add	sp, #52	; 0x34
 8009018:	ecbd 8b02 	vpop	{d8}
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	4642      	mov	r2, r8
 8009022:	464b      	mov	r3, r9
 8009024:	4640      	mov	r0, r8
 8009026:	4649      	mov	r1, r9
 8009028:	f7f7 fd88 	bl	8000b3c <__aeabi_dcmpun>
 800902c:	b140      	cbz	r0, 8009040 <_printf_float+0xf0>
 800902e:	464b      	mov	r3, r9
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfbc      	itt	lt
 8009034:	232d      	movlt	r3, #45	; 0x2d
 8009036:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800903a:	487f      	ldr	r0, [pc, #508]	; (8009238 <_printf_float+0x2e8>)
 800903c:	4b7f      	ldr	r3, [pc, #508]	; (800923c <_printf_float+0x2ec>)
 800903e:	e7d1      	b.n	8008fe4 <_printf_float+0x94>
 8009040:	6863      	ldr	r3, [r4, #4]
 8009042:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009046:	9206      	str	r2, [sp, #24]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	d13f      	bne.n	80090cc <_printf_float+0x17c>
 800904c:	2306      	movs	r3, #6
 800904e:	6063      	str	r3, [r4, #4]
 8009050:	9b05      	ldr	r3, [sp, #20]
 8009052:	6861      	ldr	r1, [r4, #4]
 8009054:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009058:	2300      	movs	r3, #0
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	ab0a      	add	r3, sp, #40	; 0x28
 800905e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009062:	ab09      	add	r3, sp, #36	; 0x24
 8009064:	ec49 8b10 	vmov	d0, r8, r9
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009070:	4628      	mov	r0, r5
 8009072:	f7ff fecd 	bl	8008e10 <__cvt>
 8009076:	9b06      	ldr	r3, [sp, #24]
 8009078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800907a:	2b47      	cmp	r3, #71	; 0x47
 800907c:	4680      	mov	r8, r0
 800907e:	d108      	bne.n	8009092 <_printf_float+0x142>
 8009080:	1cc8      	adds	r0, r1, #3
 8009082:	db02      	blt.n	800908a <_printf_float+0x13a>
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	4299      	cmp	r1, r3
 8009088:	dd41      	ble.n	800910e <_printf_float+0x1be>
 800908a:	f1ab 0b02 	sub.w	fp, fp, #2
 800908e:	fa5f fb8b 	uxtb.w	fp, fp
 8009092:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009096:	d820      	bhi.n	80090da <_printf_float+0x18a>
 8009098:	3901      	subs	r1, #1
 800909a:	465a      	mov	r2, fp
 800909c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090a0:	9109      	str	r1, [sp, #36]	; 0x24
 80090a2:	f7ff ff17 	bl	8008ed4 <__exponent>
 80090a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a8:	1813      	adds	r3, r2, r0
 80090aa:	2a01      	cmp	r2, #1
 80090ac:	4681      	mov	r9, r0
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	dc02      	bgt.n	80090b8 <_printf_float+0x168>
 80090b2:	6822      	ldr	r2, [r4, #0]
 80090b4:	07d2      	lsls	r2, r2, #31
 80090b6:	d501      	bpl.n	80090bc <_printf_float+0x16c>
 80090b8:	3301      	adds	r3, #1
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d09c      	beq.n	8008ffe <_printf_float+0xae>
 80090c4:	232d      	movs	r3, #45	; 0x2d
 80090c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ca:	e798      	b.n	8008ffe <_printf_float+0xae>
 80090cc:	9a06      	ldr	r2, [sp, #24]
 80090ce:	2a47      	cmp	r2, #71	; 0x47
 80090d0:	d1be      	bne.n	8009050 <_printf_float+0x100>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1bc      	bne.n	8009050 <_printf_float+0x100>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e7b9      	b.n	800904e <_printf_float+0xfe>
 80090da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80090de:	d118      	bne.n	8009112 <_printf_float+0x1c2>
 80090e0:	2900      	cmp	r1, #0
 80090e2:	6863      	ldr	r3, [r4, #4]
 80090e4:	dd0b      	ble.n	80090fe <_printf_float+0x1ae>
 80090e6:	6121      	str	r1, [r4, #16]
 80090e8:	b913      	cbnz	r3, 80090f0 <_printf_float+0x1a0>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	07d0      	lsls	r0, r2, #31
 80090ee:	d502      	bpl.n	80090f6 <_printf_float+0x1a6>
 80090f0:	3301      	adds	r3, #1
 80090f2:	440b      	add	r3, r1
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80090f8:	f04f 0900 	mov.w	r9, #0
 80090fc:	e7de      	b.n	80090bc <_printf_float+0x16c>
 80090fe:	b913      	cbnz	r3, 8009106 <_printf_float+0x1b6>
 8009100:	6822      	ldr	r2, [r4, #0]
 8009102:	07d2      	lsls	r2, r2, #31
 8009104:	d501      	bpl.n	800910a <_printf_float+0x1ba>
 8009106:	3302      	adds	r3, #2
 8009108:	e7f4      	b.n	80090f4 <_printf_float+0x1a4>
 800910a:	2301      	movs	r3, #1
 800910c:	e7f2      	b.n	80090f4 <_printf_float+0x1a4>
 800910e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009114:	4299      	cmp	r1, r3
 8009116:	db05      	blt.n	8009124 <_printf_float+0x1d4>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	6121      	str	r1, [r4, #16]
 800911c:	07d8      	lsls	r0, r3, #31
 800911e:	d5ea      	bpl.n	80090f6 <_printf_float+0x1a6>
 8009120:	1c4b      	adds	r3, r1, #1
 8009122:	e7e7      	b.n	80090f4 <_printf_float+0x1a4>
 8009124:	2900      	cmp	r1, #0
 8009126:	bfd4      	ite	le
 8009128:	f1c1 0202 	rsble	r2, r1, #2
 800912c:	2201      	movgt	r2, #1
 800912e:	4413      	add	r3, r2
 8009130:	e7e0      	b.n	80090f4 <_printf_float+0x1a4>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	055a      	lsls	r2, r3, #21
 8009136:	d407      	bmi.n	8009148 <_printf_float+0x1f8>
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	4642      	mov	r2, r8
 800913c:	4631      	mov	r1, r6
 800913e:	4628      	mov	r0, r5
 8009140:	47b8      	blx	r7
 8009142:	3001      	adds	r0, #1
 8009144:	d12c      	bne.n	80091a0 <_printf_float+0x250>
 8009146:	e764      	b.n	8009012 <_printf_float+0xc2>
 8009148:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800914c:	f240 80e0 	bls.w	8009310 <_printf_float+0x3c0>
 8009150:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009154:	2200      	movs	r2, #0
 8009156:	2300      	movs	r3, #0
 8009158:	f7f7 fcbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800915c:	2800      	cmp	r0, #0
 800915e:	d034      	beq.n	80091ca <_printf_float+0x27a>
 8009160:	4a37      	ldr	r2, [pc, #220]	; (8009240 <_printf_float+0x2f0>)
 8009162:	2301      	movs	r3, #1
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f af51 	beq.w	8009012 <_printf_float+0xc2>
 8009170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009174:	429a      	cmp	r2, r3
 8009176:	db02      	blt.n	800917e <_printf_float+0x22e>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	07d8      	lsls	r0, r3, #31
 800917c:	d510      	bpl.n	80091a0 <_printf_float+0x250>
 800917e:	ee18 3a10 	vmov	r3, s16
 8009182:	4652      	mov	r2, sl
 8009184:	4631      	mov	r1, r6
 8009186:	4628      	mov	r0, r5
 8009188:	47b8      	blx	r7
 800918a:	3001      	adds	r0, #1
 800918c:	f43f af41 	beq.w	8009012 <_printf_float+0xc2>
 8009190:	f04f 0800 	mov.w	r8, #0
 8009194:	f104 091a 	add.w	r9, r4, #26
 8009198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919a:	3b01      	subs	r3, #1
 800919c:	4543      	cmp	r3, r8
 800919e:	dc09      	bgt.n	80091b4 <_printf_float+0x264>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	079b      	lsls	r3, r3, #30
 80091a4:	f100 8105 	bmi.w	80093b2 <_printf_float+0x462>
 80091a8:	68e0      	ldr	r0, [r4, #12]
 80091aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ac:	4298      	cmp	r0, r3
 80091ae:	bfb8      	it	lt
 80091b0:	4618      	movlt	r0, r3
 80091b2:	e730      	b.n	8009016 <_printf_float+0xc6>
 80091b4:	2301      	movs	r3, #1
 80091b6:	464a      	mov	r2, r9
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	f43f af27 	beq.w	8009012 <_printf_float+0xc2>
 80091c4:	f108 0801 	add.w	r8, r8, #1
 80091c8:	e7e6      	b.n	8009198 <_printf_float+0x248>
 80091ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dc39      	bgt.n	8009244 <_printf_float+0x2f4>
 80091d0:	4a1b      	ldr	r2, [pc, #108]	; (8009240 <_printf_float+0x2f0>)
 80091d2:	2301      	movs	r3, #1
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	f43f af19 	beq.w	8009012 <_printf_float+0xc2>
 80091e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091e4:	4313      	orrs	r3, r2
 80091e6:	d102      	bne.n	80091ee <_printf_float+0x29e>
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	07d9      	lsls	r1, r3, #31
 80091ec:	d5d8      	bpl.n	80091a0 <_printf_float+0x250>
 80091ee:	ee18 3a10 	vmov	r3, s16
 80091f2:	4652      	mov	r2, sl
 80091f4:	4631      	mov	r1, r6
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	f43f af09 	beq.w	8009012 <_printf_float+0xc2>
 8009200:	f04f 0900 	mov.w	r9, #0
 8009204:	f104 0a1a 	add.w	sl, r4, #26
 8009208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920a:	425b      	negs	r3, r3
 800920c:	454b      	cmp	r3, r9
 800920e:	dc01      	bgt.n	8009214 <_printf_float+0x2c4>
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	e792      	b.n	800913a <_printf_float+0x1ea>
 8009214:	2301      	movs	r3, #1
 8009216:	4652      	mov	r2, sl
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f aef7 	beq.w	8009012 <_printf_float+0xc2>
 8009224:	f109 0901 	add.w	r9, r9, #1
 8009228:	e7ee      	b.n	8009208 <_printf_float+0x2b8>
 800922a:	bf00      	nop
 800922c:	7fefffff 	.word	0x7fefffff
 8009230:	0800c60c 	.word	0x0800c60c
 8009234:	0800c610 	.word	0x0800c610
 8009238:	0800c618 	.word	0x0800c618
 800923c:	0800c614 	.word	0x0800c614
 8009240:	0800c61c 	.word	0x0800c61c
 8009244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009248:	429a      	cmp	r2, r3
 800924a:	bfa8      	it	ge
 800924c:	461a      	movge	r2, r3
 800924e:	2a00      	cmp	r2, #0
 8009250:	4691      	mov	r9, r2
 8009252:	dc37      	bgt.n	80092c4 <_printf_float+0x374>
 8009254:	f04f 0b00 	mov.w	fp, #0
 8009258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800925c:	f104 021a 	add.w	r2, r4, #26
 8009260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	eba3 0309 	sub.w	r3, r3, r9
 8009268:	455b      	cmp	r3, fp
 800926a:	dc33      	bgt.n	80092d4 <_printf_float+0x384>
 800926c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009270:	429a      	cmp	r2, r3
 8009272:	db3b      	blt.n	80092ec <_printf_float+0x39c>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	07da      	lsls	r2, r3, #31
 8009278:	d438      	bmi.n	80092ec <_printf_float+0x39c>
 800927a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800927c:	9a05      	ldr	r2, [sp, #20]
 800927e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009280:	1a9a      	subs	r2, r3, r2
 8009282:	eba3 0901 	sub.w	r9, r3, r1
 8009286:	4591      	cmp	r9, r2
 8009288:	bfa8      	it	ge
 800928a:	4691      	movge	r9, r2
 800928c:	f1b9 0f00 	cmp.w	r9, #0
 8009290:	dc35      	bgt.n	80092fe <_printf_float+0x3ae>
 8009292:	f04f 0800 	mov.w	r8, #0
 8009296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800929a:	f104 0a1a 	add.w	sl, r4, #26
 800929e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	eba3 0309 	sub.w	r3, r3, r9
 80092a8:	4543      	cmp	r3, r8
 80092aa:	f77f af79 	ble.w	80091a0 <_printf_float+0x250>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4652      	mov	r2, sl
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b8      	blx	r7
 80092b8:	3001      	adds	r0, #1
 80092ba:	f43f aeaa 	beq.w	8009012 <_printf_float+0xc2>
 80092be:	f108 0801 	add.w	r8, r8, #1
 80092c2:	e7ec      	b.n	800929e <_printf_float+0x34e>
 80092c4:	4613      	mov	r3, r2
 80092c6:	4631      	mov	r1, r6
 80092c8:	4642      	mov	r2, r8
 80092ca:	4628      	mov	r0, r5
 80092cc:	47b8      	blx	r7
 80092ce:	3001      	adds	r0, #1
 80092d0:	d1c0      	bne.n	8009254 <_printf_float+0x304>
 80092d2:	e69e      	b.n	8009012 <_printf_float+0xc2>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4631      	mov	r1, r6
 80092d8:	4628      	mov	r0, r5
 80092da:	9205      	str	r2, [sp, #20]
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f ae97 	beq.w	8009012 <_printf_float+0xc2>
 80092e4:	9a05      	ldr	r2, [sp, #20]
 80092e6:	f10b 0b01 	add.w	fp, fp, #1
 80092ea:	e7b9      	b.n	8009260 <_printf_float+0x310>
 80092ec:	ee18 3a10 	vmov	r3, s16
 80092f0:	4652      	mov	r2, sl
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	d1be      	bne.n	800927a <_printf_float+0x32a>
 80092fc:	e689      	b.n	8009012 <_printf_float+0xc2>
 80092fe:	9a05      	ldr	r2, [sp, #20]
 8009300:	464b      	mov	r3, r9
 8009302:	4442      	add	r2, r8
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	d1c1      	bne.n	8009292 <_printf_float+0x342>
 800930e:	e680      	b.n	8009012 <_printf_float+0xc2>
 8009310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009312:	2a01      	cmp	r2, #1
 8009314:	dc01      	bgt.n	800931a <_printf_float+0x3ca>
 8009316:	07db      	lsls	r3, r3, #31
 8009318:	d538      	bpl.n	800938c <_printf_float+0x43c>
 800931a:	2301      	movs	r3, #1
 800931c:	4642      	mov	r2, r8
 800931e:	4631      	mov	r1, r6
 8009320:	4628      	mov	r0, r5
 8009322:	47b8      	blx	r7
 8009324:	3001      	adds	r0, #1
 8009326:	f43f ae74 	beq.w	8009012 <_printf_float+0xc2>
 800932a:	ee18 3a10 	vmov	r3, s16
 800932e:	4652      	mov	r2, sl
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f ae6b 	beq.w	8009012 <_printf_float+0xc2>
 800933c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009340:	2200      	movs	r2, #0
 8009342:	2300      	movs	r3, #0
 8009344:	f7f7 fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009348:	b9d8      	cbnz	r0, 8009382 <_printf_float+0x432>
 800934a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934c:	f108 0201 	add.w	r2, r8, #1
 8009350:	3b01      	subs	r3, #1
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	47b8      	blx	r7
 8009358:	3001      	adds	r0, #1
 800935a:	d10e      	bne.n	800937a <_printf_float+0x42a>
 800935c:	e659      	b.n	8009012 <_printf_float+0xc2>
 800935e:	2301      	movs	r3, #1
 8009360:	4652      	mov	r2, sl
 8009362:	4631      	mov	r1, r6
 8009364:	4628      	mov	r0, r5
 8009366:	47b8      	blx	r7
 8009368:	3001      	adds	r0, #1
 800936a:	f43f ae52 	beq.w	8009012 <_printf_float+0xc2>
 800936e:	f108 0801 	add.w	r8, r8, #1
 8009372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009374:	3b01      	subs	r3, #1
 8009376:	4543      	cmp	r3, r8
 8009378:	dcf1      	bgt.n	800935e <_printf_float+0x40e>
 800937a:	464b      	mov	r3, r9
 800937c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009380:	e6dc      	b.n	800913c <_printf_float+0x1ec>
 8009382:	f04f 0800 	mov.w	r8, #0
 8009386:	f104 0a1a 	add.w	sl, r4, #26
 800938a:	e7f2      	b.n	8009372 <_printf_float+0x422>
 800938c:	2301      	movs	r3, #1
 800938e:	4642      	mov	r2, r8
 8009390:	e7df      	b.n	8009352 <_printf_float+0x402>
 8009392:	2301      	movs	r3, #1
 8009394:	464a      	mov	r2, r9
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f ae38 	beq.w	8009012 <_printf_float+0xc2>
 80093a2:	f108 0801 	add.w	r8, r8, #1
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093aa:	1a5b      	subs	r3, r3, r1
 80093ac:	4543      	cmp	r3, r8
 80093ae:	dcf0      	bgt.n	8009392 <_printf_float+0x442>
 80093b0:	e6fa      	b.n	80091a8 <_printf_float+0x258>
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	f104 0919 	add.w	r9, r4, #25
 80093ba:	e7f4      	b.n	80093a6 <_printf_float+0x456>

080093bc <_printf_common>:
 80093bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	4616      	mov	r6, r2
 80093c2:	4699      	mov	r9, r3
 80093c4:	688a      	ldr	r2, [r1, #8]
 80093c6:	690b      	ldr	r3, [r1, #16]
 80093c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093cc:	4293      	cmp	r3, r2
 80093ce:	bfb8      	it	lt
 80093d0:	4613      	movlt	r3, r2
 80093d2:	6033      	str	r3, [r6, #0]
 80093d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093d8:	4607      	mov	r7, r0
 80093da:	460c      	mov	r4, r1
 80093dc:	b10a      	cbz	r2, 80093e2 <_printf_common+0x26>
 80093de:	3301      	adds	r3, #1
 80093e0:	6033      	str	r3, [r6, #0]
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	0699      	lsls	r1, r3, #26
 80093e6:	bf42      	ittt	mi
 80093e8:	6833      	ldrmi	r3, [r6, #0]
 80093ea:	3302      	addmi	r3, #2
 80093ec:	6033      	strmi	r3, [r6, #0]
 80093ee:	6825      	ldr	r5, [r4, #0]
 80093f0:	f015 0506 	ands.w	r5, r5, #6
 80093f4:	d106      	bne.n	8009404 <_printf_common+0x48>
 80093f6:	f104 0a19 	add.w	sl, r4, #25
 80093fa:	68e3      	ldr	r3, [r4, #12]
 80093fc:	6832      	ldr	r2, [r6, #0]
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	42ab      	cmp	r3, r5
 8009402:	dc26      	bgt.n	8009452 <_printf_common+0x96>
 8009404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009408:	1e13      	subs	r3, r2, #0
 800940a:	6822      	ldr	r2, [r4, #0]
 800940c:	bf18      	it	ne
 800940e:	2301      	movne	r3, #1
 8009410:	0692      	lsls	r2, r2, #26
 8009412:	d42b      	bmi.n	800946c <_printf_common+0xb0>
 8009414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009418:	4649      	mov	r1, r9
 800941a:	4638      	mov	r0, r7
 800941c:	47c0      	blx	r8
 800941e:	3001      	adds	r0, #1
 8009420:	d01e      	beq.n	8009460 <_printf_common+0xa4>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	68e5      	ldr	r5, [r4, #12]
 8009426:	6832      	ldr	r2, [r6, #0]
 8009428:	f003 0306 	and.w	r3, r3, #6
 800942c:	2b04      	cmp	r3, #4
 800942e:	bf08      	it	eq
 8009430:	1aad      	subeq	r5, r5, r2
 8009432:	68a3      	ldr	r3, [r4, #8]
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	bf0c      	ite	eq
 8009438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800943c:	2500      	movne	r5, #0
 800943e:	4293      	cmp	r3, r2
 8009440:	bfc4      	itt	gt
 8009442:	1a9b      	subgt	r3, r3, r2
 8009444:	18ed      	addgt	r5, r5, r3
 8009446:	2600      	movs	r6, #0
 8009448:	341a      	adds	r4, #26
 800944a:	42b5      	cmp	r5, r6
 800944c:	d11a      	bne.n	8009484 <_printf_common+0xc8>
 800944e:	2000      	movs	r0, #0
 8009450:	e008      	b.n	8009464 <_printf_common+0xa8>
 8009452:	2301      	movs	r3, #1
 8009454:	4652      	mov	r2, sl
 8009456:	4649      	mov	r1, r9
 8009458:	4638      	mov	r0, r7
 800945a:	47c0      	blx	r8
 800945c:	3001      	adds	r0, #1
 800945e:	d103      	bne.n	8009468 <_printf_common+0xac>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009468:	3501      	adds	r5, #1
 800946a:	e7c6      	b.n	80093fa <_printf_common+0x3e>
 800946c:	18e1      	adds	r1, r4, r3
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	2030      	movs	r0, #48	; 0x30
 8009472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009476:	4422      	add	r2, r4
 8009478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800947c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009480:	3302      	adds	r3, #2
 8009482:	e7c7      	b.n	8009414 <_printf_common+0x58>
 8009484:	2301      	movs	r3, #1
 8009486:	4622      	mov	r2, r4
 8009488:	4649      	mov	r1, r9
 800948a:	4638      	mov	r0, r7
 800948c:	47c0      	blx	r8
 800948e:	3001      	adds	r0, #1
 8009490:	d0e6      	beq.n	8009460 <_printf_common+0xa4>
 8009492:	3601      	adds	r6, #1
 8009494:	e7d9      	b.n	800944a <_printf_common+0x8e>
	...

08009498 <_printf_i>:
 8009498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800949c:	7e0f      	ldrb	r7, [r1, #24]
 800949e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094a0:	2f78      	cmp	r7, #120	; 0x78
 80094a2:	4691      	mov	r9, r2
 80094a4:	4680      	mov	r8, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	469a      	mov	sl, r3
 80094aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094ae:	d807      	bhi.n	80094c0 <_printf_i+0x28>
 80094b0:	2f62      	cmp	r7, #98	; 0x62
 80094b2:	d80a      	bhi.n	80094ca <_printf_i+0x32>
 80094b4:	2f00      	cmp	r7, #0
 80094b6:	f000 80d8 	beq.w	800966a <_printf_i+0x1d2>
 80094ba:	2f58      	cmp	r7, #88	; 0x58
 80094bc:	f000 80a3 	beq.w	8009606 <_printf_i+0x16e>
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094c8:	e03a      	b.n	8009540 <_printf_i+0xa8>
 80094ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ce:	2b15      	cmp	r3, #21
 80094d0:	d8f6      	bhi.n	80094c0 <_printf_i+0x28>
 80094d2:	a101      	add	r1, pc, #4	; (adr r1, 80094d8 <_printf_i+0x40>)
 80094d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094d8:	08009531 	.word	0x08009531
 80094dc:	08009545 	.word	0x08009545
 80094e0:	080094c1 	.word	0x080094c1
 80094e4:	080094c1 	.word	0x080094c1
 80094e8:	080094c1 	.word	0x080094c1
 80094ec:	080094c1 	.word	0x080094c1
 80094f0:	08009545 	.word	0x08009545
 80094f4:	080094c1 	.word	0x080094c1
 80094f8:	080094c1 	.word	0x080094c1
 80094fc:	080094c1 	.word	0x080094c1
 8009500:	080094c1 	.word	0x080094c1
 8009504:	08009651 	.word	0x08009651
 8009508:	08009575 	.word	0x08009575
 800950c:	08009633 	.word	0x08009633
 8009510:	080094c1 	.word	0x080094c1
 8009514:	080094c1 	.word	0x080094c1
 8009518:	08009673 	.word	0x08009673
 800951c:	080094c1 	.word	0x080094c1
 8009520:	08009575 	.word	0x08009575
 8009524:	080094c1 	.word	0x080094c1
 8009528:	080094c1 	.word	0x080094c1
 800952c:	0800963b 	.word	0x0800963b
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	602a      	str	r2, [r5, #0]
 8009538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800953c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009540:	2301      	movs	r3, #1
 8009542:	e0a3      	b.n	800968c <_printf_i+0x1f4>
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	6829      	ldr	r1, [r5, #0]
 8009548:	0606      	lsls	r6, r0, #24
 800954a:	f101 0304 	add.w	r3, r1, #4
 800954e:	d50a      	bpl.n	8009566 <_printf_i+0xce>
 8009550:	680e      	ldr	r6, [r1, #0]
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	2e00      	cmp	r6, #0
 8009556:	da03      	bge.n	8009560 <_printf_i+0xc8>
 8009558:	232d      	movs	r3, #45	; 0x2d
 800955a:	4276      	negs	r6, r6
 800955c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009560:	485e      	ldr	r0, [pc, #376]	; (80096dc <_printf_i+0x244>)
 8009562:	230a      	movs	r3, #10
 8009564:	e019      	b.n	800959a <_printf_i+0x102>
 8009566:	680e      	ldr	r6, [r1, #0]
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800956e:	bf18      	it	ne
 8009570:	b236      	sxthne	r6, r6
 8009572:	e7ef      	b.n	8009554 <_printf_i+0xbc>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	6820      	ldr	r0, [r4, #0]
 8009578:	1d19      	adds	r1, r3, #4
 800957a:	6029      	str	r1, [r5, #0]
 800957c:	0601      	lsls	r1, r0, #24
 800957e:	d501      	bpl.n	8009584 <_printf_i+0xec>
 8009580:	681e      	ldr	r6, [r3, #0]
 8009582:	e002      	b.n	800958a <_printf_i+0xf2>
 8009584:	0646      	lsls	r6, r0, #25
 8009586:	d5fb      	bpl.n	8009580 <_printf_i+0xe8>
 8009588:	881e      	ldrh	r6, [r3, #0]
 800958a:	4854      	ldr	r0, [pc, #336]	; (80096dc <_printf_i+0x244>)
 800958c:	2f6f      	cmp	r7, #111	; 0x6f
 800958e:	bf0c      	ite	eq
 8009590:	2308      	moveq	r3, #8
 8009592:	230a      	movne	r3, #10
 8009594:	2100      	movs	r1, #0
 8009596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800959a:	6865      	ldr	r5, [r4, #4]
 800959c:	60a5      	str	r5, [r4, #8]
 800959e:	2d00      	cmp	r5, #0
 80095a0:	bfa2      	ittt	ge
 80095a2:	6821      	ldrge	r1, [r4, #0]
 80095a4:	f021 0104 	bicge.w	r1, r1, #4
 80095a8:	6021      	strge	r1, [r4, #0]
 80095aa:	b90e      	cbnz	r6, 80095b0 <_printf_i+0x118>
 80095ac:	2d00      	cmp	r5, #0
 80095ae:	d04d      	beq.n	800964c <_printf_i+0x1b4>
 80095b0:	4615      	mov	r5, r2
 80095b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80095b6:	fb03 6711 	mls	r7, r3, r1, r6
 80095ba:	5dc7      	ldrb	r7, [r0, r7]
 80095bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095c0:	4637      	mov	r7, r6
 80095c2:	42bb      	cmp	r3, r7
 80095c4:	460e      	mov	r6, r1
 80095c6:	d9f4      	bls.n	80095b2 <_printf_i+0x11a>
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d10b      	bne.n	80095e4 <_printf_i+0x14c>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	07de      	lsls	r6, r3, #31
 80095d0:	d508      	bpl.n	80095e4 <_printf_i+0x14c>
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	6861      	ldr	r1, [r4, #4]
 80095d6:	4299      	cmp	r1, r3
 80095d8:	bfde      	ittt	le
 80095da:	2330      	movle	r3, #48	; 0x30
 80095dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095e4:	1b52      	subs	r2, r2, r5
 80095e6:	6122      	str	r2, [r4, #16]
 80095e8:	f8cd a000 	str.w	sl, [sp]
 80095ec:	464b      	mov	r3, r9
 80095ee:	aa03      	add	r2, sp, #12
 80095f0:	4621      	mov	r1, r4
 80095f2:	4640      	mov	r0, r8
 80095f4:	f7ff fee2 	bl	80093bc <_printf_common>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d14c      	bne.n	8009696 <_printf_i+0x1fe>
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009600:	b004      	add	sp, #16
 8009602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009606:	4835      	ldr	r0, [pc, #212]	; (80096dc <_printf_i+0x244>)
 8009608:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800960c:	6829      	ldr	r1, [r5, #0]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	f851 6b04 	ldr.w	r6, [r1], #4
 8009614:	6029      	str	r1, [r5, #0]
 8009616:	061d      	lsls	r5, r3, #24
 8009618:	d514      	bpl.n	8009644 <_printf_i+0x1ac>
 800961a:	07df      	lsls	r7, r3, #31
 800961c:	bf44      	itt	mi
 800961e:	f043 0320 	orrmi.w	r3, r3, #32
 8009622:	6023      	strmi	r3, [r4, #0]
 8009624:	b91e      	cbnz	r6, 800962e <_printf_i+0x196>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	f023 0320 	bic.w	r3, r3, #32
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	2310      	movs	r3, #16
 8009630:	e7b0      	b.n	8009594 <_printf_i+0xfc>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	f043 0320 	orr.w	r3, r3, #32
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	2378      	movs	r3, #120	; 0x78
 800963c:	4828      	ldr	r0, [pc, #160]	; (80096e0 <_printf_i+0x248>)
 800963e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009642:	e7e3      	b.n	800960c <_printf_i+0x174>
 8009644:	0659      	lsls	r1, r3, #25
 8009646:	bf48      	it	mi
 8009648:	b2b6      	uxthmi	r6, r6
 800964a:	e7e6      	b.n	800961a <_printf_i+0x182>
 800964c:	4615      	mov	r5, r2
 800964e:	e7bb      	b.n	80095c8 <_printf_i+0x130>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	6826      	ldr	r6, [r4, #0]
 8009654:	6961      	ldr	r1, [r4, #20]
 8009656:	1d18      	adds	r0, r3, #4
 8009658:	6028      	str	r0, [r5, #0]
 800965a:	0635      	lsls	r5, r6, #24
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	d501      	bpl.n	8009664 <_printf_i+0x1cc>
 8009660:	6019      	str	r1, [r3, #0]
 8009662:	e002      	b.n	800966a <_printf_i+0x1d2>
 8009664:	0670      	lsls	r0, r6, #25
 8009666:	d5fb      	bpl.n	8009660 <_printf_i+0x1c8>
 8009668:	8019      	strh	r1, [r3, #0]
 800966a:	2300      	movs	r3, #0
 800966c:	6123      	str	r3, [r4, #16]
 800966e:	4615      	mov	r5, r2
 8009670:	e7ba      	b.n	80095e8 <_printf_i+0x150>
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	1d1a      	adds	r2, r3, #4
 8009676:	602a      	str	r2, [r5, #0]
 8009678:	681d      	ldr	r5, [r3, #0]
 800967a:	6862      	ldr	r2, [r4, #4]
 800967c:	2100      	movs	r1, #0
 800967e:	4628      	mov	r0, r5
 8009680:	f7f6 fdb6 	bl	80001f0 <memchr>
 8009684:	b108      	cbz	r0, 800968a <_printf_i+0x1f2>
 8009686:	1b40      	subs	r0, r0, r5
 8009688:	6060      	str	r0, [r4, #4]
 800968a:	6863      	ldr	r3, [r4, #4]
 800968c:	6123      	str	r3, [r4, #16]
 800968e:	2300      	movs	r3, #0
 8009690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009694:	e7a8      	b.n	80095e8 <_printf_i+0x150>
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	462a      	mov	r2, r5
 800969a:	4649      	mov	r1, r9
 800969c:	4640      	mov	r0, r8
 800969e:	47d0      	blx	sl
 80096a0:	3001      	adds	r0, #1
 80096a2:	d0ab      	beq.n	80095fc <_printf_i+0x164>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	079b      	lsls	r3, r3, #30
 80096a8:	d413      	bmi.n	80096d2 <_printf_i+0x23a>
 80096aa:	68e0      	ldr	r0, [r4, #12]
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	4298      	cmp	r0, r3
 80096b0:	bfb8      	it	lt
 80096b2:	4618      	movlt	r0, r3
 80096b4:	e7a4      	b.n	8009600 <_printf_i+0x168>
 80096b6:	2301      	movs	r3, #1
 80096b8:	4632      	mov	r2, r6
 80096ba:	4649      	mov	r1, r9
 80096bc:	4640      	mov	r0, r8
 80096be:	47d0      	blx	sl
 80096c0:	3001      	adds	r0, #1
 80096c2:	d09b      	beq.n	80095fc <_printf_i+0x164>
 80096c4:	3501      	adds	r5, #1
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	9903      	ldr	r1, [sp, #12]
 80096ca:	1a5b      	subs	r3, r3, r1
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dcf2      	bgt.n	80096b6 <_printf_i+0x21e>
 80096d0:	e7eb      	b.n	80096aa <_printf_i+0x212>
 80096d2:	2500      	movs	r5, #0
 80096d4:	f104 0619 	add.w	r6, r4, #25
 80096d8:	e7f5      	b.n	80096c6 <_printf_i+0x22e>
 80096da:	bf00      	nop
 80096dc:	0800c61e 	.word	0x0800c61e
 80096e0:	0800c62f 	.word	0x0800c62f

080096e4 <iprintf>:
 80096e4:	b40f      	push	{r0, r1, r2, r3}
 80096e6:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <iprintf+0x2c>)
 80096e8:	b513      	push	{r0, r1, r4, lr}
 80096ea:	681c      	ldr	r4, [r3, #0]
 80096ec:	b124      	cbz	r4, 80096f8 <iprintf+0x14>
 80096ee:	69a3      	ldr	r3, [r4, #24]
 80096f0:	b913      	cbnz	r3, 80096f8 <iprintf+0x14>
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fee2 	bl	800a4bc <__sinit>
 80096f8:	ab05      	add	r3, sp, #20
 80096fa:	9a04      	ldr	r2, [sp, #16]
 80096fc:	68a1      	ldr	r1, [r4, #8]
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	4620      	mov	r0, r4
 8009702:	f001 fc2d 	bl	800af60 <_vfiprintf_r>
 8009706:	b002      	add	sp, #8
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970c:	b004      	add	sp, #16
 800970e:	4770      	bx	lr
 8009710:	20000048 	.word	0x20000048

08009714 <quorem>:
 8009714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	6903      	ldr	r3, [r0, #16]
 800971a:	690c      	ldr	r4, [r1, #16]
 800971c:	42a3      	cmp	r3, r4
 800971e:	4607      	mov	r7, r0
 8009720:	f2c0 8081 	blt.w	8009826 <quorem+0x112>
 8009724:	3c01      	subs	r4, #1
 8009726:	f101 0814 	add.w	r8, r1, #20
 800972a:	f100 0514 	add.w	r5, r0, #20
 800972e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800973c:	3301      	adds	r3, #1
 800973e:	429a      	cmp	r2, r3
 8009740:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009744:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009748:	fbb2 f6f3 	udiv	r6, r2, r3
 800974c:	d331      	bcc.n	80097b2 <quorem+0x9e>
 800974e:	f04f 0e00 	mov.w	lr, #0
 8009752:	4640      	mov	r0, r8
 8009754:	46ac      	mov	ip, r5
 8009756:	46f2      	mov	sl, lr
 8009758:	f850 2b04 	ldr.w	r2, [r0], #4
 800975c:	b293      	uxth	r3, r2
 800975e:	fb06 e303 	mla	r3, r6, r3, lr
 8009762:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009766:	b29b      	uxth	r3, r3
 8009768:	ebaa 0303 	sub.w	r3, sl, r3
 800976c:	f8dc a000 	ldr.w	sl, [ip]
 8009770:	0c12      	lsrs	r2, r2, #16
 8009772:	fa13 f38a 	uxtah	r3, r3, sl
 8009776:	fb06 e202 	mla	r2, r6, r2, lr
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	9b00      	ldr	r3, [sp, #0]
 800977e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009782:	b292      	uxth	r2, r2
 8009784:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009788:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800978c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009790:	4581      	cmp	r9, r0
 8009792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009796:	f84c 3b04 	str.w	r3, [ip], #4
 800979a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800979e:	d2db      	bcs.n	8009758 <quorem+0x44>
 80097a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80097a4:	b92b      	cbnz	r3, 80097b2 <quorem+0x9e>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	429d      	cmp	r5, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	d32e      	bcc.n	800980e <quorem+0xfa>
 80097b0:	613c      	str	r4, [r7, #16]
 80097b2:	4638      	mov	r0, r7
 80097b4:	f001 f9b2 	bl	800ab1c <__mcmp>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	db24      	blt.n	8009806 <quorem+0xf2>
 80097bc:	3601      	adds	r6, #1
 80097be:	4628      	mov	r0, r5
 80097c0:	f04f 0c00 	mov.w	ip, #0
 80097c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80097c8:	f8d0 e000 	ldr.w	lr, [r0]
 80097cc:	b293      	uxth	r3, r2
 80097ce:	ebac 0303 	sub.w	r3, ip, r3
 80097d2:	0c12      	lsrs	r2, r2, #16
 80097d4:	fa13 f38e 	uxtah	r3, r3, lr
 80097d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097e6:	45c1      	cmp	r9, r8
 80097e8:	f840 3b04 	str.w	r3, [r0], #4
 80097ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097f0:	d2e8      	bcs.n	80097c4 <quorem+0xb0>
 80097f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fa:	b922      	cbnz	r2, 8009806 <quorem+0xf2>
 80097fc:	3b04      	subs	r3, #4
 80097fe:	429d      	cmp	r5, r3
 8009800:	461a      	mov	r2, r3
 8009802:	d30a      	bcc.n	800981a <quorem+0x106>
 8009804:	613c      	str	r4, [r7, #16]
 8009806:	4630      	mov	r0, r6
 8009808:	b003      	add	sp, #12
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	3b04      	subs	r3, #4
 8009812:	2a00      	cmp	r2, #0
 8009814:	d1cc      	bne.n	80097b0 <quorem+0x9c>
 8009816:	3c01      	subs	r4, #1
 8009818:	e7c7      	b.n	80097aa <quorem+0x96>
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	3b04      	subs	r3, #4
 800981e:	2a00      	cmp	r2, #0
 8009820:	d1f0      	bne.n	8009804 <quorem+0xf0>
 8009822:	3c01      	subs	r4, #1
 8009824:	e7eb      	b.n	80097fe <quorem+0xea>
 8009826:	2000      	movs	r0, #0
 8009828:	e7ee      	b.n	8009808 <quorem+0xf4>
 800982a:	0000      	movs	r0, r0
 800982c:	0000      	movs	r0, r0
	...

08009830 <_dtoa_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ed2d 8b04 	vpush	{d8-d9}
 8009838:	ec57 6b10 	vmov	r6, r7, d0
 800983c:	b093      	sub	sp, #76	; 0x4c
 800983e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009844:	9106      	str	r1, [sp, #24]
 8009846:	ee10 aa10 	vmov	sl, s0
 800984a:	4604      	mov	r4, r0
 800984c:	9209      	str	r2, [sp, #36]	; 0x24
 800984e:	930c      	str	r3, [sp, #48]	; 0x30
 8009850:	46bb      	mov	fp, r7
 8009852:	b975      	cbnz	r5, 8009872 <_dtoa_r+0x42>
 8009854:	2010      	movs	r0, #16
 8009856:	f000 fed7 	bl	800a608 <malloc>
 800985a:	4602      	mov	r2, r0
 800985c:	6260      	str	r0, [r4, #36]	; 0x24
 800985e:	b920      	cbnz	r0, 800986a <_dtoa_r+0x3a>
 8009860:	4ba7      	ldr	r3, [pc, #668]	; (8009b00 <_dtoa_r+0x2d0>)
 8009862:	21ea      	movs	r1, #234	; 0xea
 8009864:	48a7      	ldr	r0, [pc, #668]	; (8009b04 <_dtoa_r+0x2d4>)
 8009866:	f001 fdd1 	bl	800b40c <__assert_func>
 800986a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800986e:	6005      	str	r5, [r0, #0]
 8009870:	60c5      	str	r5, [r0, #12]
 8009872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	b151      	cbz	r1, 800988e <_dtoa_r+0x5e>
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	604a      	str	r2, [r1, #4]
 800987c:	2301      	movs	r3, #1
 800987e:	4093      	lsls	r3, r2
 8009880:	608b      	str	r3, [r1, #8]
 8009882:	4620      	mov	r0, r4
 8009884:	f000 ff08 	bl	800a698 <_Bfree>
 8009888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	1e3b      	subs	r3, r7, #0
 8009890:	bfaa      	itet	ge
 8009892:	2300      	movge	r3, #0
 8009894:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009898:	f8c8 3000 	strge.w	r3, [r8]
 800989c:	4b9a      	ldr	r3, [pc, #616]	; (8009b08 <_dtoa_r+0x2d8>)
 800989e:	bfbc      	itt	lt
 80098a0:	2201      	movlt	r2, #1
 80098a2:	f8c8 2000 	strlt.w	r2, [r8]
 80098a6:	ea33 030b 	bics.w	r3, r3, fp
 80098aa:	d11b      	bne.n	80098e4 <_dtoa_r+0xb4>
 80098ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b8:	4333      	orrs	r3, r6
 80098ba:	f000 8592 	beq.w	800a3e2 <_dtoa_r+0xbb2>
 80098be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c0:	b963      	cbnz	r3, 80098dc <_dtoa_r+0xac>
 80098c2:	4b92      	ldr	r3, [pc, #584]	; (8009b0c <_dtoa_r+0x2dc>)
 80098c4:	e022      	b.n	800990c <_dtoa_r+0xdc>
 80098c6:	4b92      	ldr	r3, [pc, #584]	; (8009b10 <_dtoa_r+0x2e0>)
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	3308      	adds	r3, #8
 80098cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	9801      	ldr	r0, [sp, #4]
 80098d2:	b013      	add	sp, #76	; 0x4c
 80098d4:	ecbd 8b04 	vpop	{d8-d9}
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	4b8b      	ldr	r3, [pc, #556]	; (8009b0c <_dtoa_r+0x2dc>)
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	3303      	adds	r3, #3
 80098e2:	e7f3      	b.n	80098cc <_dtoa_r+0x9c>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	4650      	mov	r0, sl
 80098ea:	4659      	mov	r1, fp
 80098ec:	f7f7 f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80098f0:	ec4b ab19 	vmov	d9, sl, fp
 80098f4:	4680      	mov	r8, r0
 80098f6:	b158      	cbz	r0, 8009910 <_dtoa_r+0xe0>
 80098f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098fa:	2301      	movs	r3, #1
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 856b 	beq.w	800a3dc <_dtoa_r+0xbac>
 8009906:	4883      	ldr	r0, [pc, #524]	; (8009b14 <_dtoa_r+0x2e4>)
 8009908:	6018      	str	r0, [r3, #0]
 800990a:	1e43      	subs	r3, r0, #1
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	e7df      	b.n	80098d0 <_dtoa_r+0xa0>
 8009910:	ec4b ab10 	vmov	d0, sl, fp
 8009914:	aa10      	add	r2, sp, #64	; 0x40
 8009916:	a911      	add	r1, sp, #68	; 0x44
 8009918:	4620      	mov	r0, r4
 800991a:	f001 f9a5 	bl	800ac68 <__d2b>
 800991e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009922:	ee08 0a10 	vmov	s16, r0
 8009926:	2d00      	cmp	r5, #0
 8009928:	f000 8084 	beq.w	8009a34 <_dtoa_r+0x204>
 800992c:	ee19 3a90 	vmov	r3, s19
 8009930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009934:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009938:	4656      	mov	r6, sl
 800993a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800993e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009942:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009946:	4b74      	ldr	r3, [pc, #464]	; (8009b18 <_dtoa_r+0x2e8>)
 8009948:	2200      	movs	r2, #0
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f6 fca3 	bl	8000298 <__aeabi_dsub>
 8009952:	a365      	add	r3, pc, #404	; (adr r3, 8009ae8 <_dtoa_r+0x2b8>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fe56 	bl	8000608 <__aeabi_dmul>
 800995c:	a364      	add	r3, pc, #400	; (adr r3, 8009af0 <_dtoa_r+0x2c0>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 fc9b 	bl	800029c <__adddf3>
 8009966:	4606      	mov	r6, r0
 8009968:	4628      	mov	r0, r5
 800996a:	460f      	mov	r7, r1
 800996c:	f7f6 fde2 	bl	8000534 <__aeabi_i2d>
 8009970:	a361      	add	r3, pc, #388	; (adr r3, 8009af8 <_dtoa_r+0x2c8>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe47 	bl	8000608 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4630      	mov	r0, r6
 8009980:	4639      	mov	r1, r7
 8009982:	f7f6 fc8b 	bl	800029c <__adddf3>
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	f7f7 f8ed 	bl	8000b68 <__aeabi_d2iz>
 800998e:	2200      	movs	r2, #0
 8009990:	9000      	str	r0, [sp, #0]
 8009992:	2300      	movs	r3, #0
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f7 f8a8 	bl	8000aec <__aeabi_dcmplt>
 800999c:	b150      	cbz	r0, 80099b4 <_dtoa_r+0x184>
 800999e:	9800      	ldr	r0, [sp, #0]
 80099a0:	f7f6 fdc8 	bl	8000534 <__aeabi_i2d>
 80099a4:	4632      	mov	r2, r6
 80099a6:	463b      	mov	r3, r7
 80099a8:	f7f7 f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ac:	b910      	cbnz	r0, 80099b4 <_dtoa_r+0x184>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	2b16      	cmp	r3, #22
 80099b8:	d85a      	bhi.n	8009a70 <_dtoa_r+0x240>
 80099ba:	9a00      	ldr	r2, [sp, #0]
 80099bc:	4b57      	ldr	r3, [pc, #348]	; (8009b1c <_dtoa_r+0x2ec>)
 80099be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	ec51 0b19 	vmov	r0, r1, d9
 80099ca:	f7f7 f88f 	bl	8000aec <__aeabi_dcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d050      	beq.n	8009a74 <_dtoa_r+0x244>
 80099d2:	9b00      	ldr	r3, [sp, #0]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2300      	movs	r3, #0
 80099da:	930b      	str	r3, [sp, #44]	; 0x2c
 80099dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099de:	1b5d      	subs	r5, r3, r5
 80099e0:	1e6b      	subs	r3, r5, #1
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	bf45      	ittet	mi
 80099e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80099ea:	9304      	strmi	r3, [sp, #16]
 80099ec:	2300      	movpl	r3, #0
 80099ee:	2300      	movmi	r3, #0
 80099f0:	bf4c      	ite	mi
 80099f2:	9305      	strmi	r3, [sp, #20]
 80099f4:	9304      	strpl	r3, [sp, #16]
 80099f6:	9b00      	ldr	r3, [sp, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	db3d      	blt.n	8009a78 <_dtoa_r+0x248>
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	9a00      	ldr	r2, [sp, #0]
 8009a00:	920a      	str	r2, [sp, #40]	; 0x28
 8009a02:	4413      	add	r3, r2
 8009a04:	9305      	str	r3, [sp, #20]
 8009a06:	2300      	movs	r3, #0
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	2b09      	cmp	r3, #9
 8009a0e:	f200 8089 	bhi.w	8009b24 <_dtoa_r+0x2f4>
 8009a12:	2b05      	cmp	r3, #5
 8009a14:	bfc4      	itt	gt
 8009a16:	3b04      	subgt	r3, #4
 8009a18:	9306      	strgt	r3, [sp, #24]
 8009a1a:	9b06      	ldr	r3, [sp, #24]
 8009a1c:	f1a3 0302 	sub.w	r3, r3, #2
 8009a20:	bfcc      	ite	gt
 8009a22:	2500      	movgt	r5, #0
 8009a24:	2501      	movle	r5, #1
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	f200 8087 	bhi.w	8009b3a <_dtoa_r+0x30a>
 8009a2c:	e8df f003 	tbb	[pc, r3]
 8009a30:	59383a2d 	.word	0x59383a2d
 8009a34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a38:	441d      	add	r5, r3
 8009a3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	bfc1      	itttt	gt
 8009a42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a52:	bfda      	itte	le
 8009a54:	f1c3 0320 	rsble	r3, r3, #32
 8009a58:	fa06 f003 	lslle.w	r0, r6, r3
 8009a5c:	4318      	orrgt	r0, r3
 8009a5e:	f7f6 fd59 	bl	8000514 <__aeabi_ui2d>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4606      	mov	r6, r0
 8009a66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a6a:	3d01      	subs	r5, #1
 8009a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a6e:	e76a      	b.n	8009946 <_dtoa_r+0x116>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7b2      	b.n	80099da <_dtoa_r+0x1aa>
 8009a74:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a76:	e7b1      	b.n	80099dc <_dtoa_r+0x1ac>
 8009a78:	9b04      	ldr	r3, [sp, #16]
 8009a7a:	9a00      	ldr	r2, [sp, #0]
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	9304      	str	r3, [sp, #16]
 8009a80:	4253      	negs	r3, r2
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	2300      	movs	r3, #0
 8009a86:	930a      	str	r3, [sp, #40]	; 0x28
 8009a88:	e7bf      	b.n	8009a0a <_dtoa_r+0x1da>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc55      	bgt.n	8009b40 <_dtoa_r+0x310>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9e:	e00c      	b.n	8009aba <_dtoa_r+0x28a>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7f3      	b.n	8009a8c <_dtoa_r+0x25c>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aa8:	9308      	str	r3, [sp, #32]
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	4413      	add	r3, r2
 8009aae:	9302      	str	r3, [sp, #8]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	bfb8      	it	lt
 8009ab8:	2301      	movlt	r3, #1
 8009aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009abc:	2200      	movs	r2, #0
 8009abe:	6042      	str	r2, [r0, #4]
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	f102 0614 	add.w	r6, r2, #20
 8009ac6:	429e      	cmp	r6, r3
 8009ac8:	6841      	ldr	r1, [r0, #4]
 8009aca:	d93d      	bls.n	8009b48 <_dtoa_r+0x318>
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fda3 	bl	800a618 <_Balloc>
 8009ad2:	9001      	str	r0, [sp, #4]
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d13b      	bne.n	8009b50 <_dtoa_r+0x320>
 8009ad8:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <_dtoa_r+0x2f0>)
 8009ada:	4602      	mov	r2, r0
 8009adc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ae0:	e6c0      	b.n	8009864 <_dtoa_r+0x34>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e7df      	b.n	8009aa6 <_dtoa_r+0x276>
 8009ae6:	bf00      	nop
 8009ae8:	636f4361 	.word	0x636f4361
 8009aec:	3fd287a7 	.word	0x3fd287a7
 8009af0:	8b60c8b3 	.word	0x8b60c8b3
 8009af4:	3fc68a28 	.word	0x3fc68a28
 8009af8:	509f79fb 	.word	0x509f79fb
 8009afc:	3fd34413 	.word	0x3fd34413
 8009b00:	0800c64d 	.word	0x0800c64d
 8009b04:	0800c664 	.word	0x0800c664
 8009b08:	7ff00000 	.word	0x7ff00000
 8009b0c:	0800c649 	.word	0x0800c649
 8009b10:	0800c640 	.word	0x0800c640
 8009b14:	0800c61d 	.word	0x0800c61d
 8009b18:	3ff80000 	.word	0x3ff80000
 8009b1c:	0800c7b8 	.word	0x0800c7b8
 8009b20:	0800c6bf 	.word	0x0800c6bf
 8009b24:	2501      	movs	r5, #1
 8009b26:	2300      	movs	r3, #0
 8009b28:	9306      	str	r3, [sp, #24]
 8009b2a:	9508      	str	r5, [sp, #32]
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b34:	2200      	movs	r2, #0
 8009b36:	2312      	movs	r3, #18
 8009b38:	e7b0      	b.n	8009a9c <_dtoa_r+0x26c>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9308      	str	r3, [sp, #32]
 8009b3e:	e7f5      	b.n	8009b2c <_dtoa_r+0x2fc>
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b46:	e7b8      	b.n	8009aba <_dtoa_r+0x28a>
 8009b48:	3101      	adds	r1, #1
 8009b4a:	6041      	str	r1, [r0, #4]
 8009b4c:	0052      	lsls	r2, r2, #1
 8009b4e:	e7b8      	b.n	8009ac2 <_dtoa_r+0x292>
 8009b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b52:	9a01      	ldr	r2, [sp, #4]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	2b0e      	cmp	r3, #14
 8009b5a:	f200 809d 	bhi.w	8009c98 <_dtoa_r+0x468>
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	f000 809a 	beq.w	8009c98 <_dtoa_r+0x468>
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dd32      	ble.n	8009bd0 <_dtoa_r+0x3a0>
 8009b6a:	4ab7      	ldr	r2, [pc, #732]	; (8009e48 <_dtoa_r+0x618>)
 8009b6c:	f003 030f 	and.w	r3, r3, #15
 8009b70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	05d8      	lsls	r0, r3, #23
 8009b7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b80:	d516      	bpl.n	8009bb0 <_dtoa_r+0x380>
 8009b82:	4bb2      	ldr	r3, [pc, #712]	; (8009e4c <_dtoa_r+0x61c>)
 8009b84:	ec51 0b19 	vmov	r0, r1, d9
 8009b88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b8c:	f7f6 fe66 	bl	800085c <__aeabi_ddiv>
 8009b90:	f007 070f 	and.w	r7, r7, #15
 8009b94:	4682      	mov	sl, r0
 8009b96:	468b      	mov	fp, r1
 8009b98:	2503      	movs	r5, #3
 8009b9a:	4eac      	ldr	r6, [pc, #688]	; (8009e4c <_dtoa_r+0x61c>)
 8009b9c:	b957      	cbnz	r7, 8009bb4 <_dtoa_r+0x384>
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	4659      	mov	r1, fp
 8009ba6:	f7f6 fe59 	bl	800085c <__aeabi_ddiv>
 8009baa:	4682      	mov	sl, r0
 8009bac:	468b      	mov	fp, r1
 8009bae:	e028      	b.n	8009c02 <_dtoa_r+0x3d2>
 8009bb0:	2502      	movs	r5, #2
 8009bb2:	e7f2      	b.n	8009b9a <_dtoa_r+0x36a>
 8009bb4:	07f9      	lsls	r1, r7, #31
 8009bb6:	d508      	bpl.n	8009bca <_dtoa_r+0x39a>
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bc0:	f7f6 fd22 	bl	8000608 <__aeabi_dmul>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	107f      	asrs	r7, r7, #1
 8009bcc:	3608      	adds	r6, #8
 8009bce:	e7e5      	b.n	8009b9c <_dtoa_r+0x36c>
 8009bd0:	f000 809b 	beq.w	8009d0a <_dtoa_r+0x4da>
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	4f9d      	ldr	r7, [pc, #628]	; (8009e4c <_dtoa_r+0x61c>)
 8009bd8:	425e      	negs	r6, r3
 8009bda:	4b9b      	ldr	r3, [pc, #620]	; (8009e48 <_dtoa_r+0x618>)
 8009bdc:	f006 020f 	and.w	r2, r6, #15
 8009be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	ec51 0b19 	vmov	r0, r1, d9
 8009bec:	f7f6 fd0c 	bl	8000608 <__aeabi_dmul>
 8009bf0:	1136      	asrs	r6, r6, #4
 8009bf2:	4682      	mov	sl, r0
 8009bf4:	468b      	mov	fp, r1
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2502      	movs	r5, #2
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d17a      	bne.n	8009cf4 <_dtoa_r+0x4c4>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1d3      	bne.n	8009baa <_dtoa_r+0x37a>
 8009c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8082 	beq.w	8009d0e <_dtoa_r+0x4de>
 8009c0a:	4b91      	ldr	r3, [pc, #580]	; (8009e50 <_dtoa_r+0x620>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4650      	mov	r0, sl
 8009c10:	4659      	mov	r1, fp
 8009c12:	f7f6 ff6b 	bl	8000aec <__aeabi_dcmplt>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d079      	beq.n	8009d0e <_dtoa_r+0x4de>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d076      	beq.n	8009d0e <_dtoa_r+0x4de>
 8009c20:	9b02      	ldr	r3, [sp, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dd36      	ble.n	8009c94 <_dtoa_r+0x464>
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	4650      	mov	r0, sl
 8009c2a:	4659      	mov	r1, fp
 8009c2c:	1e5f      	subs	r7, r3, #1
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4b88      	ldr	r3, [pc, #544]	; (8009e54 <_dtoa_r+0x624>)
 8009c32:	f7f6 fce9 	bl	8000608 <__aeabi_dmul>
 8009c36:	9e02      	ldr	r6, [sp, #8]
 8009c38:	4682      	mov	sl, r0
 8009c3a:	468b      	mov	fp, r1
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f7f6 fc78 	bl	8000534 <__aeabi_i2d>
 8009c44:	4652      	mov	r2, sl
 8009c46:	465b      	mov	r3, fp
 8009c48:	f7f6 fcde 	bl	8000608 <__aeabi_dmul>
 8009c4c:	4b82      	ldr	r3, [pc, #520]	; (8009e58 <_dtoa_r+0x628>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f7f6 fb24 	bl	800029c <__adddf3>
 8009c54:	46d0      	mov	r8, sl
 8009c56:	46d9      	mov	r9, fp
 8009c58:	4682      	mov	sl, r0
 8009c5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	d158      	bne.n	8009d14 <_dtoa_r+0x4e4>
 8009c62:	4b7e      	ldr	r3, [pc, #504]	; (8009e5c <_dtoa_r+0x62c>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	4640      	mov	r0, r8
 8009c68:	4649      	mov	r1, r9
 8009c6a:	f7f6 fb15 	bl	8000298 <__aeabi_dsub>
 8009c6e:	4652      	mov	r2, sl
 8009c70:	465b      	mov	r3, fp
 8009c72:	4680      	mov	r8, r0
 8009c74:	4689      	mov	r9, r1
 8009c76:	f7f6 ff57 	bl	8000b28 <__aeabi_dcmpgt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f040 8295 	bne.w	800a1aa <_dtoa_r+0x97a>
 8009c80:	4652      	mov	r2, sl
 8009c82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c86:	4640      	mov	r0, r8
 8009c88:	4649      	mov	r1, r9
 8009c8a:	f7f6 ff2f 	bl	8000aec <__aeabi_dcmplt>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 8289 	bne.w	800a1a6 <_dtoa_r+0x976>
 8009c94:	ec5b ab19 	vmov	sl, fp, d9
 8009c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f2c0 8148 	blt.w	8009f30 <_dtoa_r+0x700>
 8009ca0:	9a00      	ldr	r2, [sp, #0]
 8009ca2:	2a0e      	cmp	r2, #14
 8009ca4:	f300 8144 	bgt.w	8009f30 <_dtoa_r+0x700>
 8009ca8:	4b67      	ldr	r3, [pc, #412]	; (8009e48 <_dtoa_r+0x618>)
 8009caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f280 80d5 	bge.w	8009e64 <_dtoa_r+0x634>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f300 80d1 	bgt.w	8009e64 <_dtoa_r+0x634>
 8009cc2:	f040 826f 	bne.w	800a1a4 <_dtoa_r+0x974>
 8009cc6:	4b65      	ldr	r3, [pc, #404]	; (8009e5c <_dtoa_r+0x62c>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	f7f6 fc9b 	bl	8000608 <__aeabi_dmul>
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	465b      	mov	r3, fp
 8009cd6:	f7f6 ff1d 	bl	8000b14 <__aeabi_dcmpge>
 8009cda:	9e03      	ldr	r6, [sp, #12]
 8009cdc:	4637      	mov	r7, r6
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f040 8245 	bne.w	800a16e <_dtoa_r+0x93e>
 8009ce4:	9d01      	ldr	r5, [sp, #4]
 8009ce6:	2331      	movs	r3, #49	; 0x31
 8009ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8009cec:	9b00      	ldr	r3, [sp, #0]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	e240      	b.n	800a176 <_dtoa_r+0x946>
 8009cf4:	07f2      	lsls	r2, r6, #31
 8009cf6:	d505      	bpl.n	8009d04 <_dtoa_r+0x4d4>
 8009cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cfc:	f7f6 fc84 	bl	8000608 <__aeabi_dmul>
 8009d00:	3501      	adds	r5, #1
 8009d02:	2301      	movs	r3, #1
 8009d04:	1076      	asrs	r6, r6, #1
 8009d06:	3708      	adds	r7, #8
 8009d08:	e777      	b.n	8009bfa <_dtoa_r+0x3ca>
 8009d0a:	2502      	movs	r5, #2
 8009d0c:	e779      	b.n	8009c02 <_dtoa_r+0x3d2>
 8009d0e:	9f00      	ldr	r7, [sp, #0]
 8009d10:	9e03      	ldr	r6, [sp, #12]
 8009d12:	e794      	b.n	8009c3e <_dtoa_r+0x40e>
 8009d14:	9901      	ldr	r1, [sp, #4]
 8009d16:	4b4c      	ldr	r3, [pc, #304]	; (8009e48 <_dtoa_r+0x618>)
 8009d18:	4431      	add	r1, r6
 8009d1a:	910d      	str	r1, [sp, #52]	; 0x34
 8009d1c:	9908      	ldr	r1, [sp, #32]
 8009d1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d043      	beq.n	8009db2 <_dtoa_r+0x582>
 8009d2a:	494d      	ldr	r1, [pc, #308]	; (8009e60 <_dtoa_r+0x630>)
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7f6 fd95 	bl	800085c <__aeabi_ddiv>
 8009d32:	4652      	mov	r2, sl
 8009d34:	465b      	mov	r3, fp
 8009d36:	f7f6 faaf 	bl	8000298 <__aeabi_dsub>
 8009d3a:	9d01      	ldr	r5, [sp, #4]
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	468b      	mov	fp, r1
 8009d40:	4649      	mov	r1, r9
 8009d42:	4640      	mov	r0, r8
 8009d44:	f7f6 ff10 	bl	8000b68 <__aeabi_d2iz>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	f7f6 fbf3 	bl	8000534 <__aeabi_i2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7f6 fa9f 	bl	8000298 <__aeabi_dsub>
 8009d5a:	3630      	adds	r6, #48	; 0x30
 8009d5c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d60:	4652      	mov	r2, sl
 8009d62:	465b      	mov	r3, fp
 8009d64:	4680      	mov	r8, r0
 8009d66:	4689      	mov	r9, r1
 8009d68:	f7f6 fec0 	bl	8000aec <__aeabi_dcmplt>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d163      	bne.n	8009e38 <_dtoa_r+0x608>
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	4936      	ldr	r1, [pc, #216]	; (8009e50 <_dtoa_r+0x620>)
 8009d76:	2000      	movs	r0, #0
 8009d78:	f7f6 fa8e 	bl	8000298 <__aeabi_dsub>
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	465b      	mov	r3, fp
 8009d80:	f7f6 feb4 	bl	8000aec <__aeabi_dcmplt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f040 80b5 	bne.w	8009ef4 <_dtoa_r+0x6c4>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	429d      	cmp	r5, r3
 8009d8e:	d081      	beq.n	8009c94 <_dtoa_r+0x464>
 8009d90:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <_dtoa_r+0x624>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	4650      	mov	r0, sl
 8009d96:	4659      	mov	r1, fp
 8009d98:	f7f6 fc36 	bl	8000608 <__aeabi_dmul>
 8009d9c:	4b2d      	ldr	r3, [pc, #180]	; (8009e54 <_dtoa_r+0x624>)
 8009d9e:	4682      	mov	sl, r0
 8009da0:	468b      	mov	fp, r1
 8009da2:	4640      	mov	r0, r8
 8009da4:	4649      	mov	r1, r9
 8009da6:	2200      	movs	r2, #0
 8009da8:	f7f6 fc2e 	bl	8000608 <__aeabi_dmul>
 8009dac:	4680      	mov	r8, r0
 8009dae:	4689      	mov	r9, r1
 8009db0:	e7c6      	b.n	8009d40 <_dtoa_r+0x510>
 8009db2:	4650      	mov	r0, sl
 8009db4:	4659      	mov	r1, fp
 8009db6:	f7f6 fc27 	bl	8000608 <__aeabi_dmul>
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	9d01      	ldr	r5, [sp, #4]
 8009dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7f6 fece 	bl	8000b68 <__aeabi_d2iz>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	f7f6 fbb1 	bl	8000534 <__aeabi_i2d>
 8009dd2:	3630      	adds	r6, #48	; 0x30
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f7f6 fa5c 	bl	8000298 <__aeabi_dsub>
 8009de0:	f805 6b01 	strb.w	r6, [r5], #1
 8009de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de6:	429d      	cmp	r5, r3
 8009de8:	4680      	mov	r8, r0
 8009dea:	4689      	mov	r9, r1
 8009dec:	f04f 0200 	mov.w	r2, #0
 8009df0:	d124      	bne.n	8009e3c <_dtoa_r+0x60c>
 8009df2:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <_dtoa_r+0x630>)
 8009df4:	4650      	mov	r0, sl
 8009df6:	4659      	mov	r1, fp
 8009df8:	f7f6 fa50 	bl	800029c <__adddf3>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4640      	mov	r0, r8
 8009e02:	4649      	mov	r1, r9
 8009e04:	f7f6 fe90 	bl	8000b28 <__aeabi_dcmpgt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d173      	bne.n	8009ef4 <_dtoa_r+0x6c4>
 8009e0c:	4652      	mov	r2, sl
 8009e0e:	465b      	mov	r3, fp
 8009e10:	4913      	ldr	r1, [pc, #76]	; (8009e60 <_dtoa_r+0x630>)
 8009e12:	2000      	movs	r0, #0
 8009e14:	f7f6 fa40 	bl	8000298 <__aeabi_dsub>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	4649      	mov	r1, r9
 8009e20:	f7f6 fe64 	bl	8000aec <__aeabi_dcmplt>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f43f af35 	beq.w	8009c94 <_dtoa_r+0x464>
 8009e2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e2c:	1e6b      	subs	r3, r5, #1
 8009e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e34:	2b30      	cmp	r3, #48	; 0x30
 8009e36:	d0f8      	beq.n	8009e2a <_dtoa_r+0x5fa>
 8009e38:	9700      	str	r7, [sp, #0]
 8009e3a:	e049      	b.n	8009ed0 <_dtoa_r+0x6a0>
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <_dtoa_r+0x624>)
 8009e3e:	f7f6 fbe3 	bl	8000608 <__aeabi_dmul>
 8009e42:	4680      	mov	r8, r0
 8009e44:	4689      	mov	r9, r1
 8009e46:	e7bd      	b.n	8009dc4 <_dtoa_r+0x594>
 8009e48:	0800c7b8 	.word	0x0800c7b8
 8009e4c:	0800c790 	.word	0x0800c790
 8009e50:	3ff00000 	.word	0x3ff00000
 8009e54:	40240000 	.word	0x40240000
 8009e58:	401c0000 	.word	0x401c0000
 8009e5c:	40140000 	.word	0x40140000
 8009e60:	3fe00000 	.word	0x3fe00000
 8009e64:	9d01      	ldr	r5, [sp, #4]
 8009e66:	4656      	mov	r6, sl
 8009e68:	465f      	mov	r7, fp
 8009e6a:	4642      	mov	r2, r8
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7f6 fcf3 	bl	800085c <__aeabi_ddiv>
 8009e76:	f7f6 fe77 	bl	8000b68 <__aeabi_d2iz>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	f7f6 fb5a 	bl	8000534 <__aeabi_i2d>
 8009e80:	4642      	mov	r2, r8
 8009e82:	464b      	mov	r3, r9
 8009e84:	f7f6 fbc0 	bl	8000608 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	f805 6b01 	strb.w	r6, [r5], #1
 8009e9c:	9e01      	ldr	r6, [sp, #4]
 8009e9e:	9f03      	ldr	r7, [sp, #12]
 8009ea0:	1bae      	subs	r6, r5, r6
 8009ea2:	42b7      	cmp	r7, r6
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	d135      	bne.n	8009f16 <_dtoa_r+0x6e6>
 8009eaa:	f7f6 f9f7 	bl	800029c <__adddf3>
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	f7f6 fe37 	bl	8000b28 <__aeabi_dcmpgt>
 8009eba:	b9d0      	cbnz	r0, 8009ef2 <_dtoa_r+0x6c2>
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ec8:	b110      	cbz	r0, 8009ed0 <_dtoa_r+0x6a0>
 8009eca:	f01a 0f01 	tst.w	sl, #1
 8009ece:	d110      	bne.n	8009ef2 <_dtoa_r+0x6c2>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	ee18 1a10 	vmov	r1, s16
 8009ed6:	f000 fbdf 	bl	800a698 <_Bfree>
 8009eda:	2300      	movs	r3, #0
 8009edc:	9800      	ldr	r0, [sp, #0]
 8009ede:	702b      	strb	r3, [r5, #0]
 8009ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	6018      	str	r0, [r3, #0]
 8009ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f43f acf1 	beq.w	80098d0 <_dtoa_r+0xa0>
 8009eee:	601d      	str	r5, [r3, #0]
 8009ef0:	e4ee      	b.n	80098d0 <_dtoa_r+0xa0>
 8009ef2:	9f00      	ldr	r7, [sp, #0]
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	461d      	mov	r5, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a39      	cmp	r2, #57	; 0x39
 8009efe:	d106      	bne.n	8009f0e <_dtoa_r+0x6de>
 8009f00:	9a01      	ldr	r2, [sp, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d1f7      	bne.n	8009ef6 <_dtoa_r+0x6c6>
 8009f06:	9901      	ldr	r1, [sp, #4]
 8009f08:	2230      	movs	r2, #48	; 0x30
 8009f0a:	3701      	adds	r7, #1
 8009f0c:	700a      	strb	r2, [r1, #0]
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	3201      	adds	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	e790      	b.n	8009e38 <_dtoa_r+0x608>
 8009f16:	4ba6      	ldr	r3, [pc, #664]	; (800a1b0 <_dtoa_r+0x980>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f7f6 fb75 	bl	8000608 <__aeabi_dmul>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	f7f6 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d09d      	beq.n	8009e6a <_dtoa_r+0x63a>
 8009f2e:	e7cf      	b.n	8009ed0 <_dtoa_r+0x6a0>
 8009f30:	9a08      	ldr	r2, [sp, #32]
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	f000 80d7 	beq.w	800a0e6 <_dtoa_r+0x8b6>
 8009f38:	9a06      	ldr	r2, [sp, #24]
 8009f3a:	2a01      	cmp	r2, #1
 8009f3c:	f300 80ba 	bgt.w	800a0b4 <_dtoa_r+0x884>
 8009f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	f000 80b2 	beq.w	800a0ac <_dtoa_r+0x87c>
 8009f48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f4c:	9e07      	ldr	r6, [sp, #28]
 8009f4e:	9d04      	ldr	r5, [sp, #16]
 8009f50:	9a04      	ldr	r2, [sp, #16]
 8009f52:	441a      	add	r2, r3
 8009f54:	9204      	str	r2, [sp, #16]
 8009f56:	9a05      	ldr	r2, [sp, #20]
 8009f58:	2101      	movs	r1, #1
 8009f5a:	441a      	add	r2, r3
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	9205      	str	r2, [sp, #20]
 8009f60:	f000 fc52 	bl	800a808 <__i2b>
 8009f64:	4607      	mov	r7, r0
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	dd0c      	ble.n	8009f84 <_dtoa_r+0x754>
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd09      	ble.n	8009f84 <_dtoa_r+0x754>
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	9a04      	ldr	r2, [sp, #16]
 8009f74:	bfa8      	it	ge
 8009f76:	462b      	movge	r3, r5
 8009f78:	1ad2      	subs	r2, r2, r3
 8009f7a:	9204      	str	r2, [sp, #16]
 8009f7c:	9a05      	ldr	r2, [sp, #20]
 8009f7e:	1aed      	subs	r5, r5, r3
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	b31b      	cbz	r3, 8009fd0 <_dtoa_r+0x7a0>
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 80af 	beq.w	800a0ee <_dtoa_r+0x8be>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	dd13      	ble.n	8009fbc <_dtoa_r+0x78c>
 8009f94:	4639      	mov	r1, r7
 8009f96:	4632      	mov	r2, r6
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fcf5 	bl	800a988 <__pow5mult>
 8009f9e:	ee18 2a10 	vmov	r2, s16
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 fc44 	bl	800a834 <__multiply>
 8009fac:	ee18 1a10 	vmov	r1, s16
 8009fb0:	4680      	mov	r8, r0
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 fb70 	bl	800a698 <_Bfree>
 8009fb8:	ee08 8a10 	vmov	s16, r8
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	1b9a      	subs	r2, r3, r6
 8009fc0:	d006      	beq.n	8009fd0 <_dtoa_r+0x7a0>
 8009fc2:	ee18 1a10 	vmov	r1, s16
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 fcde 	bl	800a988 <__pow5mult>
 8009fcc:	ee08 0a10 	vmov	s16, r0
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 fc18 	bl	800a808 <__i2b>
 8009fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	4606      	mov	r6, r0
 8009fde:	f340 8088 	ble.w	800a0f2 <_dtoa_r+0x8c2>
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 fcce 	bl	800a988 <__pow5mult>
 8009fec:	9b06      	ldr	r3, [sp, #24]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	f340 8081 	ble.w	800a0f8 <_dtoa_r+0x8c8>
 8009ff6:	f04f 0800 	mov.w	r8, #0
 8009ffa:	6933      	ldr	r3, [r6, #16]
 8009ffc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a000:	6918      	ldr	r0, [r3, #16]
 800a002:	f000 fbb1 	bl	800a768 <__hi0bits>
 800a006:	f1c0 0020 	rsb	r0, r0, #32
 800a00a:	9b05      	ldr	r3, [sp, #20]
 800a00c:	4418      	add	r0, r3
 800a00e:	f010 001f 	ands.w	r0, r0, #31
 800a012:	f000 8092 	beq.w	800a13a <_dtoa_r+0x90a>
 800a016:	f1c0 0320 	rsb	r3, r0, #32
 800a01a:	2b04      	cmp	r3, #4
 800a01c:	f340 808a 	ble.w	800a134 <_dtoa_r+0x904>
 800a020:	f1c0 001c 	rsb	r0, r0, #28
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	4403      	add	r3, r0
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	4403      	add	r3, r0
 800a02e:	4405      	add	r5, r0
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd07      	ble.n	800a048 <_dtoa_r+0x818>
 800a038:	ee18 1a10 	vmov	r1, s16
 800a03c:	461a      	mov	r2, r3
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 fcfc 	bl	800aa3c <__lshift>
 800a044:	ee08 0a10 	vmov	s16, r0
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dd05      	ble.n	800a05a <_dtoa_r+0x82a>
 800a04e:	4631      	mov	r1, r6
 800a050:	461a      	mov	r2, r3
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fcf2 	bl	800aa3c <__lshift>
 800a058:	4606      	mov	r6, r0
 800a05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d06e      	beq.n	800a13e <_dtoa_r+0x90e>
 800a060:	ee18 0a10 	vmov	r0, s16
 800a064:	4631      	mov	r1, r6
 800a066:	f000 fd59 	bl	800ab1c <__mcmp>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	da67      	bge.n	800a13e <_dtoa_r+0x90e>
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	3b01      	subs	r3, #1
 800a072:	ee18 1a10 	vmov	r1, s16
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	220a      	movs	r2, #10
 800a07a:	2300      	movs	r3, #0
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 fb2d 	bl	800a6dc <__multadd>
 800a082:	9b08      	ldr	r3, [sp, #32]
 800a084:	ee08 0a10 	vmov	s16, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 81b1 	beq.w	800a3f0 <_dtoa_r+0xbc0>
 800a08e:	2300      	movs	r3, #0
 800a090:	4639      	mov	r1, r7
 800a092:	220a      	movs	r2, #10
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fb21 	bl	800a6dc <__multadd>
 800a09a:	9b02      	ldr	r3, [sp, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f300 808e 	bgt.w	800a1c0 <_dtoa_r+0x990>
 800a0a4:	9b06      	ldr	r3, [sp, #24]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	dc51      	bgt.n	800a14e <_dtoa_r+0x91e>
 800a0aa:	e089      	b.n	800a1c0 <_dtoa_r+0x990>
 800a0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0b2:	e74b      	b.n	8009f4c <_dtoa_r+0x71c>
 800a0b4:	9b03      	ldr	r3, [sp, #12]
 800a0b6:	1e5e      	subs	r6, r3, #1
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	42b3      	cmp	r3, r6
 800a0bc:	bfbf      	itttt	lt
 800a0be:	9b07      	ldrlt	r3, [sp, #28]
 800a0c0:	9607      	strlt	r6, [sp, #28]
 800a0c2:	1af2      	sublt	r2, r6, r3
 800a0c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0c6:	bfb6      	itet	lt
 800a0c8:	189b      	addlt	r3, r3, r2
 800a0ca:	1b9e      	subge	r6, r3, r6
 800a0cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	bfb8      	it	lt
 800a0d2:	2600      	movlt	r6, #0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	bfb7      	itett	lt
 800a0d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a0dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a0e0:	1a9d      	sublt	r5, r3, r2
 800a0e2:	2300      	movlt	r3, #0
 800a0e4:	e734      	b.n	8009f50 <_dtoa_r+0x720>
 800a0e6:	9e07      	ldr	r6, [sp, #28]
 800a0e8:	9d04      	ldr	r5, [sp, #16]
 800a0ea:	9f08      	ldr	r7, [sp, #32]
 800a0ec:	e73b      	b.n	8009f66 <_dtoa_r+0x736>
 800a0ee:	9a07      	ldr	r2, [sp, #28]
 800a0f0:	e767      	b.n	8009fc2 <_dtoa_r+0x792>
 800a0f2:	9b06      	ldr	r3, [sp, #24]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	dc18      	bgt.n	800a12a <_dtoa_r+0x8fa>
 800a0f8:	f1ba 0f00 	cmp.w	sl, #0
 800a0fc:	d115      	bne.n	800a12a <_dtoa_r+0x8fa>
 800a0fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a102:	b993      	cbnz	r3, 800a12a <_dtoa_r+0x8fa>
 800a104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a108:	0d1b      	lsrs	r3, r3, #20
 800a10a:	051b      	lsls	r3, r3, #20
 800a10c:	b183      	cbz	r3, 800a130 <_dtoa_r+0x900>
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	3301      	adds	r3, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	9b05      	ldr	r3, [sp, #20]
 800a116:	3301      	adds	r3, #1
 800a118:	9305      	str	r3, [sp, #20]
 800a11a:	f04f 0801 	mov.w	r8, #1
 800a11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	f47f af6a 	bne.w	8009ffa <_dtoa_r+0x7ca>
 800a126:	2001      	movs	r0, #1
 800a128:	e76f      	b.n	800a00a <_dtoa_r+0x7da>
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	e7f6      	b.n	800a11e <_dtoa_r+0x8ee>
 800a130:	4698      	mov	r8, r3
 800a132:	e7f4      	b.n	800a11e <_dtoa_r+0x8ee>
 800a134:	f43f af7d 	beq.w	800a032 <_dtoa_r+0x802>
 800a138:	4618      	mov	r0, r3
 800a13a:	301c      	adds	r0, #28
 800a13c:	e772      	b.n	800a024 <_dtoa_r+0x7f4>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	dc37      	bgt.n	800a1b4 <_dtoa_r+0x984>
 800a144:	9b06      	ldr	r3, [sp, #24]
 800a146:	2b02      	cmp	r3, #2
 800a148:	dd34      	ble.n	800a1b4 <_dtoa_r+0x984>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	9302      	str	r3, [sp, #8]
 800a14e:	9b02      	ldr	r3, [sp, #8]
 800a150:	b96b      	cbnz	r3, 800a16e <_dtoa_r+0x93e>
 800a152:	4631      	mov	r1, r6
 800a154:	2205      	movs	r2, #5
 800a156:	4620      	mov	r0, r4
 800a158:	f000 fac0 	bl	800a6dc <__multadd>
 800a15c:	4601      	mov	r1, r0
 800a15e:	4606      	mov	r6, r0
 800a160:	ee18 0a10 	vmov	r0, s16
 800a164:	f000 fcda 	bl	800ab1c <__mcmp>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f73f adbb 	bgt.w	8009ce4 <_dtoa_r+0x4b4>
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	9d01      	ldr	r5, [sp, #4]
 800a172:	43db      	mvns	r3, r3
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	f04f 0800 	mov.w	r8, #0
 800a17a:	4631      	mov	r1, r6
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 fa8b 	bl	800a698 <_Bfree>
 800a182:	2f00      	cmp	r7, #0
 800a184:	f43f aea4 	beq.w	8009ed0 <_dtoa_r+0x6a0>
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	d005      	beq.n	800a19a <_dtoa_r+0x96a>
 800a18e:	45b8      	cmp	r8, r7
 800a190:	d003      	beq.n	800a19a <_dtoa_r+0x96a>
 800a192:	4641      	mov	r1, r8
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fa7f 	bl	800a698 <_Bfree>
 800a19a:	4639      	mov	r1, r7
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fa7b 	bl	800a698 <_Bfree>
 800a1a2:	e695      	b.n	8009ed0 <_dtoa_r+0x6a0>
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	4637      	mov	r7, r6
 800a1a8:	e7e1      	b.n	800a16e <_dtoa_r+0x93e>
 800a1aa:	9700      	str	r7, [sp, #0]
 800a1ac:	4637      	mov	r7, r6
 800a1ae:	e599      	b.n	8009ce4 <_dtoa_r+0x4b4>
 800a1b0:	40240000 	.word	0x40240000
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80ca 	beq.w	800a350 <_dtoa_r+0xb20>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	dd05      	ble.n	800a1d0 <_dtoa_r+0x9a0>
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 fc37 	bl	800aa3c <__lshift>
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	f1b8 0f00 	cmp.w	r8, #0
 800a1d4:	d05b      	beq.n	800a28e <_dtoa_r+0xa5e>
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fa1d 	bl	800a618 <_Balloc>
 800a1de:	4605      	mov	r5, r0
 800a1e0:	b928      	cbnz	r0, 800a1ee <_dtoa_r+0x9be>
 800a1e2:	4b87      	ldr	r3, [pc, #540]	; (800a400 <_dtoa_r+0xbd0>)
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ea:	f7ff bb3b 	b.w	8009864 <_dtoa_r+0x34>
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	3202      	adds	r2, #2
 800a1f2:	0092      	lsls	r2, r2, #2
 800a1f4:	f107 010c 	add.w	r1, r7, #12
 800a1f8:	300c      	adds	r0, #12
 800a1fa:	f7fe fdf3 	bl	8008de4 <memcpy>
 800a1fe:	2201      	movs	r2, #1
 800a200:	4629      	mov	r1, r5
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fc1a 	bl	800aa3c <__lshift>
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	f103 0901 	add.w	r9, r3, #1
 800a20e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a212:	4413      	add	r3, r2
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	f00a 0301 	and.w	r3, sl, #1
 800a21a:	46b8      	mov	r8, r7
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	4607      	mov	r7, r0
 800a220:	4631      	mov	r1, r6
 800a222:	ee18 0a10 	vmov	r0, s16
 800a226:	f7ff fa75 	bl	8009714 <quorem>
 800a22a:	4641      	mov	r1, r8
 800a22c:	9002      	str	r0, [sp, #8]
 800a22e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a232:	ee18 0a10 	vmov	r0, s16
 800a236:	f000 fc71 	bl	800ab1c <__mcmp>
 800a23a:	463a      	mov	r2, r7
 800a23c:	9003      	str	r0, [sp, #12]
 800a23e:	4631      	mov	r1, r6
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fc87 	bl	800ab54 <__mdiff>
 800a246:	68c2      	ldr	r2, [r0, #12]
 800a248:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a24c:	4605      	mov	r5, r0
 800a24e:	bb02      	cbnz	r2, 800a292 <_dtoa_r+0xa62>
 800a250:	4601      	mov	r1, r0
 800a252:	ee18 0a10 	vmov	r0, s16
 800a256:	f000 fc61 	bl	800ab1c <__mcmp>
 800a25a:	4602      	mov	r2, r0
 800a25c:	4629      	mov	r1, r5
 800a25e:	4620      	mov	r0, r4
 800a260:	9207      	str	r2, [sp, #28]
 800a262:	f000 fa19 	bl	800a698 <_Bfree>
 800a266:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a26a:	ea43 0102 	orr.w	r1, r3, r2
 800a26e:	9b04      	ldr	r3, [sp, #16]
 800a270:	430b      	orrs	r3, r1
 800a272:	464d      	mov	r5, r9
 800a274:	d10f      	bne.n	800a296 <_dtoa_r+0xa66>
 800a276:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a27a:	d02a      	beq.n	800a2d2 <_dtoa_r+0xaa2>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd02      	ble.n	800a288 <_dtoa_r+0xa58>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a288:	f88b a000 	strb.w	sl, [fp]
 800a28c:	e775      	b.n	800a17a <_dtoa_r+0x94a>
 800a28e:	4638      	mov	r0, r7
 800a290:	e7ba      	b.n	800a208 <_dtoa_r+0x9d8>
 800a292:	2201      	movs	r2, #1
 800a294:	e7e2      	b.n	800a25c <_dtoa_r+0xa2c>
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	db04      	blt.n	800a2a6 <_dtoa_r+0xa76>
 800a29c:	9906      	ldr	r1, [sp, #24]
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	9904      	ldr	r1, [sp, #16]
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	d122      	bne.n	800a2ec <_dtoa_r+0xabc>
 800a2a6:	2a00      	cmp	r2, #0
 800a2a8:	ddee      	ble.n	800a288 <_dtoa_r+0xa58>
 800a2aa:	ee18 1a10 	vmov	r1, s16
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fbc3 	bl	800aa3c <__lshift>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	ee08 0a10 	vmov	s16, r0
 800a2bc:	f000 fc2e 	bl	800ab1c <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dc03      	bgt.n	800a2cc <_dtoa_r+0xa9c>
 800a2c4:	d1e0      	bne.n	800a288 <_dtoa_r+0xa58>
 800a2c6:	f01a 0f01 	tst.w	sl, #1
 800a2ca:	d0dd      	beq.n	800a288 <_dtoa_r+0xa58>
 800a2cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2d0:	d1d7      	bne.n	800a282 <_dtoa_r+0xa52>
 800a2d2:	2339      	movs	r3, #57	; 0x39
 800a2d4:	f88b 3000 	strb.w	r3, [fp]
 800a2d8:	462b      	mov	r3, r5
 800a2da:	461d      	mov	r5, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2e2:	2a39      	cmp	r2, #57	; 0x39
 800a2e4:	d071      	beq.n	800a3ca <_dtoa_r+0xb9a>
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e746      	b.n	800a17a <_dtoa_r+0x94a>
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	dd07      	ble.n	800a300 <_dtoa_r+0xad0>
 800a2f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2f4:	d0ed      	beq.n	800a2d2 <_dtoa_r+0xaa2>
 800a2f6:	f10a 0301 	add.w	r3, sl, #1
 800a2fa:	f88b 3000 	strb.w	r3, [fp]
 800a2fe:	e73c      	b.n	800a17a <_dtoa_r+0x94a>
 800a300:	9b05      	ldr	r3, [sp, #20]
 800a302:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a306:	4599      	cmp	r9, r3
 800a308:	d047      	beq.n	800a39a <_dtoa_r+0xb6a>
 800a30a:	ee18 1a10 	vmov	r1, s16
 800a30e:	2300      	movs	r3, #0
 800a310:	220a      	movs	r2, #10
 800a312:	4620      	mov	r0, r4
 800a314:	f000 f9e2 	bl	800a6dc <__multadd>
 800a318:	45b8      	cmp	r8, r7
 800a31a:	ee08 0a10 	vmov	s16, r0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	f04f 020a 	mov.w	r2, #10
 800a326:	4641      	mov	r1, r8
 800a328:	4620      	mov	r0, r4
 800a32a:	d106      	bne.n	800a33a <_dtoa_r+0xb0a>
 800a32c:	f000 f9d6 	bl	800a6dc <__multadd>
 800a330:	4680      	mov	r8, r0
 800a332:	4607      	mov	r7, r0
 800a334:	f109 0901 	add.w	r9, r9, #1
 800a338:	e772      	b.n	800a220 <_dtoa_r+0x9f0>
 800a33a:	f000 f9cf 	bl	800a6dc <__multadd>
 800a33e:	4639      	mov	r1, r7
 800a340:	4680      	mov	r8, r0
 800a342:	2300      	movs	r3, #0
 800a344:	220a      	movs	r2, #10
 800a346:	4620      	mov	r0, r4
 800a348:	f000 f9c8 	bl	800a6dc <__multadd>
 800a34c:	4607      	mov	r7, r0
 800a34e:	e7f1      	b.n	800a334 <_dtoa_r+0xb04>
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	9d01      	ldr	r5, [sp, #4]
 800a356:	ee18 0a10 	vmov	r0, s16
 800a35a:	4631      	mov	r1, r6
 800a35c:	f7ff f9da 	bl	8009714 <quorem>
 800a360:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a364:	9b01      	ldr	r3, [sp, #4]
 800a366:	f805 ab01 	strb.w	sl, [r5], #1
 800a36a:	1aea      	subs	r2, r5, r3
 800a36c:	9b02      	ldr	r3, [sp, #8]
 800a36e:	4293      	cmp	r3, r2
 800a370:	dd09      	ble.n	800a386 <_dtoa_r+0xb56>
 800a372:	ee18 1a10 	vmov	r1, s16
 800a376:	2300      	movs	r3, #0
 800a378:	220a      	movs	r2, #10
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 f9ae 	bl	800a6dc <__multadd>
 800a380:	ee08 0a10 	vmov	s16, r0
 800a384:	e7e7      	b.n	800a356 <_dtoa_r+0xb26>
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bfc8      	it	gt
 800a38c:	461d      	movgt	r5, r3
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	bfd8      	it	le
 800a392:	2501      	movle	r5, #1
 800a394:	441d      	add	r5, r3
 800a396:	f04f 0800 	mov.w	r8, #0
 800a39a:	ee18 1a10 	vmov	r1, s16
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fb4b 	bl	800aa3c <__lshift>
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	ee08 0a10 	vmov	s16, r0
 800a3ac:	f000 fbb6 	bl	800ab1c <__mcmp>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	dc91      	bgt.n	800a2d8 <_dtoa_r+0xaa8>
 800a3b4:	d102      	bne.n	800a3bc <_dtoa_r+0xb8c>
 800a3b6:	f01a 0f01 	tst.w	sl, #1
 800a3ba:	d18d      	bne.n	800a2d8 <_dtoa_r+0xaa8>
 800a3bc:	462b      	mov	r3, r5
 800a3be:	461d      	mov	r5, r3
 800a3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3c4:	2a30      	cmp	r2, #48	; 0x30
 800a3c6:	d0fa      	beq.n	800a3be <_dtoa_r+0xb8e>
 800a3c8:	e6d7      	b.n	800a17a <_dtoa_r+0x94a>
 800a3ca:	9a01      	ldr	r2, [sp, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d184      	bne.n	800a2da <_dtoa_r+0xaaa>
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	2331      	movs	r3, #49	; 0x31
 800a3d8:	7013      	strb	r3, [r2, #0]
 800a3da:	e6ce      	b.n	800a17a <_dtoa_r+0x94a>
 800a3dc:	4b09      	ldr	r3, [pc, #36]	; (800a404 <_dtoa_r+0xbd4>)
 800a3de:	f7ff ba95 	b.w	800990c <_dtoa_r+0xdc>
 800a3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f47f aa6e 	bne.w	80098c6 <_dtoa_r+0x96>
 800a3ea:	4b07      	ldr	r3, [pc, #28]	; (800a408 <_dtoa_r+0xbd8>)
 800a3ec:	f7ff ba8e 	b.w	800990c <_dtoa_r+0xdc>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dcae      	bgt.n	800a354 <_dtoa_r+0xb24>
 800a3f6:	9b06      	ldr	r3, [sp, #24]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	f73f aea8 	bgt.w	800a14e <_dtoa_r+0x91e>
 800a3fe:	e7a9      	b.n	800a354 <_dtoa_r+0xb24>
 800a400:	0800c6bf 	.word	0x0800c6bf
 800a404:	0800c61c 	.word	0x0800c61c
 800a408:	0800c640 	.word	0x0800c640

0800a40c <std>:
 800a40c:	2300      	movs	r3, #0
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	e9c0 3300 	strd	r3, r3, [r0]
 800a416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	8181      	strh	r1, [r0, #12]
 800a41e:	6643      	str	r3, [r0, #100]	; 0x64
 800a420:	81c2      	strh	r2, [r0, #14]
 800a422:	6183      	str	r3, [r0, #24]
 800a424:	4619      	mov	r1, r3
 800a426:	2208      	movs	r2, #8
 800a428:	305c      	adds	r0, #92	; 0x5c
 800a42a:	f7fe fce9 	bl	8008e00 <memset>
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <std+0x38>)
 800a430:	6263      	str	r3, [r4, #36]	; 0x24
 800a432:	4b05      	ldr	r3, [pc, #20]	; (800a448 <std+0x3c>)
 800a434:	62a3      	str	r3, [r4, #40]	; 0x28
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <std+0x40>)
 800a438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <std+0x44>)
 800a43c:	6224      	str	r4, [r4, #32]
 800a43e:	6323      	str	r3, [r4, #48]	; 0x30
 800a440:	bd10      	pop	{r4, pc}
 800a442:	bf00      	nop
 800a444:	0800b1e1 	.word	0x0800b1e1
 800a448:	0800b203 	.word	0x0800b203
 800a44c:	0800b23b 	.word	0x0800b23b
 800a450:	0800b25f 	.word	0x0800b25f

0800a454 <_cleanup_r>:
 800a454:	4901      	ldr	r1, [pc, #4]	; (800a45c <_cleanup_r+0x8>)
 800a456:	f000 b8af 	b.w	800a5b8 <_fwalk_reent>
 800a45a:	bf00      	nop
 800a45c:	0800b575 	.word	0x0800b575

0800a460 <__sfmoreglue>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	2268      	movs	r2, #104	; 0x68
 800a464:	1e4d      	subs	r5, r1, #1
 800a466:	4355      	muls	r5, r2
 800a468:	460e      	mov	r6, r1
 800a46a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a46e:	f000 fcd9 	bl	800ae24 <_malloc_r>
 800a472:	4604      	mov	r4, r0
 800a474:	b140      	cbz	r0, 800a488 <__sfmoreglue+0x28>
 800a476:	2100      	movs	r1, #0
 800a478:	e9c0 1600 	strd	r1, r6, [r0]
 800a47c:	300c      	adds	r0, #12
 800a47e:	60a0      	str	r0, [r4, #8]
 800a480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a484:	f7fe fcbc 	bl	8008e00 <memset>
 800a488:	4620      	mov	r0, r4
 800a48a:	bd70      	pop	{r4, r5, r6, pc}

0800a48c <__sfp_lock_acquire>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__sfp_lock_acquire+0x8>)
 800a48e:	f000 b8b8 	b.w	800a602 <__retarget_lock_acquire_recursive>
 800a492:	bf00      	nop
 800a494:	200003c9 	.word	0x200003c9

0800a498 <__sfp_lock_release>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__sfp_lock_release+0x8>)
 800a49a:	f000 b8b3 	b.w	800a604 <__retarget_lock_release_recursive>
 800a49e:	bf00      	nop
 800a4a0:	200003c9 	.word	0x200003c9

0800a4a4 <__sinit_lock_acquire>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__sinit_lock_acquire+0x8>)
 800a4a6:	f000 b8ac 	b.w	800a602 <__retarget_lock_acquire_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	200003ca 	.word	0x200003ca

0800a4b0 <__sinit_lock_release>:
 800a4b0:	4801      	ldr	r0, [pc, #4]	; (800a4b8 <__sinit_lock_release+0x8>)
 800a4b2:	f000 b8a7 	b.w	800a604 <__retarget_lock_release_recursive>
 800a4b6:	bf00      	nop
 800a4b8:	200003ca 	.word	0x200003ca

0800a4bc <__sinit>:
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	4604      	mov	r4, r0
 800a4c0:	f7ff fff0 	bl	800a4a4 <__sinit_lock_acquire>
 800a4c4:	69a3      	ldr	r3, [r4, #24]
 800a4c6:	b11b      	cbz	r3, 800a4d0 <__sinit+0x14>
 800a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4cc:	f7ff bff0 	b.w	800a4b0 <__sinit_lock_release>
 800a4d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <__sinit+0x68>)
 800a4d8:	4a13      	ldr	r2, [pc, #76]	; (800a528 <__sinit+0x6c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	bf04      	itt	eq
 800a4e2:	2301      	moveq	r3, #1
 800a4e4:	61a3      	streq	r3, [r4, #24]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 f820 	bl	800a52c <__sfp>
 800a4ec:	6060      	str	r0, [r4, #4]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f81c 	bl	800a52c <__sfp>
 800a4f4:	60a0      	str	r0, [r4, #8]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f818 	bl	800a52c <__sfp>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	60e0      	str	r0, [r4, #12]
 800a500:	2104      	movs	r1, #4
 800a502:	6860      	ldr	r0, [r4, #4]
 800a504:	f7ff ff82 	bl	800a40c <std>
 800a508:	68a0      	ldr	r0, [r4, #8]
 800a50a:	2201      	movs	r2, #1
 800a50c:	2109      	movs	r1, #9
 800a50e:	f7ff ff7d 	bl	800a40c <std>
 800a512:	68e0      	ldr	r0, [r4, #12]
 800a514:	2202      	movs	r2, #2
 800a516:	2112      	movs	r1, #18
 800a518:	f7ff ff78 	bl	800a40c <std>
 800a51c:	2301      	movs	r3, #1
 800a51e:	61a3      	str	r3, [r4, #24]
 800a520:	e7d2      	b.n	800a4c8 <__sinit+0xc>
 800a522:	bf00      	nop
 800a524:	0800c608 	.word	0x0800c608
 800a528:	0800a455 	.word	0x0800a455

0800a52c <__sfp>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	4607      	mov	r7, r0
 800a530:	f7ff ffac 	bl	800a48c <__sfp_lock_acquire>
 800a534:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <__sfp+0x84>)
 800a536:	681e      	ldr	r6, [r3, #0]
 800a538:	69b3      	ldr	r3, [r6, #24]
 800a53a:	b913      	cbnz	r3, 800a542 <__sfp+0x16>
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7ff ffbd 	bl	800a4bc <__sinit>
 800a542:	3648      	adds	r6, #72	; 0x48
 800a544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	d503      	bpl.n	800a554 <__sfp+0x28>
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	b30b      	cbz	r3, 800a594 <__sfp+0x68>
 800a550:	6836      	ldr	r6, [r6, #0]
 800a552:	e7f7      	b.n	800a544 <__sfp+0x18>
 800a554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a558:	b9d5      	cbnz	r5, 800a590 <__sfp+0x64>
 800a55a:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <__sfp+0x88>)
 800a55c:	60e3      	str	r3, [r4, #12]
 800a55e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a562:	6665      	str	r5, [r4, #100]	; 0x64
 800a564:	f000 f84c 	bl	800a600 <__retarget_lock_init_recursive>
 800a568:	f7ff ff96 	bl	800a498 <__sfp_lock_release>
 800a56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a574:	6025      	str	r5, [r4, #0]
 800a576:	61a5      	str	r5, [r4, #24]
 800a578:	2208      	movs	r2, #8
 800a57a:	4629      	mov	r1, r5
 800a57c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a580:	f7fe fc3e 	bl	8008e00 <memset>
 800a584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a58c:	4620      	mov	r0, r4
 800a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a590:	3468      	adds	r4, #104	; 0x68
 800a592:	e7d9      	b.n	800a548 <__sfp+0x1c>
 800a594:	2104      	movs	r1, #4
 800a596:	4638      	mov	r0, r7
 800a598:	f7ff ff62 	bl	800a460 <__sfmoreglue>
 800a59c:	4604      	mov	r4, r0
 800a59e:	6030      	str	r0, [r6, #0]
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d1d5      	bne.n	800a550 <__sfp+0x24>
 800a5a4:	f7ff ff78 	bl	800a498 <__sfp_lock_release>
 800a5a8:	230c      	movs	r3, #12
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	e7ee      	b.n	800a58c <__sfp+0x60>
 800a5ae:	bf00      	nop
 800a5b0:	0800c608 	.word	0x0800c608
 800a5b4:	ffff0001 	.word	0xffff0001

0800a5b8 <_fwalk_reent>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	4606      	mov	r6, r0
 800a5be:	4688      	mov	r8, r1
 800a5c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5c4:	2700      	movs	r7, #0
 800a5c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5ca:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ce:	d505      	bpl.n	800a5dc <_fwalk_reent+0x24>
 800a5d0:	6824      	ldr	r4, [r4, #0]
 800a5d2:	2c00      	cmp	r4, #0
 800a5d4:	d1f7      	bne.n	800a5c6 <_fwalk_reent+0xe>
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5dc:	89ab      	ldrh	r3, [r5, #12]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d907      	bls.n	800a5f2 <_fwalk_reent+0x3a>
 800a5e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	d003      	beq.n	800a5f2 <_fwalk_reent+0x3a>
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	47c0      	blx	r8
 800a5f0:	4307      	orrs	r7, r0
 800a5f2:	3568      	adds	r5, #104	; 0x68
 800a5f4:	e7e9      	b.n	800a5ca <_fwalk_reent+0x12>
	...

0800a5f8 <_localeconv_r>:
 800a5f8:	4800      	ldr	r0, [pc, #0]	; (800a5fc <_localeconv_r+0x4>)
 800a5fa:	4770      	bx	lr
 800a5fc:	2000019c 	.word	0x2000019c

0800a600 <__retarget_lock_init_recursive>:
 800a600:	4770      	bx	lr

0800a602 <__retarget_lock_acquire_recursive>:
 800a602:	4770      	bx	lr

0800a604 <__retarget_lock_release_recursive>:
 800a604:	4770      	bx	lr
	...

0800a608 <malloc>:
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <malloc+0xc>)
 800a60a:	4601      	mov	r1, r0
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	f000 bc09 	b.w	800ae24 <_malloc_r>
 800a612:	bf00      	nop
 800a614:	20000048 	.word	0x20000048

0800a618 <_Balloc>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	b976      	cbnz	r6, 800a640 <_Balloc+0x28>
 800a622:	2010      	movs	r0, #16
 800a624:	f7ff fff0 	bl	800a608 <malloc>
 800a628:	4602      	mov	r2, r0
 800a62a:	6260      	str	r0, [r4, #36]	; 0x24
 800a62c:	b920      	cbnz	r0, 800a638 <_Balloc+0x20>
 800a62e:	4b18      	ldr	r3, [pc, #96]	; (800a690 <_Balloc+0x78>)
 800a630:	4818      	ldr	r0, [pc, #96]	; (800a694 <_Balloc+0x7c>)
 800a632:	2166      	movs	r1, #102	; 0x66
 800a634:	f000 feea 	bl	800b40c <__assert_func>
 800a638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a63c:	6006      	str	r6, [r0, #0]
 800a63e:	60c6      	str	r6, [r0, #12]
 800a640:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a642:	68f3      	ldr	r3, [r6, #12]
 800a644:	b183      	cbz	r3, 800a668 <_Balloc+0x50>
 800a646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a64e:	b9b8      	cbnz	r0, 800a680 <_Balloc+0x68>
 800a650:	2101      	movs	r1, #1
 800a652:	fa01 f605 	lsl.w	r6, r1, r5
 800a656:	1d72      	adds	r2, r6, #5
 800a658:	0092      	lsls	r2, r2, #2
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fb60 	bl	800ad20 <_calloc_r>
 800a660:	b160      	cbz	r0, 800a67c <_Balloc+0x64>
 800a662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a666:	e00e      	b.n	800a686 <_Balloc+0x6e>
 800a668:	2221      	movs	r2, #33	; 0x21
 800a66a:	2104      	movs	r1, #4
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fb57 	bl	800ad20 <_calloc_r>
 800a672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a674:	60f0      	str	r0, [r6, #12]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e4      	bne.n	800a646 <_Balloc+0x2e>
 800a67c:	2000      	movs	r0, #0
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	6802      	ldr	r2, [r0, #0]
 800a682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a686:	2300      	movs	r3, #0
 800a688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a68c:	e7f7      	b.n	800a67e <_Balloc+0x66>
 800a68e:	bf00      	nop
 800a690:	0800c64d 	.word	0x0800c64d
 800a694:	0800c730 	.word	0x0800c730

0800a698 <_Bfree>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a69c:	4605      	mov	r5, r0
 800a69e:	460c      	mov	r4, r1
 800a6a0:	b976      	cbnz	r6, 800a6c0 <_Bfree+0x28>
 800a6a2:	2010      	movs	r0, #16
 800a6a4:	f7ff ffb0 	bl	800a608 <malloc>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6268      	str	r0, [r5, #36]	; 0x24
 800a6ac:	b920      	cbnz	r0, 800a6b8 <_Bfree+0x20>
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <_Bfree+0x3c>)
 800a6b0:	4809      	ldr	r0, [pc, #36]	; (800a6d8 <_Bfree+0x40>)
 800a6b2:	218a      	movs	r1, #138	; 0x8a
 800a6b4:	f000 feaa 	bl	800b40c <__assert_func>
 800a6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6bc:	6006      	str	r6, [r0, #0]
 800a6be:	60c6      	str	r6, [r0, #12]
 800a6c0:	b13c      	cbz	r4, 800a6d2 <_Bfree+0x3a>
 800a6c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6c4:	6862      	ldr	r2, [r4, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6cc:	6021      	str	r1, [r4, #0]
 800a6ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	0800c64d 	.word	0x0800c64d
 800a6d8:	0800c730 	.word	0x0800c730

0800a6dc <__multadd>:
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	690d      	ldr	r5, [r1, #16]
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	461e      	mov	r6, r3
 800a6e8:	f101 0c14 	add.w	ip, r1, #20
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a6f2:	b299      	uxth	r1, r3
 800a6f4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6f8:	0c1e      	lsrs	r6, r3, #16
 800a6fa:	0c0b      	lsrs	r3, r1, #16
 800a6fc:	fb02 3306 	mla	r3, r2, r6, r3
 800a700:	b289      	uxth	r1, r1
 800a702:	3001      	adds	r0, #1
 800a704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a708:	4285      	cmp	r5, r0
 800a70a:	f84c 1b04 	str.w	r1, [ip], #4
 800a70e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a712:	dcec      	bgt.n	800a6ee <__multadd+0x12>
 800a714:	b30e      	cbz	r6, 800a75a <__multadd+0x7e>
 800a716:	68a3      	ldr	r3, [r4, #8]
 800a718:	42ab      	cmp	r3, r5
 800a71a:	dc19      	bgt.n	800a750 <__multadd+0x74>
 800a71c:	6861      	ldr	r1, [r4, #4]
 800a71e:	4638      	mov	r0, r7
 800a720:	3101      	adds	r1, #1
 800a722:	f7ff ff79 	bl	800a618 <_Balloc>
 800a726:	4680      	mov	r8, r0
 800a728:	b928      	cbnz	r0, 800a736 <__multadd+0x5a>
 800a72a:	4602      	mov	r2, r0
 800a72c:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <__multadd+0x84>)
 800a72e:	480d      	ldr	r0, [pc, #52]	; (800a764 <__multadd+0x88>)
 800a730:	21b5      	movs	r1, #181	; 0xb5
 800a732:	f000 fe6b 	bl	800b40c <__assert_func>
 800a736:	6922      	ldr	r2, [r4, #16]
 800a738:	3202      	adds	r2, #2
 800a73a:	f104 010c 	add.w	r1, r4, #12
 800a73e:	0092      	lsls	r2, r2, #2
 800a740:	300c      	adds	r0, #12
 800a742:	f7fe fb4f 	bl	8008de4 <memcpy>
 800a746:	4621      	mov	r1, r4
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff ffa5 	bl	800a698 <_Bfree>
 800a74e:	4644      	mov	r4, r8
 800a750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a754:	3501      	adds	r5, #1
 800a756:	615e      	str	r6, [r3, #20]
 800a758:	6125      	str	r5, [r4, #16]
 800a75a:	4620      	mov	r0, r4
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	0800c6bf 	.word	0x0800c6bf
 800a764:	0800c730 	.word	0x0800c730

0800a768 <__hi0bits>:
 800a768:	0c03      	lsrs	r3, r0, #16
 800a76a:	041b      	lsls	r3, r3, #16
 800a76c:	b9d3      	cbnz	r3, 800a7a4 <__hi0bits+0x3c>
 800a76e:	0400      	lsls	r0, r0, #16
 800a770:	2310      	movs	r3, #16
 800a772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a776:	bf04      	itt	eq
 800a778:	0200      	lsleq	r0, r0, #8
 800a77a:	3308      	addeq	r3, #8
 800a77c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a780:	bf04      	itt	eq
 800a782:	0100      	lsleq	r0, r0, #4
 800a784:	3304      	addeq	r3, #4
 800a786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a78a:	bf04      	itt	eq
 800a78c:	0080      	lsleq	r0, r0, #2
 800a78e:	3302      	addeq	r3, #2
 800a790:	2800      	cmp	r0, #0
 800a792:	db05      	blt.n	800a7a0 <__hi0bits+0x38>
 800a794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a798:	f103 0301 	add.w	r3, r3, #1
 800a79c:	bf08      	it	eq
 800a79e:	2320      	moveq	r3, #32
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	4770      	bx	lr
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	e7e4      	b.n	800a772 <__hi0bits+0xa>

0800a7a8 <__lo0bits>:
 800a7a8:	6803      	ldr	r3, [r0, #0]
 800a7aa:	f013 0207 	ands.w	r2, r3, #7
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	d00b      	beq.n	800a7ca <__lo0bits+0x22>
 800a7b2:	07da      	lsls	r2, r3, #31
 800a7b4:	d423      	bmi.n	800a7fe <__lo0bits+0x56>
 800a7b6:	0798      	lsls	r0, r3, #30
 800a7b8:	bf49      	itett	mi
 800a7ba:	085b      	lsrmi	r3, r3, #1
 800a7bc:	089b      	lsrpl	r3, r3, #2
 800a7be:	2001      	movmi	r0, #1
 800a7c0:	600b      	strmi	r3, [r1, #0]
 800a7c2:	bf5c      	itt	pl
 800a7c4:	600b      	strpl	r3, [r1, #0]
 800a7c6:	2002      	movpl	r0, #2
 800a7c8:	4770      	bx	lr
 800a7ca:	b298      	uxth	r0, r3
 800a7cc:	b9a8      	cbnz	r0, 800a7fa <__lo0bits+0x52>
 800a7ce:	0c1b      	lsrs	r3, r3, #16
 800a7d0:	2010      	movs	r0, #16
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	b90a      	cbnz	r2, 800a7da <__lo0bits+0x32>
 800a7d6:	3008      	adds	r0, #8
 800a7d8:	0a1b      	lsrs	r3, r3, #8
 800a7da:	071a      	lsls	r2, r3, #28
 800a7dc:	bf04      	itt	eq
 800a7de:	091b      	lsreq	r3, r3, #4
 800a7e0:	3004      	addeq	r0, #4
 800a7e2:	079a      	lsls	r2, r3, #30
 800a7e4:	bf04      	itt	eq
 800a7e6:	089b      	lsreq	r3, r3, #2
 800a7e8:	3002      	addeq	r0, #2
 800a7ea:	07da      	lsls	r2, r3, #31
 800a7ec:	d403      	bmi.n	800a7f6 <__lo0bits+0x4e>
 800a7ee:	085b      	lsrs	r3, r3, #1
 800a7f0:	f100 0001 	add.w	r0, r0, #1
 800a7f4:	d005      	beq.n	800a802 <__lo0bits+0x5a>
 800a7f6:	600b      	str	r3, [r1, #0]
 800a7f8:	4770      	bx	lr
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	e7e9      	b.n	800a7d2 <__lo0bits+0x2a>
 800a7fe:	2000      	movs	r0, #0
 800a800:	4770      	bx	lr
 800a802:	2020      	movs	r0, #32
 800a804:	4770      	bx	lr
	...

0800a808 <__i2b>:
 800a808:	b510      	push	{r4, lr}
 800a80a:	460c      	mov	r4, r1
 800a80c:	2101      	movs	r1, #1
 800a80e:	f7ff ff03 	bl	800a618 <_Balloc>
 800a812:	4602      	mov	r2, r0
 800a814:	b928      	cbnz	r0, 800a822 <__i2b+0x1a>
 800a816:	4b05      	ldr	r3, [pc, #20]	; (800a82c <__i2b+0x24>)
 800a818:	4805      	ldr	r0, [pc, #20]	; (800a830 <__i2b+0x28>)
 800a81a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a81e:	f000 fdf5 	bl	800b40c <__assert_func>
 800a822:	2301      	movs	r3, #1
 800a824:	6144      	str	r4, [r0, #20]
 800a826:	6103      	str	r3, [r0, #16]
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	bf00      	nop
 800a82c:	0800c6bf 	.word	0x0800c6bf
 800a830:	0800c730 	.word	0x0800c730

0800a834 <__multiply>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4691      	mov	r9, r2
 800a83a:	690a      	ldr	r2, [r1, #16]
 800a83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a840:	429a      	cmp	r2, r3
 800a842:	bfb8      	it	lt
 800a844:	460b      	movlt	r3, r1
 800a846:	460c      	mov	r4, r1
 800a848:	bfbc      	itt	lt
 800a84a:	464c      	movlt	r4, r9
 800a84c:	4699      	movlt	r9, r3
 800a84e:	6927      	ldr	r7, [r4, #16]
 800a850:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a854:	68a3      	ldr	r3, [r4, #8]
 800a856:	6861      	ldr	r1, [r4, #4]
 800a858:	eb07 060a 	add.w	r6, r7, sl
 800a85c:	42b3      	cmp	r3, r6
 800a85e:	b085      	sub	sp, #20
 800a860:	bfb8      	it	lt
 800a862:	3101      	addlt	r1, #1
 800a864:	f7ff fed8 	bl	800a618 <_Balloc>
 800a868:	b930      	cbnz	r0, 800a878 <__multiply+0x44>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b44      	ldr	r3, [pc, #272]	; (800a980 <__multiply+0x14c>)
 800a86e:	4845      	ldr	r0, [pc, #276]	; (800a984 <__multiply+0x150>)
 800a870:	f240 115d 	movw	r1, #349	; 0x15d
 800a874:	f000 fdca 	bl	800b40c <__assert_func>
 800a878:	f100 0514 	add.w	r5, r0, #20
 800a87c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a880:	462b      	mov	r3, r5
 800a882:	2200      	movs	r2, #0
 800a884:	4543      	cmp	r3, r8
 800a886:	d321      	bcc.n	800a8cc <__multiply+0x98>
 800a888:	f104 0314 	add.w	r3, r4, #20
 800a88c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a890:	f109 0314 	add.w	r3, r9, #20
 800a894:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a898:	9202      	str	r2, [sp, #8]
 800a89a:	1b3a      	subs	r2, r7, r4
 800a89c:	3a15      	subs	r2, #21
 800a89e:	f022 0203 	bic.w	r2, r2, #3
 800a8a2:	3204      	adds	r2, #4
 800a8a4:	f104 0115 	add.w	r1, r4, #21
 800a8a8:	428f      	cmp	r7, r1
 800a8aa:	bf38      	it	cc
 800a8ac:	2204      	movcc	r2, #4
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	9a02      	ldr	r2, [sp, #8]
 800a8b2:	9303      	str	r3, [sp, #12]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d80c      	bhi.n	800a8d2 <__multiply+0x9e>
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	dd03      	ble.n	800a8c4 <__multiply+0x90>
 800a8bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05a      	beq.n	800a97a <__multiply+0x146>
 800a8c4:	6106      	str	r6, [r0, #16]
 800a8c6:	b005      	add	sp, #20
 800a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8cc:	f843 2b04 	str.w	r2, [r3], #4
 800a8d0:	e7d8      	b.n	800a884 <__multiply+0x50>
 800a8d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8d6:	f1ba 0f00 	cmp.w	sl, #0
 800a8da:	d024      	beq.n	800a926 <__multiply+0xf2>
 800a8dc:	f104 0e14 	add.w	lr, r4, #20
 800a8e0:	46a9      	mov	r9, r5
 800a8e2:	f04f 0c00 	mov.w	ip, #0
 800a8e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8ea:	f8d9 1000 	ldr.w	r1, [r9]
 800a8ee:	fa1f fb82 	uxth.w	fp, r2
 800a8f2:	b289      	uxth	r1, r1
 800a8f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a900:	4461      	add	r1, ip
 800a902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a906:	fb0a c20b 	mla	r2, sl, fp, ip
 800a90a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a90e:	b289      	uxth	r1, r1
 800a910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a914:	4577      	cmp	r7, lr
 800a916:	f849 1b04 	str.w	r1, [r9], #4
 800a91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a91e:	d8e2      	bhi.n	800a8e6 <__multiply+0xb2>
 800a920:	9a01      	ldr	r2, [sp, #4]
 800a922:	f845 c002 	str.w	ip, [r5, r2]
 800a926:	9a03      	ldr	r2, [sp, #12]
 800a928:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a92c:	3304      	adds	r3, #4
 800a92e:	f1b9 0f00 	cmp.w	r9, #0
 800a932:	d020      	beq.n	800a976 <__multiply+0x142>
 800a934:	6829      	ldr	r1, [r5, #0]
 800a936:	f104 0c14 	add.w	ip, r4, #20
 800a93a:	46ae      	mov	lr, r5
 800a93c:	f04f 0a00 	mov.w	sl, #0
 800a940:	f8bc b000 	ldrh.w	fp, [ip]
 800a944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a948:	fb09 220b 	mla	r2, r9, fp, r2
 800a94c:	4492      	add	sl, r2
 800a94e:	b289      	uxth	r1, r1
 800a950:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a954:	f84e 1b04 	str.w	r1, [lr], #4
 800a958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a95c:	f8be 1000 	ldrh.w	r1, [lr]
 800a960:	0c12      	lsrs	r2, r2, #16
 800a962:	fb09 1102 	mla	r1, r9, r2, r1
 800a966:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a96a:	4567      	cmp	r7, ip
 800a96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a970:	d8e6      	bhi.n	800a940 <__multiply+0x10c>
 800a972:	9a01      	ldr	r2, [sp, #4]
 800a974:	50a9      	str	r1, [r5, r2]
 800a976:	3504      	adds	r5, #4
 800a978:	e79a      	b.n	800a8b0 <__multiply+0x7c>
 800a97a:	3e01      	subs	r6, #1
 800a97c:	e79c      	b.n	800a8b8 <__multiply+0x84>
 800a97e:	bf00      	nop
 800a980:	0800c6bf 	.word	0x0800c6bf
 800a984:	0800c730 	.word	0x0800c730

0800a988 <__pow5mult>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	4615      	mov	r5, r2
 800a98e:	f012 0203 	ands.w	r2, r2, #3
 800a992:	4606      	mov	r6, r0
 800a994:	460f      	mov	r7, r1
 800a996:	d007      	beq.n	800a9a8 <__pow5mult+0x20>
 800a998:	4c25      	ldr	r4, [pc, #148]	; (800aa30 <__pow5mult+0xa8>)
 800a99a:	3a01      	subs	r2, #1
 800a99c:	2300      	movs	r3, #0
 800a99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9a2:	f7ff fe9b 	bl	800a6dc <__multadd>
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	10ad      	asrs	r5, r5, #2
 800a9aa:	d03d      	beq.n	800aa28 <__pow5mult+0xa0>
 800a9ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9ae:	b97c      	cbnz	r4, 800a9d0 <__pow5mult+0x48>
 800a9b0:	2010      	movs	r0, #16
 800a9b2:	f7ff fe29 	bl	800a608 <malloc>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6270      	str	r0, [r6, #36]	; 0x24
 800a9ba:	b928      	cbnz	r0, 800a9c8 <__pow5mult+0x40>
 800a9bc:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <__pow5mult+0xac>)
 800a9be:	481e      	ldr	r0, [pc, #120]	; (800aa38 <__pow5mult+0xb0>)
 800a9c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9c4:	f000 fd22 	bl	800b40c <__assert_func>
 800a9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9cc:	6004      	str	r4, [r0, #0]
 800a9ce:	60c4      	str	r4, [r0, #12]
 800a9d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9d8:	b94c      	cbnz	r4, 800a9ee <__pow5mult+0x66>
 800a9da:	f240 2171 	movw	r1, #625	; 0x271
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7ff ff12 	bl	800a808 <__i2b>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	6003      	str	r3, [r0, #0]
 800a9ee:	f04f 0900 	mov.w	r9, #0
 800a9f2:	07eb      	lsls	r3, r5, #31
 800a9f4:	d50a      	bpl.n	800aa0c <__pow5mult+0x84>
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f7ff ff1a 	bl	800a834 <__multiply>
 800aa00:	4639      	mov	r1, r7
 800aa02:	4680      	mov	r8, r0
 800aa04:	4630      	mov	r0, r6
 800aa06:	f7ff fe47 	bl	800a698 <_Bfree>
 800aa0a:	4647      	mov	r7, r8
 800aa0c:	106d      	asrs	r5, r5, #1
 800aa0e:	d00b      	beq.n	800aa28 <__pow5mult+0xa0>
 800aa10:	6820      	ldr	r0, [r4, #0]
 800aa12:	b938      	cbnz	r0, 800aa24 <__pow5mult+0x9c>
 800aa14:	4622      	mov	r2, r4
 800aa16:	4621      	mov	r1, r4
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff ff0b 	bl	800a834 <__multiply>
 800aa1e:	6020      	str	r0, [r4, #0]
 800aa20:	f8c0 9000 	str.w	r9, [r0]
 800aa24:	4604      	mov	r4, r0
 800aa26:	e7e4      	b.n	800a9f2 <__pow5mult+0x6a>
 800aa28:	4638      	mov	r0, r7
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	bf00      	nop
 800aa30:	0800c880 	.word	0x0800c880
 800aa34:	0800c64d 	.word	0x0800c64d
 800aa38:	0800c730 	.word	0x0800c730

0800aa3c <__lshift>:
 800aa3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa40:	460c      	mov	r4, r1
 800aa42:	6849      	ldr	r1, [r1, #4]
 800aa44:	6923      	ldr	r3, [r4, #16]
 800aa46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	4691      	mov	r9, r2
 800aa50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa54:	f108 0601 	add.w	r6, r8, #1
 800aa58:	42b3      	cmp	r3, r6
 800aa5a:	db0b      	blt.n	800aa74 <__lshift+0x38>
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f7ff fddb 	bl	800a618 <_Balloc>
 800aa62:	4605      	mov	r5, r0
 800aa64:	b948      	cbnz	r0, 800aa7a <__lshift+0x3e>
 800aa66:	4602      	mov	r2, r0
 800aa68:	4b2a      	ldr	r3, [pc, #168]	; (800ab14 <__lshift+0xd8>)
 800aa6a:	482b      	ldr	r0, [pc, #172]	; (800ab18 <__lshift+0xdc>)
 800aa6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa70:	f000 fccc 	bl	800b40c <__assert_func>
 800aa74:	3101      	adds	r1, #1
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	e7ee      	b.n	800aa58 <__lshift+0x1c>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f100 0114 	add.w	r1, r0, #20
 800aa80:	f100 0210 	add.w	r2, r0, #16
 800aa84:	4618      	mov	r0, r3
 800aa86:	4553      	cmp	r3, sl
 800aa88:	db37      	blt.n	800aafa <__lshift+0xbe>
 800aa8a:	6920      	ldr	r0, [r4, #16]
 800aa8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa90:	f104 0314 	add.w	r3, r4, #20
 800aa94:	f019 091f 	ands.w	r9, r9, #31
 800aa98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aaa0:	d02f      	beq.n	800ab02 <__lshift+0xc6>
 800aaa2:	f1c9 0e20 	rsb	lr, r9, #32
 800aaa6:	468a      	mov	sl, r1
 800aaa8:	f04f 0c00 	mov.w	ip, #0
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	fa02 f209 	lsl.w	r2, r2, r9
 800aab2:	ea42 020c 	orr.w	r2, r2, ip
 800aab6:	f84a 2b04 	str.w	r2, [sl], #4
 800aaba:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabe:	4298      	cmp	r0, r3
 800aac0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aac4:	d8f2      	bhi.n	800aaac <__lshift+0x70>
 800aac6:	1b03      	subs	r3, r0, r4
 800aac8:	3b15      	subs	r3, #21
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	3304      	adds	r3, #4
 800aad0:	f104 0215 	add.w	r2, r4, #21
 800aad4:	4290      	cmp	r0, r2
 800aad6:	bf38      	it	cc
 800aad8:	2304      	movcc	r3, #4
 800aada:	f841 c003 	str.w	ip, [r1, r3]
 800aade:	f1bc 0f00 	cmp.w	ip, #0
 800aae2:	d001      	beq.n	800aae8 <__lshift+0xac>
 800aae4:	f108 0602 	add.w	r6, r8, #2
 800aae8:	3e01      	subs	r6, #1
 800aaea:	4638      	mov	r0, r7
 800aaec:	612e      	str	r6, [r5, #16]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7ff fdd2 	bl	800a698 <_Bfree>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aafe:	3301      	adds	r3, #1
 800ab00:	e7c1      	b.n	800aa86 <__lshift+0x4a>
 800ab02:	3904      	subs	r1, #4
 800ab04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab0c:	4298      	cmp	r0, r3
 800ab0e:	d8f9      	bhi.n	800ab04 <__lshift+0xc8>
 800ab10:	e7ea      	b.n	800aae8 <__lshift+0xac>
 800ab12:	bf00      	nop
 800ab14:	0800c6bf 	.word	0x0800c6bf
 800ab18:	0800c730 	.word	0x0800c730

0800ab1c <__mcmp>:
 800ab1c:	b530      	push	{r4, r5, lr}
 800ab1e:	6902      	ldr	r2, [r0, #16]
 800ab20:	690c      	ldr	r4, [r1, #16]
 800ab22:	1b12      	subs	r2, r2, r4
 800ab24:	d10e      	bne.n	800ab44 <__mcmp+0x28>
 800ab26:	f100 0314 	add.w	r3, r0, #20
 800ab2a:	3114      	adds	r1, #20
 800ab2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab3c:	42a5      	cmp	r5, r4
 800ab3e:	d003      	beq.n	800ab48 <__mcmp+0x2c>
 800ab40:	d305      	bcc.n	800ab4e <__mcmp+0x32>
 800ab42:	2201      	movs	r2, #1
 800ab44:	4610      	mov	r0, r2
 800ab46:	bd30      	pop	{r4, r5, pc}
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	d3f3      	bcc.n	800ab34 <__mcmp+0x18>
 800ab4c:	e7fa      	b.n	800ab44 <__mcmp+0x28>
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab52:	e7f7      	b.n	800ab44 <__mcmp+0x28>

0800ab54 <__mdiff>:
 800ab54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4690      	mov	r8, r2
 800ab62:	f7ff ffdb 	bl	800ab1c <__mcmp>
 800ab66:	1e05      	subs	r5, r0, #0
 800ab68:	d110      	bne.n	800ab8c <__mdiff+0x38>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fd53 	bl	800a618 <_Balloc>
 800ab72:	b930      	cbnz	r0, 800ab82 <__mdiff+0x2e>
 800ab74:	4b3a      	ldr	r3, [pc, #232]	; (800ac60 <__mdiff+0x10c>)
 800ab76:	4602      	mov	r2, r0
 800ab78:	f240 2132 	movw	r1, #562	; 0x232
 800ab7c:	4839      	ldr	r0, [pc, #228]	; (800ac64 <__mdiff+0x110>)
 800ab7e:	f000 fc45 	bl	800b40c <__assert_func>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	bfa4      	itt	ge
 800ab8e:	4643      	movge	r3, r8
 800ab90:	46a0      	movge	r8, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab98:	bfa6      	itte	ge
 800ab9a:	461c      	movge	r4, r3
 800ab9c:	2500      	movge	r5, #0
 800ab9e:	2501      	movlt	r5, #1
 800aba0:	f7ff fd3a 	bl	800a618 <_Balloc>
 800aba4:	b920      	cbnz	r0, 800abb0 <__mdiff+0x5c>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__mdiff+0x10c>)
 800aba8:	4602      	mov	r2, r0
 800abaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abae:	e7e5      	b.n	800ab7c <__mdiff+0x28>
 800abb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abb4:	6926      	ldr	r6, [r4, #16]
 800abb6:	60c5      	str	r5, [r0, #12]
 800abb8:	f104 0914 	add.w	r9, r4, #20
 800abbc:	f108 0514 	add.w	r5, r8, #20
 800abc0:	f100 0e14 	add.w	lr, r0, #20
 800abc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abcc:	f108 0210 	add.w	r2, r8, #16
 800abd0:	46f2      	mov	sl, lr
 800abd2:	2100      	movs	r1, #0
 800abd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abdc:	fa1f f883 	uxth.w	r8, r3
 800abe0:	fa11 f18b 	uxtah	r1, r1, fp
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	eba1 0808 	sub.w	r8, r1, r8
 800abea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abf2:	fa1f f888 	uxth.w	r8, r8
 800abf6:	1419      	asrs	r1, r3, #16
 800abf8:	454e      	cmp	r6, r9
 800abfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abfe:	f84a 3b04 	str.w	r3, [sl], #4
 800ac02:	d8e7      	bhi.n	800abd4 <__mdiff+0x80>
 800ac04:	1b33      	subs	r3, r6, r4
 800ac06:	3b15      	subs	r3, #21
 800ac08:	f023 0303 	bic.w	r3, r3, #3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	3415      	adds	r4, #21
 800ac10:	42a6      	cmp	r6, r4
 800ac12:	bf38      	it	cc
 800ac14:	2304      	movcc	r3, #4
 800ac16:	441d      	add	r5, r3
 800ac18:	4473      	add	r3, lr
 800ac1a:	469e      	mov	lr, r3
 800ac1c:	462e      	mov	r6, r5
 800ac1e:	4566      	cmp	r6, ip
 800ac20:	d30e      	bcc.n	800ac40 <__mdiff+0xec>
 800ac22:	f10c 0203 	add.w	r2, ip, #3
 800ac26:	1b52      	subs	r2, r2, r5
 800ac28:	f022 0203 	bic.w	r2, r2, #3
 800ac2c:	3d03      	subs	r5, #3
 800ac2e:	45ac      	cmp	ip, r5
 800ac30:	bf38      	it	cc
 800ac32:	2200      	movcc	r2, #0
 800ac34:	441a      	add	r2, r3
 800ac36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac3a:	b17b      	cbz	r3, 800ac5c <__mdiff+0x108>
 800ac3c:	6107      	str	r7, [r0, #16]
 800ac3e:	e7a3      	b.n	800ab88 <__mdiff+0x34>
 800ac40:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac44:	fa11 f288 	uxtah	r2, r1, r8
 800ac48:	1414      	asrs	r4, r2, #16
 800ac4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac4e:	b292      	uxth	r2, r2
 800ac50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac54:	f84e 2b04 	str.w	r2, [lr], #4
 800ac58:	1421      	asrs	r1, r4, #16
 800ac5a:	e7e0      	b.n	800ac1e <__mdiff+0xca>
 800ac5c:	3f01      	subs	r7, #1
 800ac5e:	e7ea      	b.n	800ac36 <__mdiff+0xe2>
 800ac60:	0800c6bf 	.word	0x0800c6bf
 800ac64:	0800c730 	.word	0x0800c730

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec57 6b10 	vmov	r6, r7, d0
 800ac74:	4690      	mov	r8, r2
 800ac76:	f7ff fccf 	bl	800a618 <_Balloc>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <__d2b+0x24>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b25      	ldr	r3, [pc, #148]	; (800ad18 <__d2b+0xb0>)
 800ac82:	4826      	ldr	r0, [pc, #152]	; (800ad1c <__d2b+0xb4>)
 800ac84:	f240 310a 	movw	r1, #778	; 0x30a
 800ac88:	f000 fbc0 	bl	800b40c <__assert_func>
 800ac8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac94:	bb35      	cbnz	r5, 800ace4 <__d2b+0x7c>
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	d028      	beq.n	800acee <__d2b+0x86>
 800ac9c:	4668      	mov	r0, sp
 800ac9e:	9600      	str	r6, [sp, #0]
 800aca0:	f7ff fd82 	bl	800a7a8 <__lo0bits>
 800aca4:	9900      	ldr	r1, [sp, #0]
 800aca6:	b300      	cbz	r0, 800acea <__d2b+0x82>
 800aca8:	9a01      	ldr	r2, [sp, #4]
 800acaa:	f1c0 0320 	rsb	r3, r0, #32
 800acae:	fa02 f303 	lsl.w	r3, r2, r3
 800acb2:	430b      	orrs	r3, r1
 800acb4:	40c2      	lsrs	r2, r0
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	9201      	str	r2, [sp, #4]
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	61a3      	str	r3, [r4, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf14      	ite	ne
 800acc2:	2202      	movne	r2, #2
 800acc4:	2201      	moveq	r2, #1
 800acc6:	6122      	str	r2, [r4, #16]
 800acc8:	b1d5      	cbz	r5, 800ad00 <__d2b+0x98>
 800acca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acce:	4405      	add	r5, r0
 800acd0:	f8c9 5000 	str.w	r5, [r9]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acd8:	f8c8 0000 	str.w	r0, [r8]
 800acdc:	4620      	mov	r0, r4
 800acde:	b003      	add	sp, #12
 800ace0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace8:	e7d5      	b.n	800ac96 <__d2b+0x2e>
 800acea:	6161      	str	r1, [r4, #20]
 800acec:	e7e5      	b.n	800acba <__d2b+0x52>
 800acee:	a801      	add	r0, sp, #4
 800acf0:	f7ff fd5a 	bl	800a7a8 <__lo0bits>
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	6163      	str	r3, [r4, #20]
 800acf8:	2201      	movs	r2, #1
 800acfa:	6122      	str	r2, [r4, #16]
 800acfc:	3020      	adds	r0, #32
 800acfe:	e7e3      	b.n	800acc8 <__d2b+0x60>
 800ad00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad08:	f8c9 0000 	str.w	r0, [r9]
 800ad0c:	6918      	ldr	r0, [r3, #16]
 800ad0e:	f7ff fd2b 	bl	800a768 <__hi0bits>
 800ad12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad16:	e7df      	b.n	800acd8 <__d2b+0x70>
 800ad18:	0800c6bf 	.word	0x0800c6bf
 800ad1c:	0800c730 	.word	0x0800c730

0800ad20 <_calloc_r>:
 800ad20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad22:	fba1 2402 	umull	r2, r4, r1, r2
 800ad26:	b94c      	cbnz	r4, 800ad3c <_calloc_r+0x1c>
 800ad28:	4611      	mov	r1, r2
 800ad2a:	9201      	str	r2, [sp, #4]
 800ad2c:	f000 f87a 	bl	800ae24 <_malloc_r>
 800ad30:	9a01      	ldr	r2, [sp, #4]
 800ad32:	4605      	mov	r5, r0
 800ad34:	b930      	cbnz	r0, 800ad44 <_calloc_r+0x24>
 800ad36:	4628      	mov	r0, r5
 800ad38:	b003      	add	sp, #12
 800ad3a:	bd30      	pop	{r4, r5, pc}
 800ad3c:	220c      	movs	r2, #12
 800ad3e:	6002      	str	r2, [r0, #0]
 800ad40:	2500      	movs	r5, #0
 800ad42:	e7f8      	b.n	800ad36 <_calloc_r+0x16>
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7fe f85b 	bl	8008e00 <memset>
 800ad4a:	e7f4      	b.n	800ad36 <_calloc_r+0x16>

0800ad4c <_free_r>:
 800ad4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	d044      	beq.n	800addc <_free_r+0x90>
 800ad52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad56:	9001      	str	r0, [sp, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad5e:	bfb8      	it	lt
 800ad60:	18e4      	addlt	r4, r4, r3
 800ad62:	f000 fcdf 	bl	800b724 <__malloc_lock>
 800ad66:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <_free_r+0x94>)
 800ad68:	9801      	ldr	r0, [sp, #4]
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	b933      	cbnz	r3, 800ad7c <_free_r+0x30>
 800ad6e:	6063      	str	r3, [r4, #4]
 800ad70:	6014      	str	r4, [r2, #0]
 800ad72:	b003      	add	sp, #12
 800ad74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad78:	f000 bcda 	b.w	800b730 <__malloc_unlock>
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d908      	bls.n	800ad92 <_free_r+0x46>
 800ad80:	6825      	ldr	r5, [r4, #0]
 800ad82:	1961      	adds	r1, r4, r5
 800ad84:	428b      	cmp	r3, r1
 800ad86:	bf01      	itttt	eq
 800ad88:	6819      	ldreq	r1, [r3, #0]
 800ad8a:	685b      	ldreq	r3, [r3, #4]
 800ad8c:	1949      	addeq	r1, r1, r5
 800ad8e:	6021      	streq	r1, [r4, #0]
 800ad90:	e7ed      	b.n	800ad6e <_free_r+0x22>
 800ad92:	461a      	mov	r2, r3
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	b10b      	cbz	r3, 800ad9c <_free_r+0x50>
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	d9fa      	bls.n	800ad92 <_free_r+0x46>
 800ad9c:	6811      	ldr	r1, [r2, #0]
 800ad9e:	1855      	adds	r5, r2, r1
 800ada0:	42a5      	cmp	r5, r4
 800ada2:	d10b      	bne.n	800adbc <_free_r+0x70>
 800ada4:	6824      	ldr	r4, [r4, #0]
 800ada6:	4421      	add	r1, r4
 800ada8:	1854      	adds	r4, r2, r1
 800adaa:	42a3      	cmp	r3, r4
 800adac:	6011      	str	r1, [r2, #0]
 800adae:	d1e0      	bne.n	800ad72 <_free_r+0x26>
 800adb0:	681c      	ldr	r4, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	6053      	str	r3, [r2, #4]
 800adb6:	4421      	add	r1, r4
 800adb8:	6011      	str	r1, [r2, #0]
 800adba:	e7da      	b.n	800ad72 <_free_r+0x26>
 800adbc:	d902      	bls.n	800adc4 <_free_r+0x78>
 800adbe:	230c      	movs	r3, #12
 800adc0:	6003      	str	r3, [r0, #0]
 800adc2:	e7d6      	b.n	800ad72 <_free_r+0x26>
 800adc4:	6825      	ldr	r5, [r4, #0]
 800adc6:	1961      	adds	r1, r4, r5
 800adc8:	428b      	cmp	r3, r1
 800adca:	bf04      	itt	eq
 800adcc:	6819      	ldreq	r1, [r3, #0]
 800adce:	685b      	ldreq	r3, [r3, #4]
 800add0:	6063      	str	r3, [r4, #4]
 800add2:	bf04      	itt	eq
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	6054      	str	r4, [r2, #4]
 800adda:	e7ca      	b.n	800ad72 <_free_r+0x26>
 800addc:	b003      	add	sp, #12
 800adde:	bd30      	pop	{r4, r5, pc}
 800ade0:	200003cc 	.word	0x200003cc

0800ade4 <sbrk_aligned>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	4e0e      	ldr	r6, [pc, #56]	; (800ae20 <sbrk_aligned+0x3c>)
 800ade8:	460c      	mov	r4, r1
 800adea:	6831      	ldr	r1, [r6, #0]
 800adec:	4605      	mov	r5, r0
 800adee:	b911      	cbnz	r1, 800adf6 <sbrk_aligned+0x12>
 800adf0:	f000 f9e6 	bl	800b1c0 <_sbrk_r>
 800adf4:	6030      	str	r0, [r6, #0]
 800adf6:	4621      	mov	r1, r4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 f9e1 	bl	800b1c0 <_sbrk_r>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d00a      	beq.n	800ae18 <sbrk_aligned+0x34>
 800ae02:	1cc4      	adds	r4, r0, #3
 800ae04:	f024 0403 	bic.w	r4, r4, #3
 800ae08:	42a0      	cmp	r0, r4
 800ae0a:	d007      	beq.n	800ae1c <sbrk_aligned+0x38>
 800ae0c:	1a21      	subs	r1, r4, r0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 f9d6 	bl	800b1c0 <_sbrk_r>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d101      	bne.n	800ae1c <sbrk_aligned+0x38>
 800ae18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	200003d0 	.word	0x200003d0

0800ae24 <_malloc_r>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	1ccd      	adds	r5, r1, #3
 800ae2a:	f025 0503 	bic.w	r5, r5, #3
 800ae2e:	3508      	adds	r5, #8
 800ae30:	2d0c      	cmp	r5, #12
 800ae32:	bf38      	it	cc
 800ae34:	250c      	movcc	r5, #12
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	4607      	mov	r7, r0
 800ae3a:	db01      	blt.n	800ae40 <_malloc_r+0x1c>
 800ae3c:	42a9      	cmp	r1, r5
 800ae3e:	d905      	bls.n	800ae4c <_malloc_r+0x28>
 800ae40:	230c      	movs	r3, #12
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	2600      	movs	r6, #0
 800ae46:	4630      	mov	r0, r6
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	4e2e      	ldr	r6, [pc, #184]	; (800af08 <_malloc_r+0xe4>)
 800ae4e:	f000 fc69 	bl	800b724 <__malloc_lock>
 800ae52:	6833      	ldr	r3, [r6, #0]
 800ae54:	461c      	mov	r4, r3
 800ae56:	bb34      	cbnz	r4, 800aea6 <_malloc_r+0x82>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f7ff ffc2 	bl	800ade4 <sbrk_aligned>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	4604      	mov	r4, r0
 800ae64:	d14d      	bne.n	800af02 <_malloc_r+0xde>
 800ae66:	6834      	ldr	r4, [r6, #0]
 800ae68:	4626      	mov	r6, r4
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	d140      	bne.n	800aef0 <_malloc_r+0xcc>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	4631      	mov	r1, r6
 800ae72:	4638      	mov	r0, r7
 800ae74:	eb04 0803 	add.w	r8, r4, r3
 800ae78:	f000 f9a2 	bl	800b1c0 <_sbrk_r>
 800ae7c:	4580      	cmp	r8, r0
 800ae7e:	d13a      	bne.n	800aef6 <_malloc_r+0xd2>
 800ae80:	6821      	ldr	r1, [r4, #0]
 800ae82:	3503      	adds	r5, #3
 800ae84:	1a6d      	subs	r5, r5, r1
 800ae86:	f025 0503 	bic.w	r5, r5, #3
 800ae8a:	3508      	adds	r5, #8
 800ae8c:	2d0c      	cmp	r5, #12
 800ae8e:	bf38      	it	cc
 800ae90:	250c      	movcc	r5, #12
 800ae92:	4629      	mov	r1, r5
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7ff ffa5 	bl	800ade4 <sbrk_aligned>
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d02b      	beq.n	800aef6 <_malloc_r+0xd2>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	442b      	add	r3, r5
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	e00e      	b.n	800aec4 <_malloc_r+0xa0>
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	1b52      	subs	r2, r2, r5
 800aeaa:	d41e      	bmi.n	800aeea <_malloc_r+0xc6>
 800aeac:	2a0b      	cmp	r2, #11
 800aeae:	d916      	bls.n	800aede <_malloc_r+0xba>
 800aeb0:	1961      	adds	r1, r4, r5
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	6025      	str	r5, [r4, #0]
 800aeb6:	bf18      	it	ne
 800aeb8:	6059      	strne	r1, [r3, #4]
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	bf08      	it	eq
 800aebe:	6031      	streq	r1, [r6, #0]
 800aec0:	5162      	str	r2, [r4, r5]
 800aec2:	604b      	str	r3, [r1, #4]
 800aec4:	4638      	mov	r0, r7
 800aec6:	f104 060b 	add.w	r6, r4, #11
 800aeca:	f000 fc31 	bl	800b730 <__malloc_unlock>
 800aece:	f026 0607 	bic.w	r6, r6, #7
 800aed2:	1d23      	adds	r3, r4, #4
 800aed4:	1af2      	subs	r2, r6, r3
 800aed6:	d0b6      	beq.n	800ae46 <_malloc_r+0x22>
 800aed8:	1b9b      	subs	r3, r3, r6
 800aeda:	50a3      	str	r3, [r4, r2]
 800aedc:	e7b3      	b.n	800ae46 <_malloc_r+0x22>
 800aede:	6862      	ldr	r2, [r4, #4]
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	bf0c      	ite	eq
 800aee4:	6032      	streq	r2, [r6, #0]
 800aee6:	605a      	strne	r2, [r3, #4]
 800aee8:	e7ec      	b.n	800aec4 <_malloc_r+0xa0>
 800aeea:	4623      	mov	r3, r4
 800aeec:	6864      	ldr	r4, [r4, #4]
 800aeee:	e7b2      	b.n	800ae56 <_malloc_r+0x32>
 800aef0:	4634      	mov	r4, r6
 800aef2:	6876      	ldr	r6, [r6, #4]
 800aef4:	e7b9      	b.n	800ae6a <_malloc_r+0x46>
 800aef6:	230c      	movs	r3, #12
 800aef8:	603b      	str	r3, [r7, #0]
 800aefa:	4638      	mov	r0, r7
 800aefc:	f000 fc18 	bl	800b730 <__malloc_unlock>
 800af00:	e7a1      	b.n	800ae46 <_malloc_r+0x22>
 800af02:	6025      	str	r5, [r4, #0]
 800af04:	e7de      	b.n	800aec4 <_malloc_r+0xa0>
 800af06:	bf00      	nop
 800af08:	200003cc 	.word	0x200003cc

0800af0c <__sfputc_r>:
 800af0c:	6893      	ldr	r3, [r2, #8]
 800af0e:	3b01      	subs	r3, #1
 800af10:	2b00      	cmp	r3, #0
 800af12:	b410      	push	{r4}
 800af14:	6093      	str	r3, [r2, #8]
 800af16:	da08      	bge.n	800af2a <__sfputc_r+0x1e>
 800af18:	6994      	ldr	r4, [r2, #24]
 800af1a:	42a3      	cmp	r3, r4
 800af1c:	db01      	blt.n	800af22 <__sfputc_r+0x16>
 800af1e:	290a      	cmp	r1, #10
 800af20:	d103      	bne.n	800af2a <__sfputc_r+0x1e>
 800af22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af26:	f000 b99f 	b.w	800b268 <__swbuf_r>
 800af2a:	6813      	ldr	r3, [r2, #0]
 800af2c:	1c58      	adds	r0, r3, #1
 800af2e:	6010      	str	r0, [r2, #0]
 800af30:	7019      	strb	r1, [r3, #0]
 800af32:	4608      	mov	r0, r1
 800af34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <__sfputs_r>:
 800af3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	4614      	mov	r4, r2
 800af42:	18d5      	adds	r5, r2, r3
 800af44:	42ac      	cmp	r4, r5
 800af46:	d101      	bne.n	800af4c <__sfputs_r+0x12>
 800af48:	2000      	movs	r0, #0
 800af4a:	e007      	b.n	800af5c <__sfputs_r+0x22>
 800af4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af50:	463a      	mov	r2, r7
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ffda 	bl	800af0c <__sfputc_r>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d1f3      	bne.n	800af44 <__sfputs_r+0xa>
 800af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af60 <_vfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	460d      	mov	r5, r1
 800af66:	b09d      	sub	sp, #116	; 0x74
 800af68:	4614      	mov	r4, r2
 800af6a:	4698      	mov	r8, r3
 800af6c:	4606      	mov	r6, r0
 800af6e:	b118      	cbz	r0, 800af78 <_vfiprintf_r+0x18>
 800af70:	6983      	ldr	r3, [r0, #24]
 800af72:	b90b      	cbnz	r3, 800af78 <_vfiprintf_r+0x18>
 800af74:	f7ff faa2 	bl	800a4bc <__sinit>
 800af78:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <_vfiprintf_r+0x240>)
 800af7a:	429d      	cmp	r5, r3
 800af7c:	d11b      	bne.n	800afb6 <_vfiprintf_r+0x56>
 800af7e:	6875      	ldr	r5, [r6, #4]
 800af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d405      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f7ff fb38 	bl	800a602 <__retarget_lock_acquire_recursive>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	d501      	bpl.n	800af9c <_vfiprintf_r+0x3c>
 800af98:	692b      	ldr	r3, [r5, #16]
 800af9a:	b9eb      	cbnz	r3, 800afd8 <_vfiprintf_r+0x78>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 f9c6 	bl	800b330 <__swsetup_r>
 800afa4:	b1c0      	cbz	r0, 800afd8 <_vfiprintf_r+0x78>
 800afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa8:	07dc      	lsls	r4, r3, #31
 800afaa:	d50e      	bpl.n	800afca <_vfiprintf_r+0x6a>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb0:	b01d      	add	sp, #116	; 0x74
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <_vfiprintf_r+0x244>)
 800afb8:	429d      	cmp	r5, r3
 800afba:	d101      	bne.n	800afc0 <_vfiprintf_r+0x60>
 800afbc:	68b5      	ldr	r5, [r6, #8]
 800afbe:	e7df      	b.n	800af80 <_vfiprintf_r+0x20>
 800afc0:	4b79      	ldr	r3, [pc, #484]	; (800b1a8 <_vfiprintf_r+0x248>)
 800afc2:	429d      	cmp	r5, r3
 800afc4:	bf08      	it	eq
 800afc6:	68f5      	ldreq	r5, [r6, #12]
 800afc8:	e7da      	b.n	800af80 <_vfiprintf_r+0x20>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	0598      	lsls	r0, r3, #22
 800afce:	d4ed      	bmi.n	800afac <_vfiprintf_r+0x4c>
 800afd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd2:	f7ff fb17 	bl	800a604 <__retarget_lock_release_recursive>
 800afd6:	e7e9      	b.n	800afac <_vfiprintf_r+0x4c>
 800afd8:	2300      	movs	r3, #0
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	2320      	movs	r3, #32
 800afde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afe6:	2330      	movs	r3, #48	; 0x30
 800afe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1ac <_vfiprintf_r+0x24c>
 800afec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff0:	f04f 0901 	mov.w	r9, #1
 800aff4:	4623      	mov	r3, r4
 800aff6:	469a      	mov	sl, r3
 800aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affc:	b10a      	cbz	r2, 800b002 <_vfiprintf_r+0xa2>
 800affe:	2a25      	cmp	r2, #37	; 0x25
 800b000:	d1f9      	bne.n	800aff6 <_vfiprintf_r+0x96>
 800b002:	ebba 0b04 	subs.w	fp, sl, r4
 800b006:	d00b      	beq.n	800b020 <_vfiprintf_r+0xc0>
 800b008:	465b      	mov	r3, fp
 800b00a:	4622      	mov	r2, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff93 	bl	800af3a <__sfputs_r>
 800b014:	3001      	adds	r0, #1
 800b016:	f000 80aa 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01c:	445a      	add	r2, fp
 800b01e:	9209      	str	r2, [sp, #36]	; 0x24
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a2 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b034:	f10a 0a01 	add.w	sl, sl, #1
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b040:	931a      	str	r3, [sp, #104]	; 0x68
 800b042:	4654      	mov	r4, sl
 800b044:	2205      	movs	r2, #5
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	4858      	ldr	r0, [pc, #352]	; (800b1ac <_vfiprintf_r+0x24c>)
 800b04c:	f7f5 f8d0 	bl	80001f0 <memchr>
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	b9d8      	cbnz	r0, 800b08c <_vfiprintf_r+0x12c>
 800b054:	06d1      	lsls	r1, r2, #27
 800b056:	bf44      	itt	mi
 800b058:	2320      	movmi	r3, #32
 800b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05e:	0713      	lsls	r3, r2, #28
 800b060:	bf44      	itt	mi
 800b062:	232b      	movmi	r3, #43	; 0x2b
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b068:	f89a 3000 	ldrb.w	r3, [sl]
 800b06c:	2b2a      	cmp	r3, #42	; 0x2a
 800b06e:	d015      	beq.n	800b09c <_vfiprintf_r+0x13c>
 800b070:	9a07      	ldr	r2, [sp, #28]
 800b072:	4654      	mov	r4, sl
 800b074:	2000      	movs	r0, #0
 800b076:	f04f 0c0a 	mov.w	ip, #10
 800b07a:	4621      	mov	r1, r4
 800b07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b080:	3b30      	subs	r3, #48	; 0x30
 800b082:	2b09      	cmp	r3, #9
 800b084:	d94e      	bls.n	800b124 <_vfiprintf_r+0x1c4>
 800b086:	b1b0      	cbz	r0, 800b0b6 <_vfiprintf_r+0x156>
 800b088:	9207      	str	r2, [sp, #28]
 800b08a:	e014      	b.n	800b0b6 <_vfiprintf_r+0x156>
 800b08c:	eba0 0308 	sub.w	r3, r0, r8
 800b090:	fa09 f303 	lsl.w	r3, r9, r3
 800b094:	4313      	orrs	r3, r2
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	46a2      	mov	sl, r4
 800b09a:	e7d2      	b.n	800b042 <_vfiprintf_r+0xe2>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1d19      	adds	r1, r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	9103      	str	r1, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfbb      	ittet	lt
 800b0a8:	425b      	neglt	r3, r3
 800b0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ae:	9307      	strge	r3, [sp, #28]
 800b0b0:	9307      	strlt	r3, [sp, #28]
 800b0b2:	bfb8      	it	lt
 800b0b4:	9204      	strlt	r2, [sp, #16]
 800b0b6:	7823      	ldrb	r3, [r4, #0]
 800b0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ba:	d10c      	bne.n	800b0d6 <_vfiprintf_r+0x176>
 800b0bc:	7863      	ldrb	r3, [r4, #1]
 800b0be:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c0:	d135      	bne.n	800b12e <_vfiprintf_r+0x1ce>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	9203      	str	r2, [sp, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bfb8      	it	lt
 800b0ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0d2:	3402      	adds	r4, #2
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1bc <_vfiprintf_r+0x25c>
 800b0da:	7821      	ldrb	r1, [r4, #0]
 800b0dc:	2203      	movs	r2, #3
 800b0de:	4650      	mov	r0, sl
 800b0e0:	f7f5 f886 	bl	80001f0 <memchr>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_vfiprintf_r+0x198>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	4303      	orrs	r3, r0
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fc:	482c      	ldr	r0, [pc, #176]	; (800b1b0 <_vfiprintf_r+0x250>)
 800b0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b102:	2206      	movs	r2, #6
 800b104:	f7f5 f874 	bl	80001f0 <memchr>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d03f      	beq.n	800b18c <_vfiprintf_r+0x22c>
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <_vfiprintf_r+0x254>)
 800b10e:	bb1b      	cbnz	r3, 800b158 <_vfiprintf_r+0x1f8>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	3307      	adds	r3, #7
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	443b      	add	r3, r7
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	e767      	b.n	800aff4 <_vfiprintf_r+0x94>
 800b124:	fb0c 3202 	mla	r2, ip, r2, r3
 800b128:	460c      	mov	r4, r1
 800b12a:	2001      	movs	r0, #1
 800b12c:	e7a5      	b.n	800b07a <_vfiprintf_r+0x11a>
 800b12e:	2300      	movs	r3, #0
 800b130:	3401      	adds	r4, #1
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	4619      	mov	r1, r3
 800b136:	f04f 0c0a 	mov.w	ip, #10
 800b13a:	4620      	mov	r0, r4
 800b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b140:	3a30      	subs	r2, #48	; 0x30
 800b142:	2a09      	cmp	r2, #9
 800b144:	d903      	bls.n	800b14e <_vfiprintf_r+0x1ee>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0c5      	beq.n	800b0d6 <_vfiprintf_r+0x176>
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	e7c3      	b.n	800b0d6 <_vfiprintf_r+0x176>
 800b14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b152:	4604      	mov	r4, r0
 800b154:	2301      	movs	r3, #1
 800b156:	e7f0      	b.n	800b13a <_vfiprintf_r+0x1da>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4630      	mov	r0, r6
 800b164:	f7fd fef4 	bl	8008f50 <_printf_float>
 800b168:	4607      	mov	r7, r0
 800b16a:	1c78      	adds	r0, r7, #1
 800b16c:	d1d6      	bne.n	800b11c <_vfiprintf_r+0x1bc>
 800b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b170:	07d9      	lsls	r1, r3, #31
 800b172:	d405      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b174:	89ab      	ldrh	r3, [r5, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d402      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17c:	f7ff fa42 	bl	800a604 <__retarget_lock_release_recursive>
 800b180:	89ab      	ldrh	r3, [r5, #12]
 800b182:	065b      	lsls	r3, r3, #25
 800b184:	f53f af12 	bmi.w	800afac <_vfiprintf_r+0x4c>
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	e711      	b.n	800afb0 <_vfiprintf_r+0x50>
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	462a      	mov	r2, r5
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b194:	a904      	add	r1, sp, #16
 800b196:	4630      	mov	r0, r6
 800b198:	f7fe f97e 	bl	8009498 <_printf_i>
 800b19c:	e7e4      	b.n	800b168 <_vfiprintf_r+0x208>
 800b19e:	bf00      	nop
 800b1a0:	0800c6f0 	.word	0x0800c6f0
 800b1a4:	0800c710 	.word	0x0800c710
 800b1a8:	0800c6d0 	.word	0x0800c6d0
 800b1ac:	0800c88c 	.word	0x0800c88c
 800b1b0:	0800c896 	.word	0x0800c896
 800b1b4:	08008f51 	.word	0x08008f51
 800b1b8:	0800af3b 	.word	0x0800af3b
 800b1bc:	0800c892 	.word	0x0800c892

0800b1c0 <_sbrk_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_sbrk_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f9 ffcc 	bl	8005168 <_sbrk>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_sbrk_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_sbrk_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	200003d4 	.word	0x200003d4

0800b1e0 <__sread>:
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e8:	f000 faa8 	bl	800b73c <_read_r>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	bfab      	itete	ge
 800b1f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b1f4:	181b      	addge	r3, r3, r0
 800b1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1fa:	bfac      	ite	ge
 800b1fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1fe:	81a3      	strhlt	r3, [r4, #12]
 800b200:	bd10      	pop	{r4, pc}

0800b202 <__swrite>:
 800b202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b206:	461f      	mov	r7, r3
 800b208:	898b      	ldrh	r3, [r1, #12]
 800b20a:	05db      	lsls	r3, r3, #23
 800b20c:	4605      	mov	r5, r0
 800b20e:	460c      	mov	r4, r1
 800b210:	4616      	mov	r6, r2
 800b212:	d505      	bpl.n	800b220 <__swrite+0x1e>
 800b214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b218:	2302      	movs	r3, #2
 800b21a:	2200      	movs	r2, #0
 800b21c:	f000 f9f8 	bl	800b610 <_lseek_r>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	4632      	mov	r2, r6
 800b22e:	463b      	mov	r3, r7
 800b230:	4628      	mov	r0, r5
 800b232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	f000 b869 	b.w	800b30c <_write_r>

0800b23a <__sseek>:
 800b23a:	b510      	push	{r4, lr}
 800b23c:	460c      	mov	r4, r1
 800b23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b242:	f000 f9e5 	bl	800b610 <_lseek_r>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	bf15      	itete	ne
 800b24c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b256:	81a3      	strheq	r3, [r4, #12]
 800b258:	bf18      	it	ne
 800b25a:	81a3      	strhne	r3, [r4, #12]
 800b25c:	bd10      	pop	{r4, pc}

0800b25e <__sclose>:
 800b25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b262:	f000 b8f1 	b.w	800b448 <_close_r>
	...

0800b268 <__swbuf_r>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	460e      	mov	r6, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	4605      	mov	r5, r0
 800b270:	b118      	cbz	r0, 800b27a <__swbuf_r+0x12>
 800b272:	6983      	ldr	r3, [r0, #24]
 800b274:	b90b      	cbnz	r3, 800b27a <__swbuf_r+0x12>
 800b276:	f7ff f921 	bl	800a4bc <__sinit>
 800b27a:	4b21      	ldr	r3, [pc, #132]	; (800b300 <__swbuf_r+0x98>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	d12b      	bne.n	800b2d8 <__swbuf_r+0x70>
 800b280:	686c      	ldr	r4, [r5, #4]
 800b282:	69a3      	ldr	r3, [r4, #24]
 800b284:	60a3      	str	r3, [r4, #8]
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	071a      	lsls	r2, r3, #28
 800b28a:	d52f      	bpl.n	800b2ec <__swbuf_r+0x84>
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	b36b      	cbz	r3, 800b2ec <__swbuf_r+0x84>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	6820      	ldr	r0, [r4, #0]
 800b294:	1ac0      	subs	r0, r0, r3
 800b296:	6963      	ldr	r3, [r4, #20]
 800b298:	b2f6      	uxtb	r6, r6
 800b29a:	4283      	cmp	r3, r0
 800b29c:	4637      	mov	r7, r6
 800b29e:	dc04      	bgt.n	800b2aa <__swbuf_r+0x42>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f000 f966 	bl	800b574 <_fflush_r>
 800b2a8:	bb30      	cbnz	r0, 800b2f8 <__swbuf_r+0x90>
 800b2aa:	68a3      	ldr	r3, [r4, #8]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	60a3      	str	r3, [r4, #8]
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	6022      	str	r2, [r4, #0]
 800b2b6:	701e      	strb	r6, [r3, #0]
 800b2b8:	6963      	ldr	r3, [r4, #20]
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	4283      	cmp	r3, r0
 800b2be:	d004      	beq.n	800b2ca <__swbuf_r+0x62>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	07db      	lsls	r3, r3, #31
 800b2c4:	d506      	bpl.n	800b2d4 <__swbuf_r+0x6c>
 800b2c6:	2e0a      	cmp	r6, #10
 800b2c8:	d104      	bne.n	800b2d4 <__swbuf_r+0x6c>
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f000 f951 	bl	800b574 <_fflush_r>
 800b2d2:	b988      	cbnz	r0, 800b2f8 <__swbuf_r+0x90>
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <__swbuf_r+0x9c>)
 800b2da:	429c      	cmp	r4, r3
 800b2dc:	d101      	bne.n	800b2e2 <__swbuf_r+0x7a>
 800b2de:	68ac      	ldr	r4, [r5, #8]
 800b2e0:	e7cf      	b.n	800b282 <__swbuf_r+0x1a>
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <__swbuf_r+0xa0>)
 800b2e4:	429c      	cmp	r4, r3
 800b2e6:	bf08      	it	eq
 800b2e8:	68ec      	ldreq	r4, [r5, #12]
 800b2ea:	e7ca      	b.n	800b282 <__swbuf_r+0x1a>
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f000 f81e 	bl	800b330 <__swsetup_r>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d0cb      	beq.n	800b290 <__swbuf_r+0x28>
 800b2f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b2fc:	e7ea      	b.n	800b2d4 <__swbuf_r+0x6c>
 800b2fe:	bf00      	nop
 800b300:	0800c6f0 	.word	0x0800c6f0
 800b304:	0800c710 	.word	0x0800c710
 800b308:	0800c6d0 	.word	0x0800c6d0

0800b30c <_write_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	; (800b32c <_write_r+0x20>)
 800b310:	4604      	mov	r4, r0
 800b312:	4608      	mov	r0, r1
 800b314:	4611      	mov	r1, r2
 800b316:	2200      	movs	r2, #0
 800b318:	602a      	str	r2, [r5, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f7f9 fe0e 	bl	8004f3c <_write>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_write_r+0x1e>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_write_r+0x1e>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	200003d4 	.word	0x200003d4

0800b330 <__swsetup_r>:
 800b330:	4b32      	ldr	r3, [pc, #200]	; (800b3fc <__swsetup_r+0xcc>)
 800b332:	b570      	push	{r4, r5, r6, lr}
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	4606      	mov	r6, r0
 800b338:	460c      	mov	r4, r1
 800b33a:	b125      	cbz	r5, 800b346 <__swsetup_r+0x16>
 800b33c:	69ab      	ldr	r3, [r5, #24]
 800b33e:	b913      	cbnz	r3, 800b346 <__swsetup_r+0x16>
 800b340:	4628      	mov	r0, r5
 800b342:	f7ff f8bb 	bl	800a4bc <__sinit>
 800b346:	4b2e      	ldr	r3, [pc, #184]	; (800b400 <__swsetup_r+0xd0>)
 800b348:	429c      	cmp	r4, r3
 800b34a:	d10f      	bne.n	800b36c <__swsetup_r+0x3c>
 800b34c:	686c      	ldr	r4, [r5, #4]
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b354:	0719      	lsls	r1, r3, #28
 800b356:	d42c      	bmi.n	800b3b2 <__swsetup_r+0x82>
 800b358:	06dd      	lsls	r5, r3, #27
 800b35a:	d411      	bmi.n	800b380 <__swsetup_r+0x50>
 800b35c:	2309      	movs	r3, #9
 800b35e:	6033      	str	r3, [r6, #0]
 800b360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b36a:	e03e      	b.n	800b3ea <__swsetup_r+0xba>
 800b36c:	4b25      	ldr	r3, [pc, #148]	; (800b404 <__swsetup_r+0xd4>)
 800b36e:	429c      	cmp	r4, r3
 800b370:	d101      	bne.n	800b376 <__swsetup_r+0x46>
 800b372:	68ac      	ldr	r4, [r5, #8]
 800b374:	e7eb      	b.n	800b34e <__swsetup_r+0x1e>
 800b376:	4b24      	ldr	r3, [pc, #144]	; (800b408 <__swsetup_r+0xd8>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	bf08      	it	eq
 800b37c:	68ec      	ldreq	r4, [r5, #12]
 800b37e:	e7e6      	b.n	800b34e <__swsetup_r+0x1e>
 800b380:	0758      	lsls	r0, r3, #29
 800b382:	d512      	bpl.n	800b3aa <__swsetup_r+0x7a>
 800b384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b386:	b141      	cbz	r1, 800b39a <__swsetup_r+0x6a>
 800b388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b38c:	4299      	cmp	r1, r3
 800b38e:	d002      	beq.n	800b396 <__swsetup_r+0x66>
 800b390:	4630      	mov	r0, r6
 800b392:	f7ff fcdb 	bl	800ad4c <_free_r>
 800b396:	2300      	movs	r3, #0
 800b398:	6363      	str	r3, [r4, #52]	; 0x34
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3a0:	81a3      	strh	r3, [r4, #12]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6063      	str	r3, [r4, #4]
 800b3a6:	6923      	ldr	r3, [r4, #16]
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	f043 0308 	orr.w	r3, r3, #8
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	b94b      	cbnz	r3, 800b3ca <__swsetup_r+0x9a>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c0:	d003      	beq.n	800b3ca <__swsetup_r+0x9a>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f000 f95b 	bl	800b680 <__smakebuf_r>
 800b3ca:	89a0      	ldrh	r0, [r4, #12]
 800b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d0:	f010 0301 	ands.w	r3, r0, #1
 800b3d4:	d00a      	beq.n	800b3ec <__swsetup_r+0xbc>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60a3      	str	r3, [r4, #8]
 800b3da:	6963      	ldr	r3, [r4, #20]
 800b3dc:	425b      	negs	r3, r3
 800b3de:	61a3      	str	r3, [r4, #24]
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	b943      	cbnz	r3, 800b3f6 <__swsetup_r+0xc6>
 800b3e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3e8:	d1ba      	bne.n	800b360 <__swsetup_r+0x30>
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	0781      	lsls	r1, r0, #30
 800b3ee:	bf58      	it	pl
 800b3f0:	6963      	ldrpl	r3, [r4, #20]
 800b3f2:	60a3      	str	r3, [r4, #8]
 800b3f4:	e7f4      	b.n	800b3e0 <__swsetup_r+0xb0>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e7f7      	b.n	800b3ea <__swsetup_r+0xba>
 800b3fa:	bf00      	nop
 800b3fc:	20000048 	.word	0x20000048
 800b400:	0800c6f0 	.word	0x0800c6f0
 800b404:	0800c710 	.word	0x0800c710
 800b408:	0800c6d0 	.word	0x0800c6d0

0800b40c <__assert_func>:
 800b40c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b40e:	4614      	mov	r4, r2
 800b410:	461a      	mov	r2, r3
 800b412:	4b09      	ldr	r3, [pc, #36]	; (800b438 <__assert_func+0x2c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4605      	mov	r5, r0
 800b418:	68d8      	ldr	r0, [r3, #12]
 800b41a:	b14c      	cbz	r4, 800b430 <__assert_func+0x24>
 800b41c:	4b07      	ldr	r3, [pc, #28]	; (800b43c <__assert_func+0x30>)
 800b41e:	9100      	str	r1, [sp, #0]
 800b420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b424:	4906      	ldr	r1, [pc, #24]	; (800b440 <__assert_func+0x34>)
 800b426:	462b      	mov	r3, r5
 800b428:	f000 f8e0 	bl	800b5ec <fiprintf>
 800b42c:	f000 f9a5 	bl	800b77a <abort>
 800b430:	4b04      	ldr	r3, [pc, #16]	; (800b444 <__assert_func+0x38>)
 800b432:	461c      	mov	r4, r3
 800b434:	e7f3      	b.n	800b41e <__assert_func+0x12>
 800b436:	bf00      	nop
 800b438:	20000048 	.word	0x20000048
 800b43c:	0800c89d 	.word	0x0800c89d
 800b440:	0800c8aa 	.word	0x0800c8aa
 800b444:	0800c8d8 	.word	0x0800c8d8

0800b448 <_close_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d06      	ldr	r5, [pc, #24]	; (800b464 <_close_r+0x1c>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f9 fe53 	bl	80050fe <_close>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_close_r+0x1a>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_close_r+0x1a>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	200003d4 	.word	0x200003d4

0800b468 <__sflush_r>:
 800b468:	898a      	ldrh	r2, [r1, #12]
 800b46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	4605      	mov	r5, r0
 800b470:	0710      	lsls	r0, r2, #28
 800b472:	460c      	mov	r4, r1
 800b474:	d458      	bmi.n	800b528 <__sflush_r+0xc0>
 800b476:	684b      	ldr	r3, [r1, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc05      	bgt.n	800b488 <__sflush_r+0x20>
 800b47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dc02      	bgt.n	800b488 <__sflush_r+0x20>
 800b482:	2000      	movs	r0, #0
 800b484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	d0f9      	beq.n	800b482 <__sflush_r+0x1a>
 800b48e:	2300      	movs	r3, #0
 800b490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b494:	682f      	ldr	r7, [r5, #0]
 800b496:	602b      	str	r3, [r5, #0]
 800b498:	d032      	beq.n	800b500 <__sflush_r+0x98>
 800b49a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	075a      	lsls	r2, r3, #29
 800b4a0:	d505      	bpl.n	800b4ae <__sflush_r+0x46>
 800b4a2:	6863      	ldr	r3, [r4, #4]
 800b4a4:	1ac0      	subs	r0, r0, r3
 800b4a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4a8:	b10b      	cbz	r3, 800b4ae <__sflush_r+0x46>
 800b4aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4ac:	1ac0      	subs	r0, r0, r3
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4b4:	6a21      	ldr	r1, [r4, #32]
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b0      	blx	r6
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	d106      	bne.n	800b4ce <__sflush_r+0x66>
 800b4c0:	6829      	ldr	r1, [r5, #0]
 800b4c2:	291d      	cmp	r1, #29
 800b4c4:	d82c      	bhi.n	800b520 <__sflush_r+0xb8>
 800b4c6:	4a2a      	ldr	r2, [pc, #168]	; (800b570 <__sflush_r+0x108>)
 800b4c8:	40ca      	lsrs	r2, r1
 800b4ca:	07d6      	lsls	r6, r2, #31
 800b4cc:	d528      	bpl.n	800b520 <__sflush_r+0xb8>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	6062      	str	r2, [r4, #4]
 800b4d2:	04d9      	lsls	r1, r3, #19
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	6022      	str	r2, [r4, #0]
 800b4d8:	d504      	bpl.n	800b4e4 <__sflush_r+0x7c>
 800b4da:	1c42      	adds	r2, r0, #1
 800b4dc:	d101      	bne.n	800b4e2 <__sflush_r+0x7a>
 800b4de:	682b      	ldr	r3, [r5, #0]
 800b4e0:	b903      	cbnz	r3, 800b4e4 <__sflush_r+0x7c>
 800b4e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4e6:	602f      	str	r7, [r5, #0]
 800b4e8:	2900      	cmp	r1, #0
 800b4ea:	d0ca      	beq.n	800b482 <__sflush_r+0x1a>
 800b4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4f0:	4299      	cmp	r1, r3
 800b4f2:	d002      	beq.n	800b4fa <__sflush_r+0x92>
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff fc29 	bl	800ad4c <_free_r>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b4fe:	e7c1      	b.n	800b484 <__sflush_r+0x1c>
 800b500:	6a21      	ldr	r1, [r4, #32]
 800b502:	2301      	movs	r3, #1
 800b504:	4628      	mov	r0, r5
 800b506:	47b0      	blx	r6
 800b508:	1c41      	adds	r1, r0, #1
 800b50a:	d1c7      	bne.n	800b49c <__sflush_r+0x34>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0c4      	beq.n	800b49c <__sflush_r+0x34>
 800b512:	2b1d      	cmp	r3, #29
 800b514:	d001      	beq.n	800b51a <__sflush_r+0xb2>
 800b516:	2b16      	cmp	r3, #22
 800b518:	d101      	bne.n	800b51e <__sflush_r+0xb6>
 800b51a:	602f      	str	r7, [r5, #0]
 800b51c:	e7b1      	b.n	800b482 <__sflush_r+0x1a>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	e7ad      	b.n	800b484 <__sflush_r+0x1c>
 800b528:	690f      	ldr	r7, [r1, #16]
 800b52a:	2f00      	cmp	r7, #0
 800b52c:	d0a9      	beq.n	800b482 <__sflush_r+0x1a>
 800b52e:	0793      	lsls	r3, r2, #30
 800b530:	680e      	ldr	r6, [r1, #0]
 800b532:	bf08      	it	eq
 800b534:	694b      	ldreq	r3, [r1, #20]
 800b536:	600f      	str	r7, [r1, #0]
 800b538:	bf18      	it	ne
 800b53a:	2300      	movne	r3, #0
 800b53c:	eba6 0807 	sub.w	r8, r6, r7
 800b540:	608b      	str	r3, [r1, #8]
 800b542:	f1b8 0f00 	cmp.w	r8, #0
 800b546:	dd9c      	ble.n	800b482 <__sflush_r+0x1a>
 800b548:	6a21      	ldr	r1, [r4, #32]
 800b54a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b54c:	4643      	mov	r3, r8
 800b54e:	463a      	mov	r2, r7
 800b550:	4628      	mov	r0, r5
 800b552:	47b0      	blx	r6
 800b554:	2800      	cmp	r0, #0
 800b556:	dc06      	bgt.n	800b566 <__sflush_r+0xfe>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b564:	e78e      	b.n	800b484 <__sflush_r+0x1c>
 800b566:	4407      	add	r7, r0
 800b568:	eba8 0800 	sub.w	r8, r8, r0
 800b56c:	e7e9      	b.n	800b542 <__sflush_r+0xda>
 800b56e:	bf00      	nop
 800b570:	20400001 	.word	0x20400001

0800b574 <_fflush_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	690b      	ldr	r3, [r1, #16]
 800b578:	4605      	mov	r5, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	b913      	cbnz	r3, 800b584 <_fflush_r+0x10>
 800b57e:	2500      	movs	r5, #0
 800b580:	4628      	mov	r0, r5
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	b118      	cbz	r0, 800b58e <_fflush_r+0x1a>
 800b586:	6983      	ldr	r3, [r0, #24]
 800b588:	b90b      	cbnz	r3, 800b58e <_fflush_r+0x1a>
 800b58a:	f7fe ff97 	bl	800a4bc <__sinit>
 800b58e:	4b14      	ldr	r3, [pc, #80]	; (800b5e0 <_fflush_r+0x6c>)
 800b590:	429c      	cmp	r4, r3
 800b592:	d11b      	bne.n	800b5cc <_fflush_r+0x58>
 800b594:	686c      	ldr	r4, [r5, #4]
 800b596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0ef      	beq.n	800b57e <_fflush_r+0xa>
 800b59e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5a0:	07d0      	lsls	r0, r2, #31
 800b5a2:	d404      	bmi.n	800b5ae <_fflush_r+0x3a>
 800b5a4:	0599      	lsls	r1, r3, #22
 800b5a6:	d402      	bmi.n	800b5ae <_fflush_r+0x3a>
 800b5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5aa:	f7ff f82a 	bl	800a602 <__retarget_lock_acquire_recursive>
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	f7ff ff59 	bl	800b468 <__sflush_r>
 800b5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b8:	07da      	lsls	r2, r3, #31
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	d4e0      	bmi.n	800b580 <_fflush_r+0xc>
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	059b      	lsls	r3, r3, #22
 800b5c2:	d4dd      	bmi.n	800b580 <_fflush_r+0xc>
 800b5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5c6:	f7ff f81d 	bl	800a604 <__retarget_lock_release_recursive>
 800b5ca:	e7d9      	b.n	800b580 <_fflush_r+0xc>
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <_fflush_r+0x70>)
 800b5ce:	429c      	cmp	r4, r3
 800b5d0:	d101      	bne.n	800b5d6 <_fflush_r+0x62>
 800b5d2:	68ac      	ldr	r4, [r5, #8]
 800b5d4:	e7df      	b.n	800b596 <_fflush_r+0x22>
 800b5d6:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <_fflush_r+0x74>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	bf08      	it	eq
 800b5dc:	68ec      	ldreq	r4, [r5, #12]
 800b5de:	e7da      	b.n	800b596 <_fflush_r+0x22>
 800b5e0:	0800c6f0 	.word	0x0800c6f0
 800b5e4:	0800c710 	.word	0x0800c710
 800b5e8:	0800c6d0 	.word	0x0800c6d0

0800b5ec <fiprintf>:
 800b5ec:	b40e      	push	{r1, r2, r3}
 800b5ee:	b503      	push	{r0, r1, lr}
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	4805      	ldr	r0, [pc, #20]	; (800b60c <fiprintf+0x20>)
 800b5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fa:	6800      	ldr	r0, [r0, #0]
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	f7ff fcaf 	bl	800af60 <_vfiprintf_r>
 800b602:	b002      	add	sp, #8
 800b604:	f85d eb04 	ldr.w	lr, [sp], #4
 800b608:	b003      	add	sp, #12
 800b60a:	4770      	bx	lr
 800b60c:	20000048 	.word	0x20000048

0800b610 <_lseek_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	; (800b630 <_lseek_r+0x20>)
 800b614:	4604      	mov	r4, r0
 800b616:	4608      	mov	r0, r1
 800b618:	4611      	mov	r1, r2
 800b61a:	2200      	movs	r2, #0
 800b61c:	602a      	str	r2, [r5, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	f7f9 fd94 	bl	800514c <_lseek>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_lseek_r+0x1e>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_lseek_r+0x1e>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	200003d4 	.word	0x200003d4

0800b634 <__swhatbuf_r>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	460e      	mov	r6, r1
 800b638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63c:	2900      	cmp	r1, #0
 800b63e:	b096      	sub	sp, #88	; 0x58
 800b640:	4614      	mov	r4, r2
 800b642:	461d      	mov	r5, r3
 800b644:	da08      	bge.n	800b658 <__swhatbuf_r+0x24>
 800b646:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	602a      	str	r2, [r5, #0]
 800b64e:	061a      	lsls	r2, r3, #24
 800b650:	d410      	bmi.n	800b674 <__swhatbuf_r+0x40>
 800b652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b656:	e00e      	b.n	800b676 <__swhatbuf_r+0x42>
 800b658:	466a      	mov	r2, sp
 800b65a:	f000 f895 	bl	800b788 <_fstat_r>
 800b65e:	2800      	cmp	r0, #0
 800b660:	dbf1      	blt.n	800b646 <__swhatbuf_r+0x12>
 800b662:	9a01      	ldr	r2, [sp, #4]
 800b664:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b668:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b66c:	425a      	negs	r2, r3
 800b66e:	415a      	adcs	r2, r3
 800b670:	602a      	str	r2, [r5, #0]
 800b672:	e7ee      	b.n	800b652 <__swhatbuf_r+0x1e>
 800b674:	2340      	movs	r3, #64	; 0x40
 800b676:	2000      	movs	r0, #0
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	b016      	add	sp, #88	; 0x58
 800b67c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b680 <__smakebuf_r>:
 800b680:	898b      	ldrh	r3, [r1, #12]
 800b682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b684:	079d      	lsls	r5, r3, #30
 800b686:	4606      	mov	r6, r0
 800b688:	460c      	mov	r4, r1
 800b68a:	d507      	bpl.n	800b69c <__smakebuf_r+0x1c>
 800b68c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	2301      	movs	r3, #1
 800b696:	6163      	str	r3, [r4, #20]
 800b698:	b002      	add	sp, #8
 800b69a:	bd70      	pop	{r4, r5, r6, pc}
 800b69c:	ab01      	add	r3, sp, #4
 800b69e:	466a      	mov	r2, sp
 800b6a0:	f7ff ffc8 	bl	800b634 <__swhatbuf_r>
 800b6a4:	9900      	ldr	r1, [sp, #0]
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff fbbb 	bl	800ae24 <_malloc_r>
 800b6ae:	b948      	cbnz	r0, 800b6c4 <__smakebuf_r+0x44>
 800b6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b4:	059a      	lsls	r2, r3, #22
 800b6b6:	d4ef      	bmi.n	800b698 <__smakebuf_r+0x18>
 800b6b8:	f023 0303 	bic.w	r3, r3, #3
 800b6bc:	f043 0302 	orr.w	r3, r3, #2
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	e7e3      	b.n	800b68c <__smakebuf_r+0xc>
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	; (800b6fc <__smakebuf_r+0x7c>)
 800b6c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	6020      	str	r0, [r4, #0]
 800b6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	9b00      	ldr	r3, [sp, #0]
 800b6d4:	6163      	str	r3, [r4, #20]
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	6120      	str	r0, [r4, #16]
 800b6da:	b15b      	cbz	r3, 800b6f4 <__smakebuf_r+0x74>
 800b6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f000 f863 	bl	800b7ac <_isatty_r>
 800b6e6:	b128      	cbz	r0, 800b6f4 <__smakebuf_r+0x74>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	81a3      	strh	r3, [r4, #12]
 800b6f4:	89a0      	ldrh	r0, [r4, #12]
 800b6f6:	4305      	orrs	r5, r0
 800b6f8:	81a5      	strh	r5, [r4, #12]
 800b6fa:	e7cd      	b.n	800b698 <__smakebuf_r+0x18>
 800b6fc:	0800a455 	.word	0x0800a455

0800b700 <__ascii_mbtowc>:
 800b700:	b082      	sub	sp, #8
 800b702:	b901      	cbnz	r1, 800b706 <__ascii_mbtowc+0x6>
 800b704:	a901      	add	r1, sp, #4
 800b706:	b142      	cbz	r2, 800b71a <__ascii_mbtowc+0x1a>
 800b708:	b14b      	cbz	r3, 800b71e <__ascii_mbtowc+0x1e>
 800b70a:	7813      	ldrb	r3, [r2, #0]
 800b70c:	600b      	str	r3, [r1, #0]
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	1e10      	subs	r0, r2, #0
 800b712:	bf18      	it	ne
 800b714:	2001      	movne	r0, #1
 800b716:	b002      	add	sp, #8
 800b718:	4770      	bx	lr
 800b71a:	4610      	mov	r0, r2
 800b71c:	e7fb      	b.n	800b716 <__ascii_mbtowc+0x16>
 800b71e:	f06f 0001 	mvn.w	r0, #1
 800b722:	e7f8      	b.n	800b716 <__ascii_mbtowc+0x16>

0800b724 <__malloc_lock>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__malloc_lock+0x8>)
 800b726:	f7fe bf6c 	b.w	800a602 <__retarget_lock_acquire_recursive>
 800b72a:	bf00      	nop
 800b72c:	200003c8 	.word	0x200003c8

0800b730 <__malloc_unlock>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__malloc_unlock+0x8>)
 800b732:	f7fe bf67 	b.w	800a604 <__retarget_lock_release_recursive>
 800b736:	bf00      	nop
 800b738:	200003c8 	.word	0x200003c8

0800b73c <_read_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4d07      	ldr	r5, [pc, #28]	; (800b75c <_read_r+0x20>)
 800b740:	4604      	mov	r4, r0
 800b742:	4608      	mov	r0, r1
 800b744:	4611      	mov	r1, r2
 800b746:	2200      	movs	r2, #0
 800b748:	602a      	str	r2, [r5, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	f7f9 fcba 	bl	80050c4 <_read>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_read_r+0x1e>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_read_r+0x1e>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	200003d4 	.word	0x200003d4

0800b760 <__ascii_wctomb>:
 800b760:	b149      	cbz	r1, 800b776 <__ascii_wctomb+0x16>
 800b762:	2aff      	cmp	r2, #255	; 0xff
 800b764:	bf85      	ittet	hi
 800b766:	238a      	movhi	r3, #138	; 0x8a
 800b768:	6003      	strhi	r3, [r0, #0]
 800b76a:	700a      	strbls	r2, [r1, #0]
 800b76c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b770:	bf98      	it	ls
 800b772:	2001      	movls	r0, #1
 800b774:	4770      	bx	lr
 800b776:	4608      	mov	r0, r1
 800b778:	4770      	bx	lr

0800b77a <abort>:
 800b77a:	b508      	push	{r3, lr}
 800b77c:	2006      	movs	r0, #6
 800b77e:	f000 f84d 	bl	800b81c <raise>
 800b782:	2001      	movs	r0, #1
 800b784:	f7f9 fc94 	bl	80050b0 <_exit>

0800b788 <_fstat_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	; (800b7a8 <_fstat_r+0x20>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	4611      	mov	r1, r2
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	f7f9 fcbe 	bl	8005116 <_fstat>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d102      	bne.n	800b7a4 <_fstat_r+0x1c>
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	b103      	cbz	r3, 800b7a4 <_fstat_r+0x1c>
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	200003d4 	.word	0x200003d4

0800b7ac <_isatty_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	; (800b7c8 <_isatty_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f9 fcbd 	bl	8005136 <_isatty>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_isatty_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_isatty_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	200003d4 	.word	0x200003d4

0800b7cc <_raise_r>:
 800b7cc:	291f      	cmp	r1, #31
 800b7ce:	b538      	push	{r3, r4, r5, lr}
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	460d      	mov	r5, r1
 800b7d4:	d904      	bls.n	800b7e0 <_raise_r+0x14>
 800b7d6:	2316      	movs	r3, #22
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7e2:	b112      	cbz	r2, 800b7ea <_raise_r+0x1e>
 800b7e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7e8:	b94b      	cbnz	r3, 800b7fe <_raise_r+0x32>
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 f830 	bl	800b850 <_getpid_r>
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7fa:	f000 b817 	b.w	800b82c <_kill_r>
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d00a      	beq.n	800b818 <_raise_r+0x4c>
 800b802:	1c59      	adds	r1, r3, #1
 800b804:	d103      	bne.n	800b80e <_raise_r+0x42>
 800b806:	2316      	movs	r3, #22
 800b808:	6003      	str	r3, [r0, #0]
 800b80a:	2001      	movs	r0, #1
 800b80c:	e7e7      	b.n	800b7de <_raise_r+0x12>
 800b80e:	2400      	movs	r4, #0
 800b810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b814:	4628      	mov	r0, r5
 800b816:	4798      	blx	r3
 800b818:	2000      	movs	r0, #0
 800b81a:	e7e0      	b.n	800b7de <_raise_r+0x12>

0800b81c <raise>:
 800b81c:	4b02      	ldr	r3, [pc, #8]	; (800b828 <raise+0xc>)
 800b81e:	4601      	mov	r1, r0
 800b820:	6818      	ldr	r0, [r3, #0]
 800b822:	f7ff bfd3 	b.w	800b7cc <_raise_r>
 800b826:	bf00      	nop
 800b828:	20000048 	.word	0x20000048

0800b82c <_kill_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	4d07      	ldr	r5, [pc, #28]	; (800b84c <_kill_r+0x20>)
 800b830:	2300      	movs	r3, #0
 800b832:	4604      	mov	r4, r0
 800b834:	4608      	mov	r0, r1
 800b836:	4611      	mov	r1, r2
 800b838:	602b      	str	r3, [r5, #0]
 800b83a:	f7f9 fc29 	bl	8005090 <_kill>
 800b83e:	1c43      	adds	r3, r0, #1
 800b840:	d102      	bne.n	800b848 <_kill_r+0x1c>
 800b842:	682b      	ldr	r3, [r5, #0]
 800b844:	b103      	cbz	r3, 800b848 <_kill_r+0x1c>
 800b846:	6023      	str	r3, [r4, #0]
 800b848:	bd38      	pop	{r3, r4, r5, pc}
 800b84a:	bf00      	nop
 800b84c:	200003d4 	.word	0x200003d4

0800b850 <_getpid_r>:
 800b850:	f7f9 bc16 	b.w	8005080 <_getpid>

0800b854 <_init>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	bf00      	nop
 800b858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85a:	bc08      	pop	{r3}
 800b85c:	469e      	mov	lr, r3
 800b85e:	4770      	bx	lr

0800b860 <_fini>:
 800b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b862:	bf00      	nop
 800b864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b866:	bc08      	pop	{r3}
 800b868:	469e      	mov	lr, r3
 800b86a:	4770      	bx	lr
