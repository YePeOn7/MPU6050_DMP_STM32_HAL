
MPU6050_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001174  0800b9d0  0800b9d0  0001b9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb44  0800cb44  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb4c  0800cb4c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb50  0800cb50  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800cb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000218  0800cd6c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800cd6c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c9d  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5d  00000000  00000000  00034ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00037d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  00039078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1de  00000000  00000000  0003a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b15  00000000  00000000  00055496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aeb5  00000000  00000000  0006cfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107e60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006490  00000000  00000000  00107eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9b4 	.word	0x0800b9b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800b9b4 	.word	0x0800b9b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <IIC_Init>:
GPIO_TypeDef * GPIO_SDA;
uint32_t GPIO_PIN_SCL;
uint32_t GPIO_PIN_SDA;

void IIC_Init(I2C_HandleTypeDef i2cHandle)
{			
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
 8001002:	f107 0c08 	add.w	ip, r7, #8
 8001006:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_handle = i2cHandle;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <IIC_Init+0x2c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2254      	movs	r2, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	f007 ff95 	bl	8008f44 <memcpy>
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000234 	.word	0x20000234

0800102c <IIC_InitLockupRecover>:

void IIC_InitLockupRecover(GPIO_TypeDef * _GPIO_SLC, uint32_t _GPIO_PIN_SCL, GPIO_TypeDef * _GPIO_SDA, uint32_t _GPIO_PIN_SDA)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
	GPIO_SDA = _GPIO_SDA;
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <IIC_InitLockupRecover+0x34>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]
	GPIO_SCL = _GPIO_SLC;
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <IIC_InitLockupRecover+0x38>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6013      	str	r3, [r2, #0]
	GPIO_PIN_SCL = _GPIO_PIN_SCL;
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <IIC_InitLockupRecover+0x3c>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	6013      	str	r3, [r2, #0]
	GPIO_PIN_SDA = _GPIO_PIN_SDA;
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <IIC_InitLockupRecover+0x40>)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000028c 	.word	0x2000028c
 8001064:	20000288 	.word	0x20000288
 8001068:	20000290 	.word	0x20000290
 800106c:	20000294 	.word	0x20000294

08001070 <IIC_LockupRecover>:

void IIC_LockupRecover()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIO_SDA, GPIO_PIN_SDA))
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <IIC_LockupRecover+0xfc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <IIC_LockupRecover+0x100>)
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	b292      	uxth	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fd66 	bl	8005b54 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d169      	bne.n	8001162 <IIC_LockupRecover+0xf2>
	{
		// Lockup Recovery process
		for(int i = 0; i < IIC_GPIO_NUMBER; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e063      	b.n	800115c <IIC_LockupRecover+0xec>
		{
			if((1 << i) & GPIO_PIN_SCL)
 8001094:	2201      	movs	r2, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	461a      	mov	r2, r3
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <IIC_LockupRecover+0x104>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d056      	beq.n	8001156 <IIC_LockupRecover+0xe6>
			{
				// put the pin into output mode
				GPIO_SCL-> MODER &= ~(0b11 << 2*i);
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <IIC_LockupRecover+0x108>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <IIC_LockupRecover+0x108>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
				GPIO_SCL-> MODER |= (0b1 << 2*i);
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <IIC_LockupRecover+0x108>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <IIC_LockupRecover+0x108>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

				// inject 9 pulses to SCL
				for(int j = 0; j < 9; j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	e01a      	b.n	800111a <IIC_LockupRecover+0xaa>
				{
					HAL_GPIO_WritePin(GPIO_SCL, GPIO_PIN_SCL, RESET);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <IIC_LockupRecover+0x108>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <IIC_LockupRecover+0x104>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	b291      	uxth	r1, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fd47 	bl	8005b84 <HAL_GPIO_WritePin>
					delay_ms(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f004 fa72 	bl	80055e0 <HAL_Delay>
					HAL_GPIO_WritePin(GPIO_SCL, GPIO_PIN_SCL, SET);
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <IIC_LockupRecover+0x108>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <IIC_LockupRecover+0x104>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	b291      	uxth	r1, r2
 8001106:	2201      	movs	r2, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fd3b 	bl	8005b84 <HAL_GPIO_WritePin>
					delay_ms(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f004 fa66 	bl	80055e0 <HAL_Delay>
				for(int j = 0; j < 9; j++)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b08      	cmp	r3, #8
 800111e:	dde1      	ble.n	80010e4 <IIC_LockupRecover+0x74>
				}

				// put the pin back into AF mode
				GPIO_SCL-> MODER &= ~(0b11 << 2*i);
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <IIC_LockupRecover+0x108>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2103      	movs	r1, #3
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <IIC_LockupRecover+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
				GPIO_SCL-> MODER |= (0b10 << 2*i);
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <IIC_LockupRecover+0x108>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2102      	movs	r1, #2
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4619      	mov	r1, r3
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <IIC_LockupRecover+0x108>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < IIC_GPIO_NUMBER; i++)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3301      	adds	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	dd98      	ble.n	8001094 <IIC_LockupRecover+0x24>
			}
		}


	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000028c 	.word	0x2000028c
 8001170:	20000294 	.word	0x20000294
 8001174:	20000290 	.word	0x20000290
 8001178:	20000288 	.word	0x20000288

0800117c <i2cWrite>:
//}


  
int i2cWrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	460b      	mov	r3, r1
 800118a:	71bb      	strb	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
    return (int)HAL_I2C_Mem_Write(&i2c_handle, addr << 1, reg, 1, data, len, I2C_TIMEOUT);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	b29b      	uxth	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b299      	uxth	r1, r3
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29a      	uxth	r2, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	9002      	str	r0, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <i2cWrite+0x44>)
 80011b0:	f004 fe60 	bl	8005e74 <HAL_I2C_Mem_Write>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000234 	.word	0x20000234

080011c4 <i2cRead>:

int i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&i2c_handle, addr << 1, reg, 1, buf, len, I2C_TIMEOUT);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	9002      	str	r0, [sp, #8]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <i2cRead+0x44>)
 80011f8:	f004 ff36 	bl	8006068 <HAL_I2C_Mem_Read>
    return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000234 	.word	0x20000234

0800120c <I2C_ReadOneByte>:
����	I2C_Addr  Ŀ���豸��ַ
		addr	   �Ĵ�����ַ
����   ��������ֵ
*******************************************************************************/ 
unsigned char I2C_ReadOneByte(unsigned char I2C_Addr,unsigned char addr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
//	IIC_Wait_Ack();
//	res=IIC_Read_Byte(0);
//    IIC_Stop();//����һ��ֹͣ����
//
	unsigned char data;
	HAL_I2C_Mem_Read(&i2c_handle, I2C_Addr, addr, 1, &data, 1, I2C_TIMEOUT);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b299      	uxth	r1, r3
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f107 030f 	add.w	r3, r7, #15
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <I2C_ReadOneByte+0x3c>)
 8001238:	f004 ff16 	bl	8006068 <HAL_I2C_Mem_Read>

	return data;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000234 	.word	0x20000234

0800124c <IICwriteBytes>:
//    return count;
	HAL_I2C_Mem_Read(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
}


u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data){
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af04      	add	r7, sp, #16
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	717b      	strb	r3, [r7, #5]
//		IIC_Send_Byte(data[count]);
//		IIC_Wait_Ack();
//	 }
//	IIC_Stop();//����һ��ֹͣ����

	HAL_I2C_Mem_Write(&i2c_handle, dev, reg, 1, data, length, I2C_TIMEOUT);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	b299      	uxth	r1, r3
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	797b      	ldrb	r3, [r7, #5]
 800126a:	b29b      	uxth	r3, r3
 800126c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001270:	9002      	str	r0, [sp, #8]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <IICwriteBytes+0x40>)
 800127c:	f004 fdfa 	bl	8005e74 <HAL_I2C_Mem_Write>
    return 1; //status == 0;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000234 	.word	0x20000234

08001290 <IICreadByte>:
����	dev  Ŀ���豸��ַ
		reg	   �Ĵ�����ַ
		*data  ���������ݽ�Ҫ��ŵĵ�ַ
����   1
*******************************************************************************/ 
u8 IICreadByte(u8 dev, u8 reg, u8 *data){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	603a      	str	r2, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	460b      	mov	r3, r1
 800129e:	71bb      	strb	r3, [r7, #6]
	*data=I2C_ReadOneByte(dev, reg);
 80012a0:	79ba      	ldrb	r2, [r7, #6]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffb0 	bl	800120c <I2C_ReadOneByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	701a      	strb	r2, [r3, #0]
    return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <IICwriteByte>:

unsigned char IICwriteByte(unsigned char dev, unsigned char reg, unsigned char data){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	460b      	mov	r3, r1
 80012ca:	71bb      	strb	r3, [r7, #6]
 80012cc:	4613      	mov	r3, r2
 80012ce:	717b      	strb	r3, [r7, #5]
    return IICwriteBytes(dev, reg, 1, &data);
 80012d0:	1d7b      	adds	r3, r7, #5
 80012d2:	79b9      	ldrb	r1, [r7, #6]
 80012d4:	79f8      	ldrb	r0, [r7, #7]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f7ff ffb8 	bl	800124c <IICwriteBytes>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <IICwriteBits>:
		data    ��Ÿı�Ŀ���ֽ�λ��ֵ
����   �ɹ� Ϊ1 
 		ʧ��Ϊ0
*******************************************************************************/ 
u8 IICwriteBits(u8 dev,u8 reg,u8 bitStart,u8 length,u8 data)
{
 80012e6:	b590      	push	{r4, r7, lr}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4604      	mov	r4, r0
 80012ee:	4608      	mov	r0, r1
 80012f0:	4611      	mov	r1, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4623      	mov	r3, r4
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4603      	mov	r3, r0
 80012fa:	71bb      	strb	r3, [r7, #6]
 80012fc:	460b      	mov	r3, r1
 80012fe:	717b      	strb	r3, [r7, #5]
 8001300:	4613      	mov	r3, r2
 8001302:	713b      	strb	r3, [r7, #4]

    u8 b;
    if (IICreadByte(dev, reg, &b) != 0) {
 8001304:	f107 020e 	add.w	r2, r7, #14
 8001308:	79b9      	ldrb	r1, [r7, #6]
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ffbf 	bl	8001290 <IICreadByte>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d037      	beq.n	8001388 <IICwriteBits+0xa2>
        u8 mask = (0xFF << (bitStart + 1)) | 0xFF >> ((8 - bitStart) + length - 1);
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	3301      	adds	r3, #1
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	b25a      	sxtb	r2, r3
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f1c3 0108 	rsb	r1, r3, #8
 800132a:	793b      	ldrb	r3, [r7, #4]
 800132c:	440b      	add	r3, r1
 800132e:	3b01      	subs	r3, #1
 8001330:	21ff      	movs	r1, #255	; 0xff
 8001332:	fa41 f303 	asr.w	r3, r1, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	73fb      	strb	r3, [r7, #15]
        data <<= (8 - length);
 800133e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001342:	793b      	ldrb	r3, [r7, #4]
 8001344:	f1c3 0308 	rsb	r3, r3, #8
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	f887 3020 	strb.w	r3, [r7, #32]
        data >>= (7 - bitStart);
 8001350:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001354:	797b      	ldrb	r3, [r7, #5]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	fa42 f303 	asr.w	r3, r2, r3
 800135e:	f887 3020 	strb.w	r3, [r7, #32]
        b &= mask;
 8001362:	7bba      	ldrb	r2, [r7, #14]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4013      	ands	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73bb      	strb	r3, [r7, #14]
        b |= data;
 800136c:	7bba      	ldrb	r2, [r7, #14]
 800136e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001372:	4313      	orrs	r3, r2
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73bb      	strb	r3, [r7, #14]
        return IICwriteByte(dev, reg, b);
 8001378:	7bba      	ldrb	r2, [r7, #14]
 800137a:	79b9      	ldrb	r1, [r7, #6]
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff9d 	bl	80012be <IICwriteByte>
 8001384:	4603      	mov	r3, r0
 8001386:	e000      	b.n	800138a <IICwriteBits+0xa4>
    } else {
        return 0;
 8001388:	2300      	movs	r3, #0
    }
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}

08001392 <IICwriteBit>:
		bitNum  Ҫ�޸�Ŀ���ֽڵ�bitNumλ
		data  Ϊ0 ʱ��Ŀ��λ������0 ���򽫱���λ
����   �ɹ� Ϊ1 
 		ʧ��Ϊ0
*******************************************************************************/ 
u8 IICwriteBit(u8 dev, u8 reg, u8 bitNum, u8 data){
 8001392:	b590      	push	{r4, r7, lr}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	4604      	mov	r4, r0
 800139a:	4608      	mov	r0, r1
 800139c:	4611      	mov	r1, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4623      	mov	r3, r4
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4603      	mov	r3, r0
 80013a6:	71bb      	strb	r3, [r7, #6]
 80013a8:	460b      	mov	r3, r1
 80013aa:	717b      	strb	r3, [r7, #5]
 80013ac:	4613      	mov	r3, r2
 80013ae:	713b      	strb	r3, [r7, #4]
    u8 b;
    IICreadByte(dev, reg, &b);
 80013b0:	f107 020f 	add.w	r2, r7, #15
 80013b4:	79b9      	ldrb	r1, [r7, #6]
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff69 	bl	8001290 <IICreadByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00a      	beq.n	80013da <IICwriteBit+0x48>
 80013c4:	797b      	ldrb	r3, [r7, #5]
 80013c6:	2201      	movs	r2, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	e00b      	b.n	80013f2 <IICwriteBit+0x60>
 80013da:	797b      	ldrb	r3, [r7, #5]
 80013dc:	2201      	movs	r2, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	73fb      	strb	r3, [r7, #15]
    return IICwriteByte(dev, reg, b);
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	79b9      	ldrb	r1, [r7, #6]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff5f 	bl	80012be <IICwriteByte>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
	...

0800140c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <__NVIC_SystemReset+0x24>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800141e:	4904      	ldr	r1, [pc, #16]	; (8001430 <__NVIC_SystemReset+0x24>)
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_SystemReset+0x28>)
 8001422:	4313      	orrs	r3, r2
 8001424:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001426:	f3bf 8f4f 	dsb	sy
}
 800142a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <__NVIC_SystemReset+0x20>
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	05fa0004 	.word	0x05fa0004

08001438 <inv_row_2_scale>:
static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};

static  unsigned short inv_row_2_scale(const signed char *row)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f993 3000 	ldrsb.w	r3, [r3]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dd02      	ble.n	8001450 <inv_row_2_scale+0x18>
        b = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	81fb      	strh	r3, [r7, #14]
 800144e:	e02d      	b.n	80014ac <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f993 3000 	ldrsb.w	r3, [r3]
 8001456:	2b00      	cmp	r3, #0
 8001458:	da02      	bge.n	8001460 <inv_row_2_scale+0x28>
        b = 4;
 800145a:	2304      	movs	r3, #4
 800145c:	81fb      	strh	r3, [r7, #14]
 800145e:	e025      	b.n	80014ac <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	f993 3000 	ldrsb.w	r3, [r3]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd02      	ble.n	8001472 <inv_row_2_scale+0x3a>
        b = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	81fb      	strh	r3, [r7, #14]
 8001470:	e01c      	b.n	80014ac <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	f993 3000 	ldrsb.w	r3, [r3]
 800147a:	2b00      	cmp	r3, #0
 800147c:	da02      	bge.n	8001484 <inv_row_2_scale+0x4c>
        b = 5;
 800147e:	2305      	movs	r3, #5
 8001480:	81fb      	strh	r3, [r7, #14]
 8001482:	e013      	b.n	80014ac <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3302      	adds	r3, #2
 8001488:	f993 3000 	ldrsb.w	r3, [r3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dd02      	ble.n	8001496 <inv_row_2_scale+0x5e>
        b = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	81fb      	strh	r3, [r7, #14]
 8001494:	e00a      	b.n	80014ac <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3302      	adds	r3, #2
 800149a:	f993 3000 	ldrsb.w	r3, [r3]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da02      	bge.n	80014a8 <inv_row_2_scale+0x70>
        b = 6;
 80014a2:	2306      	movs	r3, #6
 80014a4:	81fb      	strh	r3, [r7, #14]
 80014a6:	e001      	b.n	80014ac <inv_row_2_scale+0x74>
    else
        b = 7;            // error
 80014a8:	2307      	movs	r3, #7
 80014aa:	81fb      	strh	r3, [r7, #14]
    return b;
 80014ac:	89fb      	ldrh	r3, [r7, #14]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb8 	bl	8001438 <inv_row_2_scale>
 80014c8:	4603      	mov	r3, r0
 80014ca:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3303      	adds	r3, #3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffb1 	bl	8001438 <inv_row_2_scale>
 80014d6:	4603      	mov	r3, r0
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3306      	adds	r3, #6
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ffa4 	bl	8001438 <inv_row_2_scale>
 80014f0:	4603      	mov	r3, r0
 80014f2:	019b      	lsls	r3, r3, #6
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	81fb      	strh	r3, [r7, #14]

    return scalar;
 8001500:	89fb      	ldrh	r3, [r7, #14]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <run_self_test>:

static void run_self_test(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b08a      	sub	sp, #40	; 0x28
 800150e:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f002 f89a 	bl	8003654 <mpu_run_self_test>
 8001520:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0x03) {                   //����0x03ΪMPU6050
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b03      	cmp	r3, #3
 8001526:	d14b      	bne.n	80015c0 <run_self_test+0xb6>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);			//��ȡ��ǰ�����ǵ�״̬
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4618      	mov	r0, r3
 800152e:	f001 f85f 	bl	80025f0 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001548:	ee17 3a90 	vmov	r3, s15
 800154c:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001558:	edd7 7a02 	vldr	s15, [r7, #8]
 800155c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001574:	edd7 7a02 	vldr	s15, [r7, #8]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001580:	ee17 3a90 	vmov	r3, s15
 8001584:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);			//���ݶ�ȡ��״̬����У׼
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fbb2 	bl	8003cf4 <dmp_set_gyro_bias>
		
        mpu_get_accel_sens(&accel_sens);	//��ȡ��ǰ���ٶȼƵ�״̬
 8001590:	1dbb      	adds	r3, r7, #6
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f864 	bl	8002660 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	88fa      	ldrh	r2, [r7, #6]
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);			//���ݶ�ȡ��״̬����У׼
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fca4 	bl	8003f08 <dmp_set_accel_bias>
		//printf("setting bias succesfully ......\r\n");
    }
}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
*******************************************************************************/
void MPU6050_setClockSource(uint8_t source){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2303      	movs	r3, #3
 80015d8:	2202      	movs	r2, #2
 80015da:	216b      	movs	r1, #107	; 0x6b
 80015dc:	20d0      	movs	r0, #208	; 0xd0
 80015de:	f7ff fe82 	bl	80012e6 <IICwriteBits>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af02      	add	r7, sp, #8
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2302      	movs	r3, #2
 80015fa:	2204      	movs	r2, #4
 80015fc:	211b      	movs	r1, #27
 80015fe:	20d0      	movs	r0, #208	; 0xd0
 8001600:	f7ff fe71 	bl	80012e6 <IICwriteBits>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <MPU6050_setFullScaleAccelRange>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setFullScaleAccelRange(uint8_t range)
*��������:	    ����  MPU6050 ���ٶȼƵ��������
*******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
    IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2302      	movs	r3, #2
 800161c:	2204      	movs	r2, #4
 800161e:	211c      	movs	r1, #28
 8001620:	20d0      	movs	r0, #208	; 0xd0
 8001622:	f7ff fe60 	bl	80012e6 <IICwriteBits>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <MPU6050_setSleepEnabled>:
*����ԭ��:		void MPU6050_setSleepEnabled(uint8_t enabled)
*��������:	    ����  MPU6050 �Ƿ����˯��ģʽ
				enabled =1   ˯��
			    enabled =0   ����
*******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2206      	movs	r2, #6
 800163c:	216b      	movs	r1, #107	; 0x6b
 800163e:	20d0      	movs	r0, #208	; 0xd0
 8001640:	f7ff fea7 	bl	8001392 <IICwriteBit>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <MPU6050_setI2CMasterModeEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2205      	movs	r2, #5
 800165a:	216a      	movs	r1, #106	; 0x6a
 800165c:	20d0      	movs	r0, #208	; 0xd0
 800165e:	f7ff fe98 	bl	8001392 <IICwriteBit>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <MPU6050_setI2CBypassEnabled>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
*��������:	    ���� MPU6050 �Ƿ�ΪAUX I2C�ߵ�����
*******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
    IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2201      	movs	r2, #1
 8001678:	2137      	movs	r1, #55	; 0x37
 800167a:	20d0      	movs	r0, #208	; 0xd0
 800167c:	f7ff fe89 	bl	8001392 <IICwriteBit>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <MPU6050_initialize>:

/**************************ʵ�ֺ���********************************************
*����ԭ��:		void MPU6050_initialize(void)
*��������:	    ��ʼ�� 	MPU6050 �Խ������״̬��
*******************************************************************************/
void MPU6050_initialize(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 800168e:	2300      	movs	r3, #0
 8001690:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2201      	movs	r2, #1
 800169a:	2175      	movs	r1, #117	; 0x75
 800169c:	2068      	movs	r0, #104	; 0x68
 800169e:	f7ff fd91 	bl	80011c4 <i2cRead>
	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2201      	movs	r2, #1
 80016a6:	2175      	movs	r1, #117	; 0x75
 80016a8:	2068      	movs	r0, #104	; 0x68
 80016aa:	f7ff fd8b 	bl	80011c4 <i2cRead>
		retry++;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	3301      	adds	r3, #1
 80016b2:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <MPU6050_initialize+0x36>
 80016ba:	f7ff fea7 	bl	800140c <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 80016be:	793b      	ldrb	r3, [r7, #4]
 80016c0:	2b68      	cmp	r3, #104	; 0x68
 80016c2:	d1ee      	bne.n	80016a2 <MPU6050_initialize+0x1a>

	MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO); //����ʱ��
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff ff7f 	bl	80015c8 <MPU6050_setClockSource>
	MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250);//������������� +-2000��ÿ��
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff ff8d 	bl	80015ea <MPU6050_setFullScaleGyroRange>
	MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);	//���ٶȶ�������� +-2G
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff9b 	bl	800160c <MPU6050_setFullScaleAccelRange>
	MPU6050_setSleepEnabled(0); //���빤��״̬
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff ffa9 	bl	800162e <MPU6050_setSleepEnabled>
	MPU6050_setI2CMasterModeEnabled(0);	 //����MPU6050 ����AUXI2C
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff ffb5 	bl	800164c <MPU6050_setI2CMasterModeEnabled>
	MPU6050_setI2CBypassEnabled(0);	 //����������I2C��	MPU6050��AUXI2C	ֱͨ������������ֱ�ӷ���HMC5883L
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff ffc1 	bl	800166a <MPU6050_setI2CBypassEnabled>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <MPU6050_DMPInit>:
�������ܣ�MPU6050����DMP�ĳ�ʼ��
��ڲ�������
����  ֵ����
**************************************************************************/
void MPU6050_DMPInit(void)
{ 
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	u8 temp[1]={0};
 80016f6:	2300      	movs	r3, #0
 80016f8:	713b      	strb	r3, [r7, #4]
	u8 retry = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]
	i2cRead(0x68,0x75,1,temp);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2201      	movs	r2, #1
 8001702:	2175      	movs	r1, #117	; 0x75
 8001704:	2068      	movs	r0, #104	; 0x68
 8001706:	f7ff fd5d 	bl	80011c4 <i2cRead>
//	printf("%d\n", temp[0]);

	// check for several times, don't give up too early
	do
	{
		i2cRead(0x68,0x75,1,temp);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2201      	movs	r2, #1
 800170e:	2175      	movs	r1, #117	; 0x75
 8001710:	2068      	movs	r0, #104	; 0x68
 8001712:	f7ff fd57 	bl	80011c4 <i2cRead>
		retry++;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3301      	adds	r3, #1
 800171a:	71fb      	strb	r3, [r7, #7]

		if(retry > 100) NVIC_SystemReset();
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <MPU6050_DMPInit+0x36>
 8001722:	f7ff fe73 	bl	800140c <__NVIC_SystemReset>
	}while(temp[0]!=0x68);
 8001726:	793b      	ldrb	r3, [r7, #4]
 8001728:	2b68      	cmp	r3, #104	; 0x68
 800172a:	d1ee      	bne.n	800170a <MPU6050_DMPInit+0x1a>

	HAL_Delay(100);
 800172c:	2064      	movs	r0, #100	; 0x64
 800172e:	f003 ff57 	bl	80055e0 <HAL_Delay>
//	if(temp[0]!=0x68)NVIC_SystemReset();
	if(!mpu_init())
 8001732:	f000 faab 	bl	8001c8c <mpu_init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11d      	bne.n	8001778 <MPU6050_DMPInit+0x88>
	{
//		printf("mpu_setting_sensor.....\r\n");
		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 800173c:	2078      	movs	r0, #120	; 0x78
 800173e:	f001 f831 	bl	80027a4 <mpu_set_sensors>
		{
//			printf("mpu_set_sensor complete ......\r\n");
		}
//		printf("mpu configure fifo........\r\n");
		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8001742:	2078      	movs	r0, #120	; 0x78
 8001744:	f000 ffdc 	bl	8002700 <mpu_configure_fifo>
		{
//			printf("mpu_configure_fifo complete ......\r\n");
		}
//		printf("mpu setting sample rate......\r\n");
		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 8001748:	20c8      	movs	r0, #200	; 0xc8
 800174a:	f000 feeb 	bl	8002524 <mpu_set_sample_rate>
		{
//			printf("mpu_set_sample_rate complete ......\r\n");
		}
//		printf("loading firmware......\r\n");
		if(!dmp_load_motion_driver_firmware())
 800174e:	f002 f9d5 	bl	8003afc <dmp_load_motion_driver_firmware>
		{
//			printf("dmp_load_motion_driver_firmware complete ......\r\n");
		}
//		printf("setting orientation.....\r\n");
		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 8001752:	480b      	ldr	r0, [pc, #44]	; (8001780 <MPU6050_DMPInit+0x90>)
 8001754:	f7ff feb1 	bl	80014ba <inv_orientation_matrix_to_scalar>
 8001758:	4603      	mov	r3, r0
 800175a:	4618      	mov	r0, r3
 800175c:	f002 f9de 	bl	8003b1c <dmp_set_orientation>
		{
//			printf("dmp set_orientation complete ......\r\n");
		}
//		printf("enabling dmp features ......\r\n");
		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 8001760:	f240 1073 	movw	r0, #371	; 0x173
 8001764:	f002 ff5c 	bl	8004620 <dmp_enable_feature>
		DMP_FEATURE_GYRO_CAL))
		{
//			printf("dmp_enable_feature complete ......\r\n");
		}
//		printf("dmp setting fifo rate ......\r\n");
		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 8001768:	20c8      	movs	r0, #200	; 0xc8
 800176a:	f002 fccf 	bl	800410c <dmp_set_fifo_rate>
		{
//			printf("dmp_set_fifo_rate complete ......\r\n");
		}
		run_self_test();
 800176e:	f7ff fecc 	bl	800150a <run_self_test>
//		printf("setting dmp state.....\r\n");
		if(!mpu_set_dmp_state(1))
 8001772:	2001      	movs	r0, #1
 8001774:	f002 f964 	bl	8003a40 <mpu_set_dmp_state>
		{
//			printf("mpu_set_dmp_state complete ......\r\n");
		}
	}
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000004 	.word	0x20000004
 8001784:	00000000 	.word	0x00000000

08001788 <MPU6050_readDMPAll>:
		 MPU6050_Yaw = yaw;
	}
}

void MPU6050_readDMPAll(float* Pitch, float* Roll, float* Yaw)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b090      	sub	sp, #64	; 0x40
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	float pitch, roll, yaw;

	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 8001794:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001798:	f107 0214 	add.w	r2, r7, #20
 800179c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	4bd7      	ldr	r3, [pc, #860]	; (8001b00 <MPU6050_readDMPAll+0x378>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	460b      	mov	r3, r1
 80017a8:	49d6      	ldr	r1, [pc, #856]	; (8001b04 <MPU6050_readDMPAll+0x37c>)
 80017aa:	48d7      	ldr	r0, [pc, #860]	; (8001b08 <MPU6050_readDMPAll+0x380>)
 80017ac:	f003 f922 	bl	80049f4 <dmp_read_fifo>
	if (sensors & INV_WXYZ_QUAT )
 80017b0:	4bd3      	ldr	r3, [pc, #844]	; (8001b00 <MPU6050_readDMPAll+0x378>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 81c2 	beq.w	8001b46 <MPU6050_readDMPAll+0x3be>
	{
		 q0=quat[0] / q30;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017cc:	eddf 6acf 	vldr	s13, [pc, #828]	; 8001b0c <MPU6050_readDMPAll+0x384>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	4bce      	ldr	r3, [pc, #824]	; (8001b10 <MPU6050_readDMPAll+0x388>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
		 q1=quat[1] / q30;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e4:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8001b0c <MPU6050_readDMPAll+0x384>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	4bc9      	ldr	r3, [pc, #804]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
		 q2=quat[2] / q30;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fc:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8001b0c <MPU6050_readDMPAll+0x384>
 8001800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001804:	4bc4      	ldr	r3, [pc, #784]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
		 q3=quat[3] / q30;
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	eddf 6abd 	vldr	s13, [pc, #756]	; 8001b0c <MPU6050_readDMPAll+0x384>
 8001818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181c:	4bbf      	ldr	r3, [pc, #764]	; (8001b1c <MPU6050_readDMPAll+0x394>)
 800181e:	edc3 7a00 	vstr	s15, [r3]
		 pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;
 8001822:	4bbc      	ldr	r3, [pc, #752]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800182c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001830:	4bba      	ldr	r3, [pc, #744]	; (8001b1c <MPU6050_readDMPAll+0x394>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183a:	4bb5      	ldr	r3, [pc, #724]	; (8001b10 <MPU6050_readDMPAll+0x388>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001844:	4bb4      	ldr	r3, [pc, #720]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001852:	ee17 0a90 	vmov	r0, s15
 8001856:	f7fe fe7f 	bl	8000558 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ec43 2b10 	vmov	d0, r2, r3
 8001862:	f006 fc79 	bl	8008158 <asin>
 8001866:	ec51 0b10 	vmov	r0, r1, d0
 800186a:	a3a1      	add	r3, pc, #644	; (adr r3, 8001af0 <MPU6050_readDMPAll+0x368>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe feca 	bl	8000608 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f99c 	bl	8000bb8 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
		 roll= atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;
 8001884:	4ba4      	ldr	r3, [pc, #656]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800188e:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <MPU6050_readDMPAll+0x394>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	4b9d      	ldr	r3, [pc, #628]	; (8001b10 <MPU6050_readDMPAll+0x388>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a2:	4b9c      	ldr	r3, [pc, #624]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	ee17 0a90 	vmov	r0, s15
 80018b4:	f7fe fe50 	bl	8000558 <__aeabi_f2d>
 80018b8:	4604      	mov	r4, r0
 80018ba:	460d      	mov	r5, r1
 80018bc:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80018c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ca:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d4:	4b90      	ldr	r3, [pc, #576]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f4:	ee17 0a90 	vmov	r0, s15
 80018f8:	f7fe fe2e 	bl	8000558 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b11 	vmov	d1, r2, r3
 8001904:	ec45 4b10 	vmov	d0, r4, r5
 8001908:	f006 fc5a 	bl	80081c0 <atan2>
 800190c:	ec51 0b10 	vmov	r0, r1, d0
 8001910:	a377      	add	r3, pc, #476	; (adr r3, 8001af0 <MPU6050_readDMPAll+0x368>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe77 	bl	8000608 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f949 	bl	8000bb8 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
		 yaw = atan2(2 * (q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3;
 800192a:	4b7a      	ldr	r3, [pc, #488]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b79      	ldr	r3, [pc, #484]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193a:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <MPU6050_readDMPAll+0x388>)
 800193c:	edd3 6a00 	vldr	s13, [r3]
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <MPU6050_readDMPAll+0x394>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001952:	ee17 0a90 	vmov	r0, s15
 8001956:	f7fe fdff 	bl	8000558 <__aeabi_f2d>
 800195a:	4604      	mov	r4, r0
 800195c:	460d      	mov	r5, r1
 800195e:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <MPU6050_readDMPAll+0x388>)
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <MPU6050_readDMPAll+0x388>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196e:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 8001970:	edd3 6a00 	vldr	s13, [r3]
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <MPU6050_readDMPAll+0x38c>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 8001984:	edd3 6a00 	vldr	s13, [r3]
 8001988:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <MPU6050_readDMPAll+0x390>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001996:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <MPU6050_readDMPAll+0x394>)
 8001998:	edd3 6a00 	vldr	s13, [r3]
 800199c:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <MPU6050_readDMPAll+0x394>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019aa:	ee17 0a90 	vmov	r0, s15
 80019ae:	f7fe fdd3 	bl	8000558 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ec43 2b11 	vmov	d1, r2, r3
 80019ba:	ec45 4b10 	vmov	d0, r4, r5
 80019be:	f006 fbff 	bl	80081c0 <atan2>
 80019c2:	ec51 0b10 	vmov	r0, r1, d0
 80019c6:	a34a      	add	r3, pc, #296	; (adr r3, 8001af0 <MPU6050_readDMPAll+0x368>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe1c 	bl	8000608 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f8ee 	bl	8000bb8 <__aeabi_d2f>
 80019dc:	4603      	mov	r3, r0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c

		 pitch += MPU6050_PitchCorrector;
 80019e0:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <MPU6050_readDMPAll+0x398>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		 pitch = fmod(pitch, 360);
 80019f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f4:	f7fe fdb0 	bl	8000558 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8001af8 <MPU6050_readDMPAll+0x370>
 8001a00:	ec43 2b10 	vmov	d0, r2, r3
 8001a04:	f006 fbde 	bl	80081c4 <fmod>
 8001a08:	ec53 2b10 	vmov	r2, r3, d0
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f8d2 	bl	8000bb8 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
		 if(pitch > 180) pitch -= 360;
 8001a18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a1c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001b24 <MPU6050_readDMPAll+0x39c>
 8001a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	dd07      	ble.n	8001a3a <MPU6050_readDMPAll+0x2b2>
 8001a2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a2e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001b28 <MPU6050_readDMPAll+0x3a0>
 8001a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a36:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		 roll += MPU6050_RollCorrector;
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <MPU6050_readDMPAll+0x3a4>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		 roll = fmod(roll, 360);
 8001a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a4e:	f7fe fd83 	bl	8000558 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001af8 <MPU6050_readDMPAll+0x370>
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f006 fbb1 	bl	80081c4 <fmod>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8a5 	bl	8000bb8 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
		 if(roll > 180) roll -= 360;
 8001a72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a76:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b24 <MPU6050_readDMPAll+0x39c>
 8001a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	dd07      	ble.n	8001a94 <MPU6050_readDMPAll+0x30c>
 8001a84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a88:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001b28 <MPU6050_readDMPAll+0x3a0>
 8001a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a90:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		 yaw += MPU6050_YawCorrector;
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <MPU6050_readDMPAll+0x3a8>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		 yaw = fmod(yaw, 360);
 8001aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001aa8:	f7fe fd56 	bl	8000558 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001af8 <MPU6050_readDMPAll+0x370>
 8001ab4:	ec43 2b10 	vmov	d0, r2, r3
 8001ab8:	f006 fb84 	bl	80081c4 <fmod>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff f878 	bl	8000bb8 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
		 if(yaw > 180) yaw -= 360;
 8001acc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ad0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b24 <MPU6050_readDMPAll+0x39c>
 8001ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	dd2a      	ble.n	8001b34 <MPU6050_readDMPAll+0x3ac>
 8001ade:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ae2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b28 <MPU6050_readDMPAll+0x3a0>
 8001ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001aee:	e021      	b.n	8001b34 <MPU6050_readDMPAll+0x3ac>
 8001af0:	66666666 	.word	0x66666666
 8001af4:	404ca666 	.word	0x404ca666
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40768000 	.word	0x40768000
 8001b00:	200002a6 	.word	0x200002a6
 8001b04:	200002a0 	.word	0x200002a0
 8001b08:	20000298 	.word	0x20000298
 8001b0c:	4e800000 	.word	0x4e800000
 8001b10:	20000000 	.word	0x20000000
 8001b14:	200002c0 	.word	0x200002c0
 8001b18:	200002c4 	.word	0x200002c4
 8001b1c:	200002c8 	.word	0x200002c8
 8001b20:	200002b4 	.word	0x200002b4
 8001b24:	43340000 	.word	0x43340000
 8001b28:	43b40000 	.word	0x43b40000
 8001b2c:	200002b8 	.word	0x200002b8
 8001b30:	200002bc 	.word	0x200002bc

		 *Pitch = pitch;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b38:	601a      	str	r2, [r3, #0]
		 *Roll = roll;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3e:	601a      	str	r2, [r3, #0]
		 *Yaw = yaw;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b44:	601a      	str	r2, [r3, #0]
	}
}
 8001b46:	bf00      	nop
 8001b48:	3738      	adds	r7, #56	; 0x38
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4e:	bf00      	nop

08001b50 <MPU6050_setYawCorrectorRate>:
{
	MPU6050_RollCorrectorRate = rollCorrectorRate;
}

void MPU6050_setYawCorrectorRate(float yawCorrectorRate)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0a01 	vstr	s0, [r7, #4]
	MPU6050_YawCorrectorRate = yawCorrectorRate;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <MPU6050_setYawCorrectorRate+0x1c>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	200002b0 	.word	0x200002b0

08001b70 <MPU6050_updateAngleCorrector>:

void MPU6050_updateAngleCorrector(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	MPU6050_PitchCorrector += MPU6050_PitchCorrectorRate;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MPU6050_updateAngleCorrector+0x50>)
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MPU6050_updateAngleCorrector+0x54>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MPU6050_updateAngleCorrector+0x50>)
 8001b86:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_RollCorrector += MPU6050_RollCorrectorRate;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MPU6050_updateAngleCorrector+0x58>)
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MPU6050_updateAngleCorrector+0x5c>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MPU6050_updateAngleCorrector+0x58>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
	MPU6050_YawCorrector += MPU6050_YawCorrectorRate;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MPU6050_updateAngleCorrector+0x60>)
 8001ba2:	ed93 7a00 	vldr	s14, [r3]
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MPU6050_updateAngleCorrector+0x64>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MPU6050_updateAngleCorrector+0x60>)
 8001bb2:	edc3 7a00 	vstr	s15, [r3]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	200002b4 	.word	0x200002b4
 8001bc4:	200002a8 	.word	0x200002a8
 8001bc8:	200002b8 	.word	0x200002b8
 8001bcc:	200002ac 	.word	0x200002ac
 8001bd0:	200002bc 	.word	0x200002bc
 8001bd4:	200002b0 	.word	0x200002b0

08001bd8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <set_int_enable+0xb0>)
 8001be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01c      	beq.n	8001c26 <set_int_enable+0x4e>
        if (enable)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e001      	b.n	8001bfc <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <set_int_enable+0xb0>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	7818      	ldrb	r0, [r3, #0]
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <set_int_enable+0xb0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	7bd9      	ldrb	r1, [r3, #15]
 8001c08:	f107 030f 	add.w	r3, r7, #15
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f7ff fab5 	bl	800117c <i2cWrite>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <set_int_enable+0x46>
            return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1c:	e030      	b.n	8001c80 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <set_int_enable+0xb0>)
 8001c22:	745a      	strb	r2, [r3, #17]
 8001c24:	e02b      	b.n	8001c7e <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <set_int_enable+0xb0>)
 8001c28:	7a9b      	ldrb	r3, [r3, #10]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <set_int_enable+0x5c>
            return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c32:	e025      	b.n	8001c80 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <set_int_enable+0x6e>
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <set_int_enable+0xb0>)
 8001c3c:	7c5b      	ldrb	r3, [r3, #17]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <set_int_enable+0x6e>
            return 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e01c      	b.n	8001c80 <set_int_enable+0xa8>
        if (enable)
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <set_int_enable+0xb0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	7818      	ldrb	r0, [r3, #0]
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <set_int_enable+0xb0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	7bd9      	ldrb	r1, [r3, #15]
 8001c62:	f107 030f 	add.w	r3, r7, #15
 8001c66:	2201      	movs	r2, #1
 8001c68:	f7ff fa88 	bl	800117c <i2cWrite>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <set_int_enable+0xa0>
            return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c76:	e003      	b.n	8001c80 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <set_int_enable+0xb0>)
 8001c7c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010

08001c8c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001c96:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <mpu_init+0x1fc>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	7818      	ldrb	r0, [r3, #0]
 8001c9c:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <mpu_init+0x1fc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	7c99      	ldrb	r1, [r3, #18]
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f7ff fa69 	bl	800117c <i2cWrite>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <mpu_init+0x2a>
        return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb4:	e0e4      	b.n	8001e80 <mpu_init+0x1f4>
    delay_ms(100);
 8001cb6:	2064      	movs	r0, #100	; 0x64
 8001cb8:	f003 fc92 	bl	80055e0 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001cc0:	4b71      	ldr	r3, [pc, #452]	; (8001e88 <mpu_init+0x1fc>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	7818      	ldrb	r0, [r3, #0]
 8001cc6:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <mpu_init+0x1fc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	7c99      	ldrb	r1, [r3, #18]
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f7ff fa54 	bl	800117c <i2cWrite>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <mpu_init+0x54>
        return -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	e0cf      	b.n	8001e80 <mpu_init+0x1f4>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <mpu_init+0x1fc>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	7818      	ldrb	r0, [r3, #0]
 8001ce6:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <mpu_init+0x1fc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7d99      	ldrb	r1, [r3, #22]
 8001cec:	463b      	mov	r3, r7
 8001cee:	2206      	movs	r2, #6
 8001cf0:	f7ff fa68 	bl	80011c4 <i2cRead>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <mpu_init+0x74>
        return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfe:	e0bf      	b.n	8001e80 <mpu_init+0x1f4>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <mpu_init+0xc8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d103      	bne.n	8001d40 <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <mpu_init+0x1fc>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	74da      	strb	r2, [r3, #19]
 8001d3e:	e02d      	b.n	8001d9c <mpu_init+0x110>
        else if (rev == 2)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d103      	bne.n	8001d4e <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <mpu_init+0x1fc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	74da      	strb	r2, [r3, #19]
 8001d4c:	e026      	b.n	8001d9c <mpu_init+0x110>
        else {
            //log_e("Unsupported software product rev %d.\n",rev);
            return -1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d52:	e095      	b.n	8001e80 <mpu_init+0x1f4>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <mpu_init+0x1fc>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	7818      	ldrb	r0, [r3, #0]
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <mpu_init+0x1fc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	78d9      	ldrb	r1, [r3, #3]
 8001d60:	463b      	mov	r3, r7
 8001d62:	2201      	movs	r2, #1
 8001d64:	f7ff fa2e 	bl	80011c4 <i2cRead>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <mpu_init+0xe8>
            return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d72:	e085      	b.n	8001e80 <mpu_init+0x1f4>
        rev = data[0] & 0x0F;
 8001d74:	783b      	ldrb	r3, [r7, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <mpu_init+0xfc>
            //log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
            return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d86:	e07b      	b.n	8001e80 <mpu_init+0x1f4>
        } else if (rev == 4) {
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d103      	bne.n	8001d96 <mpu_init+0x10a>
            //log_i("Half sensitivity part found.\r\n");
            st.chip_cfg.accel_half = 1;
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <mpu_init+0x1fc>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	74da      	strb	r2, [r3, #19]
 8001d94:	e002      	b.n	8001d9c <mpu_init+0x110>
        } else
            st.chip_cfg.accel_half = 0;
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <mpu_init+0x1fc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <mpu_init+0x1fc>)
 8001d9e:	22ff      	movs	r2, #255	; 0xff
 8001da0:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <mpu_init+0x1fc>)
 8001da4:	22ff      	movs	r2, #255	; 0xff
 8001da6:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001da8:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <mpu_init+0x1fc>)
 8001daa:	22ff      	movs	r2, #255	; 0xff
 8001dac:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <mpu_init+0x1fc>)
 8001db0:	22ff      	movs	r2, #255	; 0xff
 8001db2:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <mpu_init+0x1fc>)
 8001db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dba:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <mpu_init+0x1fc>)
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <mpu_init+0x1fc>)
 8001dc4:	22ff      	movs	r2, #255	; 0xff
 8001dc6:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <mpu_init+0x1fc>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <mpu_init+0x1fc>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <mpu_init+0x1fc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <mpu_init+0x1fc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <mpu_init+0x1fc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001dea:	220c      	movs	r2, #12
 8001dec:	2100      	movs	r1, #0
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <mpu_init+0x200>)
 8001df0:	f007 f8b6 	bl	8008f60 <memset>
    st.chip_cfg.dmp_on = 0;
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <mpu_init+0x1fc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <mpu_init+0x1fc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <mpu_init+0x1fc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8001e0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e0e:	f000 f9ed 	bl	80021ec <mpu_set_gyro_fsr>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <mpu_init+0x192>
        return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1c:	e030      	b.n	8001e80 <mpu_init+0x1f4>
    if (mpu_set_accel_fsr(2))
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f000 fa72 	bl	8002308 <mpu_set_accel_fsr>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <mpu_init+0x1a4>
        return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e2e:	e027      	b.n	8001e80 <mpu_init+0x1f4>
    if (mpu_set_lpf(42))
 8001e30:	202a      	movs	r0, #42	; 0x2a
 8001e32:	f000 fb0f 	bl	8002454 <mpu_set_lpf>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <mpu_init+0x1b6>
        return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e40:	e01e      	b.n	8001e80 <mpu_init+0x1f4>
    if (mpu_set_sample_rate(50))
 8001e42:	2032      	movs	r0, #50	; 0x32
 8001e44:	f000 fb6e 	bl	8002524 <mpu_set_sample_rate>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <mpu_init+0x1c8>
        return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e52:	e015      	b.n	8001e80 <mpu_init+0x1f4>
    if (mpu_configure_fifo(0))
 8001e54:	2000      	movs	r0, #0
 8001e56:	f000 fc53 	bl	8002700 <mpu_configure_fifo>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <mpu_init+0x1da>
        return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e64:	e00c      	b.n	8001e80 <mpu_init+0x1f4>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 fda4 	bl	80029b4 <mpu_set_bypass>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <mpu_init+0x1ec>
        return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e76:	e003      	b.n	8001e80 <mpu_init+0x1f4>
#endif

    mpu_set_sensors(0);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 fc93 	bl	80027a4 <mpu_set_sensors>
    return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	20000026 	.word	0x20000026

08001e90 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b28      	cmp	r3, #40	; 0x28
 8001e9e:	d902      	bls.n	8001ea6 <mpu_lp_accel_mode+0x16>
        return -1;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea4:	e06a      	b.n	8001f7c <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11c      	bne.n	8001ee6 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 fe47 	bl	8002b40 <mpu_set_int_latched>
        tmp[0] = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	7818      	ldrb	r0, [r3, #0]
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	7c99      	ldrb	r1, [r3, #18]
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f7ff f956 	bl	800117c <i2cWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <mpu_lp_accel_mode+0x4c>
            return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eda:	e04f      	b.n	8001f7c <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	751a      	strb	r2, [r3, #20]
        return 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e04a      	b.n	8001f7c <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 fe2a 	bl	8002b40 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001eec:	2320      	movs	r3, #32
 8001eee:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001efa:	2005      	movs	r0, #5
 8001efc:	f000 faaa 	bl	8002454 <mpu_set_lpf>
 8001f00:	e016      	b.n	8001f30 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d805      	bhi.n	8001f14 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001f0c:	2005      	movs	r0, #5
 8001f0e:	f000 faa1 	bl	8002454 <mpu_set_lpf>
 8001f12:	e00d      	b.n	8001f30 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b14      	cmp	r3, #20
 8001f18:	d805      	bhi.n	8001f26 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001f1e:	200a      	movs	r0, #10
 8001f20:	f000 fa98 	bl	8002454 <mpu_set_lpf>
 8001f24:	e004      	b.n	8001f30 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001f26:	2303      	movs	r3, #3
 8001f28:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001f2a:	2014      	movs	r0, #20
 8001f2c:	f000 fa92 	bl	8002454 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8001f30:	7b7b      	ldrb	r3, [r7, #13]
 8001f32:	019b      	lsls	r3, r3, #6
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	f043 0307 	orr.w	r3, r3, #7
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	7818      	ldrb	r0, [r3, #0]
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	7c99      	ldrb	r1, [r3, #18]
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2202      	movs	r2, #2
 8001f52:	f7ff f913 	bl	800117c <i2cWrite>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <mpu_lp_accel_mode+0xd2>
        return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f60:	e00c      	b.n	8001f7c <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001f64:	2208      	movs	r2, #8
 8001f66:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <mpu_lp_accel_mode+0xf4>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 fbc3 	bl	8002700 <mpu_configure_fifo>

    return 0;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000010 	.word	0x20000010

08001f88 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <mpu_reset_fifo+0x14>
        return -1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9a:	e0eb      	b.n	8002174 <mpu_reset_fifo+0x1ec>

    data = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001fa0:	4b76      	ldr	r3, [pc, #472]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	7818      	ldrb	r0, [r3, #0]
 8001fa6:	4b75      	ldr	r3, [pc, #468]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	7bd9      	ldrb	r1, [r3, #15]
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f7ff f8e4 	bl	800117c <i2cWrite>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <mpu_reset_fifo+0x38>
        return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fbe:	e0d9      	b.n	8002174 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001fc0:	4b6e      	ldr	r3, [pc, #440]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	7818      	ldrb	r0, [r3, #0]
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	7959      	ldrb	r1, [r3, #5]
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f7ff f8d4 	bl	800117c <i2cWrite>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <mpu_reset_fifo+0x58>
        return -1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fde:	e0c9      	b.n	8002174 <mpu_reset_fifo+0x1ec>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	7818      	ldrb	r0, [r3, #0]
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <mpu_reset_fifo+0x1f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	7919      	ldrb	r1, [r3, #4]
 8001fec:	1dfb      	adds	r3, r7, #7
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f7ff f8c4 	bl	800117c <i2cWrite>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <mpu_reset_fifo+0x78>
        return -1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffe:	e0b9      	b.n	8002174 <mpu_reset_fifo+0x1ec>

    if (st.chip_cfg.dmp_on) {
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d059      	beq.n	80020be <mpu_reset_fifo+0x136>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800200a:	230c      	movs	r3, #12
 800200c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	7818      	ldrb	r0, [r3, #0]
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	7919      	ldrb	r1, [r3, #4]
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	2201      	movs	r2, #1
 800201e:	f7ff f8ad 	bl	800117c <i2cWrite>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <mpu_reset_fifo+0xa6>
            return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800202c:	e0a2      	b.n	8002174 <mpu_reset_fifo+0x1ec>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002034:	7a9b      	ldrb	r3, [r3, #10]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d004      	beq.n	8002048 <mpu_reset_fifo+0xc0>
            data |= BIT_AUX_IF_EN;
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	b2db      	uxtb	r3, r3
 8002046:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <mpu_reset_fifo+0x1f4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	7818      	ldrb	r0, [r3, #0]
 800204e:	4b4b      	ldr	r3, [pc, #300]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	7919      	ldrb	r1, [r3, #4]
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	2201      	movs	r2, #1
 8002058:	f7ff f890 	bl	800117c <i2cWrite>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <mpu_reset_fifo+0xe0>
            return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002066:	e085      	b.n	8002174 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.int_enable)
 8002068:	4b44      	ldr	r3, [pc, #272]	; (800217c <mpu_reset_fifo+0x1f4>)
 800206a:	7c5b      	ldrb	r3, [r3, #17]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <mpu_reset_fifo+0xee>
            data = BIT_DMP_INT_EN;
 8002070:	2302      	movs	r3, #2
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	e001      	b.n	800207a <mpu_reset_fifo+0xf2>
        else
            data = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800207a:	4b40      	ldr	r3, [pc, #256]	; (800217c <mpu_reset_fifo+0x1f4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	7818      	ldrb	r0, [r3, #0]
 8002080:	4b3e      	ldr	r3, [pc, #248]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	7bd9      	ldrb	r1, [r3, #15]
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	2201      	movs	r2, #1
 800208a:	f7ff f877 	bl	800117c <i2cWrite>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <mpu_reset_fifo+0x112>
            return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002098:	e06c      	b.n	8002174 <mpu_reset_fifo+0x1ec>
        data = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <mpu_reset_fifo+0x1f4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	7818      	ldrb	r0, [r3, #0]
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <mpu_reset_fifo+0x1f4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	7959      	ldrb	r1, [r3, #5]
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	2201      	movs	r2, #1
 80020ae:	f7ff f865 	bl	800117c <i2cWrite>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05c      	beq.n	8002172 <mpu_reset_fifo+0x1ea>
            return -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020bc:	e05a      	b.n	8002174 <mpu_reset_fifo+0x1ec>
    } else {
        data = BIT_FIFO_RST;
 80020be:	2304      	movs	r3, #4
 80020c0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <mpu_reset_fifo+0x1f4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	7818      	ldrb	r0, [r3, #0]
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <mpu_reset_fifo+0x1f4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	7919      	ldrb	r1, [r3, #4]
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	2201      	movs	r2, #1
 80020d2:	f7ff f853 	bl	800117c <i2cWrite>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <mpu_reset_fifo+0x15a>
            return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e0:	e048      	b.n	8002174 <mpu_reset_fifo+0x1ec>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <mpu_reset_fifo+0x1f4>)
 80020e4:	7c9b      	ldrb	r3, [r3, #18]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <mpu_reset_fifo+0x16e>
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <mpu_reset_fifo+0x1f4>)
 80020ec:	7a9b      	ldrb	r3, [r3, #10]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <mpu_reset_fifo+0x174>
            data = BIT_FIFO_EN;
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e001      	b.n	8002100 <mpu_reset_fifo+0x178>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80020fc:	2360      	movs	r3, #96	; 0x60
 80020fe:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	7818      	ldrb	r0, [r3, #0]
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	7919      	ldrb	r1, [r3, #4]
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	2201      	movs	r2, #1
 8002110:	f7ff f834 	bl	800117c <i2cWrite>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <mpu_reset_fifo+0x198>
            return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211e:	e029      	b.n	8002174 <mpu_reset_fifo+0x1ec>
    
        if (st.chip_cfg.int_enable)
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002122:	7c5b      	ldrb	r3, [r3, #17]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <mpu_reset_fifo+0x1a6>
            data = BIT_DATA_RDY_EN;
 8002128:	2301      	movs	r3, #1
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	e001      	b.n	8002132 <mpu_reset_fifo+0x1aa>
        else
            data = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	7818      	ldrb	r0, [r3, #0]
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <mpu_reset_fifo+0x1f4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	7bd9      	ldrb	r1, [r3, #15]
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	2201      	movs	r2, #1
 8002142:	f7ff f81b 	bl	800117c <i2cWrite>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <mpu_reset_fifo+0x1ca>
            return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002150:	e010      	b.n	8002174 <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <mpu_reset_fifo+0x1f4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	7818      	ldrb	r0, [r3, #0]
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <mpu_reset_fifo+0x1f4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	7959      	ldrb	r1, [r3, #5]
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <mpu_reset_fifo+0x1f8>)
 8002160:	2201      	movs	r2, #1
 8002162:	f7ff f80b 	bl	800117c <i2cWrite>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <mpu_reset_fifo+0x1ea>
            return -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002170:	e000      	b.n	8002174 <mpu_reset_fifo+0x1ec>
    }
    return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000010 	.word	0x20000010
 8002180:	20000020 	.word	0x20000020

08002184 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <mpu_get_gyro_fsr+0x64>)
 800218e:	7a1b      	ldrb	r3, [r3, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d81e      	bhi.n	80021d2 <mpu_get_gyro_fsr+0x4e>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <mpu_get_gyro_fsr+0x18>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021b5 	.word	0x080021b5
 80021a4:	080021bf 	.word	0x080021bf
 80021a8:	080021c9 	.word	0x080021c9
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	22fa      	movs	r2, #250	; 0xfa
 80021b0:	801a      	strh	r2, [r3, #0]
        break;
 80021b2:	e012      	b.n	80021da <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021ba:	801a      	strh	r2, [r3, #0]
        break;
 80021bc:	e00d      	b.n	80021da <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021c4:	801a      	strh	r2, [r3, #0]
        break;
 80021c6:	e008      	b.n	80021da <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021ce:	801a      	strh	r2, [r3, #0]
        break;
 80021d0:	e003      	b.n	80021da <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]
        break;
 80021d8:	bf00      	nop
    }
    return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	20000010 	.word	0x20000010

080021ec <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <mpu_set_gyro_fsr+0xa4>)
 80021f8:	7a9b      	ldrb	r3, [r3, #10]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <mpu_set_gyro_fsr+0x18>
        return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002202:	e041      	b.n	8002288 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800220a:	d017      	beq.n	800223c <mpu_set_gyro_fsr+0x50>
 800220c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002210:	dc17      	bgt.n	8002242 <mpu_set_gyro_fsr+0x56>
 8002212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002216:	d00e      	beq.n	8002236 <mpu_set_gyro_fsr+0x4a>
 8002218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221c:	dc11      	bgt.n	8002242 <mpu_set_gyro_fsr+0x56>
 800221e:	2bfa      	cmp	r3, #250	; 0xfa
 8002220:	d003      	beq.n	800222a <mpu_set_gyro_fsr+0x3e>
 8002222:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002226:	d003      	beq.n	8002230 <mpu_set_gyro_fsr+0x44>
 8002228:	e00b      	b.n	8002242 <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
        break;
 800222e:	e00b      	b.n	8002248 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8002230:	2308      	movs	r3, #8
 8002232:	73fb      	strb	r3, [r7, #15]
        break;
 8002234:	e008      	b.n	8002248 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002236:	2310      	movs	r3, #16
 8002238:	73fb      	strb	r3, [r7, #15]
        break;
 800223a:	e005      	b.n	8002248 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 800223c:	2318      	movs	r3, #24
 800223e:	73fb      	strb	r3, [r7, #15]
        break;
 8002240:	e002      	b.n	8002248 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002246:	e01f      	b.n	8002288 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <mpu_set_gyro_fsr+0xa4>)
 800224a:	7a1a      	ldrb	r2, [r3, #8]
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	429a      	cmp	r2, r3
 8002254:	d101      	bne.n	800225a <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002256:	2300      	movs	r3, #0
 8002258:	e016      	b.n	8002288 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <mpu_set_gyro_fsr+0xa4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	7818      	ldrb	r0, [r3, #0]
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <mpu_set_gyro_fsr+0xa4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	7999      	ldrb	r1, [r3, #6]
 8002266:	f107 030f 	add.w	r3, r7, #15
 800226a:	2201      	movs	r2, #1
 800226c:	f7fe ff86 	bl	800117c <i2cWrite>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <mpu_set_gyro_fsr+0x90>
        return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800227a:	e005      	b.n	8002288 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b03      	ldr	r3, [pc, #12]	; (8002290 <mpu_set_gyro_fsr+0xa4>)
 8002284:	721a      	strb	r2, [r3, #8]
    return 0;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000010 	.word	0x20000010

08002294 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <mpu_get_accel_fsr+0x70>)
 800229e:	7a5b      	ldrb	r3, [r3, #9]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d81b      	bhi.n	80022dc <mpu_get_accel_fsr+0x48>
 80022a4:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <mpu_get_accel_fsr+0x18>)
 80022a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022aa:	bf00      	nop
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022c5 	.word	0x080022c5
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022d5 	.word	0x080022d5
    case INV_FSR_2G:
        fsr[0] = 2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
        break;
 80022c2:	e00e      	b.n	80022e2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	701a      	strb	r2, [r3, #0]
        break;
 80022ca:	e00a      	b.n	80022e2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2208      	movs	r2, #8
 80022d0:	701a      	strb	r2, [r3, #0]
        break;
 80022d2:	e006      	b.n	80022e2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2210      	movs	r2, #16
 80022d8:	701a      	strb	r2, [r3, #0]
        break;
 80022da:	e002      	b.n	80022e2 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022e0:	e00a      	b.n	80022f8 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <mpu_get_accel_fsr+0x70>)
 80022e4:	7cdb      	ldrb	r3, [r3, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	701a      	strb	r2, [r3, #0]
    return 0;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	20000010 	.word	0x20000010

08002308 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <mpu_set_accel_fsr+0xcc>)
 8002314:	7a9b      	ldrb	r3, [r3, #10]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <mpu_set_accel_fsr+0x18>
        return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231e:	e054      	b.n	80023ca <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	3b02      	subs	r3, #2
 8002324:	2b0e      	cmp	r3, #14
 8002326:	d82d      	bhi.n	8002384 <mpu_set_accel_fsr+0x7c>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <mpu_set_accel_fsr+0x28>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	0800236d 	.word	0x0800236d
 8002334:	08002385 	.word	0x08002385
 8002338:	08002373 	.word	0x08002373
 800233c:	08002385 	.word	0x08002385
 8002340:	08002385 	.word	0x08002385
 8002344:	08002385 	.word	0x08002385
 8002348:	08002379 	.word	0x08002379
 800234c:	08002385 	.word	0x08002385
 8002350:	08002385 	.word	0x08002385
 8002354:	08002385 	.word	0x08002385
 8002358:	08002385 	.word	0x08002385
 800235c:	08002385 	.word	0x08002385
 8002360:	08002385 	.word	0x08002385
 8002364:	08002385 	.word	0x08002385
 8002368:	0800237f 	.word	0x0800237f
    case 2:
        data = INV_FSR_2G << 3;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
        break;
 8002370:	e00b      	b.n	800238a <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002372:	2308      	movs	r3, #8
 8002374:	73fb      	strb	r3, [r7, #15]
        break;
 8002376:	e008      	b.n	800238a <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002378:	2310      	movs	r3, #16
 800237a:	73fb      	strb	r3, [r7, #15]
        break;
 800237c:	e005      	b.n	800238a <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800237e:	2318      	movs	r3, #24
 8002380:	73fb      	strb	r3, [r7, #15]
        break;
 8002382:	e002      	b.n	800238a <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002388:	e01f      	b.n	80023ca <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <mpu_set_accel_fsr+0xcc>)
 800238c:	7a5a      	ldrb	r2, [r3, #9]
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	429a      	cmp	r2, r3
 8002396:	d101      	bne.n	800239c <mpu_set_accel_fsr+0x94>
        return 0;
 8002398:	2300      	movs	r3, #0
 800239a:	e016      	b.n	80023ca <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <mpu_set_accel_fsr+0xcc>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	7818      	ldrb	r0, [r3, #0]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <mpu_set_accel_fsr+0xcc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	79d9      	ldrb	r1, [r3, #7]
 80023a8:	f107 030f 	add.w	r3, r7, #15
 80023ac:	2201      	movs	r2, #1
 80023ae:	f7fe fee5 	bl	800117c <i2cWrite>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <mpu_set_accel_fsr+0xb6>
        return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023bc:	e005      	b.n	80023ca <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <mpu_set_accel_fsr+0xcc>)
 80023c6:	725a      	strb	r2, [r3, #9]
    return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000010 	.word	0x20000010

080023d8 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <mpu_get_lpf+0x78>)
 80023e2:	7adb      	ldrb	r3, [r3, #11]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d826      	bhi.n	8002438 <mpu_get_lpf+0x60>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <mpu_get_lpf+0x18>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002409 	.word	0x08002409
 80023f4:	08002411 	.word	0x08002411
 80023f8:	08002419 	.word	0x08002419
 80023fc:	08002421 	.word	0x08002421
 8002400:	08002429 	.word	0x08002429
 8002404:	08002431 	.word	0x08002431
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	22bc      	movs	r2, #188	; 0xbc
 800240c:	801a      	strh	r2, [r3, #0]
        break;
 800240e:	e017      	b.n	8002440 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2262      	movs	r2, #98	; 0x62
 8002414:	801a      	strh	r2, [r3, #0]
        break;
 8002416:	e013      	b.n	8002440 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	222a      	movs	r2, #42	; 0x2a
 800241c:	801a      	strh	r2, [r3, #0]
        break;
 800241e:	e00f      	b.n	8002440 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2214      	movs	r2, #20
 8002424:	801a      	strh	r2, [r3, #0]
        break;
 8002426:	e00b      	b.n	8002440 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	220a      	movs	r2, #10
 800242c:	801a      	strh	r2, [r3, #0]
        break;
 800242e:	e007      	b.n	8002440 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2205      	movs	r2, #5
 8002434:	801a      	strh	r2, [r3, #0]
        break;
 8002436:	e003      	b.n	8002440 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
        break;
 800243e:	bf00      	nop
    }
    return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000010 	.word	0x20000010

08002454 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <mpu_set_lpf+0x98>)
 8002460:	7a9b      	ldrb	r3, [r3, #10]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <mpu_set_lpf+0x18>
        return -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246a:	e03b      	b.n	80024e4 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	2bbb      	cmp	r3, #187	; 0xbb
 8002470:	d902      	bls.n	8002478 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e019      	b.n	80024ac <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	2b61      	cmp	r3, #97	; 0x61
 800247c:	d902      	bls.n	8002484 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800247e:	2302      	movs	r3, #2
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e013      	b.n	80024ac <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	2b29      	cmp	r3, #41	; 0x29
 8002488:	d902      	bls.n	8002490 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800248a:	2303      	movs	r3, #3
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e00d      	b.n	80024ac <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b13      	cmp	r3, #19
 8002494:	d902      	bls.n	800249c <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002496:	2304      	movs	r3, #4
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e007      	b.n	80024ac <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d902      	bls.n	80024a8 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80024a2:	2305      	movs	r3, #5
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e001      	b.n	80024ac <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80024a8:	2306      	movs	r3, #6
 80024aa:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <mpu_set_lpf+0x98>)
 80024ae:	7ada      	ldrb	r2, [r3, #11]
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d101      	bne.n	80024ba <mpu_set_lpf+0x66>
        return 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e014      	b.n	80024e4 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <mpu_set_lpf+0x98>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	7818      	ldrb	r0, [r3, #0]
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <mpu_set_lpf+0x98>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	7899      	ldrb	r1, [r3, #2]
 80024c6:	f107 030f 	add.w	r3, r7, #15
 80024ca:	2201      	movs	r2, #1
 80024cc:	f7fe fe56 	bl	800117c <i2cWrite>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <mpu_set_lpf+0x88>
        return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024da:	e003      	b.n	80024e4 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <mpu_set_lpf+0x98>)
 80024e0:	72da      	strb	r2, [r3, #11]
    return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000010 	.word	0x20000010

080024f0 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <mpu_get_sample_rate+0x30>)
 80024fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <mpu_get_sample_rate+0x18>
        return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002506:	e004      	b.n	8002512 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <mpu_get_sample_rate+0x30>)
 800250a:	89da      	ldrh	r2, [r3, #14]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	801a      	strh	r2, [r3, #0]
    return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000010 	.word	0x20000010

08002524 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800252e:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <mpu_set_sample_rate+0xc8>)
 8002530:	7a9b      	ldrb	r3, [r3, #10]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <mpu_set_sample_rate+0x18>
        return -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253a:	e053      	b.n	80025e4 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <mpu_set_sample_rate+0xc8>)
 800253e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <mpu_set_sample_rate+0x28>
        return -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254a:	e04b      	b.n	80025e4 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <mpu_set_sample_rate+0xc8>)
 800254e:	7d1b      	ldrb	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00f      	beq.n	8002574 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <mpu_set_sample_rate+0x4a>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b28      	cmp	r3, #40	; 0x28
 800255e:	d806      	bhi.n	800256e <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fc93 	bl	8001e90 <mpu_lp_accel_mode>
                return 0;
 800256a:	2300      	movs	r3, #0
 800256c:	e03a      	b.n	80025e4 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800256e:	2000      	movs	r0, #0
 8002570:	f7ff fc8e 	bl	8001e90 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d802      	bhi.n	8002580 <mpu_set_sample_rate+0x5c>
            rate = 4;
 800257a:	2304      	movs	r3, #4
 800257c:	80fb      	strh	r3, [r7, #6]
 800257e:	e006      	b.n	800258e <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002586:	d902      	bls.n	800258e <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8002588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258c:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002594:	fb92 f3f3 	sdiv	r3, r2, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <mpu_set_sample_rate+0xc8>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	7818      	ldrb	r0, [r3, #0]
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <mpu_set_sample_rate+0xc8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	7859      	ldrb	r1, [r3, #1]
 80025ac:	f107 030f 	add.w	r3, r7, #15
 80025b0:	2201      	movs	r2, #1
 80025b2:	f7fe fde3 	bl	800117c <i2cWrite>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <mpu_set_sample_rate+0x9e>
            return -1;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c0:	e010      	b.n	80025e4 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	3301      	adds	r3, #1
 80025c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <mpu_set_sample_rate+0xc8>)
 80025d2:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <mpu_set_sample_rate+0xc8>)
 80025d6:	89db      	ldrh	r3, [r3, #14]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff39 	bl	8002454 <mpu_set_lpf>
        return 0;
 80025e2:	2300      	movs	r3, #0
    }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000010 	.word	0x20000010

080025f0 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <mpu_get_gyro_sens+0x5c>)
 80025fa:	7a1b      	ldrb	r3, [r3, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d81b      	bhi.n	8002638 <mpu_get_gyro_sens+0x48>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <mpu_get_gyro_sens+0x18>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	08002621 	.word	0x08002621
 8002610:	08002629 	.word	0x08002629
 8002614:	08002631 	.word	0x08002631
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <mpu_get_gyro_sens+0x60>)
 800261c:	601a      	str	r2, [r3, #0]
        break;
 800261e:	e00e      	b.n	800263e <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <mpu_get_gyro_sens+0x64>)
 8002624:	601a      	str	r2, [r3, #0]
        break;
 8002626:	e00a      	b.n	800263e <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <mpu_get_gyro_sens+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
        break;
 800262e:	e006      	b.n	800263e <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <mpu_get_gyro_sens+0x6c>)
 8002634:	601a      	str	r2, [r3, #0]
        break;
 8002636:	e002      	b.n	800263e <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263c:	e000      	b.n	8002640 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000010 	.word	0x20000010
 8002650:	43030000 	.word	0x43030000
 8002654:	42830000 	.word	0x42830000
 8002658:	42033333 	.word	0x42033333
 800265c:	41833333 	.word	0x41833333

08002660 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <mpu_get_accel_sens+0x78>)
 800266a:	7a5b      	ldrb	r3, [r3, #9]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d81f      	bhi.n	80026b0 <mpu_get_accel_sens+0x50>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <mpu_get_accel_sens+0x18>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002689 	.word	0x08002689
 800267c:	08002693 	.word	0x08002693
 8002680:	0800269d 	.word	0x0800269d
 8002684:	080026a7 	.word	0x080026a7
    case INV_FSR_2G:
        sens[0] = 16384;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800268e:	801a      	strh	r2, [r3, #0]
        break;
 8002690:	e011      	b.n	80026b6 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f641 729c 	movw	r2, #8092	; 0x1f9c
 8002698:	801a      	strh	r2, [r3, #0]
        break;
 800269a:	e00c      	b.n	80026b6 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026a2:	801a      	strh	r2, [r3, #0]
        break;
 80026a4:	e007      	b.n	80026b6 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ac:	801a      	strh	r2, [r3, #0]
        break;
 80026ae:	e002      	b.n	80026b6 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b4:	e00a      	b.n	80026cc <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <mpu_get_accel_sens+0x78>)
 80026b8:	7cdb      	ldrb	r3, [r3, #19]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	801a      	strh	r2, [r3, #0]
    return 0;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	20000010 	.word	0x20000010

080026dc <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <mpu_get_fifo_config+0x20>)
 80026e6:	7c1a      	ldrb	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	701a      	strb	r2, [r3, #0]
    return 0;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000010 	.word	0x20000010

08002700 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <mpu_configure_fifo+0xa0>)
 8002718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <mpu_configure_fifo+0x24>
        return 0;
 8002720:	2300      	movs	r3, #0
 8002722:	e038      	b.n	8002796 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <mpu_configure_fifo+0xa0>)
 8002726:	7a9b      	ldrb	r3, [r3, #10]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <mpu_configure_fifo+0x32>
            return -1;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002730:	e031      	b.n	8002796 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <mpu_configure_fifo+0xa0>)
 8002734:	7c1b      	ldrb	r3, [r3, #16]
 8002736:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <mpu_configure_fifo+0xa0>)
 800273a:	7a9a      	ldrb	r2, [r3, #10]
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4013      	ands	r3, r2
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <mpu_configure_fifo+0xa0>)
 8002744:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <mpu_configure_fifo+0xa0>)
 8002748:	7c1b      	ldrb	r3, [r3, #16]
 800274a:	79fa      	ldrb	r2, [r7, #7]
 800274c:	429a      	cmp	r2, r3
 800274e:	d003      	beq.n	8002758 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e001      	b.n	800275c <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <mpu_configure_fifo+0x6a>
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <mpu_configure_fifo+0xa0>)
 8002764:	7d1b      	ldrb	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800276a:	2001      	movs	r0, #1
 800276c:	f7ff fa34 	bl	8001bd8 <set_int_enable>
 8002770:	e002      	b.n	8002778 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff fa30 	bl	8001bd8 <set_int_enable>
        if (sensors) {
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800277e:	f7ff fc03 	bl	8001f88 <mpu_reset_fifo>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <mpu_configure_fifo+0xa0>)
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	7413      	strb	r3, [r2, #16]
                return -1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002792:	e000      	b.n	8002796 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8002794:	68fb      	ldr	r3, [r7, #12]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000010 	.word	0x20000010

080027a4 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e007      	b.n	80027ce <mpu_set_sensors+0x2a>
    else if (sensors)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <mpu_set_sensors+0x26>
        data = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e001      	b.n	80027ce <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <mpu_set_sensors+0x108>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	7818      	ldrb	r0, [r3, #0]
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <mpu_set_sensors+0x108>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	7c99      	ldrb	r1, [r3, #18]
 80027da:	f107 030f 	add.w	r3, r7, #15
 80027de:	2201      	movs	r2, #1
 80027e0:	f7fe fccc 	bl	800117c <i2cWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 80027ea:	4b30      	ldr	r3, [pc, #192]	; (80028ac <mpu_set_sensors+0x108>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	729a      	strb	r2, [r3, #10]
        return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f4:	e056      	b.n	80028a4 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <mpu_set_sensors+0x108>)
 8002800:	731a      	strb	r2, [r3, #12]

    data = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	b2db      	uxtb	r3, r3
 8002818:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002852:	b2db      	uxtb	r3, r3
 8002854:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <mpu_set_sensors+0x108>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	7818      	ldrb	r0, [r3, #0]
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <mpu_set_sensors+0x108>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	7cd9      	ldrb	r1, [r3, #19]
 8002862:	f107 030f 	add.w	r3, r7, #15
 8002866:	2201      	movs	r2, #1
 8002868:	f7fe fc88 	bl	800117c <i2cWrite>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <mpu_set_sensors+0x108>)
 8002874:	2200      	movs	r2, #0
 8002876:	729a      	strb	r2, [r3, #10]
        return -1;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287c:	e012      	b.n	80028a4 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <mpu_set_sensors+0xec>
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	2b08      	cmp	r3, #8
 8002888:	d002      	beq.n	8002890 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800288a:	2000      	movs	r0, #0
 800288c:	f000 f958 	bl	8002b40 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <mpu_set_sensors+0x108>)
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <mpu_set_sensors+0x108>)
 8002898:	2200      	movs	r2, #0
 800289a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800289c:	2032      	movs	r0, #50	; 0x32
 800289e:	f002 fe9f 	bl	80055e0 <HAL_Delay>
    return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000010 	.word	0x20000010

080028b0 <mpu_read_fifo_stream>:
 *  @param[in]  more    Number of remaining packets.
 */
int fifoCnt;
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    int fifo_count;
    if (!st.chip_cfg.dmp_on)
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 80028c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <mpu_read_fifo_stream+0x1e>
        return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028cc:	e069      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>
    if (!st.chip_cfg.sensors)
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 80028d0:	7a9b      	ldrb	r3, [r3, #10]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <mpu_read_fifo_stream+0x2c>
        return -1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	e062      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	7818      	ldrb	r0, [r3, #0]
 80028e2:	4b32      	ldr	r3, [pc, #200]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	7a99      	ldrb	r1, [r3, #10]
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	2202      	movs	r2, #2
 80028ee:	f7fe fc69 	bl	80011c4 <i2cRead>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <mpu_read_fifo_stream+0x4e>
        return -1;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028fc:	e051      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>
    fifo_count = fifoCnt = (tmp[0] << 8) | tmp[1];
 80028fe:	7c3b      	ldrb	r3, [r7, #16]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	7c7a      	ldrb	r2, [r7, #17]
 8002904:	4313      	orrs	r3, r2
 8002906:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <mpu_read_fifo_stream+0x100>)
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <mpu_read_fifo_stream+0x100>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]
    if (fifo_count < length) {
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	da05      	bge.n	8002924 <mpu_read_fifo_stream+0x74>
        more[0] = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
        return -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002922:	e03e      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	885b      	ldrh	r3, [r3, #2]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4293      	cmp	r3, r2
 8002934:	dd1a      	ble.n	800296c <mpu_read_fifo_stream+0xbc>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	7818      	ldrb	r0, [r3, #0]
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	7c59      	ldrb	r1, [r3, #17]
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	2201      	movs	r2, #1
 8002948:	f7fe fc3c 	bl	80011c4 <i2cRead>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <mpu_read_fifo_stream+0xa8>
            return -1;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002956:	e024      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002958:	7c3b      	ldrb	r3, [r7, #16]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d004      	beq.n	800296c <mpu_read_fifo_stream+0xbc>
            mpu_reset_fifo();
 8002962:	f7ff fb11 	bl	8001f88 <mpu_reset_fifo>
            return -2;
 8002966:	f06f 0301 	mvn.w	r3, #1
 800296a:	e01a      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	7818      	ldrb	r0, [r3, #0]
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <mpu_read_fifo_stream+0xfc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	7ad9      	ldrb	r1, [r3, #11]
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f7fe fc21 	bl	80011c4 <i2cRead>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <mpu_read_fifo_stream+0xde>
        return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800298c:	e009      	b.n	80029a2 <mpu_read_fifo_stream+0xf2>
    more[0] = fifo_count / length - 1;
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	fb92 f3f3 	sdiv	r3, r2, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	701a      	strb	r2, [r3, #0]
    return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000010 	.word	0x20000010
 80029b0:	200002cc 	.word	0x200002cc

080029b4 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80029be:	4b5f      	ldr	r3, [pc, #380]	; (8002b3c <mpu_set_bypass+0x188>)
 80029c0:	7c9b      	ldrb	r3, [r3, #18]
 80029c2:	79fa      	ldrb	r2, [r7, #7]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d101      	bne.n	80029cc <mpu_set_bypass+0x18>
        return 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e0b2      	b.n	8002b32 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d050      	beq.n	8002a74 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80029d2:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <mpu_set_bypass+0x188>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	7818      	ldrb	r0, [r3, #0]
 80029d8:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <mpu_set_bypass+0x188>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	7919      	ldrb	r1, [r3, #4]
 80029de:	f107 030f 	add.w	r3, r7, #15
 80029e2:	2201      	movs	r2, #1
 80029e4:	f7fe fbee 	bl	80011c4 <i2cRead>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <mpu_set_bypass+0x40>
            return -1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f2:	e09e      	b.n	8002b32 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f023 0320 	bic.w	r3, r3, #32
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80029fe:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	7818      	ldrb	r0, [r3, #0]
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	7919      	ldrb	r1, [r3, #4]
 8002a0a:	f107 030f 	add.w	r3, r7, #15
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f7fe fbb4 	bl	800117c <i2cWrite>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <mpu_set_bypass+0x6c>
            return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a1e:	e088      	b.n	8002b32 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002a20:	2003      	movs	r0, #3
 8002a22:	f002 fddd 	bl	80055e0 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8002a26:	2302      	movs	r3, #2
 8002a28:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8002a2a:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	7818      	ldrb	r0, [r3, #0]
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	7d19      	ldrb	r1, [r3, #20]
 8002a5e:	f107 030f 	add.w	r3, r7, #15
 8002a62:	2201      	movs	r2, #1
 8002a64:	f7fe fb8a 	bl	800117c <i2cWrite>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d05d      	beq.n	8002b2a <mpu_set_bypass+0x176>
            return -1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a72:	e05e      	b.n	8002b32 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	7818      	ldrb	r0, [r3, #0]
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	7919      	ldrb	r1, [r3, #4]
 8002a80:	f107 030f 	add.w	r3, r7, #15
 8002a84:	2201      	movs	r2, #1
 8002a86:	f7fe fb9d 	bl	80011c4 <i2cRead>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <mpu_set_bypass+0xe2>
            return -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a94:	e04d      	b.n	8002b32 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <mpu_set_bypass+0x188>)
 8002a98:	7a9b      	ldrb	r3, [r3, #10]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e004      	b.n	8002ab8 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	f023 0320 	bic.w	r3, r3, #32
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <mpu_set_bypass+0x188>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	7818      	ldrb	r0, [r3, #0]
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <mpu_set_bypass+0x188>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	7919      	ldrb	r1, [r3, #4]
 8002ac4:	f107 030f 	add.w	r3, r7, #15
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f7fe fb57 	bl	800117c <i2cWrite>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <mpu_set_bypass+0x126>
            return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad8:	e02b      	b.n	8002b32 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002ada:	2003      	movs	r0, #3
 8002adc:	f002 fd80 	bl	80055e0 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <mpu_set_bypass+0x188>)
 8002ae2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e001      	b.n	8002af4 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <mpu_set_bypass+0x188>)
 8002af6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <mpu_set_bypass+0x188>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	7818      	ldrb	r0, [r3, #0]
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <mpu_set_bypass+0x188>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	7d19      	ldrb	r1, [r3, #20]
 8002b14:	f107 030f 	add.w	r3, r7, #15
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f7fe fb2f 	bl	800117c <i2cWrite>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <mpu_set_bypass+0x176>
            return -1;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b28:	e003      	b.n	8002b32 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <mpu_set_bypass+0x188>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	7493      	strb	r3, [r2, #18]
    return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000010 	.word	0x20000010

08002b40 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <mpu_set_int_latched+0x84>)
 8002b4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002b50:	79fa      	ldrb	r2, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d101      	bne.n	8002b5a <mpu_set_int_latched+0x1a>
        return 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e030      	b.n	8002bbc <mpu_set_int_latched+0x7c>

    if (enable)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002b60:	2330      	movs	r3, #48	; 0x30
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <mpu_set_int_latched+0x84>)
 8002b6c:	7c9b      	ldrb	r3, [r3, #18]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <mpu_set_int_latched+0x84>)
 8002b7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <mpu_set_int_latched+0x84>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	7818      	ldrb	r0, [r3, #0]
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <mpu_set_int_latched+0x84>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	7d19      	ldrb	r1, [r3, #20]
 8002b9c:	f107 030f 	add.w	r3, r7, #15
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f7fe faeb 	bl	800117c <i2cWrite>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <mpu_set_int_latched+0x72>
        return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb0:	e004      	b.n	8002bbc <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <mpu_set_int_latched+0x84>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000010 	.word	0x20000010

08002bc8 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <get_accel_prod_shift+0x110>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	7818      	ldrb	r0, [r3, #0]
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	2204      	movs	r2, #4
 8002bdc:	210d      	movs	r1, #13
 8002bde:	f7fe faf1 	bl	80011c4 <i2cRead>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <get_accel_prod_shift+0x24>
        return 0x07;
 8002be8:	2307      	movs	r3, #7
 8002bea:	e071      	b.n	8002cd0 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002bec:	7c3b      	ldrb	r3, [r7, #16]
 8002bee:	10db      	asrs	r3, r3, #3
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	f003 031c 	and.w	r3, r3, #28
 8002bf6:	b25a      	sxtb	r2, r3
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	111b      	asrs	r3, r3, #4
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002c0c:	7c7b      	ldrb	r3, [r7, #17]
 8002c0e:	10db      	asrs	r3, r3, #3
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	f003 031c 	and.w	r3, r3, #28
 8002c16:	b25a      	sxtb	r2, r3
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	109b      	asrs	r3, r3, #2
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002c2c:	7cbb      	ldrb	r3, [r7, #18]
 8002c2e:	10db      	asrs	r3, r3, #3
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	f003 031c 	and.w	r3, r3, #28
 8002c36:	b25a      	sxtb	r2, r3
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
 8002c4e:	e03b      	b.n	8002cc8 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	3318      	adds	r3, #24
 8002c54:	443b      	add	r3, r7
 8002c56:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
            continue;
 8002c6c:	e029      	b.n	8002cc2 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <get_accel_prod_shift+0x114>)
 8002c78:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8002c7a:	e00f      	b.n	8002c9c <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ce0 <get_accel_prod_shift+0x118>
 8002c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c98:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	f103 0218 	add.w	r2, r3, #24
 8002ca2:	443a      	add	r2, r7
 8002ca4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	b2d1      	uxtb	r1, r2
 8002cac:	f103 0218 	add.w	r2, r3, #24
 8002cb0:	443a      	add	r2, r7
 8002cb2:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8002cb6:	3318      	adds	r3, #24
 8002cb8:	443b      	add	r3, r7
 8002cba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1dc      	bne.n	8002c7c <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d9c0      	bls.n	8002c50 <get_accel_prod_shift+0x88>
    }
    return 0;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000010 	.word	0x20000010
 8002cdc:	3eae147b 	.word	0x3eae147b
 8002ce0:	3f845a1d 	.word	0x3f845a1d

08002ce4 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff66 	bl	8002bc8 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	e063      	b.n	8002dca <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	6839      	ldr	r1, [r7, #0]
 8002d12:	440b      	add	r3, r1
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bfb8      	it	lt
 8002d1c:	425b      	neglt	r3, r3
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d26:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002ddc <accel_self_test+0xf8>
 8002d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3328      	adds	r3, #40	; 0x28
 8002d38:	443b      	add	r3, r7
 8002d3a:	3b1c      	subs	r3, #28
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d48:	d023      	beq.n	8002d92 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3328      	adds	r3, #40	; 0x28
 8002d50:	443b      	add	r3, r7
 8002d52:	3b1c      	subs	r3, #28
 8002d54:	ed93 7a00 	vldr	s14, [r3]
 8002d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d68:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8002d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d70:	eef0 7ae7 	vabs.f32	s15, s15
 8002d74:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002de0 <accel_self_test+0xfc>
 8002d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	dd20      	ble.n	8002dc4 <accel_self_test+0xe0>
                result |= 1 << jj;
 8002d82:	2201      	movs	r2, #1
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	6a3a      	ldr	r2, [r7, #32]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	e018      	b.n	8002dc4 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 8002d92:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002de4 <accel_self_test+0x100>
 8002d96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	d408      	bmi.n	8002db6 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002da4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002de8 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002da8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	dd06      	ble.n	8002dc4 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002db6:	2201      	movs	r2, #1
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	dd98      	ble.n	8002d02 <accel_self_test+0x1e>
    }

    return result;
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	47800000 	.word	0x47800000
 8002de0:	3e0f5c29 	.word	0x3e0f5c29
 8002de4:	3e99999a 	.word	0x3e99999a
 8002de8:	3f733333 	.word	0x3f733333

08002dec <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002dfa:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <gyro_self_test+0x164>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	7818      	ldrb	r0, [r3, #0]
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	2203      	movs	r2, #3
 8002e06:	210d      	movs	r1, #13
 8002e08:	f7fe f9dc 	bl	80011c4 <i2cRead>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <gyro_self_test+0x2a>
        return 0x07;
 8002e12:	2307      	movs	r3, #7
 8002e14:	e097      	b.n	8002f46 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 8002e16:	7a3b      	ldrb	r3, [r7, #8]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8002e20:	7a7b      	ldrb	r3, [r7, #9]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8002e2a:	7abb      	ldrb	r3, [r7, #10]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e080      	b.n	8002f3c <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	440b      	add	r3, r1
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bfb8      	it	lt
 8002e54:	425b      	neglt	r3, r3
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002f54 <gyro_self_test+0x168>
 8002e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e66:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8002e6a:	f107 0208 	add.w	r2, r7, #8
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d045      	beq.n	8002f04 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 8002e78:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002f58 <gyro_self_test+0x16c>
 8002e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e80:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002f5c <gyro_self_test+0x170>
 8002e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e88:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002e8c:	e007      	b.n	8002e9e <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8002e8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e92:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002f60 <gyro_self_test+0x174>
 8002e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e9a:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002e9e:	f107 0208 	add.w	r2, r7, #8
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b2d9      	uxtb	r1, r3
 8002eac:	f107 0208 	add.w	r2, r7, #8
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	f107 0208 	add.w	r2, r7, #8
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e3      	bne.n	8002e8e <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002ec6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002eca:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eda:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8002ede:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee2:	eef0 7ae7 	vabs.f32	s15, s15
 8002ee6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f64 <gyro_self_test+0x178>
 8002eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef2:	dd20      	ble.n	8002f36 <gyro_self_test+0x14a>
                result |= 1 << jj;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e018      	b.n	8002f36 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002f04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	d408      	bmi.n	8002f28 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 8002f16:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002f68 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 8002f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	dd06      	ble.n	8002f36 <gyro_self_test+0x14a>
            result |= 1 << jj;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	f77f af7b 	ble.w	8002e3a <gyro_self_test+0x4e>
    }
    return result;
 8002f44:	69bb      	ldr	r3, [r7, #24]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000010 	.word	0x20000010
 8002f54:	47800000 	.word	0x47800000
 8002f58:	00000083 	.word	0x00000083
 8002f5c:	454cb000 	.word	0x454cb000
 8002f60:	3f85e354 	.word	0x3f85e354
 8002f64:	3e0f5c29 	.word	0x3e0f5c29
 8002f68:	42d20000 	.word	0x42d20000

08002f6c <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8002f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f70:	b0b8      	sub	sp, #224	; 0xe0
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8002f78:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8002f8e:	4ba5      	ldr	r3, [pc, #660]	; (8003224 <get_st_biases+0x2b8>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	7818      	ldrb	r0, [r3, #0]
 8002f94:	4ba3      	ldr	r3, [pc, #652]	; (8003224 <get_st_biases+0x2b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	7c99      	ldrb	r1, [r3, #18]
 8002f9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f7fe f8ec 	bl	800117c <i2cWrite>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <get_st_biases+0x44>
        return -1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fae:	e34b      	b.n	8003648 <get_st_biases+0x6dc>
    delay_ms(200);
 8002fb0:	20c8      	movs	r0, #200	; 0xc8
 8002fb2:	f002 fb15 	bl	80055e0 <HAL_Delay>
    data[0] = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8002fbc:	4b99      	ldr	r3, [pc, #612]	; (8003224 <get_st_biases+0x2b8>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	7818      	ldrb	r0, [r3, #0]
 8002fc2:	4b98      	ldr	r3, [pc, #608]	; (8003224 <get_st_biases+0x2b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	7bd9      	ldrb	r1, [r3, #15]
 8002fc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f7fe f8d5 	bl	800117c <i2cWrite>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <get_st_biases+0x72>
        return -1;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fdc:	e334      	b.n	8003648 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002fde:	4b91      	ldr	r3, [pc, #580]	; (8003224 <get_st_biases+0x2b8>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	7818      	ldrb	r0, [r3, #0]
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	; (8003224 <get_st_biases+0x2b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	7959      	ldrb	r1, [r3, #5]
 8002fea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f7fe f8c4 	bl	800117c <i2cWrite>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <get_st_biases+0x94>
        return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffe:	e323      	b.n	8003648 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003000:	4b88      	ldr	r3, [pc, #544]	; (8003224 <get_st_biases+0x2b8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	7818      	ldrb	r0, [r3, #0]
 8003006:	4b87      	ldr	r3, [pc, #540]	; (8003224 <get_st_biases+0x2b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	7c99      	ldrb	r1, [r3, #18]
 800300c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003010:	2201      	movs	r2, #1
 8003012:	f7fe f8b3 	bl	800117c <i2cWrite>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <get_st_biases+0xb6>
        return -1;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003020:	e312      	b.n	8003648 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003022:	4b80      	ldr	r3, [pc, #512]	; (8003224 <get_st_biases+0x2b8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	7818      	ldrb	r0, [r3, #0]
 8003028:	4b7e      	ldr	r3, [pc, #504]	; (8003224 <get_st_biases+0x2b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	7dd9      	ldrb	r1, [r3, #23]
 800302e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003032:	2201      	movs	r2, #1
 8003034:	f7fe f8a2 	bl	800117c <i2cWrite>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <get_st_biases+0xd8>
        return -1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003042:	e301      	b.n	8003648 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003044:	4b77      	ldr	r3, [pc, #476]	; (8003224 <get_st_biases+0x2b8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	7818      	ldrb	r0, [r3, #0]
 800304a:	4b76      	ldr	r3, [pc, #472]	; (8003224 <get_st_biases+0x2b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	7919      	ldrb	r1, [r3, #4]
 8003050:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003054:	2201      	movs	r2, #1
 8003056:	f7fe f891 	bl	800117c <i2cWrite>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <get_st_biases+0xfa>
        return -1;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003064:	e2f0      	b.n	8003648 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8003066:	230c      	movs	r3, #12
 8003068:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800306c:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <get_st_biases+0x2b8>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	7818      	ldrb	r0, [r3, #0]
 8003072:	4b6c      	ldr	r3, [pc, #432]	; (8003224 <get_st_biases+0x2b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	7919      	ldrb	r1, [r3, #4]
 8003078:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800307c:	2201      	movs	r2, #1
 800307e:	f7fe f87d 	bl	800117c <i2cWrite>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <get_st_biases+0x122>
        return -1;
 8003088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308c:	e2dc      	b.n	8003648 <get_st_biases+0x6dc>
    delay_ms(15);
 800308e:	200f      	movs	r0, #15
 8003090:	f002 faa6 	bl	80055e0 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8003094:	4b63      	ldr	r3, [pc, #396]	; (8003224 <get_st_biases+0x2b8>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	7a5b      	ldrb	r3, [r3, #9]
 800309a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800309e:	4b61      	ldr	r3, [pc, #388]	; (8003224 <get_st_biases+0x2b8>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	7818      	ldrb	r0, [r3, #0]
 80030a4:	4b5f      	ldr	r3, [pc, #380]	; (8003224 <get_st_biases+0x2b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	7899      	ldrb	r1, [r3, #2]
 80030aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030ae:	2201      	movs	r2, #1
 80030b0:	f7fe f864 	bl	800117c <i2cWrite>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <get_st_biases+0x154>
        return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030be:	e2c3      	b.n	8003648 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 80030c0:	4b58      	ldr	r3, [pc, #352]	; (8003224 <get_st_biases+0x2b8>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	7a1b      	ldrb	r3, [r3, #8]
 80030c6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80030ca:	4b56      	ldr	r3, [pc, #344]	; (8003224 <get_st_biases+0x2b8>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	7818      	ldrb	r0, [r3, #0]
 80030d0:	4b54      	ldr	r3, [pc, #336]	; (8003224 <get_st_biases+0x2b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	7859      	ldrb	r1, [r3, #1]
 80030d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030da:	2201      	movs	r2, #1
 80030dc:	f7fe f84e 	bl	800117c <i2cWrite>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <get_st_biases+0x180>
        return -1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ea:	e2ad      	b.n	8003648 <get_st_biases+0x6dc>
    if (hw_test)
 80030ec:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <get_st_biases+0x2b8>)
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	7a9b      	ldrb	r3, [r3, #10]
 80030fa:	f063 031f 	orn	r3, r3, #31
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8003104:	e004      	b.n	8003110 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <get_st_biases+0x2b8>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	7a9b      	ldrb	r3, [r3, #10]
 800310c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003110:	4b44      	ldr	r3, [pc, #272]	; (8003224 <get_st_biases+0x2b8>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	7818      	ldrb	r0, [r3, #0]
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <get_st_biases+0x2b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	7999      	ldrb	r1, [r3, #6]
 800311c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003120:	2201      	movs	r2, #1
 8003122:	f7fe f82b 	bl	800117c <i2cWrite>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <get_st_biases+0x1c6>
        return -1;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003130:	e28a      	b.n	8003648 <get_st_biases+0x6dc>

    if (hw_test)
 8003132:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <get_st_biases+0x2b8>)
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	7adb      	ldrb	r3, [r3, #11]
 8003140:	f063 031f 	orn	r3, r3, #31
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800314a:	e002      	b.n	8003152 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 800314c:	2318      	movs	r3, #24
 800314e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <get_st_biases+0x2b8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	7818      	ldrb	r0, [r3, #0]
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <get_st_biases+0x2b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	79d9      	ldrb	r1, [r3, #7]
 800315e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003162:	2201      	movs	r2, #1
 8003164:	f7fe f80a 	bl	800117c <i2cWrite>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <get_st_biases+0x208>
        return -1;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003172:	e269      	b.n	8003648 <get_st_biases+0x6dc>
    if (hw_test)
 8003174:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <get_st_biases+0x216>
        delay_ms(200);
 800317c:	20c8      	movs	r0, #200	; 0xc8
 800317e:	f002 fa2f 	bl	80055e0 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8003182:	2340      	movs	r3, #64	; 0x40
 8003184:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <get_st_biases+0x2b8>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	7818      	ldrb	r0, [r3, #0]
 800318e:	4b25      	ldr	r3, [pc, #148]	; (8003224 <get_st_biases+0x2b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	7919      	ldrb	r1, [r3, #4]
 8003194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003198:	2201      	movs	r2, #1
 800319a:	f7fd ffef 	bl	800117c <i2cWrite>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <get_st_biases+0x23e>
        return -1;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031a8:	e24e      	b.n	8003648 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 80031aa:	2378      	movs	r3, #120	; 0x78
 80031ac:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80031b0:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <get_st_biases+0x2b8>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	7818      	ldrb	r0, [r3, #0]
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <get_st_biases+0x2b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	7959      	ldrb	r1, [r3, #5]
 80031bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031c0:	2201      	movs	r2, #1
 80031c2:	f7fd ffdb 	bl	800117c <i2cWrite>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <get_st_biases+0x266>
        return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d0:	e23a      	b.n	8003648 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 80031d2:	2332      	movs	r3, #50	; 0x32
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 fa03 	bl	80055e0 <HAL_Delay>
    data[0] = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <get_st_biases+0x2b8>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	7818      	ldrb	r0, [r3, #0]
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <get_st_biases+0x2b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	7959      	ldrb	r1, [r3, #5]
 80031ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031f0:	2201      	movs	r2, #1
 80031f2:	f7fd ffc3 	bl	800117c <i2cWrite>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <get_st_biases+0x296>
        return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003200:	e222      	b.n	8003648 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <get_st_biases+0x2b8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	7818      	ldrb	r0, [r3, #0]
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <get_st_biases+0x2b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	7a99      	ldrb	r1, [r3, #10]
 800320e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003212:	2202      	movs	r2, #2
 8003214:	f7fd ffd6 	bl	80011c4 <i2cRead>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <get_st_biases+0x2bc>
        return -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003222:	e211      	b.n	8003648 <get_st_biases+0x6dc>
 8003224:	20000010 	.word	0x20000010

    fifo_count = (data[0] << 8) | data[1];
 8003228:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	b21a      	sxth	r2, r3
 8003230:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003234:	b21b      	sxth	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b21b      	sxth	r3, r3
 800323a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800323e:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <get_st_biases+0x34c>)
 8003244:	fba3 2302 	umull	r2, r3, r3, r2
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	b29b      	uxth	r3, r3
 800324c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8003250:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003254:	f103 0108 	add.w	r1, r3, #8
 8003258:	2300      	movs	r3, #0
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	680b      	ldr	r3, [r1, #0]
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800326c:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 800326e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003272:	f103 0108 	add.w	r1, r3, #8
 8003276:	2300      	movs	r3, #0
 8003278:	600b      	str	r3, [r1, #0]
 800327a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	680b      	ldr	r3, [r1, #0]
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800328a:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800328c:	2300      	movs	r3, #0
 800328e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003292:	e0a0      	b.n	80033d6 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <get_st_biases+0x350>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	7818      	ldrb	r0, [r3, #0]
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <get_st_biases+0x350>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	7ad9      	ldrb	r1, [r3, #11]
 80032a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032a4:	220c      	movs	r2, #12
 80032a6:	f7fd ff8d 	bl	80011c4 <i2cRead>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <get_st_biases+0x354>
            return -1;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b4:	e1c8      	b.n	8003648 <get_st_biases+0x6dc>
 80032b6:	bf00      	nop
 80032b8:	aaaaaaab 	.word	0xaaaaaaab
 80032bc:	20000010 	.word	0x20000010
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 80032c0:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b21b      	sxth	r3, r3
 80032d2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 80032d6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	b21a      	sxth	r2, r3
 80032de:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	4313      	orrs	r3, r2
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 80032ec:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 8003302:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800330c:	441a      	add	r2, r3
 800330e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003312:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8003314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003318:	3304      	adds	r3, #4
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8003320:	4618      	mov	r0, r3
 8003322:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	180b      	adds	r3, r1, r0
 800332a:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800332c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003330:	3308      	adds	r3, #8
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8003338:	4618      	mov	r0, r3
 800333a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800333e:	f103 0208 	add.w	r2, r3, #8
 8003342:	180b      	adds	r3, r1, r0
 8003344:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8003346:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	b21a      	sxth	r2, r3
 800334e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003352:	b21b      	sxth	r3, r3
 8003354:	4313      	orrs	r3, r2
 8003356:	b21b      	sxth	r3, r3
 8003358:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800335c:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	b21a      	sxth	r2, r3
 8003364:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003368:	b21b      	sxth	r3, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	b21b      	sxth	r3, r3
 800336e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8003372:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b21a      	sxth	r2, r3
 800337a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800337e:	b21b      	sxth	r3, r3
 8003380:	4313      	orrs	r3, r2
 8003382:	b21b      	sxth	r3, r3
 8003384:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 8003388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8003392:	441a      	add	r2, r3
 8003394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003398:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800339a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800339e:	3304      	adds	r3, #4
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 80033a6:	4618      	mov	r0, r3
 80033a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	180b      	adds	r3, r1, r0
 80033b0:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 80033b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b6:	3308      	adds	r3, #8
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80033be:	4618      	mov	r0, r3
 80033c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033c4:	f103 0208 	add.w	r2, r3, #8
 80033c8:	180b      	adds	r3, r1, r0
 80033ca:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 80033cc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80033d0:	3301      	adds	r3, #1
 80033d2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80033d6:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 80033da:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80033de:	429a      	cmp	r2, r3
 80033e0:	f4ff af58 	bcc.w	8003294 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 80033e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	17da      	asrs	r2, r3, #31
 80033ec:	461c      	mov	r4, r3
 80033ee:	4615      	mov	r5, r2
 80033f0:	1423      	asrs	r3, r4, #16
 80033f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033f6:	0423      	lsls	r3, r4, #16
 80033f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033fc:	2283      	movs	r2, #131	; 0x83
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003408:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800340c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003410:	f7fd fc22 	bl	8000c58 <__aeabi_ldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800342a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800342e:	f7fd fc13 	bl	8000c58 <__aeabi_ldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800343a:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800343c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	17da      	asrs	r2, r3, #31
 8003446:	4698      	mov	r8, r3
 8003448:	4691      	mov	r9, r2
 800344a:	ea4f 4328 	mov.w	r3, r8, asr #16
 800344e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003452:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8003456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800345a:	2283      	movs	r2, #131	; 0x83
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003466:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800346a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800346e:	f7fd fbf3 	bl	8000c58 <__aeabi_ldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800347e:	2200      	movs	r2, #0
 8003480:	67bb      	str	r3, [r7, #120]	; 0x78
 8003482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003484:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003488:	f7fd fbe6 	bl	8000c58 <__aeabi_ldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003498:	1d1a      	adds	r2, r3, #4
 800349a:	4603      	mov	r3, r0
 800349c:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800349e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034a2:	3308      	adds	r3, #8
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	17da      	asrs	r2, r3, #31
 80034a8:	469a      	mov	sl, r3
 80034aa:	4693      	mov	fp, r2
 80034ac:	ea4f 432a 	mov.w	r3, sl, asr #16
 80034b0:	677b      	str	r3, [r7, #116]	; 0x74
 80034b2:	ea4f 430a 	mov.w	r3, sl, lsl #16
 80034b6:	673b      	str	r3, [r7, #112]	; 0x70
 80034b8:	2283      	movs	r2, #131	; 0x83
 80034ba:	2300      	movs	r3, #0
 80034bc:	66ba      	str	r2, [r7, #104]	; 0x68
 80034be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80034c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80034c8:	f7fd fbc6 	bl	8000c58 <__aeabi_ldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80034d8:	2200      	movs	r2, #0
 80034da:	663b      	str	r3, [r7, #96]	; 0x60
 80034dc:	667a      	str	r2, [r7, #100]	; 0x64
 80034de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80034e2:	f7fd fbb9 	bl	8000c58 <__aeabi_ldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034f2:	f103 0208 	add.w	r2, r3, #8
 80034f6:	4603      	mov	r3, r0
 80034f8:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 80034fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	17da      	asrs	r2, r3, #31
 8003502:	65bb      	str	r3, [r7, #88]	; 0x58
 8003504:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003506:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800350a:	460b      	mov	r3, r1
 800350c:	141b      	asrs	r3, r3, #16
 800350e:	657b      	str	r3, [r7, #84]	; 0x54
 8003510:	460b      	mov	r3, r1
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	653b      	str	r3, [r7, #80]	; 0x50
 8003516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351a:	2300      	movs	r3, #0
 800351c:	64ba      	str	r2, [r7, #72]	; 0x48
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003524:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003528:	f7fd fb96 	bl	8000c58 <__aeabi_ldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003538:	2200      	movs	r2, #0
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
 800353c:	647a      	str	r2, [r7, #68]	; 0x44
 800353e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003542:	f7fd fb89 	bl	8000c58 <__aeabi_ldivmod>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800354e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8003550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003554:	3304      	adds	r3, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	17da      	asrs	r2, r3, #31
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
 800355c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800355e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003562:	460b      	mov	r3, r1
 8003564:	141b      	asrs	r3, r3, #16
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
 8003568:	460b      	mov	r3, r1
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
 800356e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003572:	2300      	movs	r3, #0
 8003574:	62ba      	str	r2, [r7, #40]	; 0x28
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003580:	f7fd fb6a 	bl	8000c58 <__aeabi_ldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003590:	2200      	movs	r2, #0
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	627a      	str	r2, [r7, #36]	; 0x24
 8003596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800359a:	f7fd fb5d 	bl	8000c58 <__aeabi_ldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035aa:	3304      	adds	r3, #4
 80035ac:	4602      	mov	r2, r0
 80035ae:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 80035b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035b4:	3308      	adds	r3, #8
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	17da      	asrs	r2, r3, #31
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	61fa      	str	r2, [r7, #28]
 80035be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035c2:	460b      	mov	r3, r1
 80035c4:	141b      	asrs	r3, r3, #16
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	460b      	mov	r3, r1
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035d2:	2300      	movs	r3, #0
 80035d4:	60ba      	str	r2, [r7, #8]
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e0:	f7fd fb3a 	bl	8000c58 <__aeabi_ldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80035f0:	2200      	movs	r2, #0
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035fa:	f7fd fb2d 	bl	8000c58 <__aeabi_ldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800360a:	3308      	adds	r3, #8
 800360c:	4602      	mov	r2, r0
 800360e:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8003610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003614:	3308      	adds	r3, #8
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	dd0a      	ble.n	8003632 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 800361c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003620:	3308      	adds	r3, #8
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003628:	3308      	adds	r3, #8
 800362a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e009      	b.n	8003646 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 8003632:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003636:	3308      	adds	r3, #8
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800363e:	3308      	adds	r3, #8
 8003640:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003644:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	37e0      	adds	r7, #224	; 0xe0
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003652:	bf00      	nop

08003654 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 800365e:	2302      	movs	r3, #2
 8003660:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <mpu_run_self_test+0x1a4>)
 8003666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 800366e:	2000      	movs	r0, #0
 8003670:	f000 f9e6 	bl	8003a40 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800367a:	e002      	b.n	8003682 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fd7c 	bl	8002184 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800368c:	f107 030f 	add.w	r3, r7, #15
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe fdff 	bl	8002294 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fe9c 	bl	80023d8 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 80036a0:	f107 030a 	add.w	r3, r7, #10
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe ff23 	bl	80024f0 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 80036aa:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <mpu_run_self_test+0x1a4>)
 80036ac:	7a9b      	ldrb	r3, [r3, #10]
 80036ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 80036b2:	f107 030e 	add.w	r3, r7, #14
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff f810 	bl	80026dc <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
 80036c0:	e00a      	b.n	80036d8 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 80036c2:	2200      	movs	r2, #0
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fc50 	bl	8002f6c <get_st_biases>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	3301      	adds	r3, #1
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
 80036d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036de:	429a      	cmp	r2, r3
 80036e0:	dbef      	blt.n	80036c2 <mpu_run_self_test+0x6e>
 80036e2:	e000      	b.n	80036e6 <mpu_run_self_test+0x92>
            break;
 80036e4:	bf00      	nop
    if (ii == tries) {
 80036e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d102      	bne.n	80036f6 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 80036f4:	e045      	b.n	8003782 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
 80036fa:	e00d      	b.n	8003718 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 80036fc:	f107 0110 	add.w	r1, r7, #16
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	2201      	movs	r2, #1
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fc30 	bl	8002f6c <get_st_biases>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	3301      	adds	r3, #1
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
 8003718:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800371c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371e:	429a      	cmp	r2, r3
 8003720:	dbec      	blt.n	80036fc <mpu_run_self_test+0xa8>
 8003722:	e000      	b.n	8003726 <mpu_run_self_test+0xd2>
            break;
 8003724:	bf00      	nop
    if (ii == tries) {
 8003726:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800372a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372c:	429a      	cmp	r2, r3
 800372e:	d102      	bne.n	8003736 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003734:	e025      	b.n	8003782 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	4619      	mov	r1, r3
 800373c:	6838      	ldr	r0, [r7, #0]
 800373e:	f7ff fad1 	bl	8002ce4 <accel_self_test>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8003748:	f107 031c 	add.w	r3, r7, #28
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fb4c 	bl	8002dec <gyro_self_test>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 800375e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <mpu_run_self_test+0x11a>
        result |= 0x01;
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 800376e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
 800377e:	e000      	b.n	8003782 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003780:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <mpu_run_self_test+0x1a4>)
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <mpu_run_self_test+0x1a4>)
 800378a:	22ff      	movs	r2, #255	; 0xff
 800378c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <mpu_run_self_test+0x1a4>)
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <mpu_run_self_test+0x1a4>)
 8003796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800379a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <mpu_run_self_test+0x1a4>)
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <mpu_run_self_test+0x1a4>)
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <mpu_run_self_test+0x1a4>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 80037ae:	89bb      	ldrh	r3, [r7, #12]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fd1b 	bl	80021ec <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fda5 	bl	8002308 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 80037be:	893b      	ldrh	r3, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fe47 	bl	8002454 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe feab 	bl	8002524 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 80037ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe ffe6 	bl	80027a4 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe ff90 	bl	8002700 <mpu_configure_fifo>

    if (dmp_was_on)
 80037e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 80037e8:	2001      	movs	r0, #1
 80037ea:	f000 f929 	bl	8003a40 <mpu_set_dmp_state>

    return result;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3738      	adds	r7, #56	; 0x38
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000010 	.word	0x20000010

080037fc <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	603a      	str	r2, [r7, #0]
 8003806:	80fb      	strh	r3, [r7, #6]
 8003808:	460b      	mov	r3, r1
 800380a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <mpu_write_mem+0x1c>
        return -1;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003816:	e03d      	b.n	8003894 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <mpu_write_mem+0xa0>)
 800381a:	7a9b      	ldrb	r3, [r3, #10]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <mpu_write_mem+0x2a>
        return -1;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003824:	e036      	b.n	8003894 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	b29b      	uxth	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003836:	7b7b      	ldrb	r3, [r7, #13]
 8003838:	461a      	mov	r2, r3
 800383a:	88bb      	ldrh	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <mpu_write_mem+0xa0>)
 8003840:	6852      	ldr	r2, [r2, #4]
 8003842:	8952      	ldrh	r2, [r2, #10]
 8003844:	4293      	cmp	r3, r2
 8003846:	dd02      	ble.n	800384e <mpu_write_mem+0x52>
        return -1;
 8003848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384c:	e022      	b.n	8003894 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <mpu_write_mem+0xa0>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	7818      	ldrb	r0, [r3, #0]
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <mpu_write_mem+0xa0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	7e19      	ldrb	r1, [r3, #24]
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	2202      	movs	r2, #2
 8003860:	f7fd fc8c 	bl	800117c <i2cWrite>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <mpu_write_mem+0x74>
        return -1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800386e:	e011      	b.n	8003894 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <mpu_write_mem+0xa0>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	7818      	ldrb	r0, [r3, #0]
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <mpu_write_mem+0xa0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	7d59      	ldrb	r1, [r3, #21]
 800387c:	88bb      	ldrh	r3, [r7, #4]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f7fd fc7b 	bl	800117c <i2cWrite>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <mpu_write_mem+0x96>
        return -1;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003890:	e000      	b.n	8003894 <mpu_write_mem+0x98>
    return 0;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000010 	.word	0x20000010

080038a0 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	603a      	str	r2, [r7, #0]
 80038aa:	80fb      	strh	r3, [r7, #6]
 80038ac:	460b      	mov	r3, r1
 80038ae:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <mpu_read_mem+0x1c>
        return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ba:	e03d      	b.n	8003938 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 80038bc:	4b20      	ldr	r3, [pc, #128]	; (8003940 <mpu_read_mem+0xa0>)
 80038be:	7a9b      	ldrb	r3, [r3, #10]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <mpu_read_mem+0x2a>
        return -1;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c8:	e036      	b.n	8003938 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80038da:	7b7b      	ldrb	r3, [r7, #13]
 80038dc:	461a      	mov	r2, r3
 80038de:	88bb      	ldrh	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <mpu_read_mem+0xa0>)
 80038e4:	6852      	ldr	r2, [r2, #4]
 80038e6:	8952      	ldrh	r2, [r2, #10]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	dd02      	ble.n	80038f2 <mpu_read_mem+0x52>
        return -1;
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f0:	e022      	b.n	8003938 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <mpu_read_mem+0xa0>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	7818      	ldrb	r0, [r3, #0]
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <mpu_read_mem+0xa0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	7e19      	ldrb	r1, [r3, #24]
 80038fe:	f107 030c 	add.w	r3, r7, #12
 8003902:	2202      	movs	r2, #2
 8003904:	f7fd fc3a 	bl	800117c <i2cWrite>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <mpu_read_mem+0x74>
        return -1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003912:	e011      	b.n	8003938 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <mpu_read_mem+0xa0>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	7818      	ldrb	r0, [r3, #0]
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <mpu_read_mem+0xa0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	7d59      	ldrb	r1, [r3, #21]
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f7fd fc4d 	bl	80011c4 <i2cRead>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <mpu_read_mem+0x96>
        return -1;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003934:	e000      	b.n	8003938 <mpu_read_mem+0x98>
    return 0;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000010 	.word	0x20000010

08003944 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	4611      	mov	r1, r2
 800394e:	461a      	mov	r2, r3
 8003950:	4603      	mov	r3, r0
 8003952:	81fb      	strh	r3, [r7, #14]
 8003954:	460b      	mov	r3, r1
 8003956:	81bb      	strh	r3, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <mpu_load_firmware+0xf8>)
 800395e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800396a:	e062      	b.n	8003a32 <mpu_load_firmware+0xee>

    if (!firmware)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <mpu_load_firmware+0x34>
        return -1;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003976:	e05c      	b.n	8003a32 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003978:	2300      	movs	r3, #0
 800397a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800397c:	e034      	b.n	80039e8 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800397e:	89fa      	ldrh	r2, [r7, #14]
 8003980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b10      	cmp	r3, #16
 8003986:	bfa8      	it	ge
 8003988:	2310      	movge	r3, #16
 800398a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800398c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	441a      	add	r2, r3
 8003992:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff30 	bl	80037fc <mpu_write_mem>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <mpu_load_firmware+0x64>
            return -1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039a6:	e044      	b.n	8003a32 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 80039a8:	f107 0214 	add.w	r2, r7, #20
 80039ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80039ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff75 	bl	80038a0 <mpu_read_mem>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <mpu_load_firmware+0x7e>
            return -1;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c0:	e037      	b.n	8003a32 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 80039c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4413      	add	r3, r2
 80039c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039ca:	f107 0114 	add.w	r1, r7, #20
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 faa8 	bl	8008f24 <memcmp>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <mpu_load_firmware+0x9c>
            return -2;
 80039da:	f06f 0301 	mvn.w	r3, #1
 80039de:	e028      	b.n	8003a32 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80039e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039e4:	4413      	add	r3, r2
 80039e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3c6      	bcc.n	800397e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80039f0:	89bb      	ldrh	r3, [r7, #12]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80039fa:	89bb      	ldrh	r3, [r7, #12]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <mpu_load_firmware+0xf8>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	7818      	ldrb	r0, [r3, #0]
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <mpu_load_firmware+0xf8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	7e99      	ldrb	r1, [r3, #26]
 8003a0c:	f107 0310 	add.w	r3, r7, #16
 8003a10:	2202      	movs	r2, #2
 8003a12:	f7fd fbb3 	bl	800117c <i2cWrite>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <mpu_load_firmware+0xde>
        return -1;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a20:	e007      	b.n	8003a32 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <mpu_load_firmware+0xf8>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003a2a:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <mpu_load_firmware+0xf8>)
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3728      	adds	r7, #40	; 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000010 	.word	0x20000010

08003a40 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003a4a:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a50:	79fa      	ldrb	r2, [r7, #7]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d101      	bne.n	8003a5a <mpu_set_dmp_state+0x1a>
        return 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e040      	b.n	8003adc <mpu_set_dmp_state+0x9c>

    if (enable) {
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d027      	beq.n	8003ab0 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <mpu_set_dmp_state+0x30>
            return -1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6e:	e035      	b.n	8003adc <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003a70:	2000      	movs	r0, #0
 8003a72:	f7fe f8b1 	bl	8001bd8 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7fe ff9c 	bl	80029b4 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fd4f 	bl	8002524 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	7818      	ldrb	r0, [r3, #0]
 8003a90:	f107 030f 	add.w	r3, r7, #15
 8003a94:	2201      	movs	r2, #1
 8003a96:	2123      	movs	r1, #35	; 0x23
 8003a98:	f7fd fb70 	bl	800117c <i2cWrite>
        st.chip_cfg.dmp_on = 1;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f7fe f897 	bl	8001bd8 <set_int_enable>
        mpu_reset_fifo();
 8003aaa:	f7fe fa6d 	bl	8001f88 <mpu_reset_fifo>
 8003aae:	e014      	b.n	8003ada <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f7fe f891 	bl	8001bd8 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003ab8:	7c1b      	ldrb	r3, [r3, #16]
 8003aba:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	7818      	ldrb	r0, [r3, #0]
 8003ac2:	f107 030f 	add.w	r3, r7, #15
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2123      	movs	r1, #35	; 0x23
 8003aca:	f7fd fb57 	bl	800117c <i2cWrite>
        st.chip_cfg.dmp_on = 0;
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <mpu_set_dmp_state+0xa4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8003ad6:	f7fe fa57 	bl	8001f88 <mpu_reset_fifo>
    }
    return 0;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000010 	.word	0x20000010

08003ae8 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8003b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b04:	23c8      	movs	r3, #200	; 0xc8
 8003b06:	4904      	ldr	r1, [pc, #16]	; (8003b18 <dmp_load_motion_driver_firmware+0x1c>)
 8003b08:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8003b0c:	f7ff ff1a 	bl	8003944 <mpu_load_firmware>
 8003b10:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0800bad8 	.word	0x0800bad8

08003b1c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003b26:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <dmp_set_orientation+0x1c4>)
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	8019      	strh	r1, [r3, #0]
 8003b32:	3302      	adds	r3, #2
 8003b34:	0c12      	lsrs	r2, r2, #16
 8003b36:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <dmp_set_orientation+0x1c8>)
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4611      	mov	r1, r2
 8003b42:	8019      	strh	r1, [r3, #0]
 8003b44:	3302      	adds	r3, #2
 8003b46:	0c12      	lsrs	r2, r2, #16
 8003b48:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003b4a:	4a67      	ldr	r2, [pc, #412]	; (8003ce8 <dmp_set_orientation+0x1cc>)
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	4611      	mov	r1, r2
 8003b54:	8019      	strh	r1, [r3, #0]
 8003b56:	3302      	adds	r3, #2
 8003b58:	0c12      	lsrs	r2, r2, #16
 8003b5a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003b5c:	4a63      	ldr	r2, [pc, #396]	; (8003cec <dmp_set_orientation+0x1d0>)
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	4611      	mov	r1, r2
 8003b66:	8019      	strh	r1, [r3, #0]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	0c12      	lsrs	r2, r2, #16
 8003b6c:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	3320      	adds	r3, #32
 8003b76:	443b      	add	r3, r7
 8003b78:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b7c:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	3320      	adds	r3, #32
 8003b8a:	443b      	add	r3, r7
 8003b8c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b90:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	443b      	add	r3, r7
 8003ba0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ba4:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3320      	adds	r3, #32
 8003bae:	443b      	add	r3, r7
 8003bb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003bb4:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	3320      	adds	r3, #32
 8003bc2:	443b      	add	r3, r7
 8003bc4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003bc8:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	099b      	lsrs	r3, r3, #6
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	3320      	adds	r3, #32
 8003bd6:	443b      	add	r3, r7
 8003bd8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003bdc:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	461a      	mov	r2, r3
 8003be4:	2103      	movs	r1, #3
 8003be6:	f240 4026 	movw	r0, #1062	; 0x426
 8003bea:	f7ff fe07 	bl	80037fc <mpu_write_mem>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <dmp_set_orientation+0xde>
        return -1;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bf8:	e06e      	b.n	8003cd8 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003bfa:	f107 0318 	add.w	r3, r7, #24
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2103      	movs	r1, #3
 8003c02:	f240 402a 	movw	r0, #1066	; 0x42a
 8003c06:	f7ff fdf9 	bl	80037fc <mpu_write_mem>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <dmp_set_orientation+0xfa>
        return -1;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c14:	e060      	b.n	8003cd8 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003c16:	f107 031c 	add.w	r3, r7, #28
 8003c1a:	f107 020c 	add.w	r2, r7, #12
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	4611      	mov	r1, r2
 8003c22:	8019      	strh	r1, [r3, #0]
 8003c24:	3302      	adds	r3, #2
 8003c26:	0c12      	lsrs	r2, r2, #16
 8003c28:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003c2a:	f107 0318 	add.w	r3, r7, #24
 8003c2e:	f107 0208 	add.w	r2, r7, #8
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	4611      	mov	r1, r2
 8003c36:	8019      	strh	r1, [r3, #0]
 8003c38:	3302      	adds	r3, #2
 8003c3a:	0c12      	lsrs	r2, r2, #16
 8003c3c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003c48:	7f3b      	ldrb	r3, [r7, #28]
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8003c52:	7e3b      	ldrb	r3, [r7, #24]
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8003c66:	7f7b      	ldrb	r3, [r7, #29]
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8003c70:	7e7b      	ldrb	r3, [r7, #25]
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8003c84:	7fbb      	ldrb	r3, [r7, #30]
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8003c8e:	7ebb      	ldrb	r3, [r7, #26]
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003c98:	f107 031c 	add.w	r3, r7, #28
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8003ca4:	f7ff fdaa 	bl	80037fc <mpu_write_mem>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <dmp_set_orientation+0x198>
        return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cb2:	e011      	b.n	8003cd8 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8003cb4:	f107 0318 	add.w	r3, r7, #24
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2103      	movs	r1, #3
 8003cbc:	f240 4031 	movw	r0, #1073	; 0x431
 8003cc0:	f7ff fd9c 	bl	80037fc <mpu_write_mem>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <dmp_set_orientation+0x1b4>
        return -1;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cce:	e003      	b.n	8003cd8 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8003cd0:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <dmp_set_orientation+0x1d4>)
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	8113      	strh	r3, [r2, #8]
    return 0;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	0800b9d0 	.word	0x0800b9d0
 8003ce4:	0800b9d4 	.word	0x0800b9d4
 8003ce8:	0800b9d8 	.word	0x0800b9d8
 8003cec:	0800b9dc 	.word	0x0800b9dc
 8003cf0:	200002d0 	.word	0x200002d0

08003cf4 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b08c      	sub	sp, #48	; 0x30
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8003cfe:	4b80      	ldr	r3, [pc, #512]	; (8003f00 <dmp_set_gyro_bias+0x20c>)
 8003d00:	891b      	ldrh	r3, [r3, #8]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 8003d10:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <dmp_set_gyro_bias+0x20c>)
 8003d12:	891b      	ldrh	r3, [r3, #8]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	425b      	negs	r3, r3
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003d22:	4b77      	ldr	r3, [pc, #476]	; (8003f00 <dmp_set_gyro_bias+0x20c>)
 8003d24:	891b      	ldrh	r3, [r3, #8]
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 8003d38:	4b71      	ldr	r3, [pc, #452]	; (8003f00 <dmp_set_gyro_bias+0x20c>)
 8003d3a:	891b      	ldrh	r3, [r3, #8]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	425b      	negs	r3, r3
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <dmp_set_gyro_bias+0x20c>)
 8003d4c:	891b      	ldrh	r3, [r3, #8]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 8003d60:	4b67      	ldr	r3, [pc, #412]	; (8003f00 <dmp_set_gyro_bias+0x20c>)
 8003d62:	891b      	ldrh	r3, [r3, #8]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	425b      	negs	r3, r3
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	17da      	asrs	r2, r3, #31
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	617a      	str	r2, [r7, #20]
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <dmp_set_gyro_bias+0x210>)
 8003d7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d80:	460a      	mov	r2, r1
 8003d82:	fb03 f202 	mul.w	r2, r3, r2
 8003d86:	2300      	movs	r3, #0
 8003d88:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	4a5b      	ldr	r2, [pc, #364]	; (8003f04 <dmp_set_gyro_bias+0x210>)
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	fba1 ab02 	umull	sl, fp, r1, r2
 8003d9c:	445b      	add	r3, fp
 8003d9e:	469b      	mov	fp, r3
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003dac:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003db0:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003db4:	4613      	mov	r3, r2
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	17da      	asrs	r2, r3, #31
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	60fa      	str	r2, [r7, #12]
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <dmp_set_gyro_bias+0x210>)
 8003dc2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003dc6:	465a      	mov	r2, fp
 8003dc8:	fb03 f202 	mul.w	r2, r3, r2
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4651      	mov	r1, sl
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4a4b      	ldr	r2, [pc, #300]	; (8003f04 <dmp_set_gyro_bias+0x210>)
 8003dd8:	4651      	mov	r1, sl
 8003dda:	fba1 8902 	umull	r8, r9, r1, r2
 8003dde:	444b      	add	r3, r9
 8003de0:	4699      	mov	r9, r3
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003dee:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003df2:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003df6:	4613      	mov	r3, r2
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	17da      	asrs	r2, r3, #31
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <dmp_set_gyro_bias+0x210>)
 8003e04:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003e08:	464a      	mov	r2, r9
 8003e0a:	fb03 f202 	mul.w	r2, r3, r2
 8003e0e:	2300      	movs	r3, #0
 8003e10:	4641      	mov	r1, r8
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	4a3a      	ldr	r2, [pc, #232]	; (8003f04 <dmp_set_gyro_bias+0x210>)
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	fba1 4502 	umull	r4, r5, r1, r2
 8003e20:	442b      	add	r3, r5
 8003e22:	461d      	mov	r5, r3
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	0fa2      	lsrs	r2, r4, #30
 8003e2e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003e32:	17ab      	asrs	r3, r5, #30
 8003e34:	4613      	mov	r3, r2
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	161b      	asrs	r3, r3, #24
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	141b      	asrs	r3, r3, #16
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	121b      	asrs	r3, r3, #8
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8003e5e:	f107 0320 	add.w	r3, r7, #32
 8003e62:	461a      	mov	r2, r3
 8003e64:	2104      	movs	r1, #4
 8003e66:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 8003e6a:	f7ff fcc7 	bl	80037fc <mpu_write_mem>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <dmp_set_gyro_bias+0x186>
        return -1;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e78:	e03c      	b.n	8003ef4 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	161b      	asrs	r3, r3, #24
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	141b      	asrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	121b      	asrs	r3, r3, #8
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8003ea0:	f107 0320 	add.w	r3, r7, #32
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 8003eac:	f7ff fca6 	bl	80037fc <mpu_write_mem>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <dmp_set_gyro_bias+0x1c8>
        return -1;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eba:	e01b      	b.n	8003ef4 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	161b      	asrs	r3, r3, #24
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	141b      	asrs	r3, r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	121b      	asrs	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8003ee2:	f107 0320 	add.w	r3, r7, #32
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2104      	movs	r1, #4
 8003eea:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 8003eee:	f7ff fc85 	bl	80037fc <mpu_write_mem>
 8003ef2:	4603      	mov	r3, r0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3730      	adds	r7, #48	; 0x30
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efe:	bf00      	nop
 8003f00:	200002d0 	.word	0x200002d0
 8003f04:	02cae309 	.word	0x02cae309

08003f08 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f0c:	b094      	sub	sp, #80	; 0x50
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8003f12:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fba2 	bl	8002660 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	61fa      	str	r2, [r7, #28]
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	03cb      	lsls	r3, r1, #15
 8003f32:	69b9      	ldr	r1, [r7, #24]
 8003f34:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	03ca      	lsls	r2, r1, #15
 8003f3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 8003f40:	4b71      	ldr	r3, [pc, #452]	; (8004108 <dmp_set_accel_bias+0x200>)
 8003f42:	891b      	ldrh	r3, [r3, #8]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	4413      	add	r3, r2
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <dmp_set_accel_bias+0x200>)
 8003f54:	891b      	ldrh	r3, [r3, #8]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	425b      	negs	r3, r3
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003f64:	4b68      	ldr	r3, [pc, #416]	; (8004108 <dmp_set_accel_bias+0x200>)
 8003f66:	891b      	ldrh	r3, [r3, #8]
 8003f68:	08db      	lsrs	r3, r3, #3
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	4413      	add	r3, r2
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <dmp_set_accel_bias+0x200>)
 8003f7c:	891b      	ldrh	r3, [r3, #8]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	425b      	negs	r3, r3
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <dmp_set_accel_bias+0x200>)
 8003f8e:	891b      	ldrh	r3, [r3, #8]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	4413      	add	r3, r2
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 8003fa2:	4b59      	ldr	r3, [pc, #356]	; (8004108 <dmp_set_accel_bias+0x200>)
 8003fa4:	891b      	ldrh	r3, [r3, #8]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 8003fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	17da      	asrs	r2, r3, #31
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	617a      	str	r2, [r7, #20]
 8003fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fc2:	460a      	mov	r2, r1
 8003fc4:	fb02 f203 	mul.w	r2, r2, r3
 8003fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fca:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003fce:	4601      	mov	r1, r0
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd8:	6939      	ldr	r1, [r7, #16]
 8003fda:	fba2 ab01 	umull	sl, fp, r2, r1
 8003fde:	445b      	add	r3, fp
 8003fe0:	469b      	mov	fp, r3
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003fee:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003ff2:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	17da      	asrs	r2, r3, #31
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	60fa      	str	r2, [r7, #12]
 8004002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004004:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004008:	465a      	mov	r2, fp
 800400a:	fb02 f203 	mul.w	r2, r2, r3
 800400e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004010:	4651      	mov	r1, sl
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401a:	4651      	mov	r1, sl
 800401c:	fba2 8901 	umull	r8, r9, r2, r1
 8004020:	444b      	add	r3, r9
 8004022:	4699      	mov	r9, r3
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8004030:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8004034:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8004038:	4613      	mov	r3, r2
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 800403c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403e:	17da      	asrs	r2, r3, #31
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004046:	e9d7 8900 	ldrd	r8, r9, [r7]
 800404a:	464a      	mov	r2, r9
 800404c:	fb02 f203 	mul.w	r2, r2, r3
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	4641      	mov	r1, r8
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405c:	4641      	mov	r1, r8
 800405e:	fba2 4501 	umull	r4, r5, r2, r1
 8004062:	442b      	add	r3, r5
 8004064:	461d      	mov	r5, r3
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	0fa2      	lsrs	r2, r4, #30
 8004070:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004074:	17ab      	asrs	r3, r5, #30
 8004076:	4613      	mov	r3, r2
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 800407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407c:	161b      	asrs	r3, r3, #24
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	141b      	asrs	r3, r3, #16
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800408e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004090:	121b      	asrs	r3, r3, #8
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a2:	161b      	asrs	r3, r3, #24
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80040aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ac:	141b      	asrs	r3, r3, #16
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80040b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b6:	121b      	asrs	r3, r3, #8
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	161b      	asrs	r3, r3, #24
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	141b      	asrs	r3, r3, #16
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 80040da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040dc:	121b      	asrs	r3, r3, #8
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 80040e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 80040ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f0:	461a      	mov	r2, r3
 80040f2:	210c      	movs	r1, #12
 80040f4:	f44f 7025 	mov.w	r0, #660	; 0x294
 80040f8:	f7ff fb80 	bl	80037fc <mpu_write_mem>
 80040fc:	4603      	mov	r3, r0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3750      	adds	r7, #80	; 0x50
 8004102:	46bd      	mov	sp, r7
 8004104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004108:	200002d0 	.word	0x200002d0

0800410c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8004116:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <dmp_set_fifo_rate+0x88>)
 8004118:	f107 0310 	add.w	r3, r7, #16
 800411c:	ca07      	ldmia	r2, {r0, r1, r2}
 800411e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2bc8      	cmp	r3, #200	; 0xc8
 8004126:	d902      	bls.n	800412e <dmp_set_fifo_rate+0x22>
        return -1;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800412c:	e02e      	b.n	800418c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	22c8      	movs	r2, #200	; 0xc8
 8004132:	fb92 f3f3 	sdiv	r3, r2, r3
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800413c:	8bfb      	ldrh	r3, [r7, #30]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8004146:	8bfb      	ldrh	r3, [r7, #30]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	461a      	mov	r2, r3
 8004152:	2102      	movs	r1, #2
 8004154:	f240 2016 	movw	r0, #534	; 0x216
 8004158:	f7ff fb50 	bl	80037fc <mpu_write_mem>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <dmp_set_fifo_rate+0x5c>
        return -1;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004166:	e011      	b.n	800418c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	461a      	mov	r2, r3
 800416e:	210c      	movs	r1, #12
 8004170:	f640 20c1 	movw	r0, #2753	; 0xac1
 8004174:	f7ff fb42 	bl	80037fc <mpu_write_mem>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <dmp_set_fifo_rate+0x78>
        return -1;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004182:	e003      	b.n	800418c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <dmp_set_fifo_rate+0x8c>)
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	8193      	strh	r3, [r2, #12]
    return 0;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0800b9e0 	.word	0x0800b9e0
 8004198:	200002d0 	.word	0x200002d0

0800419c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	460a      	mov	r2, r1
 80041a6:	71fb      	strb	r3, [r7, #7]
 80041a8:	4613      	mov	r3, r2
 80041aa:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <dmp_set_tap_thresh+0x22>
 80041b6:	88bb      	ldrh	r3, [r7, #4]
 80041b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041bc:	d902      	bls.n	80041c4 <dmp_set_tap_thresh+0x28>
        return -1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c2:	e10b      	b.n	80043dc <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80041c4:	88bb      	ldrh	r3, [r7, #4]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ce:	eddf 6a85 	vldr	s13, [pc, #532]	; 80043e4 <dmp_set_tap_thresh+0x248>
 80041d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041d6:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 80041da:	f107 030b 	add.w	r3, r7, #11
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe f858 	bl	8002294 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	3b02      	subs	r3, #2
 80041e8:	2b0e      	cmp	r3, #14
 80041ea:	d87d      	bhi.n	80042e8 <dmp_set_tap_thresh+0x14c>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <dmp_set_tap_thresh+0x58>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004231 	.word	0x08004231
 80041f8:	080042e9 	.word	0x080042e9
 80041fc:	0800425f 	.word	0x0800425f
 8004200:	080042e9 	.word	0x080042e9
 8004204:	080042e9 	.word	0x080042e9
 8004208:	080042e9 	.word	0x080042e9
 800420c:	0800428d 	.word	0x0800428d
 8004210:	080042e9 	.word	0x080042e9
 8004214:	080042e9 	.word	0x080042e9
 8004218:	080042e9 	.word	0x080042e9
 800421c:	080042e9 	.word	0x080042e9
 8004220:	080042e9 	.word	0x080042e9
 8004224:	080042e9 	.word	0x080042e9
 8004228:	080042e9 	.word	0x080042e9
 800422c:	080042bb 	.word	0x080042bb
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8004230:	edd7 7a04 	vldr	s15, [r7, #16]
 8004234:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80043e8 <dmp_set_tap_thresh+0x24c>
 8004238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004240:	ee17 3a90 	vmov	r3, s15
 8004244:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8004246:	edd7 7a04 	vldr	s15, [r7, #16]
 800424a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80043ec <dmp_set_tap_thresh+0x250>
 800424e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004256:	ee17 3a90 	vmov	r3, s15
 800425a:	82bb      	strh	r3, [r7, #20]
        break;
 800425c:	e047      	b.n	80042ee <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800425e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004262:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80043f0 <dmp_set_tap_thresh+0x254>
 8004266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	ee17 3a90 	vmov	r3, s15
 8004272:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004274:	edd7 7a04 	vldr	s15, [r7, #16]
 8004278:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80043f4 <dmp_set_tap_thresh+0x258>
 800427c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004284:	ee17 3a90 	vmov	r3, s15
 8004288:	82bb      	strh	r3, [r7, #20]
        break;
 800428a:	e030      	b.n	80042ee <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800428c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004290:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80043f8 <dmp_set_tap_thresh+0x25c>
 8004294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429c:	ee17 3a90 	vmov	r3, s15
 80042a0:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 80042a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042a6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80043fc <dmp_set_tap_thresh+0x260>
 80042aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b2:	ee17 3a90 	vmov	r3, s15
 80042b6:	82bb      	strh	r3, [r7, #20]
        break;
 80042b8:	e019      	b.n	80042ee <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 80042ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80042be:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004400 <dmp_set_tap_thresh+0x264>
 80042c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	ee17 3a90 	vmov	r3, s15
 80042ce:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80042d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80042d4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004404 <dmp_set_tap_thresh+0x268>
 80042d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e0:	ee17 3a90 	vmov	r3, s15
 80042e4:	82bb      	strh	r3, [r7, #20]
        break;
 80042e6:	e002      	b.n	80042ee <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ec:	e076      	b.n	80043dc <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80042ee:	8afb      	ldrh	r3, [r7, #22]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80042f8:	8afb      	ldrh	r3, [r7, #22]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80042fe:	8abb      	ldrh	r3, [r7, #20]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8004308:	8abb      	ldrh	r3, [r7, #20]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01c      	beq.n	8004352 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	461a      	mov	r2, r3
 800431e:	2102      	movs	r1, #2
 8004320:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8004324:	f7ff fa6a 	bl	80037fc <mpu_write_mem>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <dmp_set_tap_thresh+0x198>
            return -1;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004332:	e053      	b.n	80043dc <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004334:	f107 030c 	add.w	r3, r7, #12
 8004338:	3302      	adds	r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	2102      	movs	r1, #2
 800433e:	f44f 7092 	mov.w	r0, #292	; 0x124
 8004342:	f7ff fa5b 	bl	80037fc <mpu_write_mem>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <dmp_set_tap_thresh+0x1b6>
            return -1;
 800434c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004350:	e044      	b.n	80043dc <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01c      	beq.n	8004396 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	461a      	mov	r2, r3
 8004362:	2102      	movs	r1, #2
 8004364:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004368:	f7ff fa48 	bl	80037fc <mpu_write_mem>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004376:	e031      	b.n	80043dc <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	3302      	adds	r3, #2
 800437e:	461a      	mov	r2, r3
 8004380:	2102      	movs	r1, #2
 8004382:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004386:	f7ff fa39 	bl	80037fc <mpu_write_mem>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004394:	e022      	b.n	80043dc <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	461a      	mov	r2, r3
 80043a6:	2102      	movs	r1, #2
 80043a8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 80043ac:	f7ff fa26 	bl	80037fc <mpu_write_mem>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <dmp_set_tap_thresh+0x220>
            return -1;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ba:	e00f      	b.n	80043dc <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	3302      	adds	r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	2102      	movs	r1, #2
 80043c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80043ca:	f7ff fa17 	bl	80037fc <mpu_write_mem>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <dmp_set_tap_thresh+0x23e>
            return -1;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d8:	e000      	b.n	80043dc <dmp_set_tap_thresh+0x240>
    }
    return 0;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	43480000 	.word	0x43480000
 80043e8:	46800000 	.word	0x46800000
 80043ec:	46400000 	.word	0x46400000
 80043f0:	46000000 	.word	0x46000000
 80043f4:	45c00000 	.word	0x45c00000
 80043f8:	45800000 	.word	0x45800000
 80043fc:	45400000 	.word	0x45400000
 8004400:	45000000 	.word	0x45000000
 8004404:	44c00000 	.word	0x44c00000

08004408 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004426:	b2db      	uxtb	r3, r3
 8004428:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	f043 030c 	orr.w	r3, r3, #12
 800443a:	b2db      	uxtb	r3, r3
 800443c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	f043 0303 	orr.w	r3, r3, #3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8004452:	f107 030f 	add.w	r3, r7, #15
 8004456:	461a      	mov	r2, r3
 8004458:	2101      	movs	r1, #1
 800445a:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800445e:	f7ff f9cd 	bl	80037fc <mpu_write_mem>
 8004462:	4603      	mov	r3, r0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800447c:	2301      	movs	r3, #1
 800447e:	71fb      	strb	r3, [r7, #7]
 8004480:	e004      	b.n	800448c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d901      	bls.n	800448c <dmp_set_tap_count+0x20>
        min_taps = 4;
 8004488:	2304      	movs	r3, #4
 800448a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	3b01      	subs	r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8004494:	f107 030f 	add.w	r3, r7, #15
 8004498:	461a      	mov	r2, r3
 800449a:	2101      	movs	r1, #1
 800449c:	f240 104f 	movw	r0, #335	; 0x14f
 80044a0:	f7ff f9ac 	bl	80037fc <mpu_write_mem>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <dmp_set_tap_time+0x40>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80044c6:	89fb      	ldrh	r3, [r7, #14]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80044d0:	89fb      	ldrh	r3, [r7, #14]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	461a      	mov	r2, r3
 80044dc:	2102      	movs	r1, #2
 80044de:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 80044e2:	f7ff f98b 	bl	80037fc <mpu_write_mem>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	cccccccd 	.word	0xcccccccd

080044f4 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <dmp_set_tap_time_multi+0x40>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800450a:	89fb      	ldrh	r3, [r7, #14]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	b29b      	uxth	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	461a      	mov	r2, r3
 8004520:	2102      	movs	r1, #2
 8004522:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8004526:	f7ff f969 	bl	80037fc <mpu_write_mem>
 800452a:	4603      	mov	r3, r0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	cccccccd 	.word	0xcccccccd

08004538 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a13      	ldr	r2, [pc, #76]	; (8004594 <dmp_set_shake_reject_thresh+0x5c>)
 8004548:	fb82 1203 	smull	r1, r2, r2, r3
 800454c:	1192      	asrs	r2, r2, #6
 800454e:	17db      	asrs	r3, r3, #31
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	161b      	asrs	r3, r3, #24
 800455e:	b2db      	uxtb	r3, r3
 8004560:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	141b      	asrs	r3, r3, #16
 8004566:	b2db      	uxtb	r3, r3
 8004568:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	121b      	asrs	r3, r3, #8
 800456e:	b2db      	uxtb	r3, r3
 8004570:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	461a      	mov	r2, r3
 800457e:	2104      	movs	r1, #4
 8004580:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8004584:	f7ff f93a 	bl	80037fc <mpu_write_mem>
 8004588:	4603      	mov	r3, r0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	10624dd3 	.word	0x10624dd3

08004598 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <dmp_set_shake_reject_time+0x40>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 80045be:	f107 030c 	add.w	r3, r7, #12
 80045c2:	461a      	mov	r2, r3
 80045c4:	2102      	movs	r1, #2
 80045c6:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 80045ca:	f7ff f917 	bl	80037fc <mpu_write_mem>
 80045ce:	4603      	mov	r3, r0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	cccccccd 	.word	0xcccccccd

080045dc <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <dmp_set_shake_reject_timeout+0x40>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	461a      	mov	r2, r3
 8004608:	2102      	movs	r1, #2
 800460a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800460e:	f7ff f8f5 	bl	80037fc <mpu_write_mem>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	cccccccd 	.word	0xcccccccd

08004620 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800462a:	2302      	movs	r3, #2
 800462c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800462e:	23ca      	movs	r3, #202	; 0xca
 8004630:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8004632:	23e3      	movs	r3, #227	; 0xe3
 8004634:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8004636:	2309      	movs	r3, #9
 8004638:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	461a      	mov	r2, r3
 8004640:	2104      	movs	r1, #4
 8004642:	2068      	movs	r0, #104	; 0x68
 8004644:	f7ff f8da 	bl	80037fc <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8004648:	23a3      	movs	r3, #163	; 0xa3
 800464a:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8004656:	23c0      	movs	r3, #192	; 0xc0
 8004658:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800465a:	23c8      	movs	r3, #200	; 0xc8
 800465c:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800465e:	23c2      	movs	r3, #194	; 0xc2
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e005      	b.n	8004670 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8004664:	23a3      	movs	r3, #163	; 0xa3
 8004666:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8004668:	23a3      	movs	r3, #163	; 0xa3
 800466a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800466c:	23a3      	movs	r3, #163	; 0xa3
 800466e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800467a:	23c4      	movs	r3, #196	; 0xc4
 800467c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800467e:	23cc      	movs	r3, #204	; 0xcc
 8004680:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8004682:	23c6      	movs	r3, #198	; 0xc6
 8004684:	74bb      	strb	r3, [r7, #18]
 8004686:	e005      	b.n	8004694 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8004688:	23a3      	movs	r3, #163	; 0xa3
 800468a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800468c:	23a3      	movs	r3, #163	; 0xa3
 800468e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8004690:	23a3      	movs	r3, #163	; 0xa3
 8004692:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8004694:	23a3      	movs	r3, #163	; 0xa3
 8004696:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8004698:	23a3      	movs	r3, #163	; 0xa3
 800469a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800469c:	23a3      	movs	r3, #163	; 0xa3
 800469e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	461a      	mov	r2, r3
 80046a6:	210a      	movs	r1, #10
 80046a8:	f640 20a7 	movw	r0, #2727	; 0xaa7
 80046ac:	f7ff f8a6 	bl	80037fc <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 80046ba:	2320      	movs	r3, #32
 80046bc:	733b      	strb	r3, [r7, #12]
 80046be:	e001      	b.n	80046c4 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 80046c0:	23d8      	movs	r3, #216	; 0xd8
 80046c2:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	461a      	mov	r2, r3
 80046ca:	2101      	movs	r1, #1
 80046cc:	f640 20b6 	movw	r0, #2742	; 0xab6
 80046d0:	f7ff f894 	bl	80037fc <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 80046de:	2001      	movs	r0, #1
 80046e0:	f000 f8c6 	bl	8004870 <dmp_enable_gyro_cal>
 80046e4:	e002      	b.n	80046ec <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f000 f8c2 	bl	8004870 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01d      	beq.n	8004732 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8004700:	23b2      	movs	r3, #178	; 0xb2
 8004702:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004704:	238b      	movs	r3, #139	; 0x8b
 8004706:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004708:	23b6      	movs	r3, #182	; 0xb6
 800470a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800470c:	239b      	movs	r3, #155	; 0x9b
 800470e:	73fb      	strb	r3, [r7, #15]
 8004710:	e007      	b.n	8004722 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8004712:	23b0      	movs	r3, #176	; 0xb0
 8004714:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800471a:	23b4      	movs	r3, #180	; 0xb4
 800471c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800471e:	2390      	movs	r3, #144	; 0x90
 8004720:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8004722:	f107 030c 	add.w	r3, r7, #12
 8004726:	461a      	mov	r2, r3
 8004728:	2104      	movs	r1, #4
 800472a:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800472e:	f7ff f865 	bl	80037fc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d025      	beq.n	8004788 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800473c:	23f8      	movs	r3, #248	; 0xf8
 800473e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004740:	f107 030c 	add.w	r3, r7, #12
 8004744:	461a      	mov	r2, r3
 8004746:	2101      	movs	r1, #1
 8004748:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800474c:	f7ff f856 	bl	80037fc <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004750:	21fa      	movs	r1, #250	; 0xfa
 8004752:	2007      	movs	r0, #7
 8004754:	f7ff fd22 	bl	800419c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004758:	2007      	movs	r0, #7
 800475a:	f7ff fe55 	bl	8004408 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800475e:	2001      	movs	r0, #1
 8004760:	f7ff fe84 	bl	800446c <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004764:	2064      	movs	r0, #100	; 0x64
 8004766:	f7ff fea3 	bl	80044b0 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800476a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800476e:	f7ff fec1 	bl	80044f4 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004772:	21c8      	movs	r1, #200	; 0xc8
 8004774:	483c      	ldr	r0, [pc, #240]	; (8004868 <dmp_enable_feature+0x248>)
 8004776:	f7ff fedf 	bl	8004538 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800477a:	2028      	movs	r0, #40	; 0x28
 800477c:	f7ff ff0c 	bl	8004598 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004780:	200a      	movs	r0, #10
 8004782:	f7ff ff2b 	bl	80045dc <dmp_set_shake_reject_timeout>
 8004786:	e009      	b.n	800479c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004788:	23d8      	movs	r3, #216	; 0xd8
 800478a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	461a      	mov	r2, r3
 8004792:	2101      	movs	r1, #1
 8004794:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004798:	f7ff f830 	bl	80037fc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80047a6:	23d9      	movs	r3, #217	; 0xd9
 80047a8:	733b      	strb	r3, [r7, #12]
 80047aa:	e001      	b.n	80047b0 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80047ac:	23d8      	movs	r3, #216	; 0xd8
 80047ae:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	461a      	mov	r2, r3
 80047b6:	2101      	movs	r1, #1
 80047b8:	f240 703d 	movw	r0, #1853	; 0x73d
 80047bc:	f7ff f81e 	bl	80037fc <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f000 f880 	bl	80048d0 <dmp_enable_lp_quat>
 80047d0:	e002      	b.n	80047d8 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 80047d2:	2000      	movs	r0, #0
 80047d4:	f000 f87c 	bl	80048d0 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 f89b 	bl	800491e <dmp_enable_6x_lp_quat>
 80047e8:	e002      	b.n	80047f0 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 80047ea:	2000      	movs	r0, #0
 80047ec:	f000 f897 	bl	800491e <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	f043 0308 	orr.w	r3, r3, #8
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	4b1c      	ldr	r3, [pc, #112]	; (800486c <dmp_enable_feature+0x24c>)
 80047fa:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 80047fc:	f7fd fbc4 	bl	8001f88 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <dmp_enable_feature+0x24c>)
 8004802:	2200      	movs	r2, #0
 8004804:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8004810:	4b16      	ldr	r3, [pc, #88]	; (800486c <dmp_enable_feature+0x24c>)
 8004812:	7b9b      	ldrb	r3, [r3, #14]
 8004814:	3306      	adds	r3, #6
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <dmp_enable_feature+0x24c>)
 800481a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <dmp_enable_feature+0x24c>)
 8004828:	7b9b      	ldrb	r3, [r3, #14]
 800482a:	3306      	adds	r3, #6
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <dmp_enable_feature+0x24c>)
 8004830:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	f003 0314 	and.w	r3, r3, #20
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <dmp_enable_feature+0x24c>)
 800483e:	7b9b      	ldrb	r3, [r3, #14]
 8004840:	3310      	adds	r3, #16
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <dmp_enable_feature+0x24c>)
 8004846:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <dmp_enable_feature+0x24c>)
 8004854:	7b9b      	ldrb	r3, [r3, #14]
 8004856:	3304      	adds	r3, #4
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b04      	ldr	r3, [pc, #16]	; (800486c <dmp_enable_feature+0x24c>)
 800485c:	739a      	strb	r2, [r3, #14]

    return 0;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	02cae309 	.word	0x02cae309
 800486c:	200002d0 	.word	0x200002d0

08004870 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00f      	beq.n	80048a0 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <dmp_enable_gyro_cal+0x58>)
 8004882:	f107 0314 	add.w	r3, r7, #20
 8004886:	ca07      	ldmia	r2, {r0, r1, r2}
 8004888:	c303      	stmia	r3!, {r0, r1}
 800488a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	461a      	mov	r2, r3
 8004892:	2109      	movs	r1, #9
 8004894:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004898:	f7fe ffb0 	bl	80037fc <mpu_write_mem>
 800489c:	4603      	mov	r3, r0
 800489e:	e00e      	b.n	80048be <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80048a0:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <dmp_enable_gyro_cal+0x5c>)
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80048a8:	c303      	stmia	r3!, {r0, r1}
 80048aa:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80048ac:	f107 0308 	add.w	r3, r7, #8
 80048b0:	461a      	mov	r2, r3
 80048b2:	2109      	movs	r1, #9
 80048b4:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80048b8:	f7fe ffa0 	bl	80037fc <mpu_write_mem>
 80048bc:	4603      	mov	r3, r0
    }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	0800b9ec 	.word	0x0800b9ec
 80048cc:	0800b9f8 	.word	0x0800b9f8

080048d0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 80048e0:	23c0      	movs	r3, #192	; 0xc0
 80048e2:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 80048e4:	23c2      	movs	r3, #194	; 0xc2
 80048e6:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 80048e8:	23c4      	movs	r3, #196	; 0xc4
 80048ea:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 80048ec:	23c6      	movs	r3, #198	; 0xc6
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	e006      	b.n	8004900 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	2204      	movs	r2, #4
 80048f8:	218b      	movs	r1, #139	; 0x8b
 80048fa:	4618      	mov	r0, r3
 80048fc:	f004 fb30 	bl	8008f60 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	461a      	mov	r2, r3
 8004906:	2104      	movs	r1, #4
 8004908:	f640 2098 	movw	r0, #2712	; 0xa98
 800490c:	f7fe ff76 	bl	80037fc <mpu_write_mem>

    return mpu_reset_fifo();
 8004910:	f7fd fb3a 	bl	8001f88 <mpu_reset_fifo>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	4603      	mov	r3, r0
 8004926:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800492e:	2320      	movs	r3, #32
 8004930:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8004932:	2328      	movs	r3, #40	; 0x28
 8004934:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004936:	2330      	movs	r3, #48	; 0x30
 8004938:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800493a:	2338      	movs	r3, #56	; 0x38
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	e006      	b.n	800494e <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	2204      	movs	r2, #4
 8004946:	21a3      	movs	r1, #163	; 0xa3
 8004948:	4618      	mov	r0, r3
 800494a:	f004 fb09 	bl	8008f60 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	461a      	mov	r2, r3
 8004954:	2104      	movs	r1, #4
 8004956:	f640 209e 	movw	r0, #2718	; 0xa9e
 800495a:	f7fe ff4f 	bl	80037fc <mpu_write_mem>

    return mpu_reset_fifo();
 800495e:	f7fd fb13 	bl	8001f88 <mpu_reset_fifo>
 8004962:	4603      	mov	r3, r0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3303      	adds	r3, #3
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800497e:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3303      	adds	r3, #3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498a:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3301      	adds	r3, #1
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d012      	beq.n	80049c0 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800499a:	7bbb      	ldrb	r3, [r7, #14]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80049a0:	7bbb      	ldrb	r3, [r7, #14]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	3301      	adds	r3, #1
 80049aa:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <decode_gesture+0x84>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <decode_gesture+0x84>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	7b39      	ldrb	r1, [r7, #12]
 80049ba:	7b7a      	ldrb	r2, [r7, #13]
 80049bc:	4610      	mov	r0, r2
 80049be:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3301      	adds	r3, #1
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <decode_gesture+0x84>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <decode_gesture+0x84>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	0992      	lsrs	r2, r2, #6
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
    }

    return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200002d0 	.word	0x200002d0

080049f4 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b092      	sub	sp, #72	; 0x48
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    sensors[0] = 0;
 8004a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8004a0e:	4bae      	ldr	r3, [pc, #696]	; (8004cc8 <dmp_read_fifo+0x2d4>)
 8004a10:	7b9b      	ldrb	r3, [r3, #14]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f107 0120 	add.w	r1, r7, #32
 8004a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fd ff48 	bl	80028b0 <mpu_read_fifo_stream>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <dmp_read_fifo+0x38>
        return -1;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a2a:	e148      	b.n	8004cbe <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004a2c:	4ba6      	ldr	r3, [pc, #664]	; (8004cc8 <dmp_read_fifo+0x2d4>)
 8004a2e:	895b      	ldrh	r3, [r3, #10]
 8004a30:	f003 0314 	and.w	r3, r3, #20
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 808a 	beq.w	8004b4e <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004a3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a3e:	061a      	lsls	r2, r3, #24
 8004a40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004a4c:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004a4e:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004a50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004a54:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a5e:	061a      	lsls	r2, r3, #24
 8004a60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a6c:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004a6e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a74:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004a7a:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004a7c:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a82:	061a      	lsls	r2, r3, #24
 8004a84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004a8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004a90:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004a92:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004a94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a98:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004a9e:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004aa0:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004aa6:	061a      	lsls	r2, r3, #24
 8004aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004ab0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ab4:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004ab6:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004abc:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004ac2:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004ac4:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004aca:	3310      	adds	r3, #16
 8004acc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	141b      	asrs	r3, r3, #16
 8004ad6:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	141b      	asrs	r3, r3, #16
 8004ae0:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	141b      	asrs	r3, r3, #16
 8004aea:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	330c      	adds	r3, #12
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	141b      	asrs	r3, r3, #16
 8004af4:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	fb03 f202 	mul.w	r2, r3, r2
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6979      	ldr	r1, [r7, #20]
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004b10:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004b1a:	4413      	add	r3, r2
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8004b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b24:	db03      	blt.n	8004b2e <dmp_read_fifo+0x13a>
 8004b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b28:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8004b2c:	dd07      	ble.n	8004b3e <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8004b2e:	f7fd fa2b 	bl	8001f88 <mpu_reset_fifo>
            sensors[0] = 0;
 8004b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b34:	2200      	movs	r2, #0
 8004b36:	801a      	strh	r2, [r3, #0]
            return -1;
 8004b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b3c:	e0bf      	b.n	8004cbe <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b48:	b21a      	sxth	r2, r3
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004b4e:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <dmp_read_fifo+0x2d4>)
 8004b50:	895b      	ldrh	r3, [r3, #10]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04c      	beq.n	8004bf4 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004b5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b5e:	3348      	adds	r3, #72	; 0x48
 8004b60:	443b      	add	r3, r7
 8004b62:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	b21a      	sxth	r2, r3
 8004b6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b6e:	3301      	adds	r3, #1
 8004b70:	3348      	adds	r3, #72	; 0x48
 8004b72:	443b      	add	r3, r7
 8004b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b78:	b21b      	sxth	r3, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b21a      	sxth	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004b82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b86:	3302      	adds	r3, #2
 8004b88:	3348      	adds	r3, #72	; 0x48
 8004b8a:	443b      	add	r3, r7
 8004b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	b219      	sxth	r1, r3
 8004b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b98:	3303      	adds	r3, #3
 8004b9a:	3348      	adds	r3, #72	; 0x48
 8004b9c:	443b      	add	r3, r7
 8004b9e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ba2:	b21a      	sxth	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	b212      	sxth	r2, r2
 8004bac:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004bae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	3348      	adds	r3, #72	; 0x48
 8004bb6:	443b      	add	r3, r7
 8004bb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	b219      	sxth	r1, r3
 8004bc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bc4:	3305      	adds	r3, #5
 8004bc6:	3348      	adds	r3, #72	; 0x48
 8004bc8:	443b      	add	r3, r7
 8004bca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bce:	b21a      	sxth	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	b212      	sxth	r2, r2
 8004bd8:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004bda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bde:	3306      	adds	r3, #6
 8004be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bea:	f043 0308 	orr.w	r3, r3, #8
 8004bee:	b21a      	sxth	r2, r3
 8004bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf2:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004bf4:	4b34      	ldr	r3, [pc, #208]	; (8004cc8 <dmp_read_fifo+0x2d4>)
 8004bf6:	895b      	ldrh	r3, [r3, #10]
 8004bf8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d04c      	beq.n	8004c9a <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004c00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c04:	3348      	adds	r3, #72	; 0x48
 8004c06:	443b      	add	r3, r7
 8004c08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	b21a      	sxth	r2, r3
 8004c10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c14:	3301      	adds	r3, #1
 8004c16:	3348      	adds	r3, #72	; 0x48
 8004c18:	443b      	add	r3, r7
 8004c1a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c1e:	b21b      	sxth	r3, r3
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b21a      	sxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004c28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	3348      	adds	r3, #72	; 0x48
 8004c30:	443b      	add	r3, r7
 8004c32:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	b219      	sxth	r1, r3
 8004c3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c3e:	3303      	adds	r3, #3
 8004c40:	3348      	adds	r3, #72	; 0x48
 8004c42:	443b      	add	r3, r7
 8004c44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c48:	b21a      	sxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	b212      	sxth	r2, r2
 8004c52:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c58:	3304      	adds	r3, #4
 8004c5a:	3348      	adds	r3, #72	; 0x48
 8004c5c:	443b      	add	r3, r7
 8004c5e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	b219      	sxth	r1, r3
 8004c66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c6a:	3305      	adds	r3, #5
 8004c6c:	3348      	adds	r3, #72	; 0x48
 8004c6e:	443b      	add	r3, r7
 8004c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	b212      	sxth	r2, r2
 8004c7e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004c80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c84:	3306      	adds	r3, #6
 8004c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8004c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004c94:	b21a      	sxth	r2, r3
 8004c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c98:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <dmp_read_fifo+0x2d4>)
 8004c9c:	895b      	ldrh	r3, [r3, #10]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8004ca6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004caa:	f107 0220 	add.w	r2, r7, #32
 8004cae:	4413      	add	r3, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fe5b 	bl	800496c <decode_gesture>

    myget_ms(timestamp);
 8004cb6:	6838      	ldr	r0, [r7, #0]
 8004cb8:	f7fe ff16 	bl	8003ae8 <myget_ms>
    return 0;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3748      	adds	r7, #72	; 0x48
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200002d0 	.word	0x200002d0

08004ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	4a25      	ldr	r2, [pc, #148]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0e:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6313      	str	r3, [r2, #48]	; 0x30
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <MX_GPIO_Init+0xd0>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8004d52:	2200      	movs	r2, #0
 8004d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d58:	4811      	ldr	r0, [pc, #68]	; (8004da0 <MX_GPIO_Init+0xd4>)
 8004d5a:	f000 ff13 	bl	8005b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6a:	f107 0314 	add.w	r3, r7, #20
 8004d6e:	4619      	mov	r1, r3
 8004d70:	480c      	ldr	r0, [pc, #48]	; (8004da4 <MX_GPIO_Init+0xd8>)
 8004d72:	f000 fd6b 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d84:	2300      	movs	r3, #0
 8004d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d88:	f107 0314 	add.w	r3, r7, #20
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4804      	ldr	r0, [pc, #16]	; (8004da0 <MX_GPIO_Init+0xd4>)
 8004d90:	f000 fd5c 	bl	800584c <HAL_GPIO_Init>

}
 8004d94:	bf00      	nop
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40020c00 	.word	0x40020c00
 8004da4:	40020000 	.word	0x40020000

08004da8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <MX_I2C1_Init+0x54>)
 8004db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004db4:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <MX_I2C1_Init+0x58>)
 8004db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004de4:	4804      	ldr	r0, [pc, #16]	; (8004df8 <MX_I2C1_Init+0x50>)
 8004de6:	f000 ff01 	bl	8005bec <HAL_I2C_Init>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004df0:	f000 f97c 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	200002e0 	.word	0x200002e0
 8004dfc:	40005400 	.word	0x40005400
 8004e00:	00061a80 	.word	0x00061a80

08004e04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <HAL_I2C_MspInit+0x84>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d12b      	bne.n	8004e7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_I2C_MspInit+0x88>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_I2C_MspInit+0x88>)
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	6313      	str	r3, [r2, #48]	; 0x30
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_I2C_MspInit+0x88>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e42:	23c0      	movs	r3, #192	; 0xc0
 8004e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e46:	2312      	movs	r3, #18
 8004e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e52:	2304      	movs	r3, #4
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	480c      	ldr	r0, [pc, #48]	; (8004e90 <HAL_I2C_MspInit+0x8c>)
 8004e5e:	f000 fcf5 	bl	800584c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_I2C_MspInit+0x88>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <HAL_I2C_MspInit+0x88>)
 8004e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e70:	6413      	str	r3, [r2, #64]	; 0x40
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_I2C_MspInit+0x88>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40005400 	.word	0x40005400
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40020400 	.word	0x40020400

08004e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e98:	b094      	sub	sp, #80	; 0x50
 8004e9a:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e9c:	f000 fb2e 	bl	80054fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ea0:	f000 f87c 	bl	8004f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ea4:	f7ff ff12 	bl	8004ccc <MX_GPIO_Init>
  MX_I2C1_Init();
 8004ea8:	f7ff ff7e 	bl	8004da8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004eac:	f000 fa8a 	bl	80053c4 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8004eb0:	f000 fa3c 	bl	800532c <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  IIC_Init(hi2c1);
 8004eb4:	4c2e      	ldr	r4, [pc, #184]	; (8004f70 <main+0xdc>)
 8004eb6:	4668      	mov	r0, sp
 8004eb8:	f104 0310 	add.w	r3, r4, #16
 8004ebc:	2244      	movs	r2, #68	; 0x44
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f004 f840 	bl	8008f44 <memcpy>
 8004ec4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ec8:	f7fc f898 	bl	8000ffc <IIC_Init>

  /* Recovering process if SDA low
   * explanation in here (Indonesian language): https://youtu.be/dcVTQzlIebs
   */
  IIC_InitLockupRecover(GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7);
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <main+0xe0>)
 8004ed0:	2140      	movs	r1, #64	; 0x40
 8004ed2:	4828      	ldr	r0, [pc, #160]	; (8004f74 <main+0xe0>)
 8004ed4:	f7fc f8aa 	bl	800102c <IIC_InitLockupRecover>
  IIC_LockupRecover();
 8004ed8:	f7fc f8ca 	bl	8001070 <IIC_LockupRecover>

  printf("\n\rMPU6050 is initializing....\n\r");
 8004edc:	4826      	ldr	r0, [pc, #152]	; (8004f78 <main+0xe4>)
 8004ede:	f004 fcb1 	bl	8009844 <iprintf>
  MPU6050_initialize();
 8004ee2:	f7fc fbd1 	bl	8001688 <MPU6050_initialize>
  printf("\n\rMPU6050 has been initialized....\n\r");
 8004ee6:	4825      	ldr	r0, [pc, #148]	; (8004f7c <main+0xe8>)
 8004ee8:	f004 fcac 	bl	8009844 <iprintf>
  MPU6050_DMPInit();
 8004eec:	f7fc fc00 	bl	80016f0 <MPU6050_DMPInit>
  MPU6050_setYawCorrectorRate(-0.00415); // put the drifting rate of Yaw to be corrected
 8004ef0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004f80 <main+0xec>
 8004ef4:	f7fc fe2c 	bl	8001b50 <MPU6050_setYawCorrectorRate>
//  HAL_I2C_
  HAL_TIM_Base_Start_IT(&htim11);
 8004ef8:	4822      	ldr	r0, [pc, #136]	; (8004f84 <main+0xf0>)
 8004efa:	f002 fb45 	bl	8007588 <HAL_TIM_Base_Start_IT>
  long last_tick = HAL_GetTick();
 8004efe:	f000 fb63 	bl	80055c8 <HAL_GetTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_readDMPAll(&pitch, &roll, &yaw);
 8004f06:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <main+0xf4>)
 8004f08:	4920      	ldr	r1, [pc, #128]	; (8004f8c <main+0xf8>)
 8004f0a:	4821      	ldr	r0, [pc, #132]	; (8004f90 <main+0xfc>)
 8004f0c:	f7fc fc3c 	bl	8001788 <MPU6050_readDMPAll>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8004f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f14:	481f      	ldr	r0, [pc, #124]	; (8004f94 <main+0x100>)
 8004f16:	f000 fe4e 	bl	8005bb6 <HAL_GPIO_TogglePin>
	  if(HAL_GetTick()- last_tick > 1000)
 8004f1a:	f000 fb55 	bl	80055c8 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f28:	d9ed      	bls.n	8004f06 <main+0x72>
	  {
		  last_tick = HAL_GetTick();
 8004f2a:	f000 fb4d 	bl	80055c8 <HAL_GetTick>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	607b      	str	r3, [r7, #4]
		  printf("pitch: %.2f roll: %.2f yaw: %.2f \n\r", pitch, roll, yaw);
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <main+0xfc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb fb0e 	bl	8000558 <__aeabi_f2d>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	4689      	mov	r9, r1
 8004f40:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <main+0xf8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fb07 	bl	8000558 <__aeabi_f2d>
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <main+0xf4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fb00 	bl	8000558 <__aeabi_f2d>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f60:	e9cd 4500 	strd	r4, r5, [sp]
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	480b      	ldr	r0, [pc, #44]	; (8004f98 <main+0x104>)
 8004f6a:	f004 fc6b 	bl	8009844 <iprintf>
	  MPU6050_readDMPAll(&pitch, &roll, &yaw);
 8004f6e:	e7ca      	b.n	8004f06 <main+0x72>
 8004f70:	200002e0 	.word	0x200002e0
 8004f74:	40020400 	.word	0x40020400
 8004f78:	0800ba1c 	.word	0x0800ba1c
 8004f7c:	0800ba3c 	.word	0x0800ba3c
 8004f80:	bb87fcb9 	.word	0xbb87fcb9
 8004f84:	20000348 	.word	0x20000348
 8004f88:	20000340 	.word	0x20000340
 8004f8c:	2000033c 	.word	0x2000033c
 8004f90:	20000338 	.word	0x20000338
 8004f94:	40020c00 	.word	0x40020c00
 8004f98:	0800ba64 	.word	0x0800ba64

08004f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b094      	sub	sp, #80	; 0x50
 8004fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fa2:	f107 0320 	add.w	r3, r7, #32
 8004fa6:	2230      	movs	r2, #48	; 0x30
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f003 ffd8 	bl	8008f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fb0:	f107 030c 	add.w	r3, r7, #12
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	4b28      	ldr	r3, [pc, #160]	; (8005068 <SystemClock_Config+0xcc>)
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <SystemClock_Config+0xcc>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <SystemClock_Config+0xcc>)
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <SystemClock_Config+0xd0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a21      	ldr	r2, [pc, #132]	; (800506c <SystemClock_Config+0xd0>)
 8004fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <SystemClock_Config+0xd0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005002:	2302      	movs	r3, #2
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800500c:	2304      	movs	r3, #4
 800500e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005010:	2364      	movs	r3, #100	; 0x64
 8005012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005014:	2302      	movs	r3, #2
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005018:	2304      	movs	r3, #4
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800501c:	f107 0320 	add.w	r3, r7, #32
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fda3 	bl	8006b6c <HAL_RCC_OscConfig>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800502c:	f000 f85e 	bl	80050ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005030:	230f      	movs	r3, #15
 8005032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005034:	2302      	movs	r3, #2
 8005036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800503c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	2103      	movs	r1, #3
 800504c:	4618      	mov	r0, r3
 800504e:	f002 f805 	bl	800705c <HAL_RCC_ClockConfig>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005058:	f000 f848 	bl	80050ec <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800505c:	f002 f8e4 	bl	8007228 <HAL_RCC_EnableCSS>
}
 8005060:	bf00      	nop
 8005062:	3750      	adds	r7, #80	; 0x50
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000

08005070 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	b29a      	uxth	r2, r3
 8005080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	4804      	ldr	r0, [pc, #16]	; (8005098 <_write+0x28>)
 8005088:	f002 fcf1 	bl	8007a6e <HAL_UART_Transmit>
	return len;
 800508c:	687b      	ldr	r3, [r7, #4]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000390 	.word	0x20000390

0800509c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d115      	bne.n	80050d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		cnt11++;
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80050b4:	6013      	str	r3, [r2, #0]

		if(cnt11%1000 == 0)
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80050bc:	fb83 1302 	smull	r1, r3, r3, r2
 80050c0:	1199      	asrs	r1, r3, #6
 80050c2:	17d3      	asrs	r3, r2, #31
 80050c4:	1acb      	subs	r3, r1, r3
 80050c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
//			MPU6050_getDriftingRate(&pr, &rr, &yr);		// it uses to check drifting rate
			MPU6050_updateAngleCorrector();
 80050d4:	f7fc fd4c 	bl	8001b70 <MPU6050_updateAngleCorrector>
		}
	}
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000348 	.word	0x20000348
 80050e4:	20000334 	.word	0x20000334
 80050e8:	10624dd3 	.word	0x10624dd3

080050ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050f0:	b672      	cpsid	i
}
 80050f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050f4:	e7fe      	b.n	80050f4 <Error_Handler+0x8>
	...

080050f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <HAL_MspInit+0x4c>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	4a0f      	ldr	r2, [pc, #60]	; (8005144 <HAL_MspInit+0x4c>)
 8005108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510c:	6453      	str	r3, [r2, #68]	; 0x44
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <HAL_MspInit+0x4c>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_MspInit+0x4c>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	4a08      	ldr	r2, [pc, #32]	; (8005144 <HAL_MspInit+0x4c>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	6413      	str	r3, [r2, #64]	; 0x40
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_MspInit+0x4c>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800

08005148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800514c:	f002 f9b2 	bl	80074b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005150:	e7fe      	b.n	8005150 <NMI_Handler+0x8>

08005152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005156:	e7fe      	b.n	8005156 <HardFault_Handler+0x4>

08005158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800515c:	e7fe      	b.n	800515c <MemManage_Handler+0x4>

0800515e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800515e:	b480      	push	{r7}
 8005160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005162:	e7fe      	b.n	8005162 <BusFault_Handler+0x4>

08005164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005168:	e7fe      	b.n	8005168 <UsageFault_Handler+0x4>

0800516a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800516e:	bf00      	nop
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005198:	f000 fa02 	bl	80055a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800519c:	bf00      	nop
 800519e:	bd80      	pop	{r7, pc}

080051a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80051a4:	4802      	ldr	r0, [pc, #8]	; (80051b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80051a6:	f002 fa51 	bl	800764c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000348 	.word	0x20000348

080051b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
	return 1;
 80051b8:	2301      	movs	r3, #1
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_kill>:

int _kill(int pid, int sig)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051ce:	f003 fe7f 	bl	8008ed0 <__errno>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2216      	movs	r2, #22
 80051d6:	601a      	str	r2, [r3, #0]
	return -1;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_exit>:

void _exit (int status)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ffe7 	bl	80051c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051f6:	e7fe      	b.n	80051f6 <_exit+0x12>

080051f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e00a      	b.n	8005220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800520a:	f3af 8000 	nop.w
 800520e:	4601      	mov	r1, r0
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	60ba      	str	r2, [r7, #8]
 8005216:	b2ca      	uxtb	r2, r1
 8005218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3301      	adds	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	dbf0      	blt.n	800520a <_read+0x12>
	}

return len;
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
	return -1;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800525a:	605a      	str	r2, [r3, #4]
	return 0;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <_isatty>:

int _isatty(int file)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
	return 1;
 8005272:	2301      	movs	r3, #1
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	return 0;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <_sbrk+0x5c>)
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <_sbrk+0x60>)
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052b0:	4b13      	ldr	r3, [pc, #76]	; (8005300 <_sbrk+0x64>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <_sbrk+0x64>)
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <_sbrk+0x68>)
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052cc:	f003 fe00 	bl	8008ed0 <__errno>
 80052d0:	4603      	mov	r3, r0
 80052d2:	220c      	movs	r2, #12
 80052d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052da:	e009      	b.n	80052f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <_sbrk+0x64>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <_sbrk+0x64>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	4a05      	ldr	r2, [pc, #20]	; (8005300 <_sbrk+0x64>)
 80052ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20020000 	.word	0x20020000
 80052fc:	00000400 	.word	0x00000400
 8005300:	20000344 	.word	0x20000344
 8005304:	200003e8 	.word	0x200003e8

08005308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <SystemInit+0x20>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <SystemInit+0x20>)
 8005314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <MX_TIM11_Init+0x40>)
 8005332:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <MX_TIM11_Init+0x44>)
 8005334:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <MX_TIM11_Init+0x40>)
 8005338:	2263      	movs	r2, #99	; 0x63
 800533a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <MX_TIM11_Init+0x40>)
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <MX_TIM11_Init+0x40>)
 8005344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005348:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <MX_TIM11_Init+0x40>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <MX_TIM11_Init+0x40>)
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005356:	4805      	ldr	r0, [pc, #20]	; (800536c <MX_TIM11_Init+0x40>)
 8005358:	f002 f8c7 	bl	80074ea <HAL_TIM_Base_Init>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005362:	f7ff fec3 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000348 	.word	0x20000348
 8005370:	40014800 	.word	0x40014800

08005374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d115      	bne.n	80053b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_TIM_Base_MspInit+0x4c>)
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005394:	6453      	str	r3, [r2, #68]	; 0x44
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	201a      	movs	r0, #26
 80053a8:	f000 fa19 	bl	80057de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80053ac:	201a      	movs	r0, #26
 80053ae:	f000 fa32 	bl	8005816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40014800 	.word	0x40014800
 80053c0:	40023800 	.word	0x40023800

080053c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <MX_USART1_UART_Init+0x50>)
 80053cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053ea:	220c      	movs	r2, #12
 80053ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <MX_USART1_UART_Init+0x4c>)
 80053fc:	f002 faea 	bl	80079d4 <HAL_UART_Init>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005406:	f7ff fe71 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000390 	.word	0x20000390
 8005414:	40011000 	.word	0x40011000

08005418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <HAL_UART_MspInit+0x84>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d12c      	bne.n	8005494 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005444:	f043 0310 	orr.w	r3, r3, #16
 8005448:	6453      	str	r3, [r2, #68]	; 0x44
 800544a:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <HAL_UART_MspInit+0x88>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <HAL_UART_MspInit+0x88>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_UART_MspInit+0x88>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8005472:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8005476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005480:	2303      	movs	r3, #3
 8005482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005484:	2307      	movs	r3, #7
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	4805      	ldr	r0, [pc, #20]	; (80054a4 <HAL_UART_MspInit+0x8c>)
 8005490:	f000 f9dc 	bl	800584c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005494:	bf00      	nop
 8005496:	3728      	adds	r7, #40	; 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40011000 	.word	0x40011000
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40020000 	.word	0x40020000

080054a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054ac:	480d      	ldr	r0, [pc, #52]	; (80054e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054ae:	490e      	ldr	r1, [pc, #56]	; (80054e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054b4:	e002      	b.n	80054bc <LoopCopyDataInit>

080054b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054ba:	3304      	adds	r3, #4

080054bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054c0:	d3f9      	bcc.n	80054b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054c2:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054c4:	4c0b      	ldr	r4, [pc, #44]	; (80054f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80054c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054c8:	e001      	b.n	80054ce <LoopFillZerobss>

080054ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054cc:	3204      	adds	r2, #4

080054ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054d0:	d3fb      	bcc.n	80054ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054d2:	f7ff ff19 	bl	8005308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054d6:	f003 fd01 	bl	8008edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054da:	f7ff fcdb 	bl	8004e94 <main>
  bx  lr    
 80054de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80054e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054e8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80054ec:	0800cb54 	.word	0x0800cb54
  ldr r2, =_sbss
 80054f0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80054f4:	200003e8 	.word	0x200003e8

080054f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054f8:	e7fe      	b.n	80054f8 <ADC_IRQHandler>
	...

080054fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_Init+0x40>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <HAL_Init+0x40>)
 8005506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800550a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_Init+0x40>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0a      	ldr	r2, [pc, #40]	; (800553c <HAL_Init+0x40>)
 8005512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005518:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_Init+0x40>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a07      	ldr	r2, [pc, #28]	; (800553c <HAL_Init+0x40>)
 800551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005524:	2003      	movs	r0, #3
 8005526:	f000 f94f 	bl	80057c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800552a:	200f      	movs	r0, #15
 800552c:	f000 f808 	bl	8005540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005530:	f7ff fde2 	bl	80050f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023c00 	.word	0x40023c00

08005540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005548:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_InitTick+0x54>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_InitTick+0x58>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005556:	fbb3 f3f1 	udiv	r3, r3, r1
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f967 	bl	8005832 <HAL_SYSTICK_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e00e      	b.n	800558c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b0f      	cmp	r3, #15
 8005572:	d80a      	bhi.n	800558a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005574:	2200      	movs	r2, #0
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800557c:	f000 f92f 	bl	80057de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005580:	4a06      	ldr	r2, [pc, #24]	; (800559c <HAL_InitTick+0x5c>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	2000003c 	.word	0x2000003c
 8005598:	20000044 	.word	0x20000044
 800559c:	20000040 	.word	0x20000040

080055a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_IncTick+0x20>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <HAL_IncTick+0x24>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4413      	add	r3, r2
 80055b0:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <HAL_IncTick+0x24>)
 80055b2:	6013      	str	r3, [r2, #0]
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000044 	.word	0x20000044
 80055c4:	200003d4 	.word	0x200003d4

080055c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return uwTick;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_GetTick+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200003d4 	.word	0x200003d4

080055e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055e8:	f7ff ffee 	bl	80055c8 <HAL_GetTick>
 80055ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f8:	d005      	beq.n	8005606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <HAL_Delay+0x44>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005606:	bf00      	nop
 8005608:	f7ff ffde 	bl	80055c8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	429a      	cmp	r2, r3
 8005616:	d8f7      	bhi.n	8005608 <HAL_Delay+0x28>
  {
  }
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000044 	.word	0x20000044

08005628 <__NVIC_SetPriorityGrouping>:
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60d3      	str	r3, [r2, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_GetPriorityGrouping>:
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <__NVIC_GetPriorityGrouping+0x18>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 0307 	and.w	r3, r3, #7
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_EnableIRQ>:
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db0b      	blt.n	80056b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <__NVIC_EnableIRQ+0x38>)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2001      	movs	r0, #1
 80056ae:	fa00 f202 	lsl.w	r2, r0, r2
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e100 	.word	0xe000e100

080056c8 <__NVIC_SetPriority>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db0a      	blt.n	80056f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <__NVIC_SetPriority+0x4c>)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	0112      	lsls	r2, r2, #4
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	440b      	add	r3, r1
 80056ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056f0:	e00a      	b.n	8005708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4908      	ldr	r1, [pc, #32]	; (8005718 <__NVIC_SetPriority+0x50>)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	3b04      	subs	r3, #4
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	440b      	add	r3, r1
 8005706:	761a      	strb	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000e100 	.word	0xe000e100
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <NVIC_EncodePriority>:
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f1c3 0307 	rsb	r3, r3, #7
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf28      	it	cs
 800573a:	2304      	movcs	r3, #4
 800573c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3304      	adds	r3, #4
 8005742:	2b06      	cmp	r3, #6
 8005744:	d902      	bls.n	800574c <NVIC_EncodePriority+0x30>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3b03      	subs	r3, #3
 800574a:	e000      	b.n	800574e <NVIC_EncodePriority+0x32>
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	401a      	ands	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43d9      	mvns	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	4313      	orrs	r3, r2
}
 8005776:	4618      	mov	r0, r3
 8005778:	3724      	adds	r7, #36	; 0x24
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005794:	d301      	bcc.n	800579a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005796:	2301      	movs	r3, #1
 8005798:	e00f      	b.n	80057ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <SysTick_Config+0x40>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057a2:	210f      	movs	r1, #15
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a8:	f7ff ff8e 	bl	80056c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <SysTick_Config+0x40>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <SysTick_Config+0x40>)
 80057b4:	2207      	movs	r2, #7
 80057b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000e010 	.word	0xe000e010

080057c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff29 	bl	8005628 <__NVIC_SetPriorityGrouping>
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	4603      	mov	r3, r0
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057f0:	f7ff ff3e 	bl	8005670 <__NVIC_GetPriorityGrouping>
 80057f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	6978      	ldr	r0, [r7, #20]
 80057fc:	f7ff ff8e 	bl	800571c <NVIC_EncodePriority>
 8005800:	4602      	mov	r2, r0
 8005802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff5d 	bl	80056c8 <__NVIC_SetPriority>
}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	4603      	mov	r3, r0
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff31 	bl	800568c <__NVIC_EnableIRQ>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ffa2 	bl	8005784 <SysTick_Config>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800584c:	b480      	push	{r7}
 800584e:	b089      	sub	sp, #36	; 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e159      	b.n	8005b1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005868:	2201      	movs	r2, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	f040 8148 	bne.w	8005b16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d005      	beq.n	800589e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800589a:	2b02      	cmp	r3, #2
 800589c:	d130      	bne.n	8005900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	2203      	movs	r2, #3
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058d4:	2201      	movs	r2, #1
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 0201 	and.w	r2, r3, #1
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b03      	cmp	r3, #3
 800590a:	d017      	beq.n	800593c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d123      	bne.n	8005990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	08da      	lsrs	r2, r3, #3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3208      	adds	r2, #8
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	220f      	movs	r2, #15
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4013      	ands	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	08da      	lsrs	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3208      	adds	r2, #8
 800598a:	69b9      	ldr	r1, [r7, #24]
 800598c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	2203      	movs	r2, #3
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0203 	and.w	r2, r3, #3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80a2 	beq.w	8005b16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	4a56      	ldr	r2, [pc, #344]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 80059dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e0:	6453      	str	r3, [r2, #68]	; 0x44
 80059e2:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ee:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	3302      	adds	r3, #2
 80059f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	220f      	movs	r2, #15
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a49      	ldr	r2, [pc, #292]	; (8005b3c <HAL_GPIO_Init+0x2f0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d019      	beq.n	8005a4e <HAL_GPIO_Init+0x202>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a48      	ldr	r2, [pc, #288]	; (8005b40 <HAL_GPIO_Init+0x2f4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_GPIO_Init+0x1fe>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a47      	ldr	r2, [pc, #284]	; (8005b44 <HAL_GPIO_Init+0x2f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00d      	beq.n	8005a46 <HAL_GPIO_Init+0x1fa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a46      	ldr	r2, [pc, #280]	; (8005b48 <HAL_GPIO_Init+0x2fc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <HAL_GPIO_Init+0x1f6>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a45      	ldr	r2, [pc, #276]	; (8005b4c <HAL_GPIO_Init+0x300>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_GPIO_Init+0x1f2>
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e008      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	e006      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a42:	2303      	movs	r3, #3
 8005a44:	e004      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e002      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_GPIO_Init+0x204>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	f002 0203 	and.w	r2, r2, #3
 8005a56:	0092      	lsls	r2, r2, #2
 8005a58:	4093      	lsls	r3, r2
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a60:	4935      	ldr	r1, [pc, #212]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	3302      	adds	r3, #2
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a6e:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a92:	4a2f      	ldr	r2, [pc, #188]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005abc:	4a24      	ldr	r2, [pc, #144]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ae6:	4a1a      	ldr	r2, [pc, #104]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aec:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b10:	4a0f      	ldr	r2, [pc, #60]	; (8005b50 <HAL_GPIO_Init+0x304>)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b0f      	cmp	r3, #15
 8005b20:	f67f aea2 	bls.w	8005868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	3724      	adds	r7, #36	; 0x24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40013800 	.word	0x40013800
 8005b3c:	40020000 	.word	0x40020000
 8005b40:	40020400 	.word	0x40020400
 8005b44:	40020800 	.word	0x40020800
 8005b48:	40020c00 	.word	0x40020c00
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40013c00 	.word	0x40013c00

08005b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	887b      	ldrh	r3, [r7, #2]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e001      	b.n	8005b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
 8005b90:	4613      	mov	r3, r2
 8005b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b94:	787b      	ldrb	r3, [r7, #1]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b9a:	887a      	ldrh	r2, [r7, #2]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ba0:	e003      	b.n	8005baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ba2:	887b      	ldrh	r3, [r7, #2]
 8005ba4:	041a      	lsls	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	619a      	str	r2, [r3, #24]
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bc8:	887a      	ldrh	r2, [r7, #2]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	041a      	lsls	r2, r3, #16
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43d9      	mvns	r1, r3
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	400b      	ands	r3, r1
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e12b      	b.n	8005e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff f8f6 	bl	8004e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c50:	f001 fc08 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8005c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4a81      	ldr	r2, [pc, #516]	; (8005e60 <HAL_I2C_Init+0x274>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d807      	bhi.n	8005c70 <HAL_I2C_Init+0x84>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a80      	ldr	r2, [pc, #512]	; (8005e64 <HAL_I2C_Init+0x278>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	bf94      	ite	ls
 8005c68:	2301      	movls	r3, #1
 8005c6a:	2300      	movhi	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	e006      	b.n	8005c7e <HAL_I2C_Init+0x92>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a7d      	ldr	r2, [pc, #500]	; (8005e68 <HAL_I2C_Init+0x27c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bf94      	ite	ls
 8005c78:	2301      	movls	r3, #1
 8005c7a:	2300      	movhi	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e0e7      	b.n	8005e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a78      	ldr	r2, [pc, #480]	; (8005e6c <HAL_I2C_Init+0x280>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	0c9b      	lsrs	r3, r3, #18
 8005c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a6a      	ldr	r2, [pc, #424]	; (8005e60 <HAL_I2C_Init+0x274>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d802      	bhi.n	8005cc0 <HAL_I2C_Init+0xd4>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	e009      	b.n	8005cd4 <HAL_I2C_Init+0xe8>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	4a69      	ldr	r2, [pc, #420]	; (8005e70 <HAL_I2C_Init+0x284>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	495c      	ldr	r1, [pc, #368]	; (8005e60 <HAL_I2C_Init+0x274>)
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	d819      	bhi.n	8005d28 <HAL_I2C_Init+0x13c>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1e59      	subs	r1, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d08:	400b      	ands	r3, r1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_I2C_Init+0x138>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1e59      	subs	r1, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d22:	e051      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005d24:	2304      	movs	r3, #4
 8005d26:	e04f      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d111      	bne.n	8005d54 <HAL_I2C_Init+0x168>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1e58      	subs	r0, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	440b      	add	r3, r1
 8005d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d42:	3301      	adds	r3, #1
 8005d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e012      	b.n	8005d7a <HAL_I2C_Init+0x18e>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1e58      	subs	r0, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	0099      	lsls	r1, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_I2C_Init+0x196>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e022      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10e      	bne.n	8005da8 <HAL_I2C_Init+0x1bc>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1e58      	subs	r0, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6859      	ldr	r1, [r3, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	440b      	add	r3, r1
 8005d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da6:	e00f      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1e58      	subs	r0, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	0099      	lsls	r1, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	6809      	ldr	r1, [r1, #0]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6911      	ldr	r1, [r2, #16]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68d2      	ldr	r2, [r2, #12]
 8005e02:	4311      	orrs	r1, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695a      	ldr	r2, [r3, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	000186a0 	.word	0x000186a0
 8005e64:	001e847f 	.word	0x001e847f
 8005e68:	003d08ff 	.word	0x003d08ff
 8005e6c:	431bde83 	.word	0x431bde83
 8005e70:	10624dd3 	.word	0x10624dd3

08005e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	817b      	strh	r3, [r7, #10]
 8005e86:	460b      	mov	r3, r1
 8005e88:	813b      	strh	r3, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e8e:	f7ff fb9b 	bl	80055c8 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	f040 80d9 	bne.w	8006054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	2319      	movs	r3, #25
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	496d      	ldr	r1, [pc, #436]	; (8006060 <HAL_I2C_Mem_Write+0x1ec>)
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fc7f 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0cc      	b.n	8006056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_I2C_Mem_Write+0x56>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e0c5      	b.n	8006056 <HAL_I2C_Mem_Write+0x1e2>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d007      	beq.n	8005ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2221      	movs	r2, #33	; 0x21
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2240      	movs	r2, #64	; 0x40
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a3a      	ldr	r2, [r7, #32]
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a4d      	ldr	r2, [pc, #308]	; (8006064 <HAL_I2C_Mem_Write+0x1f0>)
 8005f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f32:	88f8      	ldrh	r0, [r7, #6]
 8005f34:	893a      	ldrh	r2, [r7, #8]
 8005f36:	8979      	ldrh	r1, [r7, #10]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fab6 	bl	80064b4 <I2C_RequestMemoryWrite>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d052      	beq.n	8005ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e081      	b.n	8006056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fd00 	bl	800695c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d107      	bne.n	8005f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e06b      	b.n	8006056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d11b      	bne.n	8005ff4 <HAL_I2C_Mem_Write+0x180>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1aa      	bne.n	8005f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fcec 	bl	80069de <I2C_WaitOnBTFFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00d      	beq.n	8006028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	2b04      	cmp	r3, #4
 8006012:	d107      	bne.n	8006024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e016      	b.n	8006056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	00100002 	.word	0x00100002
 8006064:	ffff0000 	.word	0xffff0000

08006068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	; 0x30
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	461a      	mov	r2, r3
 8006076:	4603      	mov	r3, r0
 8006078:	817b      	strh	r3, [r7, #10]
 800607a:	460b      	mov	r3, r1
 800607c:	813b      	strh	r3, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006082:	f7ff faa1 	bl	80055c8 <HAL_GetTick>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b20      	cmp	r3, #32
 8006092:	f040 8208 	bne.w	80064a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	2319      	movs	r3, #25
 800609c:	2201      	movs	r2, #1
 800609e:	497b      	ldr	r1, [pc, #492]	; (800628c <HAL_I2C_Mem_Read+0x224>)
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fb85 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e1fb      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_I2C_Mem_Read+0x56>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e1f4      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d007      	beq.n	80060e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2222      	movs	r2, #34	; 0x22
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2240      	movs	r2, #64	; 0x40
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4a5b      	ldr	r2, [pc, #364]	; (8006290 <HAL_I2C_Mem_Read+0x228>)
 8006124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006126:	88f8      	ldrh	r0, [r7, #6]
 8006128:	893a      	ldrh	r2, [r7, #8]
 800612a:	8979      	ldrh	r1, [r7, #10]
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4603      	mov	r3, r0
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 fa52 	bl	80065e0 <I2C_RequestMemoryRead>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e1b0      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	d113      	bne.n	8006176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614e:	2300      	movs	r3, #0
 8006150:	623b      	str	r3, [r7, #32]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	623b      	str	r3, [r7, #32]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	623b      	str	r3, [r7, #32]
 8006162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e184      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617a:	2b01      	cmp	r3, #1
 800617c:	d11b      	bne.n	80061b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618e:	2300      	movs	r3, #0
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e164      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d11b      	bne.n	80061f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	e144      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800620c:	e138      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006212:	2b03      	cmp	r3, #3
 8006214:	f200 80f1 	bhi.w	80063fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621c:	2b01      	cmp	r3, #1
 800621e:	d123      	bne.n	8006268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fc1b 	bl	8006a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e139      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006266:	e10b      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	2b02      	cmp	r3, #2
 800626e:	d14e      	bne.n	800630e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	2200      	movs	r2, #0
 8006278:	4906      	ldr	r1, [pc, #24]	; (8006294 <HAL_I2C_Mem_Read+0x22c>)
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fa98 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e10e      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
 800628a:	bf00      	nop
 800628c:	00100002 	.word	0x00100002
 8006290:	ffff0000 	.word	0xffff0000
 8006294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800630c:	e0b8      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2200      	movs	r2, #0
 8006316:	4966      	ldr	r1, [pc, #408]	; (80064b0 <HAL_I2C_Mem_Read+0x448>)
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fa49 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0bf      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	2200      	movs	r2, #0
 8006372:	494f      	ldr	r1, [pc, #316]	; (80064b0 <HAL_I2C_Mem_Read+0x448>)
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa1b 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e091      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063f8:	e042      	b.n	8006480 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fb2e 	bl	8006a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e04c      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d118      	bne.n	8006480 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	f47f aec2 	bne.w	800620e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e000      	b.n	80064a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	00010004 	.word	0x00010004

080064b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	817b      	strh	r3, [r7, #10]
 80064c6:	460b      	mov	r3, r1
 80064c8:	813b      	strh	r3, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f960 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006504:	d103      	bne.n	800650e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e05f      	b.n	80065d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006512:	897b      	ldrh	r3, [r7, #10]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	492d      	ldr	r1, [pc, #180]	; (80065dc <I2C_RequestMemoryWrite+0x128>)
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f998 	bl	800685e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e04c      	b.n	80065d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fa02 	bl	800695c <I2C_WaitOnTXEFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b04      	cmp	r3, #4
 8006564:	d107      	bne.n	8006576 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e02b      	b.n	80065d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006580:	893b      	ldrh	r3, [r7, #8]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	611a      	str	r2, [r3, #16]
 800658a:	e021      	b.n	80065d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b29b      	uxth	r3, r3
 8006592:	b2da      	uxtb	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800659a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659c:	6a39      	ldr	r1, [r7, #32]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f9dc 	bl	800695c <I2C_WaitOnTXEFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d107      	bne.n	80065c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e005      	b.n	80065d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	00010002 	.word	0x00010002

080065e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	461a      	mov	r2, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	817b      	strh	r3, [r7, #10]
 80065f2:	460b      	mov	r3, r1
 80065f4:	813b      	strh	r3, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006608:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	2200      	movs	r2, #0
 8006622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f8c2 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006640:	d103      	bne.n	800664a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e0aa      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800664e:	897b      	ldrh	r3, [r7, #10]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800665c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	4952      	ldr	r1, [pc, #328]	; (80067ac <I2C_RequestMemoryRead+0x1cc>)
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f8fa 	bl	800685e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e097      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800668a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668c:	6a39      	ldr	r1, [r7, #32]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f964 	bl	800695c <I2C_WaitOnTXEFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d107      	bne.n	80066b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e076      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066bc:	893b      	ldrh	r3, [r7, #8]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	611a      	str	r2, [r3, #16]
 80066c6:	e021      	b.n	800670c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066c8:	893b      	ldrh	r3, [r7, #8]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d8:	6a39      	ldr	r1, [r7, #32]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f93e 	bl	800695c <I2C_WaitOnTXEFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00d      	beq.n	8006702 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d107      	bne.n	80066fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e050      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006702:	893b      	ldrh	r3, [r7, #8]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670e:	6a39      	ldr	r1, [r7, #32]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f923 	bl	800695c <I2C_WaitOnTXEFlagUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00d      	beq.n	8006738 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b04      	cmp	r3, #4
 8006722:	d107      	bne.n	8006734 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006732:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e035      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006746:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	2200      	movs	r2, #0
 8006750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f82b 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676e:	d103      	bne.n	8006778 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e013      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800677c:	897b      	ldrh	r3, [r7, #10]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	6a3a      	ldr	r2, [r7, #32]
 8006790:	4906      	ldr	r1, [pc, #24]	; (80067ac <I2C_RequestMemoryRead+0x1cc>)
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f863 	bl	800685e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	00010002 	.word	0x00010002

080067b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c0:	e025      	b.n	800680e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c8:	d021      	beq.n	800680e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fe fefd 	bl	80055c8 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d116      	bne.n	800680e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f043 0220 	orr.w	r2, r3, #32
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e023      	b.n	8006856 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d10d      	bne.n	8006834 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	43da      	mvns	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	e00c      	b.n	800684e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	43da      	mvns	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	429a      	cmp	r2, r3
 8006852:	d0b6      	beq.n	80067c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
 800686a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800686c:	e051      	b.n	8006912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687c:	d123      	bne.n	80068c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006896:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f043 0204 	orr.w	r2, r3, #4
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e046      	b.n	8006954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068cc:	d021      	beq.n	8006912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fe fe7b 	bl	80055c8 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d116      	bne.n	8006912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e020      	b.n	8006954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d10c      	bne.n	8006936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	43da      	mvns	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4013      	ands	r3, r2
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	e00b      	b.n	800694e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	43da      	mvns	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4013      	ands	r3, r2
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d18d      	bne.n	800686e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006968:	e02d      	b.n	80069c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f8ce 	bl	8006b0c <I2C_IsAcknowledgeFailed>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e02d      	b.n	80069d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006980:	d021      	beq.n	80069c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006982:	f7fe fe21 	bl	80055c8 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d116      	bne.n	80069c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f043 0220 	orr.w	r2, r3, #32
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e007      	b.n	80069d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b80      	cmp	r3, #128	; 0x80
 80069d2:	d1ca      	bne.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ea:	e02d      	b.n	8006a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f88d 	bl	8006b0c <I2C_IsAcknowledgeFailed>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e02d      	b.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a02:	d021      	beq.n	8006a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a04:	f7fe fde0 	bl	80055c8 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d116      	bne.n	8006a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	f043 0220 	orr.w	r2, r3, #32
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e007      	b.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d1ca      	bne.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a6c:	e042      	b.n	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d119      	bne.n	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0210 	mvn.w	r2, #16
 8006a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e029      	b.n	8006b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fe fd8a 	bl	80055c8 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d302      	bcc.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d116      	bne.n	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e007      	b.n	8006b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d1b5      	bne.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b22:	d11b      	bne.n	8006b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	f043 0204 	orr.w	r2, r3, #4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e267      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d075      	beq.n	8006c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b8a:	4b88      	ldr	r3, [pc, #544]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d00c      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b96:	4b85      	ldr	r3, [pc, #532]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d112      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ba2:	4b82      	ldr	r3, [pc, #520]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bae:	d10b      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb0:	4b7e      	ldr	r3, [pc, #504]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d05b      	beq.n	8006c74 <HAL_RCC_OscConfig+0x108>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d157      	bne.n	8006c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e242      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d106      	bne.n	8006be0 <HAL_RCC_OscConfig+0x74>
 8006bd2:	4b76      	ldr	r3, [pc, #472]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a75      	ldr	r2, [pc, #468]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e01d      	b.n	8006c1c <HAL_RCC_OscConfig+0xb0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCC_OscConfig+0x98>
 8006bea:	4b70      	ldr	r3, [pc, #448]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6f      	ldr	r2, [pc, #444]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	4b6d      	ldr	r3, [pc, #436]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a6c      	ldr	r2, [pc, #432]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e00b      	b.n	8006c1c <HAL_RCC_OscConfig+0xb0>
 8006c04:	4b69      	ldr	r3, [pc, #420]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a68      	ldr	r2, [pc, #416]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4b66      	ldr	r3, [pc, #408]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a65      	ldr	r2, [pc, #404]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d013      	beq.n	8006c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c24:	f7fe fcd0 	bl	80055c8 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c2c:	f7fe fccc 	bl	80055c8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e207      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3e:	4b5b      	ldr	r3, [pc, #364]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0xc0>
 8006c4a:	e014      	b.n	8006c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fe fcbc 	bl	80055c8 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c54:	f7fe fcb8 	bl	80055c8 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b64      	cmp	r3, #100	; 0x64
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e1f3      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c66:	4b51      	ldr	r3, [pc, #324]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0xe8>
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d063      	beq.n	8006d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c82:	4b4a      	ldr	r3, [pc, #296]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 030c 	and.w	r3, r3, #12
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8e:	4b47      	ldr	r3, [pc, #284]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d11c      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9a:	4b44      	ldr	r3, [pc, #272]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d116      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_RCC_OscConfig+0x152>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d001      	beq.n	8006cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e1c7      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cbe:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4937      	ldr	r1, [pc, #220]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cd2:	e03a      	b.n	8006d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d020      	beq.n	8006d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cdc:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <HAL_RCC_OscConfig+0x244>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce2:	f7fe fc71 	bl	80055c8 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cea:	f7fe fc6d 	bl	80055c8 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e1a8      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfc:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d08:	4b28      	ldr	r3, [pc, #160]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4925      	ldr	r1, [pc, #148]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	600b      	str	r3, [r1, #0]
 8006d1c:	e015      	b.n	8006d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d1e:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <HAL_RCC_OscConfig+0x244>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fe fc50 	bl	80055c8 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d2c:	f7fe fc4c 	bl	80055c8 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e187      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3e:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d036      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <HAL_RCC_OscConfig+0x248>)
 8006d60:	2201      	movs	r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d64:	f7fe fc30 	bl	80055c8 <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d6c:	f7fe fc2c 	bl	80055c8 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e167      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <HAL_RCC_OscConfig+0x240>)
 8006d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f0      	beq.n	8006d6c <HAL_RCC_OscConfig+0x200>
 8006d8a:	e01b      	b.n	8006dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <HAL_RCC_OscConfig+0x248>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d92:	f7fe fc19 	bl	80055c8 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d98:	e00e      	b.n	8006db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9a:	f7fe fc15 	bl	80055c8 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d907      	bls.n	8006db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e150      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
 8006dac:	40023800 	.word	0x40023800
 8006db0:	42470000 	.word	0x42470000
 8006db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db8:	4b88      	ldr	r3, [pc, #544]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1ea      	bne.n	8006d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8097 	beq.w	8006f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd6:	4b81      	ldr	r3, [pc, #516]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10f      	bne.n	8006e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	4b7d      	ldr	r3, [pc, #500]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	4a7c      	ldr	r2, [pc, #496]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df0:	6413      	str	r3, [r2, #64]	; 0x40
 8006df2:	4b7a      	ldr	r3, [pc, #488]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfa:	60bb      	str	r3, [r7, #8]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e02:	4b77      	ldr	r3, [pc, #476]	; (8006fe0 <HAL_RCC_OscConfig+0x474>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d118      	bne.n	8006e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e0e:	4b74      	ldr	r3, [pc, #464]	; (8006fe0 <HAL_RCC_OscConfig+0x474>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a73      	ldr	r2, [pc, #460]	; (8006fe0 <HAL_RCC_OscConfig+0x474>)
 8006e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e1a:	f7fe fbd5 	bl	80055c8 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e22:	f7fe fbd1 	bl	80055c8 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e10c      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e34:	4b6a      	ldr	r3, [pc, #424]	; (8006fe0 <HAL_RCC_OscConfig+0x474>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f0      	beq.n	8006e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d106      	bne.n	8006e56 <HAL_RCC_OscConfig+0x2ea>
 8006e48:	4b64      	ldr	r3, [pc, #400]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	4a63      	ldr	r2, [pc, #396]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6713      	str	r3, [r2, #112]	; 0x70
 8006e54:	e01c      	b.n	8006e90 <HAL_RCC_OscConfig+0x324>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d10c      	bne.n	8006e78 <HAL_RCC_OscConfig+0x30c>
 8006e5e:	4b5f      	ldr	r3, [pc, #380]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	4a5e      	ldr	r2, [pc, #376]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e64:	f043 0304 	orr.w	r3, r3, #4
 8006e68:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6a:	4b5c      	ldr	r3, [pc, #368]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	4a5b      	ldr	r2, [pc, #364]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e70:	f043 0301 	orr.w	r3, r3, #1
 8006e74:	6713      	str	r3, [r2, #112]	; 0x70
 8006e76:	e00b      	b.n	8006e90 <HAL_RCC_OscConfig+0x324>
 8006e78:	4b58      	ldr	r3, [pc, #352]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	4a57      	ldr	r2, [pc, #348]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	6713      	str	r3, [r2, #112]	; 0x70
 8006e84:	4b55      	ldr	r3, [pc, #340]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e88:	4a54      	ldr	r2, [pc, #336]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006e8a:	f023 0304 	bic.w	r3, r3, #4
 8006e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d015      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e98:	f7fe fb96 	bl	80055c8 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9e:	e00a      	b.n	8006eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea0:	f7fe fb92 	bl	80055c8 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e0cb      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb6:	4b49      	ldr	r3, [pc, #292]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0ee      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x334>
 8006ec2:	e014      	b.n	8006eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec4:	f7fe fb80 	bl	80055c8 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ecc:	f7fe fb7c 	bl	80055c8 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e0b5      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee2:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1ee      	bne.n	8006ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d105      	bne.n	8006f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef4:	4b39      	ldr	r3, [pc, #228]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	4a38      	ldr	r2, [pc, #224]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80a1 	beq.w	800704c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f0a:	4b34      	ldr	r3, [pc, #208]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 030c 	and.w	r3, r3, #12
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d05c      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d141      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1e:	4b31      	ldr	r3, [pc, #196]	; (8006fe4 <HAL_RCC_OscConfig+0x478>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f24:	f7fe fb50 	bl	80055c8 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f2c:	f7fe fb4c 	bl	80055c8 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e087      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f3e:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f0      	bne.n	8006f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	019b      	lsls	r3, r3, #6
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	3b01      	subs	r3, #1
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	061b      	lsls	r3, r3, #24
 8006f6e:	491b      	ldr	r1, [pc, #108]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f74:	4b1b      	ldr	r3, [pc, #108]	; (8006fe4 <HAL_RCC_OscConfig+0x478>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7a:	f7fe fb25 	bl	80055c8 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f82:	f7fe fb21 	bl	80055c8 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e05c      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x416>
 8006fa0:	e054      	b.n	800704c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <HAL_RCC_OscConfig+0x478>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa8:	f7fe fb0e 	bl	80055c8 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb0:	f7fe fb0a 	bl	80055c8 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e045      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc2:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <HAL_RCC_OscConfig+0x470>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x444>
 8006fce:	e03d      	b.n	800704c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d107      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e038      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	40007000 	.word	0x40007000
 8006fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <HAL_RCC_OscConfig+0x4ec>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d028      	beq.n	8007048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d121      	bne.n	8007048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700e:	429a      	cmp	r2, r3
 8007010:	d11a      	bne.n	8007048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007018:	4013      	ands	r3, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800701e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007020:	4293      	cmp	r3, r2
 8007022:	d111      	bne.n	8007048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	3b01      	subs	r3, #1
 8007032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d107      	bne.n	8007048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40023800 	.word	0x40023800

0800705c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0cc      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007070:	4b68      	ldr	r3, [pc, #416]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d90c      	bls.n	8007098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707e:	4b65      	ldr	r3, [pc, #404]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	4b63      	ldr	r3, [pc, #396]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d001      	beq.n	8007098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0b8      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d020      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b0:	4b59      	ldr	r3, [pc, #356]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4a58      	ldr	r2, [pc, #352]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070c8:	4b53      	ldr	r3, [pc, #332]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4a52      	ldr	r2, [pc, #328]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d4:	4b50      	ldr	r3, [pc, #320]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	494d      	ldr	r1, [pc, #308]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d044      	beq.n	800717c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d107      	bne.n	800710a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fa:	4b47      	ldr	r3, [pc, #284]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d119      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e07f      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d003      	beq.n	800711a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007116:	2b03      	cmp	r3, #3
 8007118:	d107      	bne.n	800712a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711a:	4b3f      	ldr	r3, [pc, #252]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e06f      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712a:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e067      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713a:	4b37      	ldr	r3, [pc, #220]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f023 0203 	bic.w	r2, r3, #3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	4934      	ldr	r1, [pc, #208]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 8007148:	4313      	orrs	r3, r2
 800714a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800714c:	f7fe fa3c 	bl	80055c8 <HAL_GetTick>
 8007150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007152:	e00a      	b.n	800716a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007154:	f7fe fa38 	bl	80055c8 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007162:	4293      	cmp	r3, r2
 8007164:	d901      	bls.n	800716a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e04f      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716a:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 020c 	and.w	r2, r3, #12
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	429a      	cmp	r2, r3
 800717a:	d1eb      	bne.n	8007154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d20c      	bcs.n	80071a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b22      	ldr	r3, [pc, #136]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007192:	4b20      	ldr	r3, [pc, #128]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d001      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e032      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b0:	4b19      	ldr	r3, [pc, #100]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4916      	ldr	r1, [pc, #88]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	490e      	ldr	r1, [pc, #56]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071e2:	f000 f82d 	bl	8007240 <HAL_RCC_GetSysClockFreq>
 80071e6:	4602      	mov	r2, r0
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	490a      	ldr	r1, [pc, #40]	; (800721c <HAL_RCC_ClockConfig+0x1c0>)
 80071f4:	5ccb      	ldrb	r3, [r1, r3]
 80071f6:	fa22 f303 	lsr.w	r3, r2, r3
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_RCC_ClockConfig+0x1c8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f99c 	bl	8005540 <HAL_InitTick>

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023c00 	.word	0x40023c00
 8007218:	40023800 	.word	0x40023800
 800721c:	0800c6d0 	.word	0x0800c6d0
 8007220:	2000003c 	.word	0x2000003c
 8007224:	20000040 	.word	0x20000040

08007228 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800722c:	4b03      	ldr	r3, [pc, #12]	; (800723c <HAL_RCC_EnableCSS+0x14>)
 800722e:	2201      	movs	r2, #1
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	bf00      	nop
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	4247004c 	.word	0x4247004c

08007240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007244:	b094      	sub	sp, #80	; 0x50
 8007246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	647b      	str	r3, [r7, #68]	; 0x44
 800724c:	2300      	movs	r3, #0
 800724e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007250:	2300      	movs	r3, #0
 8007252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007258:	4b79      	ldr	r3, [pc, #484]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 030c 	and.w	r3, r3, #12
 8007260:	2b08      	cmp	r3, #8
 8007262:	d00d      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x40>
 8007264:	2b08      	cmp	r3, #8
 8007266:	f200 80e1 	bhi.w	800742c <HAL_RCC_GetSysClockFreq+0x1ec>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x34>
 800726e:	2b04      	cmp	r3, #4
 8007270:	d003      	beq.n	800727a <HAL_RCC_GetSysClockFreq+0x3a>
 8007272:	e0db      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007274:	4b73      	ldr	r3, [pc, #460]	; (8007444 <HAL_RCC_GetSysClockFreq+0x204>)
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007278:	e0db      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800727a:	4b73      	ldr	r3, [pc, #460]	; (8007448 <HAL_RCC_GetSysClockFreq+0x208>)
 800727c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800727e:	e0d8      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007280:	4b6f      	ldr	r3, [pc, #444]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800728a:	4b6d      	ldr	r3, [pc, #436]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d063      	beq.n	800735e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007296:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	099b      	lsrs	r3, r3, #6
 800729c:	2200      	movs	r2, #0
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	633b      	str	r3, [r7, #48]	; 0x30
 80072aa:	2300      	movs	r3, #0
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
 80072ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f04f 0000 	mov.w	r0, #0
 80072ba:	f04f 0100 	mov.w	r1, #0
 80072be:	0159      	lsls	r1, r3, #5
 80072c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072c4:	0150      	lsls	r0, r2, #5
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4621      	mov	r1, r4
 80072cc:	1a51      	subs	r1, r2, r1
 80072ce:	6139      	str	r1, [r7, #16]
 80072d0:	4629      	mov	r1, r5
 80072d2:	eb63 0301 	sbc.w	r3, r3, r1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072e4:	4659      	mov	r1, fp
 80072e6:	018b      	lsls	r3, r1, #6
 80072e8:	4651      	mov	r1, sl
 80072ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072ee:	4651      	mov	r1, sl
 80072f0:	018a      	lsls	r2, r1, #6
 80072f2:	4651      	mov	r1, sl
 80072f4:	ebb2 0801 	subs.w	r8, r2, r1
 80072f8:	4659      	mov	r1, fp
 80072fa:	eb63 0901 	sbc.w	r9, r3, r1
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800730a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800730e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007312:	4690      	mov	r8, r2
 8007314:	4699      	mov	r9, r3
 8007316:	4623      	mov	r3, r4
 8007318:	eb18 0303 	adds.w	r3, r8, r3
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	462b      	mov	r3, r5
 8007320:	eb49 0303 	adc.w	r3, r9, r3
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007332:	4629      	mov	r1, r5
 8007334:	024b      	lsls	r3, r1, #9
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800733c:	4621      	mov	r1, r4
 800733e:	024a      	lsls	r2, r1, #9
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007346:	2200      	movs	r2, #0
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
 800734a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800734c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007350:	f7f9 fcd2 	bl	8000cf8 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4613      	mov	r3, r2
 800735a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735c:	e058      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800735e:	4b38      	ldr	r3, [pc, #224]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	099b      	lsrs	r3, r3, #6
 8007364:	2200      	movs	r2, #0
 8007366:	4618      	mov	r0, r3
 8007368:	4611      	mov	r1, r2
 800736a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800736e:	623b      	str	r3, [r7, #32]
 8007370:	2300      	movs	r3, #0
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
 8007374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	f04f 0000 	mov.w	r0, #0
 8007380:	f04f 0100 	mov.w	r1, #0
 8007384:	0159      	lsls	r1, r3, #5
 8007386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800738a:	0150      	lsls	r0, r2, #5
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4641      	mov	r1, r8
 8007392:	ebb2 0a01 	subs.w	sl, r2, r1
 8007396:	4649      	mov	r1, r9
 8007398:	eb63 0b01 	sbc.w	fp, r3, r1
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073b0:	ebb2 040a 	subs.w	r4, r2, sl
 80073b4:	eb63 050b 	sbc.w	r5, r3, fp
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	00eb      	lsls	r3, r5, #3
 80073c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073c6:	00e2      	lsls	r2, r4, #3
 80073c8:	4614      	mov	r4, r2
 80073ca:	461d      	mov	r5, r3
 80073cc:	4643      	mov	r3, r8
 80073ce:	18e3      	adds	r3, r4, r3
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	464b      	mov	r3, r9
 80073d4:	eb45 0303 	adc.w	r3, r5, r3
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073e6:	4629      	mov	r1, r5
 80073e8:	028b      	lsls	r3, r1, #10
 80073ea:	4621      	mov	r1, r4
 80073ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073f0:	4621      	mov	r1, r4
 80073f2:	028a      	lsls	r2, r1, #10
 80073f4:	4610      	mov	r0, r2
 80073f6:	4619      	mov	r1, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	2200      	movs	r2, #0
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	61fa      	str	r2, [r7, #28]
 8007400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007404:	f7f9 fc78 	bl	8000cf8 <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4613      	mov	r3, r2
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	3301      	adds	r3, #1
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007424:	fbb2 f3f3 	udiv	r3, r2, r3
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800742a:	e002      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCC_GetSysClockFreq+0x204>)
 800742e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007434:	4618      	mov	r0, r3
 8007436:	3750      	adds	r7, #80	; 0x50
 8007438:	46bd      	mov	sp, r7
 800743a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800743e:	bf00      	nop
 8007440:	40023800 	.word	0x40023800
 8007444:	00f42400 	.word	0x00f42400
 8007448:	007a1200 	.word	0x007a1200

0800744c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007450:	4b03      	ldr	r3, [pc, #12]	; (8007460 <HAL_RCC_GetHCLKFreq+0x14>)
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	2000003c 	.word	0x2000003c

08007464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007468:	f7ff fff0 	bl	800744c <HAL_RCC_GetHCLKFreq>
 800746c:	4602      	mov	r2, r0
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	0a9b      	lsrs	r3, r3, #10
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	4903      	ldr	r1, [pc, #12]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800747a:	5ccb      	ldrb	r3, [r1, r3]
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007480:	4618      	mov	r0, r3
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40023800 	.word	0x40023800
 8007488:	0800c6e0 	.word	0x0800c6e0

0800748c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007490:	f7ff ffdc 	bl	800744c <HAL_RCC_GetHCLKFreq>
 8007494:	4602      	mov	r2, r0
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	0b5b      	lsrs	r3, r3, #13
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	4903      	ldr	r1, [pc, #12]	; (80074b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a2:	5ccb      	ldrb	r3, [r1, r3]
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40023800 	.word	0x40023800
 80074b0:	0800c6e0 	.word	0x0800c6e0

080074b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80074b8:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c0:	2b80      	cmp	r3, #128	; 0x80
 80074c2:	d104      	bne.n	80074ce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80074c4:	f000 f80a 	bl	80074dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80074ca:	2280      	movs	r2, #128	; 0x80
 80074cc:	701a      	strb	r2, [r3, #0]
  }
}
 80074ce:	bf00      	nop
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	4002380e 	.word	0x4002380e

080074dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e041      	b.n	8007580 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d106      	bne.n	8007516 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fd ff2f 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	4619      	mov	r1, r3
 8007528:	4610      	mov	r0, r2
 800752a:	f000 f9bf 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d001      	beq.n	80075a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e044      	b.n	800762a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <HAL_TIM_Base_Start_IT+0xb0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d018      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x6c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ca:	d013      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x6c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1a      	ldr	r2, [pc, #104]	; (800763c <HAL_TIM_Base_Start_IT+0xb4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x6c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a19      	ldr	r2, [pc, #100]	; (8007640 <HAL_TIM_Base_Start_IT+0xb8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x6c>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a17      	ldr	r2, [pc, #92]	; (8007644 <HAL_TIM_Base_Start_IT+0xbc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x6c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a16      	ldr	r2, [pc, #88]	; (8007648 <HAL_TIM_Base_Start_IT+0xc0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d111      	bne.n	8007618 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b06      	cmp	r3, #6
 8007604:	d010      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007616:	e007      	b.n	8007628 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40010000 	.word	0x40010000
 800763c:	40000400 	.word	0x40000400
 8007640:	40000800 	.word	0x40000800
 8007644:	40000c00 	.word	0x40000c00
 8007648:	40014000 	.word	0x40014000

0800764c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b02      	cmp	r3, #2
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b02      	cmp	r3, #2
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0202 	mvn.w	r2, #2
 8007678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f8ee 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8e0 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f8f1 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d122      	bne.n	80076fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d11b      	bne.n	80076fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0204 	mvn.w	r2, #4
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f8c4 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8b6 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8c7 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b08      	cmp	r3, #8
 8007708:	d122      	bne.n	8007750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b08      	cmp	r3, #8
 8007716:	d11b      	bne.n	8007750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0208 	mvn.w	r2, #8
 8007720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2204      	movs	r2, #4
 8007726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f89a 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 800773c:	e005      	b.n	800774a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f88c 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f89d 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b10      	cmp	r3, #16
 800775c:	d122      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	2b10      	cmp	r3, #16
 800776a:	d11b      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0210 	mvn.w	r2, #16
 8007774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2208      	movs	r2, #8
 800777a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f870 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f862 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f873 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d10e      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d107      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0201 	mvn.w	r2, #1
 80077c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fd fc66 	bl	800509c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d10e      	bne.n	80077fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e8:	2b80      	cmp	r3, #128	; 0x80
 80077ea:	d107      	bne.n	80077fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8e2 	bl	80079c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b40      	cmp	r3, #64	; 0x40
 8007808:	d10e      	bne.n	8007828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007814:	2b40      	cmp	r3, #64	; 0x40
 8007816:	d107      	bne.n	8007828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f838 	bl	8007898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b20      	cmp	r3, #32
 8007834:	d10e      	bne.n	8007854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b20      	cmp	r3, #32
 8007842:	d107      	bne.n	8007854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0220 	mvn.w	r2, #32
 800784c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f8ac 	bl	80079ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a34      	ldr	r2, [pc, #208]	; (8007990 <TIM_Base_SetConfig+0xe4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00f      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ca:	d00b      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a31      	ldr	r2, [pc, #196]	; (8007994 <TIM_Base_SetConfig+0xe8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a30      	ldr	r2, [pc, #192]	; (8007998 <TIM_Base_SetConfig+0xec>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a2f      	ldr	r2, [pc, #188]	; (800799c <TIM_Base_SetConfig+0xf0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d108      	bne.n	80078f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a25      	ldr	r2, [pc, #148]	; (8007990 <TIM_Base_SetConfig+0xe4>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d01b      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007904:	d017      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a22      	ldr	r2, [pc, #136]	; (8007994 <TIM_Base_SetConfig+0xe8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d013      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a21      	ldr	r2, [pc, #132]	; (8007998 <TIM_Base_SetConfig+0xec>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00f      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a20      	ldr	r2, [pc, #128]	; (800799c <TIM_Base_SetConfig+0xf0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00b      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <TIM_Base_SetConfig+0xf4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d007      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <TIM_Base_SetConfig+0xf8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d003      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <TIM_Base_SetConfig+0xfc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d108      	bne.n	8007948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800793c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a08      	ldr	r2, [pc, #32]	; (8007990 <TIM_Base_SetConfig+0xe4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d103      	bne.n	800797c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	615a      	str	r2, [r3, #20]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40010000 	.word	0x40010000
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40000c00 	.word	0x40000c00
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800

080079ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e03f      	b.n	8007a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fd fd0c 	bl	8005418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2224      	movs	r2, #36	; 0x24
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f929 	bl	8007c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b08a      	sub	sp, #40	; 0x28
 8007a72:	af02      	add	r7, sp, #8
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d17c      	bne.n	8007b88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_UART_Transmit+0x2c>
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e075      	b.n	8007b8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_UART_Transmit+0x3e>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e06e      	b.n	8007b8a <HAL_UART_Transmit+0x11c>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2221      	movs	r2, #33	; 0x21
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ac2:	f7fd fd81 	bl	80055c8 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	88fa      	ldrh	r2, [r7, #6]
 8007acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	88fa      	ldrh	r2, [r7, #6]
 8007ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007adc:	d108      	bne.n	8007af0 <HAL_UART_Transmit+0x82>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	e003      	b.n	8007af8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b00:	e02a      	b.n	8007b58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2180      	movs	r1, #128	; 0x80
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f840 	bl	8007b92 <UART_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e036      	b.n	8007b8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	3302      	adds	r3, #2
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	e007      	b.n	8007b4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	3301      	adds	r3, #1
 8007b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1cf      	bne.n	8007b02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2140      	movs	r1, #64	; 0x40
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f810 	bl	8007b92 <UART_WaitOnFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e006      	b.n	8007b8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e000      	b.n	8007b8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b88:	2302      	movs	r3, #2
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b090      	sub	sp, #64	; 0x40
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	603b      	str	r3, [r7, #0]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba2:	e050      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007baa:	d04c      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb2:	f7fd fd09 	bl	80055c8 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d241      	bcs.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007be2:	637a      	str	r2, [r7, #52]	; 0x34
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e5      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3314      	adds	r3, #20
 8007bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	613b      	str	r3, [r7, #16]
   return(result);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3314      	adds	r3, #20
 8007c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c16:	623a      	str	r2, [r7, #32]
 8007c18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	69f9      	ldr	r1, [r7, #28]
 8007c1c:	6a3a      	ldr	r2, [r7, #32]
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e5      	bne.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e00f      	b.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	bf0c      	ite	eq
 8007c56:	2301      	moveq	r3, #1
 8007c58:	2300      	movne	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d09f      	beq.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3740      	adds	r7, #64	; 0x40
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c74:	b0c0      	sub	sp, #256	; 0x100
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	68d9      	ldr	r1, [r3, #12]
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	ea40 0301 	orr.w	r3, r0, r1
 8007c98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cc8:	f021 010c 	bic.w	r1, r1, #12
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cea:	6999      	ldr	r1, [r3, #24]
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	ea40 0301 	orr.w	r3, r0, r1
 8007cf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	4b8f      	ldr	r3, [pc, #572]	; (8007f3c <UART_SetConfig+0x2cc>)
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d005      	beq.n	8007d10 <UART_SetConfig+0xa0>
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4b8d      	ldr	r3, [pc, #564]	; (8007f40 <UART_SetConfig+0x2d0>)
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d104      	bne.n	8007d1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d10:	f7ff fbbc 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 8007d14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d18:	e003      	b.n	8007d22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d1a:	f7ff fba3 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8007d1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2c:	f040 810c 	bne.w	8007f48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d42:	4622      	mov	r2, r4
 8007d44:	462b      	mov	r3, r5
 8007d46:	1891      	adds	r1, r2, r2
 8007d48:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d4a:	415b      	adcs	r3, r3
 8007d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d52:	4621      	mov	r1, r4
 8007d54:	eb12 0801 	adds.w	r8, r2, r1
 8007d58:	4629      	mov	r1, r5
 8007d5a:	eb43 0901 	adc.w	r9, r3, r1
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d72:	4690      	mov	r8, r2
 8007d74:	4699      	mov	r9, r3
 8007d76:	4623      	mov	r3, r4
 8007d78:	eb18 0303 	adds.w	r3, r8, r3
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d80:	462b      	mov	r3, r5
 8007d82:	eb49 0303 	adc.w	r3, r9, r3
 8007d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d9e:	460b      	mov	r3, r1
 8007da0:	18db      	adds	r3, r3, r3
 8007da2:	653b      	str	r3, [r7, #80]	; 0x50
 8007da4:	4613      	mov	r3, r2
 8007da6:	eb42 0303 	adc.w	r3, r2, r3
 8007daa:	657b      	str	r3, [r7, #84]	; 0x54
 8007dac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007db0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007db4:	f7f8 ffa0 	bl	8000cf8 <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4b61      	ldr	r3, [pc, #388]	; (8007f44 <UART_SetConfig+0x2d4>)
 8007dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	011c      	lsls	r4, r3, #4
 8007dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007dd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	1891      	adds	r1, r2, r2
 8007dde:	64b9      	str	r1, [r7, #72]	; 0x48
 8007de0:	415b      	adcs	r3, r3
 8007de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007de8:	4641      	mov	r1, r8
 8007dea:	eb12 0a01 	adds.w	sl, r2, r1
 8007dee:	4649      	mov	r1, r9
 8007df0:	eb43 0b01 	adc.w	fp, r3, r1
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e08:	4692      	mov	sl, r2
 8007e0a:	469b      	mov	fp, r3
 8007e0c:	4643      	mov	r3, r8
 8007e0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e16:	464b      	mov	r3, r9
 8007e18:	eb4b 0303 	adc.w	r3, fp, r3
 8007e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e34:	460b      	mov	r3, r1
 8007e36:	18db      	adds	r3, r3, r3
 8007e38:	643b      	str	r3, [r7, #64]	; 0x40
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	647b      	str	r3, [r7, #68]	; 0x44
 8007e42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e4a:	f7f8 ff55 	bl	8000cf8 <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	4b3b      	ldr	r3, [pc, #236]	; (8007f44 <UART_SetConfig+0x2d4>)
 8007e56:	fba3 2301 	umull	r2, r3, r3, r1
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	2264      	movs	r2, #100	; 0x64
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
 8007e62:	1acb      	subs	r3, r1, r3
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e6a:	4b36      	ldr	r3, [pc, #216]	; (8007f44 <UART_SetConfig+0x2d4>)
 8007e6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e78:	441c      	add	r4, r3
 8007e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	1891      	adds	r1, r2, r2
 8007e92:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e94:	415b      	adcs	r3, r3
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	1851      	adds	r1, r2, r1
 8007ea0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	414b      	adcs	r3, r1
 8007ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	00cb      	lsls	r3, r1, #3
 8007eb8:	4651      	mov	r1, sl
 8007eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ebe:	4651      	mov	r1, sl
 8007ec0:	00ca      	lsls	r2, r1, #3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4642      	mov	r2, r8
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	460a      	mov	r2, r1
 8007ed4:	eb42 0303 	adc.w	r3, r2, r3
 8007ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ee8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007eec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	18db      	adds	r3, r3, r3
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	eb42 0303 	adc.w	r3, r2, r3
 8007efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f06:	f7f8 fef7 	bl	8000cf8 <__aeabi_uldivmod>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <UART_SetConfig+0x2d4>)
 8007f10:	fba3 1302 	umull	r1, r3, r3, r2
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	2164      	movs	r1, #100	; 0x64
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	3332      	adds	r3, #50	; 0x32
 8007f22:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <UART_SetConfig+0x2d4>)
 8007f24:	fba2 2303 	umull	r2, r3, r2, r3
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	f003 0207 	and.w	r2, r3, #7
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4422      	add	r2, r4
 8007f36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f38:	e105      	b.n	8008146 <UART_SetConfig+0x4d6>
 8007f3a:	bf00      	nop
 8007f3c:	40011000 	.word	0x40011000
 8007f40:	40011400 	.word	0x40011400
 8007f44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f5a:	4642      	mov	r2, r8
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	1891      	adds	r1, r2, r2
 8007f60:	6239      	str	r1, [r7, #32]
 8007f62:	415b      	adcs	r3, r3
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
 8007f66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	1854      	adds	r4, r2, r1
 8007f6e:	4649      	mov	r1, r9
 8007f70:	eb43 0501 	adc.w	r5, r3, r1
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	00eb      	lsls	r3, r5, #3
 8007f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f82:	00e2      	lsls	r2, r4, #3
 8007f84:	4614      	mov	r4, r2
 8007f86:	461d      	mov	r5, r3
 8007f88:	4643      	mov	r3, r8
 8007f8a:	18e3      	adds	r3, r4, r3
 8007f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f90:	464b      	mov	r3, r9
 8007f92:	eb45 0303 	adc.w	r3, r5, r3
 8007f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	008b      	lsls	r3, r1, #2
 8007fba:	4621      	mov	r1, r4
 8007fbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	008a      	lsls	r2, r1, #2
 8007fc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fc8:	f7f8 fe96 	bl	8000cf8 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4b60      	ldr	r3, [pc, #384]	; (8008154 <UART_SetConfig+0x4e4>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	011c      	lsls	r4, r3, #4
 8007fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fe4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fe8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	1891      	adds	r1, r2, r2
 8007ff2:	61b9      	str	r1, [r7, #24]
 8007ff4:	415b      	adcs	r3, r3
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	1851      	adds	r1, r2, r1
 8008000:	6139      	str	r1, [r7, #16]
 8008002:	4649      	mov	r1, r9
 8008004:	414b      	adcs	r3, r1
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008014:	4659      	mov	r1, fp
 8008016:	00cb      	lsls	r3, r1, #3
 8008018:	4651      	mov	r1, sl
 800801a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800801e:	4651      	mov	r1, sl
 8008020:	00ca      	lsls	r2, r1, #3
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	4603      	mov	r3, r0
 8008028:	4642      	mov	r2, r8
 800802a:	189b      	adds	r3, r3, r2
 800802c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008030:	464b      	mov	r3, r9
 8008032:	460a      	mov	r2, r1
 8008034:	eb42 0303 	adc.w	r3, r2, r3
 8008038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	67bb      	str	r3, [r7, #120]	; 0x78
 8008046:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008054:	4649      	mov	r1, r9
 8008056:	008b      	lsls	r3, r1, #2
 8008058:	4641      	mov	r1, r8
 800805a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800805e:	4641      	mov	r1, r8
 8008060:	008a      	lsls	r2, r1, #2
 8008062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008066:	f7f8 fe47 	bl	8000cf8 <__aeabi_uldivmod>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4b39      	ldr	r3, [pc, #228]	; (8008154 <UART_SetConfig+0x4e4>)
 8008070:	fba3 1302 	umull	r1, r3, r3, r2
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	2164      	movs	r1, #100	; 0x64
 8008078:	fb01 f303 	mul.w	r3, r1, r3
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	3332      	adds	r3, #50	; 0x32
 8008082:	4a34      	ldr	r2, [pc, #208]	; (8008154 <UART_SetConfig+0x4e4>)
 8008084:	fba2 2303 	umull	r2, r3, r2, r3
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800808e:	441c      	add	r4, r3
 8008090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008094:	2200      	movs	r2, #0
 8008096:	673b      	str	r3, [r7, #112]	; 0x70
 8008098:	677a      	str	r2, [r7, #116]	; 0x74
 800809a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	1891      	adds	r1, r2, r2
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	415b      	adcs	r3, r3
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ae:	4641      	mov	r1, r8
 80080b0:	1851      	adds	r1, r2, r1
 80080b2:	6039      	str	r1, [r7, #0]
 80080b4:	4649      	mov	r1, r9
 80080b6:	414b      	adcs	r3, r1
 80080b8:	607b      	str	r3, [r7, #4]
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080c6:	4659      	mov	r1, fp
 80080c8:	00cb      	lsls	r3, r1, #3
 80080ca:	4651      	mov	r1, sl
 80080cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d0:	4651      	mov	r1, sl
 80080d2:	00ca      	lsls	r2, r1, #3
 80080d4:	4610      	mov	r0, r2
 80080d6:	4619      	mov	r1, r3
 80080d8:	4603      	mov	r3, r0
 80080da:	4642      	mov	r2, r8
 80080dc:	189b      	adds	r3, r3, r2
 80080de:	66bb      	str	r3, [r7, #104]	; 0x68
 80080e0:	464b      	mov	r3, r9
 80080e2:	460a      	mov	r2, r1
 80080e4:	eb42 0303 	adc.w	r3, r2, r3
 80080e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	663b      	str	r3, [r7, #96]	; 0x60
 80080f4:	667a      	str	r2, [r7, #100]	; 0x64
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008102:	4649      	mov	r1, r9
 8008104:	008b      	lsls	r3, r1, #2
 8008106:	4641      	mov	r1, r8
 8008108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800810c:	4641      	mov	r1, r8
 800810e:	008a      	lsls	r2, r1, #2
 8008110:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008114:	f7f8 fdf0 	bl	8000cf8 <__aeabi_uldivmod>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <UART_SetConfig+0x4e4>)
 800811e:	fba3 1302 	umull	r1, r3, r3, r2
 8008122:	095b      	lsrs	r3, r3, #5
 8008124:	2164      	movs	r1, #100	; 0x64
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	3332      	adds	r3, #50	; 0x32
 8008130:	4a08      	ldr	r2, [pc, #32]	; (8008154 <UART_SetConfig+0x4e4>)
 8008132:	fba2 2303 	umull	r2, r3, r2, r3
 8008136:	095b      	lsrs	r3, r3, #5
 8008138:	f003 020f 	and.w	r2, r3, #15
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4422      	add	r2, r4
 8008144:	609a      	str	r2, [r3, #8]
}
 8008146:	bf00      	nop
 8008148:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800814c:	46bd      	mov	sp, r7
 800814e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008152:	bf00      	nop
 8008154:	51eb851f 	.word	0x51eb851f

08008158 <asin>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	ed2d 8b02 	vpush	{d8}
 800815e:	ec55 4b10 	vmov	r4, r5, d0
 8008162:	f000 f85d 	bl	8008220 <__ieee754_asin>
 8008166:	4622      	mov	r2, r4
 8008168:	462b      	mov	r3, r5
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	eeb0 8a40 	vmov.f32	s16, s0
 8008172:	eef0 8a60 	vmov.f32	s17, s1
 8008176:	f7f8 fce1 	bl	8000b3c <__aeabi_dcmpun>
 800817a:	b9a8      	cbnz	r0, 80081a8 <asin+0x50>
 800817c:	ec45 4b10 	vmov	d0, r4, r5
 8008180:	f000 fe92 	bl	8008ea8 <fabs>
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <asin+0x60>)
 8008186:	ec51 0b10 	vmov	r0, r1, d0
 800818a:	2200      	movs	r2, #0
 800818c:	f7f8 fccc 	bl	8000b28 <__aeabi_dcmpgt>
 8008190:	b150      	cbz	r0, 80081a8 <asin+0x50>
 8008192:	f000 fe9d 	bl	8008ed0 <__errno>
 8008196:	ecbd 8b02 	vpop	{d8}
 800819a:	2321      	movs	r3, #33	; 0x21
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a2:	4806      	ldr	r0, [pc, #24]	; (80081bc <asin+0x64>)
 80081a4:	f000 be8c 	b.w	8008ec0 <nan>
 80081a8:	eeb0 0a48 	vmov.f32	s0, s16
 80081ac:	eef0 0a68 	vmov.f32	s1, s17
 80081b0:	ecbd 8b02 	vpop	{d8}
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	3ff00000 	.word	0x3ff00000
 80081bc:	0800ca38 	.word	0x0800ca38

080081c0 <atan2>:
 80081c0:	f000 ba42 	b.w	8008648 <__ieee754_atan2>

080081c4 <fmod>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	ed2d 8b02 	vpush	{d8}
 80081ca:	ec57 6b10 	vmov	r6, r7, d0
 80081ce:	ec55 4b11 	vmov	r4, r5, d1
 80081d2:	f000 fb03 	bl	80087dc <__ieee754_fmod>
 80081d6:	4622      	mov	r2, r4
 80081d8:	462b      	mov	r3, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	eeb0 8a40 	vmov.f32	s16, s0
 80081e2:	eef0 8a60 	vmov.f32	s17, s1
 80081e6:	f7f8 fca9 	bl	8000b3c <__aeabi_dcmpun>
 80081ea:	b990      	cbnz	r0, 8008212 <fmod+0x4e>
 80081ec:	2200      	movs	r2, #0
 80081ee:	2300      	movs	r3, #0
 80081f0:	4620      	mov	r0, r4
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7f8 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80081f8:	b158      	cbz	r0, 8008212 <fmod+0x4e>
 80081fa:	f000 fe69 	bl	8008ed0 <__errno>
 80081fe:	2321      	movs	r3, #33	; 0x21
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	2300      	movs	r3, #0
 8008206:	4610      	mov	r0, r2
 8008208:	4619      	mov	r1, r3
 800820a:	f7f8 fb27 	bl	800085c <__aeabi_ddiv>
 800820e:	ec41 0b18 	vmov	d8, r0, r1
 8008212:	eeb0 0a48 	vmov.f32	s0, s16
 8008216:	eef0 0a68 	vmov.f32	s1, s17
 800821a:	ecbd 8b02 	vpop	{d8}
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008220 <__ieee754_asin>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	ed2d 8b04 	vpush	{d8-d9}
 8008228:	ec55 4b10 	vmov	r4, r5, d0
 800822c:	4bcc      	ldr	r3, [pc, #816]	; (8008560 <__ieee754_asin+0x340>)
 800822e:	b083      	sub	sp, #12
 8008230:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008234:	4598      	cmp	r8, r3
 8008236:	9501      	str	r5, [sp, #4]
 8008238:	dd35      	ble.n	80082a6 <__ieee754_asin+0x86>
 800823a:	ee10 3a10 	vmov	r3, s0
 800823e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8008242:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8008246:	ea58 0303 	orrs.w	r3, r8, r3
 800824a:	d117      	bne.n	800827c <__ieee754_asin+0x5c>
 800824c:	a3aa      	add	r3, pc, #680	; (adr r3, 80084f8 <__ieee754_asin+0x2d8>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	ee10 0a10 	vmov	r0, s0
 8008256:	4629      	mov	r1, r5
 8008258:	f7f8 f9d6 	bl	8000608 <__aeabi_dmul>
 800825c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008500 <__ieee754_asin+0x2e0>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	4606      	mov	r6, r0
 8008264:	460f      	mov	r7, r1
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 f9cd 	bl	8000608 <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 f811 	bl	800029c <__adddf3>
 800827a:	e00b      	b.n	8008294 <__ieee754_asin+0x74>
 800827c:	ee10 2a10 	vmov	r2, s0
 8008280:	462b      	mov	r3, r5
 8008282:	ee10 0a10 	vmov	r0, s0
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 f806 	bl	8000298 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	f7f8 fae4 	bl	800085c <__aeabi_ddiv>
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	ec45 4b10 	vmov	d0, r4, r5
 800829c:	b003      	add	sp, #12
 800829e:	ecbd 8b04 	vpop	{d8-d9}
 80082a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a6:	4baf      	ldr	r3, [pc, #700]	; (8008564 <__ieee754_asin+0x344>)
 80082a8:	4598      	cmp	r8, r3
 80082aa:	dc11      	bgt.n	80082d0 <__ieee754_asin+0xb0>
 80082ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80082b0:	f280 80ae 	bge.w	8008410 <__ieee754_asin+0x1f0>
 80082b4:	a394      	add	r3, pc, #592	; (adr r3, 8008508 <__ieee754_asin+0x2e8>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	ee10 0a10 	vmov	r0, s0
 80082be:	4629      	mov	r1, r5
 80082c0:	f7f7 ffec 	bl	800029c <__adddf3>
 80082c4:	4ba8      	ldr	r3, [pc, #672]	; (8008568 <__ieee754_asin+0x348>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	f7f8 fc2e 	bl	8000b28 <__aeabi_dcmpgt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1e3      	bne.n	8008298 <__ieee754_asin+0x78>
 80082d0:	ec45 4b10 	vmov	d0, r4, r5
 80082d4:	f000 fde8 	bl	8008ea8 <fabs>
 80082d8:	49a3      	ldr	r1, [pc, #652]	; (8008568 <__ieee754_asin+0x348>)
 80082da:	ec53 2b10 	vmov	r2, r3, d0
 80082de:	2000      	movs	r0, #0
 80082e0:	f7f7 ffda 	bl	8000298 <__aeabi_dsub>
 80082e4:	4ba1      	ldr	r3, [pc, #644]	; (800856c <__ieee754_asin+0x34c>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	f7f8 f98e 	bl	8000608 <__aeabi_dmul>
 80082ec:	a388      	add	r3, pc, #544	; (adr r3, 8008510 <__ieee754_asin+0x2f0>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	4604      	mov	r4, r0
 80082f4:	460d      	mov	r5, r1
 80082f6:	f7f8 f987 	bl	8000608 <__aeabi_dmul>
 80082fa:	a387      	add	r3, pc, #540	; (adr r3, 8008518 <__ieee754_asin+0x2f8>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f7 ffcc 	bl	800029c <__adddf3>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f8 f97e 	bl	8000608 <__aeabi_dmul>
 800830c:	a384      	add	r3, pc, #528	; (adr r3, 8008520 <__ieee754_asin+0x300>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f7 ffc1 	bl	8000298 <__aeabi_dsub>
 8008316:	4622      	mov	r2, r4
 8008318:	462b      	mov	r3, r5
 800831a:	f7f8 f975 	bl	8000608 <__aeabi_dmul>
 800831e:	a382      	add	r3, pc, #520	; (adr r3, 8008528 <__ieee754_asin+0x308>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f7 ffba 	bl	800029c <__adddf3>
 8008328:	4622      	mov	r2, r4
 800832a:	462b      	mov	r3, r5
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	a37f      	add	r3, pc, #508	; (adr r3, 8008530 <__ieee754_asin+0x310>)
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	f7f7 ffaf 	bl	8000298 <__aeabi_dsub>
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f8 f963 	bl	8000608 <__aeabi_dmul>
 8008342:	a37d      	add	r3, pc, #500	; (adr r3, 8008538 <__ieee754_asin+0x318>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f7 ffa8 	bl	800029c <__adddf3>
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f8 f95a 	bl	8000608 <__aeabi_dmul>
 8008354:	a37a      	add	r3, pc, #488	; (adr r3, 8008540 <__ieee754_asin+0x320>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	ec41 0b18 	vmov	d8, r0, r1
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f8 f951 	bl	8000608 <__aeabi_dmul>
 8008366:	a378      	add	r3, pc, #480	; (adr r3, 8008548 <__ieee754_asin+0x328>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f7 ff94 	bl	8000298 <__aeabi_dsub>
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	f7f8 f948 	bl	8000608 <__aeabi_dmul>
 8008378:	a375      	add	r3, pc, #468	; (adr r3, 8008550 <__ieee754_asin+0x330>)
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f7f7 ff8d 	bl	800029c <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	f7f8 f93f 	bl	8000608 <__aeabi_dmul>
 800838a:	a373      	add	r3, pc, #460	; (adr r3, 8008558 <__ieee754_asin+0x338>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff82 	bl	8000298 <__aeabi_dsub>
 8008394:	4622      	mov	r2, r4
 8008396:	462b      	mov	r3, r5
 8008398:	f7f8 f936 	bl	8000608 <__aeabi_dmul>
 800839c:	4b72      	ldr	r3, [pc, #456]	; (8008568 <__ieee754_asin+0x348>)
 800839e:	2200      	movs	r2, #0
 80083a0:	f7f7 ff7c 	bl	800029c <__adddf3>
 80083a4:	ec45 4b10 	vmov	d0, r4, r5
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	f000 fb28 	bl	8008a00 <__ieee754_sqrt>
 80083b0:	4b6f      	ldr	r3, [pc, #444]	; (8008570 <__ieee754_asin+0x350>)
 80083b2:	4598      	cmp	r8, r3
 80083b4:	ec5b ab10 	vmov	sl, fp, d0
 80083b8:	f340 80dc 	ble.w	8008574 <__ieee754_asin+0x354>
 80083bc:	4632      	mov	r2, r6
 80083be:	463b      	mov	r3, r7
 80083c0:	ec51 0b18 	vmov	r0, r1, d8
 80083c4:	f7f8 fa4a 	bl	800085c <__aeabi_ddiv>
 80083c8:	4652      	mov	r2, sl
 80083ca:	465b      	mov	r3, fp
 80083cc:	f7f8 f91c 	bl	8000608 <__aeabi_dmul>
 80083d0:	4652      	mov	r2, sl
 80083d2:	465b      	mov	r3, fp
 80083d4:	f7f7 ff62 	bl	800029c <__adddf3>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	f7f7 ff5e 	bl	800029c <__adddf3>
 80083e0:	a347      	add	r3, pc, #284	; (adr r3, 8008500 <__ieee754_asin+0x2e0>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f7f7 ff57 	bl	8000298 <__aeabi_dsub>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	a142      	add	r1, pc, #264	; (adr r1, 80084f8 <__ieee754_asin+0x2d8>)
 80083f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f4:	f7f7 ff50 	bl	8000298 <__aeabi_dsub>
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bfdc      	itt	le
 80083fe:	4602      	movle	r2, r0
 8008400:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008404:	4604      	mov	r4, r0
 8008406:	460d      	mov	r5, r1
 8008408:	bfdc      	itt	le
 800840a:	4614      	movle	r4, r2
 800840c:	461d      	movle	r5, r3
 800840e:	e743      	b.n	8008298 <__ieee754_asin+0x78>
 8008410:	ee10 2a10 	vmov	r2, s0
 8008414:	ee10 0a10 	vmov	r0, s0
 8008418:	462b      	mov	r3, r5
 800841a:	4629      	mov	r1, r5
 800841c:	f7f8 f8f4 	bl	8000608 <__aeabi_dmul>
 8008420:	a33b      	add	r3, pc, #236	; (adr r3, 8008510 <__ieee754_asin+0x2f0>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	f7f8 f8ed 	bl	8000608 <__aeabi_dmul>
 800842e:	a33a      	add	r3, pc, #232	; (adr r3, 8008518 <__ieee754_asin+0x2f8>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f7 ff32 	bl	800029c <__adddf3>
 8008438:	4632      	mov	r2, r6
 800843a:	463b      	mov	r3, r7
 800843c:	f7f8 f8e4 	bl	8000608 <__aeabi_dmul>
 8008440:	a337      	add	r3, pc, #220	; (adr r3, 8008520 <__ieee754_asin+0x300>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f7 ff27 	bl	8000298 <__aeabi_dsub>
 800844a:	4632      	mov	r2, r6
 800844c:	463b      	mov	r3, r7
 800844e:	f7f8 f8db 	bl	8000608 <__aeabi_dmul>
 8008452:	a335      	add	r3, pc, #212	; (adr r3, 8008528 <__ieee754_asin+0x308>)
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f7f7 ff20 	bl	800029c <__adddf3>
 800845c:	4632      	mov	r2, r6
 800845e:	463b      	mov	r3, r7
 8008460:	f7f8 f8d2 	bl	8000608 <__aeabi_dmul>
 8008464:	a332      	add	r3, pc, #200	; (adr r3, 8008530 <__ieee754_asin+0x310>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	f7f7 ff15 	bl	8000298 <__aeabi_dsub>
 800846e:	4632      	mov	r2, r6
 8008470:	463b      	mov	r3, r7
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	a330      	add	r3, pc, #192	; (adr r3, 8008538 <__ieee754_asin+0x318>)
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f7f7 ff0e 	bl	800029c <__adddf3>
 8008480:	4632      	mov	r2, r6
 8008482:	463b      	mov	r3, r7
 8008484:	f7f8 f8c0 	bl	8000608 <__aeabi_dmul>
 8008488:	a32d      	add	r3, pc, #180	; (adr r3, 8008540 <__ieee754_asin+0x320>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	4680      	mov	r8, r0
 8008490:	4689      	mov	r9, r1
 8008492:	4630      	mov	r0, r6
 8008494:	4639      	mov	r1, r7
 8008496:	f7f8 f8b7 	bl	8000608 <__aeabi_dmul>
 800849a:	a32b      	add	r3, pc, #172	; (adr r3, 8008548 <__ieee754_asin+0x328>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 fefa 	bl	8000298 <__aeabi_dsub>
 80084a4:	4632      	mov	r2, r6
 80084a6:	463b      	mov	r3, r7
 80084a8:	f7f8 f8ae 	bl	8000608 <__aeabi_dmul>
 80084ac:	a328      	add	r3, pc, #160	; (adr r3, 8008550 <__ieee754_asin+0x330>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f7 fef3 	bl	800029c <__adddf3>
 80084b6:	4632      	mov	r2, r6
 80084b8:	463b      	mov	r3, r7
 80084ba:	f7f8 f8a5 	bl	8000608 <__aeabi_dmul>
 80084be:	a326      	add	r3, pc, #152	; (adr r3, 8008558 <__ieee754_asin+0x338>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f7 fee8 	bl	8000298 <__aeabi_dsub>
 80084c8:	4632      	mov	r2, r6
 80084ca:	463b      	mov	r3, r7
 80084cc:	f7f8 f89c 	bl	8000608 <__aeabi_dmul>
 80084d0:	4b25      	ldr	r3, [pc, #148]	; (8008568 <__ieee754_asin+0x348>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	f7f7 fee2 	bl	800029c <__adddf3>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4640      	mov	r0, r8
 80084de:	4649      	mov	r1, r9
 80084e0:	f7f8 f9bc 	bl	800085c <__aeabi_ddiv>
 80084e4:	4622      	mov	r2, r4
 80084e6:	462b      	mov	r3, r5
 80084e8:	f7f8 f88e 	bl	8000608 <__aeabi_dmul>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	e6bf      	b.n	8008276 <__ieee754_asin+0x56>
 80084f6:	bf00      	nop
 80084f8:	54442d18 	.word	0x54442d18
 80084fc:	3ff921fb 	.word	0x3ff921fb
 8008500:	33145c07 	.word	0x33145c07
 8008504:	3c91a626 	.word	0x3c91a626
 8008508:	8800759c 	.word	0x8800759c
 800850c:	7e37e43c 	.word	0x7e37e43c
 8008510:	0dfdf709 	.word	0x0dfdf709
 8008514:	3f023de1 	.word	0x3f023de1
 8008518:	7501b288 	.word	0x7501b288
 800851c:	3f49efe0 	.word	0x3f49efe0
 8008520:	b5688f3b 	.word	0xb5688f3b
 8008524:	3fa48228 	.word	0x3fa48228
 8008528:	0e884455 	.word	0x0e884455
 800852c:	3fc9c155 	.word	0x3fc9c155
 8008530:	03eb6f7d 	.word	0x03eb6f7d
 8008534:	3fd4d612 	.word	0x3fd4d612
 8008538:	55555555 	.word	0x55555555
 800853c:	3fc55555 	.word	0x3fc55555
 8008540:	b12e9282 	.word	0xb12e9282
 8008544:	3fb3b8c5 	.word	0x3fb3b8c5
 8008548:	1b8d0159 	.word	0x1b8d0159
 800854c:	3fe6066c 	.word	0x3fe6066c
 8008550:	9c598ac8 	.word	0x9c598ac8
 8008554:	40002ae5 	.word	0x40002ae5
 8008558:	1c8a2d4b 	.word	0x1c8a2d4b
 800855c:	40033a27 	.word	0x40033a27
 8008560:	3fefffff 	.word	0x3fefffff
 8008564:	3fdfffff 	.word	0x3fdfffff
 8008568:	3ff00000 	.word	0x3ff00000
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	3fef3332 	.word	0x3fef3332
 8008574:	ee10 2a10 	vmov	r2, s0
 8008578:	ee10 0a10 	vmov	r0, s0
 800857c:	465b      	mov	r3, fp
 800857e:	4659      	mov	r1, fp
 8008580:	f7f7 fe8c 	bl	800029c <__adddf3>
 8008584:	4632      	mov	r2, r6
 8008586:	463b      	mov	r3, r7
 8008588:	ec41 0b19 	vmov	d9, r0, r1
 800858c:	ec51 0b18 	vmov	r0, r1, d8
 8008590:	f7f8 f964 	bl	800085c <__aeabi_ddiv>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	ec51 0b19 	vmov	r0, r1, d9
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	f04f 0800 	mov.w	r8, #0
 80085a4:	4606      	mov	r6, r0
 80085a6:	460f      	mov	r7, r1
 80085a8:	4642      	mov	r2, r8
 80085aa:	465b      	mov	r3, fp
 80085ac:	4640      	mov	r0, r8
 80085ae:	4659      	mov	r1, fp
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4620      	mov	r0, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	f7f7 fe6c 	bl	8000298 <__aeabi_dsub>
 80085c0:	4642      	mov	r2, r8
 80085c2:	4604      	mov	r4, r0
 80085c4:	460d      	mov	r5, r1
 80085c6:	465b      	mov	r3, fp
 80085c8:	4650      	mov	r0, sl
 80085ca:	4659      	mov	r1, fp
 80085cc:	f7f7 fe66 	bl	800029c <__adddf3>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	f7f8 f940 	bl	800085c <__aeabi_ddiv>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	f7f7 fe5c 	bl	800029c <__adddf3>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	a113      	add	r1, pc, #76	; (adr r1, 8008638 <__ieee754_asin+0x418>)
 80085ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ee:	f7f7 fe53 	bl	8000298 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	f7f7 fe4d 	bl	8000298 <__aeabi_dsub>
 80085fe:	4642      	mov	r2, r8
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	465b      	mov	r3, fp
 8008606:	4640      	mov	r0, r8
 8008608:	4659      	mov	r1, fp
 800860a:	f7f7 fe47 	bl	800029c <__adddf3>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	a10b      	add	r1, pc, #44	; (adr r1, 8008640 <__ieee754_asin+0x420>)
 8008614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008618:	f7f7 fe3e 	bl	8000298 <__aeabi_dsub>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f7 fe38 	bl	8000298 <__aeabi_dsub>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	a104      	add	r1, pc, #16	; (adr r1, 8008640 <__ieee754_asin+0x420>)
 800862e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008632:	e6df      	b.n	80083f4 <__ieee754_asin+0x1d4>
 8008634:	f3af 8000 	nop.w
 8008638:	33145c07 	.word	0x33145c07
 800863c:	3c91a626 	.word	0x3c91a626
 8008640:	54442d18 	.word	0x54442d18
 8008644:	3fe921fb 	.word	0x3fe921fb

08008648 <__ieee754_atan2>:
 8008648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800864c:	ec57 6b11 	vmov	r6, r7, d1
 8008650:	4273      	negs	r3, r6
 8008652:	f8df e184 	ldr.w	lr, [pc, #388]	; 80087d8 <__ieee754_atan2+0x190>
 8008656:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800865a:	4333      	orrs	r3, r6
 800865c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008660:	4573      	cmp	r3, lr
 8008662:	ec51 0b10 	vmov	r0, r1, d0
 8008666:	ee11 8a10 	vmov	r8, s2
 800866a:	d80a      	bhi.n	8008682 <__ieee754_atan2+0x3a>
 800866c:	4244      	negs	r4, r0
 800866e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008672:	4304      	orrs	r4, r0
 8008674:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008678:	4574      	cmp	r4, lr
 800867a:	ee10 9a10 	vmov	r9, s0
 800867e:	468c      	mov	ip, r1
 8008680:	d907      	bls.n	8008692 <__ieee754_atan2+0x4a>
 8008682:	4632      	mov	r2, r6
 8008684:	463b      	mov	r3, r7
 8008686:	f7f7 fe09 	bl	800029c <__adddf3>
 800868a:	ec41 0b10 	vmov	d0, r0, r1
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008696:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800869a:	4334      	orrs	r4, r6
 800869c:	d103      	bne.n	80086a6 <__ieee754_atan2+0x5e>
 800869e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a2:	f000 ba61 	b.w	8008b68 <atan>
 80086a6:	17bc      	asrs	r4, r7, #30
 80086a8:	f004 0402 	and.w	r4, r4, #2
 80086ac:	ea53 0909 	orrs.w	r9, r3, r9
 80086b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80086b4:	d107      	bne.n	80086c6 <__ieee754_atan2+0x7e>
 80086b6:	2c02      	cmp	r4, #2
 80086b8:	d060      	beq.n	800877c <__ieee754_atan2+0x134>
 80086ba:	2c03      	cmp	r4, #3
 80086bc:	d1e5      	bne.n	800868a <__ieee754_atan2+0x42>
 80086be:	a142      	add	r1, pc, #264	; (adr r1, 80087c8 <__ieee754_atan2+0x180>)
 80086c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c4:	e7e1      	b.n	800868a <__ieee754_atan2+0x42>
 80086c6:	ea52 0808 	orrs.w	r8, r2, r8
 80086ca:	d106      	bne.n	80086da <__ieee754_atan2+0x92>
 80086cc:	f1bc 0f00 	cmp.w	ip, #0
 80086d0:	da5f      	bge.n	8008792 <__ieee754_atan2+0x14a>
 80086d2:	a13f      	add	r1, pc, #252	; (adr r1, 80087d0 <__ieee754_atan2+0x188>)
 80086d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d8:	e7d7      	b.n	800868a <__ieee754_atan2+0x42>
 80086da:	4572      	cmp	r2, lr
 80086dc:	d10f      	bne.n	80086fe <__ieee754_atan2+0xb6>
 80086de:	4293      	cmp	r3, r2
 80086e0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80086e4:	d107      	bne.n	80086f6 <__ieee754_atan2+0xae>
 80086e6:	2c02      	cmp	r4, #2
 80086e8:	d84c      	bhi.n	8008784 <__ieee754_atan2+0x13c>
 80086ea:	4b35      	ldr	r3, [pc, #212]	; (80087c0 <__ieee754_atan2+0x178>)
 80086ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80086f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80086f4:	e7c9      	b.n	800868a <__ieee754_atan2+0x42>
 80086f6:	2c02      	cmp	r4, #2
 80086f8:	d848      	bhi.n	800878c <__ieee754_atan2+0x144>
 80086fa:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <__ieee754_atan2+0x17c>)
 80086fc:	e7f6      	b.n	80086ec <__ieee754_atan2+0xa4>
 80086fe:	4573      	cmp	r3, lr
 8008700:	d0e4      	beq.n	80086cc <__ieee754_atan2+0x84>
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008708:	ea4f 5223 	mov.w	r2, r3, asr #20
 800870c:	da1e      	bge.n	800874c <__ieee754_atan2+0x104>
 800870e:	2f00      	cmp	r7, #0
 8008710:	da01      	bge.n	8008716 <__ieee754_atan2+0xce>
 8008712:	323c      	adds	r2, #60	; 0x3c
 8008714:	db1e      	blt.n	8008754 <__ieee754_atan2+0x10c>
 8008716:	4632      	mov	r2, r6
 8008718:	463b      	mov	r3, r7
 800871a:	f7f8 f89f 	bl	800085c <__aeabi_ddiv>
 800871e:	ec41 0b10 	vmov	d0, r0, r1
 8008722:	f000 fbc1 	bl	8008ea8 <fabs>
 8008726:	f000 fa1f 	bl	8008b68 <atan>
 800872a:	ec51 0b10 	vmov	r0, r1, d0
 800872e:	2c01      	cmp	r4, #1
 8008730:	d013      	beq.n	800875a <__ieee754_atan2+0x112>
 8008732:	2c02      	cmp	r4, #2
 8008734:	d015      	beq.n	8008762 <__ieee754_atan2+0x11a>
 8008736:	2c00      	cmp	r4, #0
 8008738:	d0a7      	beq.n	800868a <__ieee754_atan2+0x42>
 800873a:	a319      	add	r3, pc, #100	; (adr r3, 80087a0 <__ieee754_atan2+0x158>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 fdaa 	bl	8000298 <__aeabi_dsub>
 8008744:	a318      	add	r3, pc, #96	; (adr r3, 80087a8 <__ieee754_atan2+0x160>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	e014      	b.n	8008776 <__ieee754_atan2+0x12e>
 800874c:	a118      	add	r1, pc, #96	; (adr r1, 80087b0 <__ieee754_atan2+0x168>)
 800874e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008752:	e7ec      	b.n	800872e <__ieee754_atan2+0xe6>
 8008754:	2000      	movs	r0, #0
 8008756:	2100      	movs	r1, #0
 8008758:	e7e9      	b.n	800872e <__ieee754_atan2+0xe6>
 800875a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800875e:	4619      	mov	r1, r3
 8008760:	e793      	b.n	800868a <__ieee754_atan2+0x42>
 8008762:	a30f      	add	r3, pc, #60	; (adr r3, 80087a0 <__ieee754_atan2+0x158>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f7f7 fd96 	bl	8000298 <__aeabi_dsub>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	a10d      	add	r1, pc, #52	; (adr r1, 80087a8 <__ieee754_atan2+0x160>)
 8008772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008776:	f7f7 fd8f 	bl	8000298 <__aeabi_dsub>
 800877a:	e786      	b.n	800868a <__ieee754_atan2+0x42>
 800877c:	a10a      	add	r1, pc, #40	; (adr r1, 80087a8 <__ieee754_atan2+0x160>)
 800877e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008782:	e782      	b.n	800868a <__ieee754_atan2+0x42>
 8008784:	a10c      	add	r1, pc, #48	; (adr r1, 80087b8 <__ieee754_atan2+0x170>)
 8008786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878a:	e77e      	b.n	800868a <__ieee754_atan2+0x42>
 800878c:	2000      	movs	r0, #0
 800878e:	2100      	movs	r1, #0
 8008790:	e77b      	b.n	800868a <__ieee754_atan2+0x42>
 8008792:	a107      	add	r1, pc, #28	; (adr r1, 80087b0 <__ieee754_atan2+0x168>)
 8008794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008798:	e777      	b.n	800868a <__ieee754_atan2+0x42>
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w
 80087a0:	33145c07 	.word	0x33145c07
 80087a4:	3ca1a626 	.word	0x3ca1a626
 80087a8:	54442d18 	.word	0x54442d18
 80087ac:	400921fb 	.word	0x400921fb
 80087b0:	54442d18 	.word	0x54442d18
 80087b4:	3ff921fb 	.word	0x3ff921fb
 80087b8:	54442d18 	.word	0x54442d18
 80087bc:	3fe921fb 	.word	0x3fe921fb
 80087c0:	0800c6e8 	.word	0x0800c6e8
 80087c4:	0800c700 	.word	0x0800c700
 80087c8:	54442d18 	.word	0x54442d18
 80087cc:	c00921fb 	.word	0xc00921fb
 80087d0:	54442d18 	.word	0x54442d18
 80087d4:	bff921fb 	.word	0xbff921fb
 80087d8:	7ff00000 	.word	0x7ff00000

080087dc <__ieee754_fmod>:
 80087dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	ec53 2b11 	vmov	r2, r3, d1
 80087e4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80087e8:	ea5e 0402 	orrs.w	r4, lr, r2
 80087ec:	ec51 0b10 	vmov	r0, r1, d0
 80087f0:	ee11 7a10 	vmov	r7, s2
 80087f4:	ee11 ca10 	vmov	ip, s2
 80087f8:	461e      	mov	r6, r3
 80087fa:	d00d      	beq.n	8008818 <__ieee754_fmod+0x3c>
 80087fc:	4c7a      	ldr	r4, [pc, #488]	; (80089e8 <__ieee754_fmod+0x20c>)
 80087fe:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008802:	45a0      	cmp	r8, r4
 8008804:	4689      	mov	r9, r1
 8008806:	dc07      	bgt.n	8008818 <__ieee754_fmod+0x3c>
 8008808:	4254      	negs	r4, r2
 800880a:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 80089f4 <__ieee754_fmod+0x218>
 800880e:	4314      	orrs	r4, r2
 8008810:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008814:	455c      	cmp	r4, fp
 8008816:	d909      	bls.n	800882c <__ieee754_fmod+0x50>
 8008818:	f7f7 fef6 	bl	8000608 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	f7f8 f81c 	bl	800085c <__aeabi_ddiv>
 8008824:	ec41 0b10 	vmov	d0, r0, r1
 8008828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	45f0      	cmp	r8, lr
 800882e:	ee10 aa10 	vmov	sl, s0
 8008832:	ee10 4a10 	vmov	r4, s0
 8008836:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800883a:	dc09      	bgt.n	8008850 <__ieee754_fmod+0x74>
 800883c:	dbf2      	blt.n	8008824 <__ieee754_fmod+0x48>
 800883e:	4290      	cmp	r0, r2
 8008840:	d3f0      	bcc.n	8008824 <__ieee754_fmod+0x48>
 8008842:	d105      	bne.n	8008850 <__ieee754_fmod+0x74>
 8008844:	4b69      	ldr	r3, [pc, #420]	; (80089ec <__ieee754_fmod+0x210>)
 8008846:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800884a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800884e:	e7e9      	b.n	8008824 <__ieee754_fmod+0x48>
 8008850:	ea19 0f0b 	tst.w	r9, fp
 8008854:	d14a      	bne.n	80088ec <__ieee754_fmod+0x110>
 8008856:	f1b8 0f00 	cmp.w	r8, #0
 800885a:	d13f      	bne.n	80088dc <__ieee754_fmod+0x100>
 800885c:	4964      	ldr	r1, [pc, #400]	; (80089f0 <__ieee754_fmod+0x214>)
 800885e:	4653      	mov	r3, sl
 8008860:	2b00      	cmp	r3, #0
 8008862:	dc38      	bgt.n	80088d6 <__ieee754_fmod+0xfa>
 8008864:	4b63      	ldr	r3, [pc, #396]	; (80089f4 <__ieee754_fmod+0x218>)
 8008866:	4033      	ands	r3, r6
 8008868:	2b00      	cmp	r3, #0
 800886a:	d14f      	bne.n	800890c <__ieee754_fmod+0x130>
 800886c:	f1be 0f00 	cmp.w	lr, #0
 8008870:	d144      	bne.n	80088fc <__ieee754_fmod+0x120>
 8008872:	4a5f      	ldr	r2, [pc, #380]	; (80089f0 <__ieee754_fmod+0x214>)
 8008874:	463b      	mov	r3, r7
 8008876:	2b00      	cmp	r3, #0
 8008878:	dc3d      	bgt.n	80088f6 <__ieee754_fmod+0x11a>
 800887a:	4b5f      	ldr	r3, [pc, #380]	; (80089f8 <__ieee754_fmod+0x21c>)
 800887c:	4299      	cmp	r1, r3
 800887e:	db4a      	blt.n	8008916 <__ieee754_fmod+0x13a>
 8008880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008888:	485b      	ldr	r0, [pc, #364]	; (80089f8 <__ieee754_fmod+0x21c>)
 800888a:	4282      	cmp	r2, r0
 800888c:	db57      	blt.n	800893e <__ieee754_fmod+0x162>
 800888e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008892:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008896:	1a89      	subs	r1, r1, r2
 8008898:	1b98      	subs	r0, r3, r6
 800889a:	eba4 070c 	sub.w	r7, r4, ip
 800889e:	2900      	cmp	r1, #0
 80088a0:	d164      	bne.n	800896c <__ieee754_fmod+0x190>
 80088a2:	4564      	cmp	r4, ip
 80088a4:	bf38      	it	cc
 80088a6:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 80088aa:	2800      	cmp	r0, #0
 80088ac:	bfa4      	itt	ge
 80088ae:	463c      	movge	r4, r7
 80088b0:	4603      	movge	r3, r0
 80088b2:	ea53 0104 	orrs.w	r1, r3, r4
 80088b6:	d0c5      	beq.n	8008844 <__ieee754_fmod+0x68>
 80088b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088bc:	db6b      	blt.n	8008996 <__ieee754_fmod+0x1ba>
 80088be:	494e      	ldr	r1, [pc, #312]	; (80089f8 <__ieee754_fmod+0x21c>)
 80088c0:	428a      	cmp	r2, r1
 80088c2:	db6e      	blt.n	80089a2 <__ieee754_fmod+0x1c6>
 80088c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088c8:	431d      	orrs	r5, r3
 80088ca:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80088ce:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 80088d2:	4620      	mov	r0, r4
 80088d4:	e7a6      	b.n	8008824 <__ieee754_fmod+0x48>
 80088d6:	3901      	subs	r1, #1
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	e7c1      	b.n	8008860 <__ieee754_fmod+0x84>
 80088dc:	4946      	ldr	r1, [pc, #280]	; (80089f8 <__ieee754_fmod+0x21c>)
 80088de:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	ddbe      	ble.n	8008864 <__ieee754_fmod+0x88>
 80088e6:	3901      	subs	r1, #1
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	e7fa      	b.n	80088e2 <__ieee754_fmod+0x106>
 80088ec:	ea4f 5128 	mov.w	r1, r8, asr #20
 80088f0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80088f4:	e7b6      	b.n	8008864 <__ieee754_fmod+0x88>
 80088f6:	3a01      	subs	r2, #1
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	e7bc      	b.n	8008876 <__ieee754_fmod+0x9a>
 80088fc:	4a3e      	ldr	r2, [pc, #248]	; (80089f8 <__ieee754_fmod+0x21c>)
 80088fe:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8008902:	2b00      	cmp	r3, #0
 8008904:	ddb9      	ble.n	800887a <__ieee754_fmod+0x9e>
 8008906:	3a01      	subs	r2, #1
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	e7fa      	b.n	8008902 <__ieee754_fmod+0x126>
 800890c:	ea4f 522e 	mov.w	r2, lr, asr #20
 8008910:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008914:	e7b1      	b.n	800887a <__ieee754_fmod+0x9e>
 8008916:	1a5c      	subs	r4, r3, r1
 8008918:	2c1f      	cmp	r4, #31
 800891a:	dc0a      	bgt.n	8008932 <__ieee754_fmod+0x156>
 800891c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8008920:	fa08 f804 	lsl.w	r8, r8, r4
 8008924:	fa2a f303 	lsr.w	r3, sl, r3
 8008928:	ea43 0308 	orr.w	r3, r3, r8
 800892c:	fa0a f404 	lsl.w	r4, sl, r4
 8008930:	e7aa      	b.n	8008888 <__ieee754_fmod+0xac>
 8008932:	4b32      	ldr	r3, [pc, #200]	; (80089fc <__ieee754_fmod+0x220>)
 8008934:	1a5b      	subs	r3, r3, r1
 8008936:	fa0a f303 	lsl.w	r3, sl, r3
 800893a:	2400      	movs	r4, #0
 800893c:	e7a4      	b.n	8008888 <__ieee754_fmod+0xac>
 800893e:	eba0 0c02 	sub.w	ip, r0, r2
 8008942:	f1bc 0f1f 	cmp.w	ip, #31
 8008946:	dc0a      	bgt.n	800895e <__ieee754_fmod+0x182>
 8008948:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800894c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008950:	fa27 f606 	lsr.w	r6, r7, r6
 8008954:	ea46 060e 	orr.w	r6, r6, lr
 8008958:	fa07 fc0c 	lsl.w	ip, r7, ip
 800895c:	e79b      	b.n	8008896 <__ieee754_fmod+0xba>
 800895e:	4e27      	ldr	r6, [pc, #156]	; (80089fc <__ieee754_fmod+0x220>)
 8008960:	1ab6      	subs	r6, r6, r2
 8008962:	fa07 f606 	lsl.w	r6, r7, r6
 8008966:	f04f 0c00 	mov.w	ip, #0
 800896a:	e794      	b.n	8008896 <__ieee754_fmod+0xba>
 800896c:	4564      	cmp	r4, ip
 800896e:	bf38      	it	cc
 8008970:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8008974:	2800      	cmp	r0, #0
 8008976:	da05      	bge.n	8008984 <__ieee754_fmod+0x1a8>
 8008978:	0fe0      	lsrs	r0, r4, #31
 800897a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800897e:	0064      	lsls	r4, r4, #1
 8008980:	3901      	subs	r1, #1
 8008982:	e789      	b.n	8008898 <__ieee754_fmod+0xbc>
 8008984:	ea50 0307 	orrs.w	r3, r0, r7
 8008988:	f43f af5c 	beq.w	8008844 <__ieee754_fmod+0x68>
 800898c:	0ffb      	lsrs	r3, r7, #31
 800898e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008992:	007c      	lsls	r4, r7, #1
 8008994:	e7f4      	b.n	8008980 <__ieee754_fmod+0x1a4>
 8008996:	0fe1      	lsrs	r1, r4, #31
 8008998:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800899c:	0064      	lsls	r4, r4, #1
 800899e:	3a01      	subs	r2, #1
 80089a0:	e78a      	b.n	80088b8 <__ieee754_fmod+0xdc>
 80089a2:	1a89      	subs	r1, r1, r2
 80089a4:	2914      	cmp	r1, #20
 80089a6:	dc0a      	bgt.n	80089be <__ieee754_fmod+0x1e2>
 80089a8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80089ac:	fa03 f202 	lsl.w	r2, r3, r2
 80089b0:	40cc      	lsrs	r4, r1
 80089b2:	4322      	orrs	r2, r4
 80089b4:	410b      	asrs	r3, r1
 80089b6:	ea43 0105 	orr.w	r1, r3, r5
 80089ba:	4610      	mov	r0, r2
 80089bc:	e732      	b.n	8008824 <__ieee754_fmod+0x48>
 80089be:	291f      	cmp	r1, #31
 80089c0:	dc07      	bgt.n	80089d2 <__ieee754_fmod+0x1f6>
 80089c2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80089c6:	40cc      	lsrs	r4, r1
 80089c8:	fa03 f202 	lsl.w	r2, r3, r2
 80089cc:	4322      	orrs	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	e7f1      	b.n	80089b6 <__ieee754_fmod+0x1da>
 80089d2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80089d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089da:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80089de:	32e2      	adds	r2, #226	; 0xe2
 80089e0:	fa43 f202 	asr.w	r2, r3, r2
 80089e4:	e7f3      	b.n	80089ce <__ieee754_fmod+0x1f2>
 80089e6:	bf00      	nop
 80089e8:	7fefffff 	.word	0x7fefffff
 80089ec:	0800c718 	.word	0x0800c718
 80089f0:	fffffbed 	.word	0xfffffbed
 80089f4:	7ff00000 	.word	0x7ff00000
 80089f8:	fffffc02 	.word	0xfffffc02
 80089fc:	fffffbe2 	.word	0xfffffbe2

08008a00 <__ieee754_sqrt>:
 8008a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a04:	ec55 4b10 	vmov	r4, r5, d0
 8008a08:	4e55      	ldr	r6, [pc, #340]	; (8008b60 <__ieee754_sqrt+0x160>)
 8008a0a:	43ae      	bics	r6, r5
 8008a0c:	ee10 0a10 	vmov	r0, s0
 8008a10:	ee10 3a10 	vmov	r3, s0
 8008a14:	462a      	mov	r2, r5
 8008a16:	4629      	mov	r1, r5
 8008a18:	d110      	bne.n	8008a3c <__ieee754_sqrt+0x3c>
 8008a1a:	ee10 2a10 	vmov	r2, s0
 8008a1e:	462b      	mov	r3, r5
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4620      	mov	r0, r4
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	f7f7 fc36 	bl	800029c <__adddf3>
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	ec45 4b10 	vmov	d0, r4, r5
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	dc10      	bgt.n	8008a62 <__ieee754_sqrt+0x62>
 8008a40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a44:	4330      	orrs	r0, r6
 8008a46:	d0f5      	beq.n	8008a34 <__ieee754_sqrt+0x34>
 8008a48:	b15d      	cbz	r5, 8008a62 <__ieee754_sqrt+0x62>
 8008a4a:	ee10 2a10 	vmov	r2, s0
 8008a4e:	462b      	mov	r3, r5
 8008a50:	ee10 0a10 	vmov	r0, s0
 8008a54:	f7f7 fc20 	bl	8000298 <__aeabi_dsub>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	f7f7 fefe 	bl	800085c <__aeabi_ddiv>
 8008a60:	e7e6      	b.n	8008a30 <__ieee754_sqrt+0x30>
 8008a62:	1512      	asrs	r2, r2, #20
 8008a64:	d074      	beq.n	8008b50 <__ieee754_sqrt+0x150>
 8008a66:	07d4      	lsls	r4, r2, #31
 8008a68:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008a6c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008a70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a74:	bf5e      	ittt	pl
 8008a76:	0fda      	lsrpl	r2, r3, #31
 8008a78:	005b      	lslpl	r3, r3, #1
 8008a7a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008a7e:	2400      	movs	r4, #0
 8008a80:	0fda      	lsrs	r2, r3, #31
 8008a82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008a86:	107f      	asrs	r7, r7, #1
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	2516      	movs	r5, #22
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008a92:	1886      	adds	r6, r0, r2
 8008a94:	428e      	cmp	r6, r1
 8008a96:	bfde      	ittt	le
 8008a98:	1b89      	suble	r1, r1, r6
 8008a9a:	18b0      	addle	r0, r6, r2
 8008a9c:	18a4      	addle	r4, r4, r2
 8008a9e:	0049      	lsls	r1, r1, #1
 8008aa0:	3d01      	subs	r5, #1
 8008aa2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008aa6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008aaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008aae:	d1f0      	bne.n	8008a92 <__ieee754_sqrt+0x92>
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	f04f 0e20 	mov.w	lr, #32
 8008ab6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008aba:	4281      	cmp	r1, r0
 8008abc:	eb06 0c05 	add.w	ip, r6, r5
 8008ac0:	dc02      	bgt.n	8008ac8 <__ieee754_sqrt+0xc8>
 8008ac2:	d113      	bne.n	8008aec <__ieee754_sqrt+0xec>
 8008ac4:	459c      	cmp	ip, r3
 8008ac6:	d811      	bhi.n	8008aec <__ieee754_sqrt+0xec>
 8008ac8:	f1bc 0f00 	cmp.w	ip, #0
 8008acc:	eb0c 0506 	add.w	r5, ip, r6
 8008ad0:	da43      	bge.n	8008b5a <__ieee754_sqrt+0x15a>
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	db41      	blt.n	8008b5a <__ieee754_sqrt+0x15a>
 8008ad6:	f100 0801 	add.w	r8, r0, #1
 8008ada:	1a09      	subs	r1, r1, r0
 8008adc:	459c      	cmp	ip, r3
 8008ade:	bf88      	it	hi
 8008ae0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008ae4:	eba3 030c 	sub.w	r3, r3, ip
 8008ae8:	4432      	add	r2, r6
 8008aea:	4640      	mov	r0, r8
 8008aec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008af0:	f1be 0e01 	subs.w	lr, lr, #1
 8008af4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008afc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b00:	d1db      	bne.n	8008aba <__ieee754_sqrt+0xba>
 8008b02:	430b      	orrs	r3, r1
 8008b04:	d006      	beq.n	8008b14 <__ieee754_sqrt+0x114>
 8008b06:	1c50      	adds	r0, r2, #1
 8008b08:	bf13      	iteet	ne
 8008b0a:	3201      	addne	r2, #1
 8008b0c:	3401      	addeq	r4, #1
 8008b0e:	4672      	moveq	r2, lr
 8008b10:	f022 0201 	bicne.w	r2, r2, #1
 8008b14:	1063      	asrs	r3, r4, #1
 8008b16:	0852      	lsrs	r2, r2, #1
 8008b18:	07e1      	lsls	r1, r4, #31
 8008b1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b22:	bf48      	it	mi
 8008b24:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008b28:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	e781      	b.n	8008a34 <__ieee754_sqrt+0x34>
 8008b30:	0ad9      	lsrs	r1, r3, #11
 8008b32:	3815      	subs	r0, #21
 8008b34:	055b      	lsls	r3, r3, #21
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d0fa      	beq.n	8008b30 <__ieee754_sqrt+0x130>
 8008b3a:	02cd      	lsls	r5, r1, #11
 8008b3c:	d50a      	bpl.n	8008b54 <__ieee754_sqrt+0x154>
 8008b3e:	f1c2 0420 	rsb	r4, r2, #32
 8008b42:	fa23 f404 	lsr.w	r4, r3, r4
 8008b46:	1e55      	subs	r5, r2, #1
 8008b48:	4093      	lsls	r3, r2
 8008b4a:	4321      	orrs	r1, r4
 8008b4c:	1b42      	subs	r2, r0, r5
 8008b4e:	e78a      	b.n	8008a66 <__ieee754_sqrt+0x66>
 8008b50:	4610      	mov	r0, r2
 8008b52:	e7f0      	b.n	8008b36 <__ieee754_sqrt+0x136>
 8008b54:	0049      	lsls	r1, r1, #1
 8008b56:	3201      	adds	r2, #1
 8008b58:	e7ef      	b.n	8008b3a <__ieee754_sqrt+0x13a>
 8008b5a:	4680      	mov	r8, r0
 8008b5c:	e7bd      	b.n	8008ada <__ieee754_sqrt+0xda>
 8008b5e:	bf00      	nop
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	00000000 	.word	0x00000000

08008b68 <atan>:
 8008b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	ec55 4b10 	vmov	r4, r5, d0
 8008b70:	4bc3      	ldr	r3, [pc, #780]	; (8008e80 <atan+0x318>)
 8008b72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b76:	429e      	cmp	r6, r3
 8008b78:	46ab      	mov	fp, r5
 8008b7a:	dd18      	ble.n	8008bae <atan+0x46>
 8008b7c:	4bc1      	ldr	r3, [pc, #772]	; (8008e84 <atan+0x31c>)
 8008b7e:	429e      	cmp	r6, r3
 8008b80:	dc01      	bgt.n	8008b86 <atan+0x1e>
 8008b82:	d109      	bne.n	8008b98 <atan+0x30>
 8008b84:	b144      	cbz	r4, 8008b98 <atan+0x30>
 8008b86:	4622      	mov	r2, r4
 8008b88:	462b      	mov	r3, r5
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 fb85 	bl	800029c <__adddf3>
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	e006      	b.n	8008ba6 <atan+0x3e>
 8008b98:	f1bb 0f00 	cmp.w	fp, #0
 8008b9c:	f300 8131 	bgt.w	8008e02 <atan+0x29a>
 8008ba0:	a59b      	add	r5, pc, #620	; (adr r5, 8008e10 <atan+0x2a8>)
 8008ba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ba6:	ec45 4b10 	vmov	d0, r4, r5
 8008baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	4bb6      	ldr	r3, [pc, #728]	; (8008e88 <atan+0x320>)
 8008bb0:	429e      	cmp	r6, r3
 8008bb2:	dc14      	bgt.n	8008bde <atan+0x76>
 8008bb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008bb8:	429e      	cmp	r6, r3
 8008bba:	dc0d      	bgt.n	8008bd8 <atan+0x70>
 8008bbc:	a396      	add	r3, pc, #600	; (adr r3, 8008e18 <atan+0x2b0>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	ee10 0a10 	vmov	r0, s0
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 fb68 	bl	800029c <__adddf3>
 8008bcc:	4baf      	ldr	r3, [pc, #700]	; (8008e8c <atan+0x324>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f7f7 ffaa 	bl	8000b28 <__aeabi_dcmpgt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1e6      	bne.n	8008ba6 <atan+0x3e>
 8008bd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008bdc:	e02b      	b.n	8008c36 <atan+0xce>
 8008bde:	f000 f963 	bl	8008ea8 <fabs>
 8008be2:	4bab      	ldr	r3, [pc, #684]	; (8008e90 <atan+0x328>)
 8008be4:	429e      	cmp	r6, r3
 8008be6:	ec55 4b10 	vmov	r4, r5, d0
 8008bea:	f300 80bf 	bgt.w	8008d6c <atan+0x204>
 8008bee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008bf2:	429e      	cmp	r6, r3
 8008bf4:	f300 80a0 	bgt.w	8008d38 <atan+0x1d0>
 8008bf8:	ee10 2a10 	vmov	r2, s0
 8008bfc:	ee10 0a10 	vmov	r0, s0
 8008c00:	462b      	mov	r3, r5
 8008c02:	4629      	mov	r1, r5
 8008c04:	f7f7 fb4a 	bl	800029c <__adddf3>
 8008c08:	4ba0      	ldr	r3, [pc, #640]	; (8008e8c <atan+0x324>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f7f7 fb44 	bl	8000298 <__aeabi_dsub>
 8008c10:	2200      	movs	r2, #0
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7f7 fb3d 	bl	800029c <__adddf3>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	f7f7 fe17 	bl	800085c <__aeabi_ddiv>
 8008c2e:	f04f 0a00 	mov.w	sl, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	460d      	mov	r5, r1
 8008c36:	4622      	mov	r2, r4
 8008c38:	462b      	mov	r3, r5
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 fce3 	bl	8000608 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4680      	mov	r8, r0
 8008c48:	4689      	mov	r9, r1
 8008c4a:	f7f7 fcdd 	bl	8000608 <__aeabi_dmul>
 8008c4e:	a374      	add	r3, pc, #464	; (adr r3, 8008e20 <atan+0x2b8>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4606      	mov	r6, r0
 8008c56:	460f      	mov	r7, r1
 8008c58:	f7f7 fcd6 	bl	8000608 <__aeabi_dmul>
 8008c5c:	a372      	add	r3, pc, #456	; (adr r3, 8008e28 <atan+0x2c0>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fb1b 	bl	800029c <__adddf3>
 8008c66:	4632      	mov	r2, r6
 8008c68:	463b      	mov	r3, r7
 8008c6a:	f7f7 fccd 	bl	8000608 <__aeabi_dmul>
 8008c6e:	a370      	add	r3, pc, #448	; (adr r3, 8008e30 <atan+0x2c8>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 fb12 	bl	800029c <__adddf3>
 8008c78:	4632      	mov	r2, r6
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	f7f7 fcc4 	bl	8000608 <__aeabi_dmul>
 8008c80:	a36d      	add	r3, pc, #436	; (adr r3, 8008e38 <atan+0x2d0>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fb09 	bl	800029c <__adddf3>
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	f7f7 fcbb 	bl	8000608 <__aeabi_dmul>
 8008c92:	a36b      	add	r3, pc, #428	; (adr r3, 8008e40 <atan+0x2d8>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fb00 	bl	800029c <__adddf3>
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	f7f7 fcb2 	bl	8000608 <__aeabi_dmul>
 8008ca4:	a368      	add	r3, pc, #416	; (adr r3, 8008e48 <atan+0x2e0>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 faf7 	bl	800029c <__adddf3>
 8008cae:	4642      	mov	r2, r8
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	f7f7 fca9 	bl	8000608 <__aeabi_dmul>
 8008cb6:	a366      	add	r3, pc, #408	; (adr r3, 8008e50 <atan+0x2e8>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	4689      	mov	r9, r1
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 fca0 	bl	8000608 <__aeabi_dmul>
 8008cc8:	a363      	add	r3, pc, #396	; (adr r3, 8008e58 <atan+0x2f0>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fae3 	bl	8000298 <__aeabi_dsub>
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	f7f7 fc97 	bl	8000608 <__aeabi_dmul>
 8008cda:	a361      	add	r3, pc, #388	; (adr r3, 8008e60 <atan+0x2f8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fada 	bl	8000298 <__aeabi_dsub>
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	f7f7 fc8e 	bl	8000608 <__aeabi_dmul>
 8008cec:	a35e      	add	r3, pc, #376	; (adr r3, 8008e68 <atan+0x300>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fad1 	bl	8000298 <__aeabi_dsub>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	f7f7 fc85 	bl	8000608 <__aeabi_dmul>
 8008cfe:	a35c      	add	r3, pc, #368	; (adr r3, 8008e70 <atan+0x308>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fac8 	bl	8000298 <__aeabi_dsub>
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	f7f7 fc7c 	bl	8000608 <__aeabi_dmul>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4640      	mov	r0, r8
 8008d16:	4649      	mov	r1, r9
 8008d18:	f7f7 fac0 	bl	800029c <__adddf3>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	f7f7 fc72 	bl	8000608 <__aeabi_dmul>
 8008d24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	d14b      	bne.n	8008dc6 <atan+0x25e>
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 fab1 	bl	8000298 <__aeabi_dsub>
 8008d36:	e72c      	b.n	8008b92 <atan+0x2a>
 8008d38:	ee10 0a10 	vmov	r0, s0
 8008d3c:	4b53      	ldr	r3, [pc, #332]	; (8008e8c <atan+0x324>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 faa9 	bl	8000298 <__aeabi_dsub>
 8008d46:	4b51      	ldr	r3, [pc, #324]	; (8008e8c <atan+0x324>)
 8008d48:	4606      	mov	r6, r0
 8008d4a:	460f      	mov	r7, r1
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 faa3 	bl	800029c <__adddf3>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 fd7d 	bl	800085c <__aeabi_ddiv>
 8008d62:	f04f 0a01 	mov.w	sl, #1
 8008d66:	4604      	mov	r4, r0
 8008d68:	460d      	mov	r5, r1
 8008d6a:	e764      	b.n	8008c36 <atan+0xce>
 8008d6c:	4b49      	ldr	r3, [pc, #292]	; (8008e94 <atan+0x32c>)
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	da1d      	bge.n	8008dae <atan+0x246>
 8008d72:	ee10 0a10 	vmov	r0, s0
 8008d76:	4b48      	ldr	r3, [pc, #288]	; (8008e98 <atan+0x330>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 fa8c 	bl	8000298 <__aeabi_dsub>
 8008d80:	4b45      	ldr	r3, [pc, #276]	; (8008e98 <atan+0x330>)
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	2200      	movs	r2, #0
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fc3c 	bl	8000608 <__aeabi_dmul>
 8008d90:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <atan+0x324>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	f7f7 fa82 	bl	800029c <__adddf3>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 fd5c 	bl	800085c <__aeabi_ddiv>
 8008da4:	f04f 0a02 	mov.w	sl, #2
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	e743      	b.n	8008c36 <atan+0xce>
 8008dae:	462b      	mov	r3, r5
 8008db0:	ee10 2a10 	vmov	r2, s0
 8008db4:	4939      	ldr	r1, [pc, #228]	; (8008e9c <atan+0x334>)
 8008db6:	2000      	movs	r0, #0
 8008db8:	f7f7 fd50 	bl	800085c <__aeabi_ddiv>
 8008dbc:	f04f 0a03 	mov.w	sl, #3
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	e737      	b.n	8008c36 <atan+0xce>
 8008dc6:	4b36      	ldr	r3, [pc, #216]	; (8008ea0 <atan+0x338>)
 8008dc8:	4e36      	ldr	r6, [pc, #216]	; (8008ea4 <atan+0x33c>)
 8008dca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008dce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008dd2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008dd6:	f7f7 fa5f 	bl	8000298 <__aeabi_dsub>
 8008dda:	4622      	mov	r2, r4
 8008ddc:	462b      	mov	r3, r5
 8008dde:	f7f7 fa5b 	bl	8000298 <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008dea:	f7f7 fa55 	bl	8000298 <__aeabi_dsub>
 8008dee:	f1bb 0f00 	cmp.w	fp, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	f6bf aed6 	bge.w	8008ba6 <atan+0x3e>
 8008dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dfe:	461d      	mov	r5, r3
 8008e00:	e6d1      	b.n	8008ba6 <atan+0x3e>
 8008e02:	a51d      	add	r5, pc, #116	; (adr r5, 8008e78 <atan+0x310>)
 8008e04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e08:	e6cd      	b.n	8008ba6 <atan+0x3e>
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w
 8008e10:	54442d18 	.word	0x54442d18
 8008e14:	bff921fb 	.word	0xbff921fb
 8008e18:	8800759c 	.word	0x8800759c
 8008e1c:	7e37e43c 	.word	0x7e37e43c
 8008e20:	e322da11 	.word	0xe322da11
 8008e24:	3f90ad3a 	.word	0x3f90ad3a
 8008e28:	24760deb 	.word	0x24760deb
 8008e2c:	3fa97b4b 	.word	0x3fa97b4b
 8008e30:	a0d03d51 	.word	0xa0d03d51
 8008e34:	3fb10d66 	.word	0x3fb10d66
 8008e38:	c54c206e 	.word	0xc54c206e
 8008e3c:	3fb745cd 	.word	0x3fb745cd
 8008e40:	920083ff 	.word	0x920083ff
 8008e44:	3fc24924 	.word	0x3fc24924
 8008e48:	5555550d 	.word	0x5555550d
 8008e4c:	3fd55555 	.word	0x3fd55555
 8008e50:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e54:	bfa2b444 	.word	0xbfa2b444
 8008e58:	52defd9a 	.word	0x52defd9a
 8008e5c:	3fadde2d 	.word	0x3fadde2d
 8008e60:	af749a6d 	.word	0xaf749a6d
 8008e64:	3fb3b0f2 	.word	0x3fb3b0f2
 8008e68:	fe231671 	.word	0xfe231671
 8008e6c:	3fbc71c6 	.word	0x3fbc71c6
 8008e70:	9998ebc4 	.word	0x9998ebc4
 8008e74:	3fc99999 	.word	0x3fc99999
 8008e78:	54442d18 	.word	0x54442d18
 8008e7c:	3ff921fb 	.word	0x3ff921fb
 8008e80:	440fffff 	.word	0x440fffff
 8008e84:	7ff00000 	.word	0x7ff00000
 8008e88:	3fdbffff 	.word	0x3fdbffff
 8008e8c:	3ff00000 	.word	0x3ff00000
 8008e90:	3ff2ffff 	.word	0x3ff2ffff
 8008e94:	40038000 	.word	0x40038000
 8008e98:	3ff80000 	.word	0x3ff80000
 8008e9c:	bff00000 	.word	0xbff00000
 8008ea0:	0800c748 	.word	0x0800c748
 8008ea4:	0800c728 	.word	0x0800c728

08008ea8 <fabs>:
 8008ea8:	ec51 0b10 	vmov	r0, r1, d0
 8008eac:	ee10 2a10 	vmov	r2, s0
 8008eb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008eb4:	ec43 2b10 	vmov	d0, r2, r3
 8008eb8:	4770      	bx	lr
 8008eba:	0000      	movs	r0, r0
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <nan>:
 8008ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ec8 <nan+0x8>
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	7ff80000 	.word	0x7ff80000

08008ed0 <__errno>:
 8008ed0:	4b01      	ldr	r3, [pc, #4]	; (8008ed8 <__errno+0x8>)
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20000048 	.word	0x20000048

08008edc <__libc_init_array>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4d0d      	ldr	r5, [pc, #52]	; (8008f14 <__libc_init_array+0x38>)
 8008ee0:	4c0d      	ldr	r4, [pc, #52]	; (8008f18 <__libc_init_array+0x3c>)
 8008ee2:	1b64      	subs	r4, r4, r5
 8008ee4:	10a4      	asrs	r4, r4, #2
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	42a6      	cmp	r6, r4
 8008eea:	d109      	bne.n	8008f00 <__libc_init_array+0x24>
 8008eec:	4d0b      	ldr	r5, [pc, #44]	; (8008f1c <__libc_init_array+0x40>)
 8008eee:	4c0c      	ldr	r4, [pc, #48]	; (8008f20 <__libc_init_array+0x44>)
 8008ef0:	f002 fd60 	bl	800b9b4 <_init>
 8008ef4:	1b64      	subs	r4, r4, r5
 8008ef6:	10a4      	asrs	r4, r4, #2
 8008ef8:	2600      	movs	r6, #0
 8008efa:	42a6      	cmp	r6, r4
 8008efc:	d105      	bne.n	8008f0a <__libc_init_array+0x2e>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f04:	4798      	blx	r3
 8008f06:	3601      	adds	r6, #1
 8008f08:	e7ee      	b.n	8008ee8 <__libc_init_array+0xc>
 8008f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0e:	4798      	blx	r3
 8008f10:	3601      	adds	r6, #1
 8008f12:	e7f2      	b.n	8008efa <__libc_init_array+0x1e>
 8008f14:	0800cb4c 	.word	0x0800cb4c
 8008f18:	0800cb4c 	.word	0x0800cb4c
 8008f1c:	0800cb4c 	.word	0x0800cb4c
 8008f20:	0800cb50 	.word	0x0800cb50

08008f24 <memcmp>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	3901      	subs	r1, #1
 8008f28:	4402      	add	r2, r0
 8008f2a:	4290      	cmp	r0, r2
 8008f2c:	d101      	bne.n	8008f32 <memcmp+0xe>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e005      	b.n	8008f3e <memcmp+0x1a>
 8008f32:	7803      	ldrb	r3, [r0, #0]
 8008f34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d001      	beq.n	8008f40 <memcmp+0x1c>
 8008f3c:	1b18      	subs	r0, r3, r4
 8008f3e:	bd10      	pop	{r4, pc}
 8008f40:	3001      	adds	r0, #1
 8008f42:	e7f2      	b.n	8008f2a <memcmp+0x6>

08008f44 <memcpy>:
 8008f44:	440a      	add	r2, r1
 8008f46:	4291      	cmp	r1, r2
 8008f48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f4c:	d100      	bne.n	8008f50 <memcpy+0xc>
 8008f4e:	4770      	bx	lr
 8008f50:	b510      	push	{r4, lr}
 8008f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	d1f9      	bne.n	8008f52 <memcpy+0xe>
 8008f5e:	bd10      	pop	{r4, pc}

08008f60 <memset>:
 8008f60:	4402      	add	r2, r0
 8008f62:	4603      	mov	r3, r0
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d100      	bne.n	8008f6a <memset+0xa>
 8008f68:	4770      	bx	lr
 8008f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6e:	e7f9      	b.n	8008f64 <memset+0x4>

08008f70 <__cvt>:
 8008f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	ec55 4b10 	vmov	r4, r5, d0
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	460e      	mov	r6, r1
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	462b      	mov	r3, r5
 8008f80:	bfbb      	ittet	lt
 8008f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f86:	461d      	movlt	r5, r3
 8008f88:	2300      	movge	r3, #0
 8008f8a:	232d      	movlt	r3, #45	; 0x2d
 8008f8c:	700b      	strb	r3, [r1, #0]
 8008f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f94:	4691      	mov	r9, r2
 8008f96:	f023 0820 	bic.w	r8, r3, #32
 8008f9a:	bfbc      	itt	lt
 8008f9c:	4622      	movlt	r2, r4
 8008f9e:	4614      	movlt	r4, r2
 8008fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fa4:	d005      	beq.n	8008fb2 <__cvt+0x42>
 8008fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008faa:	d100      	bne.n	8008fae <__cvt+0x3e>
 8008fac:	3601      	adds	r6, #1
 8008fae:	2102      	movs	r1, #2
 8008fb0:	e000      	b.n	8008fb4 <__cvt+0x44>
 8008fb2:	2103      	movs	r1, #3
 8008fb4:	ab03      	add	r3, sp, #12
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	ab02      	add	r3, sp, #8
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	ec45 4b10 	vmov	d0, r4, r5
 8008fc0:	4653      	mov	r3, sl
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	f000 fce4 	bl	8009990 <_dtoa_r>
 8008fc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fcc:	4607      	mov	r7, r0
 8008fce:	d102      	bne.n	8008fd6 <__cvt+0x66>
 8008fd0:	f019 0f01 	tst.w	r9, #1
 8008fd4:	d022      	beq.n	800901c <__cvt+0xac>
 8008fd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fda:	eb07 0906 	add.w	r9, r7, r6
 8008fde:	d110      	bne.n	8009002 <__cvt+0x92>
 8008fe0:	783b      	ldrb	r3, [r7, #0]
 8008fe2:	2b30      	cmp	r3, #48	; 0x30
 8008fe4:	d10a      	bne.n	8008ffc <__cvt+0x8c>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7f7 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ff2:	b918      	cbnz	r0, 8008ffc <__cvt+0x8c>
 8008ff4:	f1c6 0601 	rsb	r6, r6, #1
 8008ff8:	f8ca 6000 	str.w	r6, [sl]
 8008ffc:	f8da 3000 	ldr.w	r3, [sl]
 8009000:	4499      	add	r9, r3
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800900e:	b108      	cbz	r0, 8009014 <__cvt+0xa4>
 8009010:	f8cd 900c 	str.w	r9, [sp, #12]
 8009014:	2230      	movs	r2, #48	; 0x30
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	454b      	cmp	r3, r9
 800901a:	d307      	bcc.n	800902c <__cvt+0xbc>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009020:	1bdb      	subs	r3, r3, r7
 8009022:	4638      	mov	r0, r7
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	b004      	add	sp, #16
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	1c59      	adds	r1, r3, #1
 800902e:	9103      	str	r1, [sp, #12]
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	e7f0      	b.n	8009016 <__cvt+0xa6>

08009034 <__exponent>:
 8009034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009036:	4603      	mov	r3, r0
 8009038:	2900      	cmp	r1, #0
 800903a:	bfb8      	it	lt
 800903c:	4249      	neglt	r1, r1
 800903e:	f803 2b02 	strb.w	r2, [r3], #2
 8009042:	bfb4      	ite	lt
 8009044:	222d      	movlt	r2, #45	; 0x2d
 8009046:	222b      	movge	r2, #43	; 0x2b
 8009048:	2909      	cmp	r1, #9
 800904a:	7042      	strb	r2, [r0, #1]
 800904c:	dd2a      	ble.n	80090a4 <__exponent+0x70>
 800904e:	f10d 0407 	add.w	r4, sp, #7
 8009052:	46a4      	mov	ip, r4
 8009054:	270a      	movs	r7, #10
 8009056:	46a6      	mov	lr, r4
 8009058:	460a      	mov	r2, r1
 800905a:	fb91 f6f7 	sdiv	r6, r1, r7
 800905e:	fb07 1516 	mls	r5, r7, r6, r1
 8009062:	3530      	adds	r5, #48	; 0x30
 8009064:	2a63      	cmp	r2, #99	; 0x63
 8009066:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800906a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800906e:	4631      	mov	r1, r6
 8009070:	dcf1      	bgt.n	8009056 <__exponent+0x22>
 8009072:	3130      	adds	r1, #48	; 0x30
 8009074:	f1ae 0502 	sub.w	r5, lr, #2
 8009078:	f804 1c01 	strb.w	r1, [r4, #-1]
 800907c:	1c44      	adds	r4, r0, #1
 800907e:	4629      	mov	r1, r5
 8009080:	4561      	cmp	r1, ip
 8009082:	d30a      	bcc.n	800909a <__exponent+0x66>
 8009084:	f10d 0209 	add.w	r2, sp, #9
 8009088:	eba2 020e 	sub.w	r2, r2, lr
 800908c:	4565      	cmp	r5, ip
 800908e:	bf88      	it	hi
 8009090:	2200      	movhi	r2, #0
 8009092:	4413      	add	r3, r2
 8009094:	1a18      	subs	r0, r3, r0
 8009096:	b003      	add	sp, #12
 8009098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800909e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090a2:	e7ed      	b.n	8009080 <__exponent+0x4c>
 80090a4:	2330      	movs	r3, #48	; 0x30
 80090a6:	3130      	adds	r1, #48	; 0x30
 80090a8:	7083      	strb	r3, [r0, #2]
 80090aa:	70c1      	strb	r1, [r0, #3]
 80090ac:	1d03      	adds	r3, r0, #4
 80090ae:	e7f1      	b.n	8009094 <__exponent+0x60>

080090b0 <_printf_float>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	ed2d 8b02 	vpush	{d8}
 80090b8:	b08d      	sub	sp, #52	; 0x34
 80090ba:	460c      	mov	r4, r1
 80090bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090c0:	4616      	mov	r6, r2
 80090c2:	461f      	mov	r7, r3
 80090c4:	4605      	mov	r5, r0
 80090c6:	f001 fb47 	bl	800a758 <_localeconv_r>
 80090ca:	f8d0 a000 	ldr.w	sl, [r0]
 80090ce:	4650      	mov	r0, sl
 80090d0:	f7f7 f886 	bl	80001e0 <strlen>
 80090d4:	2300      	movs	r3, #0
 80090d6:	930a      	str	r3, [sp, #40]	; 0x28
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f8d8 3000 	ldr.w	r3, [r8]
 80090e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090e4:	3307      	adds	r3, #7
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	f103 0208 	add.w	r2, r3, #8
 80090ee:	f8c8 2000 	str.w	r2, [r8]
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	f8cd 8018 	str.w	r8, [sp, #24]
 8009108:	ee08 0a10 	vmov	s16, r0
 800910c:	4b9f      	ldr	r3, [pc, #636]	; (800938c <_printf_float+0x2dc>)
 800910e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009116:	f7f7 fd11 	bl	8000b3c <__aeabi_dcmpun>
 800911a:	bb88      	cbnz	r0, 8009180 <_printf_float+0xd0>
 800911c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009120:	4b9a      	ldr	r3, [pc, #616]	; (800938c <_printf_float+0x2dc>)
 8009122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009126:	f7f7 fceb 	bl	8000b00 <__aeabi_dcmple>
 800912a:	bb48      	cbnz	r0, 8009180 <_printf_float+0xd0>
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	4640      	mov	r0, r8
 8009132:	4649      	mov	r1, r9
 8009134:	f7f7 fcda 	bl	8000aec <__aeabi_dcmplt>
 8009138:	b110      	cbz	r0, 8009140 <_printf_float+0x90>
 800913a:	232d      	movs	r3, #45	; 0x2d
 800913c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009140:	4b93      	ldr	r3, [pc, #588]	; (8009390 <_printf_float+0x2e0>)
 8009142:	4894      	ldr	r0, [pc, #592]	; (8009394 <_printf_float+0x2e4>)
 8009144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009148:	bf94      	ite	ls
 800914a:	4698      	movls	r8, r3
 800914c:	4680      	movhi	r8, r0
 800914e:	2303      	movs	r3, #3
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	9b05      	ldr	r3, [sp, #20]
 8009154:	f023 0204 	bic.w	r2, r3, #4
 8009158:	6022      	str	r2, [r4, #0]
 800915a:	f04f 0900 	mov.w	r9, #0
 800915e:	9700      	str	r7, [sp, #0]
 8009160:	4633      	mov	r3, r6
 8009162:	aa0b      	add	r2, sp, #44	; 0x2c
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f000 f9d8 	bl	800951c <_printf_common>
 800916c:	3001      	adds	r0, #1
 800916e:	f040 8090 	bne.w	8009292 <_printf_float+0x1e2>
 8009172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009176:	b00d      	add	sp, #52	; 0x34
 8009178:	ecbd 8b02 	vpop	{d8}
 800917c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 fcd8 	bl	8000b3c <__aeabi_dcmpun>
 800918c:	b140      	cbz	r0, 80091a0 <_printf_float+0xf0>
 800918e:	464b      	mov	r3, r9
 8009190:	2b00      	cmp	r3, #0
 8009192:	bfbc      	itt	lt
 8009194:	232d      	movlt	r3, #45	; 0x2d
 8009196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800919a:	487f      	ldr	r0, [pc, #508]	; (8009398 <_printf_float+0x2e8>)
 800919c:	4b7f      	ldr	r3, [pc, #508]	; (800939c <_printf_float+0x2ec>)
 800919e:	e7d1      	b.n	8009144 <_printf_float+0x94>
 80091a0:	6863      	ldr	r3, [r4, #4]
 80091a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091a6:	9206      	str	r2, [sp, #24]
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	d13f      	bne.n	800922c <_printf_float+0x17c>
 80091ac:	2306      	movs	r3, #6
 80091ae:	6063      	str	r3, [r4, #4]
 80091b0:	9b05      	ldr	r3, [sp, #20]
 80091b2:	6861      	ldr	r1, [r4, #4]
 80091b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091b8:	2300      	movs	r3, #0
 80091ba:	9303      	str	r3, [sp, #12]
 80091bc:	ab0a      	add	r3, sp, #40	; 0x28
 80091be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091c2:	ab09      	add	r3, sp, #36	; 0x24
 80091c4:	ec49 8b10 	vmov	d0, r8, r9
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	6022      	str	r2, [r4, #0]
 80091cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091d0:	4628      	mov	r0, r5
 80091d2:	f7ff fecd 	bl	8008f70 <__cvt>
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091da:	2b47      	cmp	r3, #71	; 0x47
 80091dc:	4680      	mov	r8, r0
 80091de:	d108      	bne.n	80091f2 <_printf_float+0x142>
 80091e0:	1cc8      	adds	r0, r1, #3
 80091e2:	db02      	blt.n	80091ea <_printf_float+0x13a>
 80091e4:	6863      	ldr	r3, [r4, #4]
 80091e6:	4299      	cmp	r1, r3
 80091e8:	dd41      	ble.n	800926e <_printf_float+0x1be>
 80091ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80091ee:	fa5f fb8b 	uxtb.w	fp, fp
 80091f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091f6:	d820      	bhi.n	800923a <_printf_float+0x18a>
 80091f8:	3901      	subs	r1, #1
 80091fa:	465a      	mov	r2, fp
 80091fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009200:	9109      	str	r1, [sp, #36]	; 0x24
 8009202:	f7ff ff17 	bl	8009034 <__exponent>
 8009206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009208:	1813      	adds	r3, r2, r0
 800920a:	2a01      	cmp	r2, #1
 800920c:	4681      	mov	r9, r0
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	dc02      	bgt.n	8009218 <_printf_float+0x168>
 8009212:	6822      	ldr	r2, [r4, #0]
 8009214:	07d2      	lsls	r2, r2, #31
 8009216:	d501      	bpl.n	800921c <_printf_float+0x16c>
 8009218:	3301      	adds	r3, #1
 800921a:	6123      	str	r3, [r4, #16]
 800921c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009220:	2b00      	cmp	r3, #0
 8009222:	d09c      	beq.n	800915e <_printf_float+0xae>
 8009224:	232d      	movs	r3, #45	; 0x2d
 8009226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800922a:	e798      	b.n	800915e <_printf_float+0xae>
 800922c:	9a06      	ldr	r2, [sp, #24]
 800922e:	2a47      	cmp	r2, #71	; 0x47
 8009230:	d1be      	bne.n	80091b0 <_printf_float+0x100>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1bc      	bne.n	80091b0 <_printf_float+0x100>
 8009236:	2301      	movs	r3, #1
 8009238:	e7b9      	b.n	80091ae <_printf_float+0xfe>
 800923a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800923e:	d118      	bne.n	8009272 <_printf_float+0x1c2>
 8009240:	2900      	cmp	r1, #0
 8009242:	6863      	ldr	r3, [r4, #4]
 8009244:	dd0b      	ble.n	800925e <_printf_float+0x1ae>
 8009246:	6121      	str	r1, [r4, #16]
 8009248:	b913      	cbnz	r3, 8009250 <_printf_float+0x1a0>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	07d0      	lsls	r0, r2, #31
 800924e:	d502      	bpl.n	8009256 <_printf_float+0x1a6>
 8009250:	3301      	adds	r3, #1
 8009252:	440b      	add	r3, r1
 8009254:	6123      	str	r3, [r4, #16]
 8009256:	65a1      	str	r1, [r4, #88]	; 0x58
 8009258:	f04f 0900 	mov.w	r9, #0
 800925c:	e7de      	b.n	800921c <_printf_float+0x16c>
 800925e:	b913      	cbnz	r3, 8009266 <_printf_float+0x1b6>
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	07d2      	lsls	r2, r2, #31
 8009264:	d501      	bpl.n	800926a <_printf_float+0x1ba>
 8009266:	3302      	adds	r3, #2
 8009268:	e7f4      	b.n	8009254 <_printf_float+0x1a4>
 800926a:	2301      	movs	r3, #1
 800926c:	e7f2      	b.n	8009254 <_printf_float+0x1a4>
 800926e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009274:	4299      	cmp	r1, r3
 8009276:	db05      	blt.n	8009284 <_printf_float+0x1d4>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	6121      	str	r1, [r4, #16]
 800927c:	07d8      	lsls	r0, r3, #31
 800927e:	d5ea      	bpl.n	8009256 <_printf_float+0x1a6>
 8009280:	1c4b      	adds	r3, r1, #1
 8009282:	e7e7      	b.n	8009254 <_printf_float+0x1a4>
 8009284:	2900      	cmp	r1, #0
 8009286:	bfd4      	ite	le
 8009288:	f1c1 0202 	rsble	r2, r1, #2
 800928c:	2201      	movgt	r2, #1
 800928e:	4413      	add	r3, r2
 8009290:	e7e0      	b.n	8009254 <_printf_float+0x1a4>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	055a      	lsls	r2, r3, #21
 8009296:	d407      	bmi.n	80092a8 <_printf_float+0x1f8>
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	4642      	mov	r2, r8
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	d12c      	bne.n	8009300 <_printf_float+0x250>
 80092a6:	e764      	b.n	8009172 <_printf_float+0xc2>
 80092a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092ac:	f240 80e0 	bls.w	8009470 <_printf_float+0x3c0>
 80092b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092b4:	2200      	movs	r2, #0
 80092b6:	2300      	movs	r3, #0
 80092b8:	f7f7 fc0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d034      	beq.n	800932a <_printf_float+0x27a>
 80092c0:	4a37      	ldr	r2, [pc, #220]	; (80093a0 <_printf_float+0x2f0>)
 80092c2:	2301      	movs	r3, #1
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	f43f af51 	beq.w	8009172 <_printf_float+0xc2>
 80092d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092d4:	429a      	cmp	r2, r3
 80092d6:	db02      	blt.n	80092de <_printf_float+0x22e>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	07d8      	lsls	r0, r3, #31
 80092dc:	d510      	bpl.n	8009300 <_printf_float+0x250>
 80092de:	ee18 3a10 	vmov	r3, s16
 80092e2:	4652      	mov	r2, sl
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f af41 	beq.w	8009172 <_printf_float+0xc2>
 80092f0:	f04f 0800 	mov.w	r8, #0
 80092f4:	f104 091a 	add.w	r9, r4, #26
 80092f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fa:	3b01      	subs	r3, #1
 80092fc:	4543      	cmp	r3, r8
 80092fe:	dc09      	bgt.n	8009314 <_printf_float+0x264>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	079b      	lsls	r3, r3, #30
 8009304:	f100 8105 	bmi.w	8009512 <_printf_float+0x462>
 8009308:	68e0      	ldr	r0, [r4, #12]
 800930a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800930c:	4298      	cmp	r0, r3
 800930e:	bfb8      	it	lt
 8009310:	4618      	movlt	r0, r3
 8009312:	e730      	b.n	8009176 <_printf_float+0xc6>
 8009314:	2301      	movs	r3, #1
 8009316:	464a      	mov	r2, r9
 8009318:	4631      	mov	r1, r6
 800931a:	4628      	mov	r0, r5
 800931c:	47b8      	blx	r7
 800931e:	3001      	adds	r0, #1
 8009320:	f43f af27 	beq.w	8009172 <_printf_float+0xc2>
 8009324:	f108 0801 	add.w	r8, r8, #1
 8009328:	e7e6      	b.n	80092f8 <_printf_float+0x248>
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	dc39      	bgt.n	80093a4 <_printf_float+0x2f4>
 8009330:	4a1b      	ldr	r2, [pc, #108]	; (80093a0 <_printf_float+0x2f0>)
 8009332:	2301      	movs	r3, #1
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f af19 	beq.w	8009172 <_printf_float+0xc2>
 8009340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009344:	4313      	orrs	r3, r2
 8009346:	d102      	bne.n	800934e <_printf_float+0x29e>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	07d9      	lsls	r1, r3, #31
 800934c:	d5d8      	bpl.n	8009300 <_printf_float+0x250>
 800934e:	ee18 3a10 	vmov	r3, s16
 8009352:	4652      	mov	r2, sl
 8009354:	4631      	mov	r1, r6
 8009356:	4628      	mov	r0, r5
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	f43f af09 	beq.w	8009172 <_printf_float+0xc2>
 8009360:	f04f 0900 	mov.w	r9, #0
 8009364:	f104 0a1a 	add.w	sl, r4, #26
 8009368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936a:	425b      	negs	r3, r3
 800936c:	454b      	cmp	r3, r9
 800936e:	dc01      	bgt.n	8009374 <_printf_float+0x2c4>
 8009370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009372:	e792      	b.n	800929a <_printf_float+0x1ea>
 8009374:	2301      	movs	r3, #1
 8009376:	4652      	mov	r2, sl
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f aef7 	beq.w	8009172 <_printf_float+0xc2>
 8009384:	f109 0901 	add.w	r9, r9, #1
 8009388:	e7ee      	b.n	8009368 <_printf_float+0x2b8>
 800938a:	bf00      	nop
 800938c:	7fefffff 	.word	0x7fefffff
 8009390:	0800c76c 	.word	0x0800c76c
 8009394:	0800c770 	.word	0x0800c770
 8009398:	0800c778 	.word	0x0800c778
 800939c:	0800c774 	.word	0x0800c774
 80093a0:	0800c77c 	.word	0x0800c77c
 80093a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093a8:	429a      	cmp	r2, r3
 80093aa:	bfa8      	it	ge
 80093ac:	461a      	movge	r2, r3
 80093ae:	2a00      	cmp	r2, #0
 80093b0:	4691      	mov	r9, r2
 80093b2:	dc37      	bgt.n	8009424 <_printf_float+0x374>
 80093b4:	f04f 0b00 	mov.w	fp, #0
 80093b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093bc:	f104 021a 	add.w	r2, r4, #26
 80093c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	eba3 0309 	sub.w	r3, r3, r9
 80093c8:	455b      	cmp	r3, fp
 80093ca:	dc33      	bgt.n	8009434 <_printf_float+0x384>
 80093cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093d0:	429a      	cmp	r2, r3
 80093d2:	db3b      	blt.n	800944c <_printf_float+0x39c>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07da      	lsls	r2, r3, #31
 80093d8:	d438      	bmi.n	800944c <_printf_float+0x39c>
 80093da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093dc:	9a05      	ldr	r2, [sp, #20]
 80093de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093e0:	1a9a      	subs	r2, r3, r2
 80093e2:	eba3 0901 	sub.w	r9, r3, r1
 80093e6:	4591      	cmp	r9, r2
 80093e8:	bfa8      	it	ge
 80093ea:	4691      	movge	r9, r2
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	dc35      	bgt.n	800945e <_printf_float+0x3ae>
 80093f2:	f04f 0800 	mov.w	r8, #0
 80093f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093fa:	f104 0a1a 	add.w	sl, r4, #26
 80093fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	eba3 0309 	sub.w	r3, r3, r9
 8009408:	4543      	cmp	r3, r8
 800940a:	f77f af79 	ble.w	8009300 <_printf_float+0x250>
 800940e:	2301      	movs	r3, #1
 8009410:	4652      	mov	r2, sl
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	f43f aeaa 	beq.w	8009172 <_printf_float+0xc2>
 800941e:	f108 0801 	add.w	r8, r8, #1
 8009422:	e7ec      	b.n	80093fe <_printf_float+0x34e>
 8009424:	4613      	mov	r3, r2
 8009426:	4631      	mov	r1, r6
 8009428:	4642      	mov	r2, r8
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	d1c0      	bne.n	80093b4 <_printf_float+0x304>
 8009432:	e69e      	b.n	8009172 <_printf_float+0xc2>
 8009434:	2301      	movs	r3, #1
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	9205      	str	r2, [sp, #20]
 800943c:	47b8      	blx	r7
 800943e:	3001      	adds	r0, #1
 8009440:	f43f ae97 	beq.w	8009172 <_printf_float+0xc2>
 8009444:	9a05      	ldr	r2, [sp, #20]
 8009446:	f10b 0b01 	add.w	fp, fp, #1
 800944a:	e7b9      	b.n	80093c0 <_printf_float+0x310>
 800944c:	ee18 3a10 	vmov	r3, s16
 8009450:	4652      	mov	r2, sl
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	47b8      	blx	r7
 8009458:	3001      	adds	r0, #1
 800945a:	d1be      	bne.n	80093da <_printf_float+0x32a>
 800945c:	e689      	b.n	8009172 <_printf_float+0xc2>
 800945e:	9a05      	ldr	r2, [sp, #20]
 8009460:	464b      	mov	r3, r9
 8009462:	4442      	add	r2, r8
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	d1c1      	bne.n	80093f2 <_printf_float+0x342>
 800946e:	e680      	b.n	8009172 <_printf_float+0xc2>
 8009470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009472:	2a01      	cmp	r2, #1
 8009474:	dc01      	bgt.n	800947a <_printf_float+0x3ca>
 8009476:	07db      	lsls	r3, r3, #31
 8009478:	d538      	bpl.n	80094ec <_printf_float+0x43c>
 800947a:	2301      	movs	r3, #1
 800947c:	4642      	mov	r2, r8
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	f43f ae74 	beq.w	8009172 <_printf_float+0xc2>
 800948a:	ee18 3a10 	vmov	r3, s16
 800948e:	4652      	mov	r2, sl
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f ae6b 	beq.w	8009172 <_printf_float+0xc2>
 800949c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094a0:	2200      	movs	r2, #0
 80094a2:	2300      	movs	r3, #0
 80094a4:	f7f7 fb18 	bl	8000ad8 <__aeabi_dcmpeq>
 80094a8:	b9d8      	cbnz	r0, 80094e2 <_printf_float+0x432>
 80094aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ac:	f108 0201 	add.w	r2, r8, #1
 80094b0:	3b01      	subs	r3, #1
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	d10e      	bne.n	80094da <_printf_float+0x42a>
 80094bc:	e659      	b.n	8009172 <_printf_float+0xc2>
 80094be:	2301      	movs	r3, #1
 80094c0:	4652      	mov	r2, sl
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b8      	blx	r7
 80094c8:	3001      	adds	r0, #1
 80094ca:	f43f ae52 	beq.w	8009172 <_printf_float+0xc2>
 80094ce:	f108 0801 	add.w	r8, r8, #1
 80094d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d4:	3b01      	subs	r3, #1
 80094d6:	4543      	cmp	r3, r8
 80094d8:	dcf1      	bgt.n	80094be <_printf_float+0x40e>
 80094da:	464b      	mov	r3, r9
 80094dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094e0:	e6dc      	b.n	800929c <_printf_float+0x1ec>
 80094e2:	f04f 0800 	mov.w	r8, #0
 80094e6:	f104 0a1a 	add.w	sl, r4, #26
 80094ea:	e7f2      	b.n	80094d2 <_printf_float+0x422>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4642      	mov	r2, r8
 80094f0:	e7df      	b.n	80094b2 <_printf_float+0x402>
 80094f2:	2301      	movs	r3, #1
 80094f4:	464a      	mov	r2, r9
 80094f6:	4631      	mov	r1, r6
 80094f8:	4628      	mov	r0, r5
 80094fa:	47b8      	blx	r7
 80094fc:	3001      	adds	r0, #1
 80094fe:	f43f ae38 	beq.w	8009172 <_printf_float+0xc2>
 8009502:	f108 0801 	add.w	r8, r8, #1
 8009506:	68e3      	ldr	r3, [r4, #12]
 8009508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800950a:	1a5b      	subs	r3, r3, r1
 800950c:	4543      	cmp	r3, r8
 800950e:	dcf0      	bgt.n	80094f2 <_printf_float+0x442>
 8009510:	e6fa      	b.n	8009308 <_printf_float+0x258>
 8009512:	f04f 0800 	mov.w	r8, #0
 8009516:	f104 0919 	add.w	r9, r4, #25
 800951a:	e7f4      	b.n	8009506 <_printf_float+0x456>

0800951c <_printf_common>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	4616      	mov	r6, r2
 8009522:	4699      	mov	r9, r3
 8009524:	688a      	ldr	r2, [r1, #8]
 8009526:	690b      	ldr	r3, [r1, #16]
 8009528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800952c:	4293      	cmp	r3, r2
 800952e:	bfb8      	it	lt
 8009530:	4613      	movlt	r3, r2
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009538:	4607      	mov	r7, r0
 800953a:	460c      	mov	r4, r1
 800953c:	b10a      	cbz	r2, 8009542 <_printf_common+0x26>
 800953e:	3301      	adds	r3, #1
 8009540:	6033      	str	r3, [r6, #0]
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	0699      	lsls	r1, r3, #26
 8009546:	bf42      	ittt	mi
 8009548:	6833      	ldrmi	r3, [r6, #0]
 800954a:	3302      	addmi	r3, #2
 800954c:	6033      	strmi	r3, [r6, #0]
 800954e:	6825      	ldr	r5, [r4, #0]
 8009550:	f015 0506 	ands.w	r5, r5, #6
 8009554:	d106      	bne.n	8009564 <_printf_common+0x48>
 8009556:	f104 0a19 	add.w	sl, r4, #25
 800955a:	68e3      	ldr	r3, [r4, #12]
 800955c:	6832      	ldr	r2, [r6, #0]
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	42ab      	cmp	r3, r5
 8009562:	dc26      	bgt.n	80095b2 <_printf_common+0x96>
 8009564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009568:	1e13      	subs	r3, r2, #0
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	bf18      	it	ne
 800956e:	2301      	movne	r3, #1
 8009570:	0692      	lsls	r2, r2, #26
 8009572:	d42b      	bmi.n	80095cc <_printf_common+0xb0>
 8009574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009578:	4649      	mov	r1, r9
 800957a:	4638      	mov	r0, r7
 800957c:	47c0      	blx	r8
 800957e:	3001      	adds	r0, #1
 8009580:	d01e      	beq.n	80095c0 <_printf_common+0xa4>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	68e5      	ldr	r5, [r4, #12]
 8009586:	6832      	ldr	r2, [r6, #0]
 8009588:	f003 0306 	and.w	r3, r3, #6
 800958c:	2b04      	cmp	r3, #4
 800958e:	bf08      	it	eq
 8009590:	1aad      	subeq	r5, r5, r2
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	6922      	ldr	r2, [r4, #16]
 8009596:	bf0c      	ite	eq
 8009598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800959c:	2500      	movne	r5, #0
 800959e:	4293      	cmp	r3, r2
 80095a0:	bfc4      	itt	gt
 80095a2:	1a9b      	subgt	r3, r3, r2
 80095a4:	18ed      	addgt	r5, r5, r3
 80095a6:	2600      	movs	r6, #0
 80095a8:	341a      	adds	r4, #26
 80095aa:	42b5      	cmp	r5, r6
 80095ac:	d11a      	bne.n	80095e4 <_printf_common+0xc8>
 80095ae:	2000      	movs	r0, #0
 80095b0:	e008      	b.n	80095c4 <_printf_common+0xa8>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4652      	mov	r2, sl
 80095b6:	4649      	mov	r1, r9
 80095b8:	4638      	mov	r0, r7
 80095ba:	47c0      	blx	r8
 80095bc:	3001      	adds	r0, #1
 80095be:	d103      	bne.n	80095c8 <_printf_common+0xac>
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c8:	3501      	adds	r5, #1
 80095ca:	e7c6      	b.n	800955a <_printf_common+0x3e>
 80095cc:	18e1      	adds	r1, r4, r3
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	2030      	movs	r0, #48	; 0x30
 80095d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095d6:	4422      	add	r2, r4
 80095d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095e0:	3302      	adds	r3, #2
 80095e2:	e7c7      	b.n	8009574 <_printf_common+0x58>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4622      	mov	r2, r4
 80095e8:	4649      	mov	r1, r9
 80095ea:	4638      	mov	r0, r7
 80095ec:	47c0      	blx	r8
 80095ee:	3001      	adds	r0, #1
 80095f0:	d0e6      	beq.n	80095c0 <_printf_common+0xa4>
 80095f2:	3601      	adds	r6, #1
 80095f4:	e7d9      	b.n	80095aa <_printf_common+0x8e>
	...

080095f8 <_printf_i>:
 80095f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095fc:	7e0f      	ldrb	r7, [r1, #24]
 80095fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009600:	2f78      	cmp	r7, #120	; 0x78
 8009602:	4691      	mov	r9, r2
 8009604:	4680      	mov	r8, r0
 8009606:	460c      	mov	r4, r1
 8009608:	469a      	mov	sl, r3
 800960a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800960e:	d807      	bhi.n	8009620 <_printf_i+0x28>
 8009610:	2f62      	cmp	r7, #98	; 0x62
 8009612:	d80a      	bhi.n	800962a <_printf_i+0x32>
 8009614:	2f00      	cmp	r7, #0
 8009616:	f000 80d8 	beq.w	80097ca <_printf_i+0x1d2>
 800961a:	2f58      	cmp	r7, #88	; 0x58
 800961c:	f000 80a3 	beq.w	8009766 <_printf_i+0x16e>
 8009620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009628:	e03a      	b.n	80096a0 <_printf_i+0xa8>
 800962a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800962e:	2b15      	cmp	r3, #21
 8009630:	d8f6      	bhi.n	8009620 <_printf_i+0x28>
 8009632:	a101      	add	r1, pc, #4	; (adr r1, 8009638 <_printf_i+0x40>)
 8009634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009638:	08009691 	.word	0x08009691
 800963c:	080096a5 	.word	0x080096a5
 8009640:	08009621 	.word	0x08009621
 8009644:	08009621 	.word	0x08009621
 8009648:	08009621 	.word	0x08009621
 800964c:	08009621 	.word	0x08009621
 8009650:	080096a5 	.word	0x080096a5
 8009654:	08009621 	.word	0x08009621
 8009658:	08009621 	.word	0x08009621
 800965c:	08009621 	.word	0x08009621
 8009660:	08009621 	.word	0x08009621
 8009664:	080097b1 	.word	0x080097b1
 8009668:	080096d5 	.word	0x080096d5
 800966c:	08009793 	.word	0x08009793
 8009670:	08009621 	.word	0x08009621
 8009674:	08009621 	.word	0x08009621
 8009678:	080097d3 	.word	0x080097d3
 800967c:	08009621 	.word	0x08009621
 8009680:	080096d5 	.word	0x080096d5
 8009684:	08009621 	.word	0x08009621
 8009688:	08009621 	.word	0x08009621
 800968c:	0800979b 	.word	0x0800979b
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	602a      	str	r2, [r5, #0]
 8009698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800969c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096a0:	2301      	movs	r3, #1
 80096a2:	e0a3      	b.n	80097ec <_printf_i+0x1f4>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	6829      	ldr	r1, [r5, #0]
 80096a8:	0606      	lsls	r6, r0, #24
 80096aa:	f101 0304 	add.w	r3, r1, #4
 80096ae:	d50a      	bpl.n	80096c6 <_printf_i+0xce>
 80096b0:	680e      	ldr	r6, [r1, #0]
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	da03      	bge.n	80096c0 <_printf_i+0xc8>
 80096b8:	232d      	movs	r3, #45	; 0x2d
 80096ba:	4276      	negs	r6, r6
 80096bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c0:	485e      	ldr	r0, [pc, #376]	; (800983c <_printf_i+0x244>)
 80096c2:	230a      	movs	r3, #10
 80096c4:	e019      	b.n	80096fa <_printf_i+0x102>
 80096c6:	680e      	ldr	r6, [r1, #0]
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096ce:	bf18      	it	ne
 80096d0:	b236      	sxthne	r6, r6
 80096d2:	e7ef      	b.n	80096b4 <_printf_i+0xbc>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	1d19      	adds	r1, r3, #4
 80096da:	6029      	str	r1, [r5, #0]
 80096dc:	0601      	lsls	r1, r0, #24
 80096de:	d501      	bpl.n	80096e4 <_printf_i+0xec>
 80096e0:	681e      	ldr	r6, [r3, #0]
 80096e2:	e002      	b.n	80096ea <_printf_i+0xf2>
 80096e4:	0646      	lsls	r6, r0, #25
 80096e6:	d5fb      	bpl.n	80096e0 <_printf_i+0xe8>
 80096e8:	881e      	ldrh	r6, [r3, #0]
 80096ea:	4854      	ldr	r0, [pc, #336]	; (800983c <_printf_i+0x244>)
 80096ec:	2f6f      	cmp	r7, #111	; 0x6f
 80096ee:	bf0c      	ite	eq
 80096f0:	2308      	moveq	r3, #8
 80096f2:	230a      	movne	r3, #10
 80096f4:	2100      	movs	r1, #0
 80096f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096fa:	6865      	ldr	r5, [r4, #4]
 80096fc:	60a5      	str	r5, [r4, #8]
 80096fe:	2d00      	cmp	r5, #0
 8009700:	bfa2      	ittt	ge
 8009702:	6821      	ldrge	r1, [r4, #0]
 8009704:	f021 0104 	bicge.w	r1, r1, #4
 8009708:	6021      	strge	r1, [r4, #0]
 800970a:	b90e      	cbnz	r6, 8009710 <_printf_i+0x118>
 800970c:	2d00      	cmp	r5, #0
 800970e:	d04d      	beq.n	80097ac <_printf_i+0x1b4>
 8009710:	4615      	mov	r5, r2
 8009712:	fbb6 f1f3 	udiv	r1, r6, r3
 8009716:	fb03 6711 	mls	r7, r3, r1, r6
 800971a:	5dc7      	ldrb	r7, [r0, r7]
 800971c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009720:	4637      	mov	r7, r6
 8009722:	42bb      	cmp	r3, r7
 8009724:	460e      	mov	r6, r1
 8009726:	d9f4      	bls.n	8009712 <_printf_i+0x11a>
 8009728:	2b08      	cmp	r3, #8
 800972a:	d10b      	bne.n	8009744 <_printf_i+0x14c>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	07de      	lsls	r6, r3, #31
 8009730:	d508      	bpl.n	8009744 <_printf_i+0x14c>
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	6861      	ldr	r1, [r4, #4]
 8009736:	4299      	cmp	r1, r3
 8009738:	bfde      	ittt	le
 800973a:	2330      	movle	r3, #48	; 0x30
 800973c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009740:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009744:	1b52      	subs	r2, r2, r5
 8009746:	6122      	str	r2, [r4, #16]
 8009748:	f8cd a000 	str.w	sl, [sp]
 800974c:	464b      	mov	r3, r9
 800974e:	aa03      	add	r2, sp, #12
 8009750:	4621      	mov	r1, r4
 8009752:	4640      	mov	r0, r8
 8009754:	f7ff fee2 	bl	800951c <_printf_common>
 8009758:	3001      	adds	r0, #1
 800975a:	d14c      	bne.n	80097f6 <_printf_i+0x1fe>
 800975c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009760:	b004      	add	sp, #16
 8009762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009766:	4835      	ldr	r0, [pc, #212]	; (800983c <_printf_i+0x244>)
 8009768:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800976c:	6829      	ldr	r1, [r5, #0]
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	f851 6b04 	ldr.w	r6, [r1], #4
 8009774:	6029      	str	r1, [r5, #0]
 8009776:	061d      	lsls	r5, r3, #24
 8009778:	d514      	bpl.n	80097a4 <_printf_i+0x1ac>
 800977a:	07df      	lsls	r7, r3, #31
 800977c:	bf44      	itt	mi
 800977e:	f043 0320 	orrmi.w	r3, r3, #32
 8009782:	6023      	strmi	r3, [r4, #0]
 8009784:	b91e      	cbnz	r6, 800978e <_printf_i+0x196>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	f023 0320 	bic.w	r3, r3, #32
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	2310      	movs	r3, #16
 8009790:	e7b0      	b.n	80096f4 <_printf_i+0xfc>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	f043 0320 	orr.w	r3, r3, #32
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	2378      	movs	r3, #120	; 0x78
 800979c:	4828      	ldr	r0, [pc, #160]	; (8009840 <_printf_i+0x248>)
 800979e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097a2:	e7e3      	b.n	800976c <_printf_i+0x174>
 80097a4:	0659      	lsls	r1, r3, #25
 80097a6:	bf48      	it	mi
 80097a8:	b2b6      	uxthmi	r6, r6
 80097aa:	e7e6      	b.n	800977a <_printf_i+0x182>
 80097ac:	4615      	mov	r5, r2
 80097ae:	e7bb      	b.n	8009728 <_printf_i+0x130>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	6826      	ldr	r6, [r4, #0]
 80097b4:	6961      	ldr	r1, [r4, #20]
 80097b6:	1d18      	adds	r0, r3, #4
 80097b8:	6028      	str	r0, [r5, #0]
 80097ba:	0635      	lsls	r5, r6, #24
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	d501      	bpl.n	80097c4 <_printf_i+0x1cc>
 80097c0:	6019      	str	r1, [r3, #0]
 80097c2:	e002      	b.n	80097ca <_printf_i+0x1d2>
 80097c4:	0670      	lsls	r0, r6, #25
 80097c6:	d5fb      	bpl.n	80097c0 <_printf_i+0x1c8>
 80097c8:	8019      	strh	r1, [r3, #0]
 80097ca:	2300      	movs	r3, #0
 80097cc:	6123      	str	r3, [r4, #16]
 80097ce:	4615      	mov	r5, r2
 80097d0:	e7ba      	b.n	8009748 <_printf_i+0x150>
 80097d2:	682b      	ldr	r3, [r5, #0]
 80097d4:	1d1a      	adds	r2, r3, #4
 80097d6:	602a      	str	r2, [r5, #0]
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	6862      	ldr	r2, [r4, #4]
 80097dc:	2100      	movs	r1, #0
 80097de:	4628      	mov	r0, r5
 80097e0:	f7f6 fd06 	bl	80001f0 <memchr>
 80097e4:	b108      	cbz	r0, 80097ea <_printf_i+0x1f2>
 80097e6:	1b40      	subs	r0, r0, r5
 80097e8:	6060      	str	r0, [r4, #4]
 80097ea:	6863      	ldr	r3, [r4, #4]
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	2300      	movs	r3, #0
 80097f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097f4:	e7a8      	b.n	8009748 <_printf_i+0x150>
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	462a      	mov	r2, r5
 80097fa:	4649      	mov	r1, r9
 80097fc:	4640      	mov	r0, r8
 80097fe:	47d0      	blx	sl
 8009800:	3001      	adds	r0, #1
 8009802:	d0ab      	beq.n	800975c <_printf_i+0x164>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	079b      	lsls	r3, r3, #30
 8009808:	d413      	bmi.n	8009832 <_printf_i+0x23a>
 800980a:	68e0      	ldr	r0, [r4, #12]
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	4298      	cmp	r0, r3
 8009810:	bfb8      	it	lt
 8009812:	4618      	movlt	r0, r3
 8009814:	e7a4      	b.n	8009760 <_printf_i+0x168>
 8009816:	2301      	movs	r3, #1
 8009818:	4632      	mov	r2, r6
 800981a:	4649      	mov	r1, r9
 800981c:	4640      	mov	r0, r8
 800981e:	47d0      	blx	sl
 8009820:	3001      	adds	r0, #1
 8009822:	d09b      	beq.n	800975c <_printf_i+0x164>
 8009824:	3501      	adds	r5, #1
 8009826:	68e3      	ldr	r3, [r4, #12]
 8009828:	9903      	ldr	r1, [sp, #12]
 800982a:	1a5b      	subs	r3, r3, r1
 800982c:	42ab      	cmp	r3, r5
 800982e:	dcf2      	bgt.n	8009816 <_printf_i+0x21e>
 8009830:	e7eb      	b.n	800980a <_printf_i+0x212>
 8009832:	2500      	movs	r5, #0
 8009834:	f104 0619 	add.w	r6, r4, #25
 8009838:	e7f5      	b.n	8009826 <_printf_i+0x22e>
 800983a:	bf00      	nop
 800983c:	0800c77e 	.word	0x0800c77e
 8009840:	0800c78f 	.word	0x0800c78f

08009844 <iprintf>:
 8009844:	b40f      	push	{r0, r1, r2, r3}
 8009846:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <iprintf+0x2c>)
 8009848:	b513      	push	{r0, r1, r4, lr}
 800984a:	681c      	ldr	r4, [r3, #0]
 800984c:	b124      	cbz	r4, 8009858 <iprintf+0x14>
 800984e:	69a3      	ldr	r3, [r4, #24]
 8009850:	b913      	cbnz	r3, 8009858 <iprintf+0x14>
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fee2 	bl	800a61c <__sinit>
 8009858:	ab05      	add	r3, sp, #20
 800985a:	9a04      	ldr	r2, [sp, #16]
 800985c:	68a1      	ldr	r1, [r4, #8]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	4620      	mov	r0, r4
 8009862:	f001 fc2d 	bl	800b0c0 <_vfiprintf_r>
 8009866:	b002      	add	sp, #8
 8009868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986c:	b004      	add	sp, #16
 800986e:	4770      	bx	lr
 8009870:	20000048 	.word	0x20000048

08009874 <quorem>:
 8009874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	6903      	ldr	r3, [r0, #16]
 800987a:	690c      	ldr	r4, [r1, #16]
 800987c:	42a3      	cmp	r3, r4
 800987e:	4607      	mov	r7, r0
 8009880:	f2c0 8081 	blt.w	8009986 <quorem+0x112>
 8009884:	3c01      	subs	r4, #1
 8009886:	f101 0814 	add.w	r8, r1, #20
 800988a:	f100 0514 	add.w	r5, r0, #20
 800988e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009898:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800989c:	3301      	adds	r3, #1
 800989e:	429a      	cmp	r2, r3
 80098a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80098ac:	d331      	bcc.n	8009912 <quorem+0x9e>
 80098ae:	f04f 0e00 	mov.w	lr, #0
 80098b2:	4640      	mov	r0, r8
 80098b4:	46ac      	mov	ip, r5
 80098b6:	46f2      	mov	sl, lr
 80098b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80098bc:	b293      	uxth	r3, r2
 80098be:	fb06 e303 	mla	r3, r6, r3, lr
 80098c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	ebaa 0303 	sub.w	r3, sl, r3
 80098cc:	f8dc a000 	ldr.w	sl, [ip]
 80098d0:	0c12      	lsrs	r2, r2, #16
 80098d2:	fa13 f38a 	uxtah	r3, r3, sl
 80098d6:	fb06 e202 	mla	r2, r6, r2, lr
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098e2:	b292      	uxth	r2, r2
 80098e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80098f0:	4581      	cmp	r9, r0
 80098f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098f6:	f84c 3b04 	str.w	r3, [ip], #4
 80098fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098fe:	d2db      	bcs.n	80098b8 <quorem+0x44>
 8009900:	f855 300b 	ldr.w	r3, [r5, fp]
 8009904:	b92b      	cbnz	r3, 8009912 <quorem+0x9e>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	3b04      	subs	r3, #4
 800990a:	429d      	cmp	r5, r3
 800990c:	461a      	mov	r2, r3
 800990e:	d32e      	bcc.n	800996e <quorem+0xfa>
 8009910:	613c      	str	r4, [r7, #16]
 8009912:	4638      	mov	r0, r7
 8009914:	f001 f9b2 	bl	800ac7c <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	db24      	blt.n	8009966 <quorem+0xf2>
 800991c:	3601      	adds	r6, #1
 800991e:	4628      	mov	r0, r5
 8009920:	f04f 0c00 	mov.w	ip, #0
 8009924:	f858 2b04 	ldr.w	r2, [r8], #4
 8009928:	f8d0 e000 	ldr.w	lr, [r0]
 800992c:	b293      	uxth	r3, r2
 800992e:	ebac 0303 	sub.w	r3, ip, r3
 8009932:	0c12      	lsrs	r2, r2, #16
 8009934:	fa13 f38e 	uxtah	r3, r3, lr
 8009938:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800993c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009940:	b29b      	uxth	r3, r3
 8009942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009946:	45c1      	cmp	r9, r8
 8009948:	f840 3b04 	str.w	r3, [r0], #4
 800994c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009950:	d2e8      	bcs.n	8009924 <quorem+0xb0>
 8009952:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800995a:	b922      	cbnz	r2, 8009966 <quorem+0xf2>
 800995c:	3b04      	subs	r3, #4
 800995e:	429d      	cmp	r5, r3
 8009960:	461a      	mov	r2, r3
 8009962:	d30a      	bcc.n	800997a <quorem+0x106>
 8009964:	613c      	str	r4, [r7, #16]
 8009966:	4630      	mov	r0, r6
 8009968:	b003      	add	sp, #12
 800996a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996e:	6812      	ldr	r2, [r2, #0]
 8009970:	3b04      	subs	r3, #4
 8009972:	2a00      	cmp	r2, #0
 8009974:	d1cc      	bne.n	8009910 <quorem+0x9c>
 8009976:	3c01      	subs	r4, #1
 8009978:	e7c7      	b.n	800990a <quorem+0x96>
 800997a:	6812      	ldr	r2, [r2, #0]
 800997c:	3b04      	subs	r3, #4
 800997e:	2a00      	cmp	r2, #0
 8009980:	d1f0      	bne.n	8009964 <quorem+0xf0>
 8009982:	3c01      	subs	r4, #1
 8009984:	e7eb      	b.n	800995e <quorem+0xea>
 8009986:	2000      	movs	r0, #0
 8009988:	e7ee      	b.n	8009968 <quorem+0xf4>
 800998a:	0000      	movs	r0, r0
 800998c:	0000      	movs	r0, r0
	...

08009990 <_dtoa_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	ed2d 8b04 	vpush	{d8-d9}
 8009998:	ec57 6b10 	vmov	r6, r7, d0
 800999c:	b093      	sub	sp, #76	; 0x4c
 800999e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099a4:	9106      	str	r1, [sp, #24]
 80099a6:	ee10 aa10 	vmov	sl, s0
 80099aa:	4604      	mov	r4, r0
 80099ac:	9209      	str	r2, [sp, #36]	; 0x24
 80099ae:	930c      	str	r3, [sp, #48]	; 0x30
 80099b0:	46bb      	mov	fp, r7
 80099b2:	b975      	cbnz	r5, 80099d2 <_dtoa_r+0x42>
 80099b4:	2010      	movs	r0, #16
 80099b6:	f000 fed7 	bl	800a768 <malloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6260      	str	r0, [r4, #36]	; 0x24
 80099be:	b920      	cbnz	r0, 80099ca <_dtoa_r+0x3a>
 80099c0:	4ba7      	ldr	r3, [pc, #668]	; (8009c60 <_dtoa_r+0x2d0>)
 80099c2:	21ea      	movs	r1, #234	; 0xea
 80099c4:	48a7      	ldr	r0, [pc, #668]	; (8009c64 <_dtoa_r+0x2d4>)
 80099c6:	f001 fdd1 	bl	800b56c <__assert_func>
 80099ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099ce:	6005      	str	r5, [r0, #0]
 80099d0:	60c5      	str	r5, [r0, #12]
 80099d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099d4:	6819      	ldr	r1, [r3, #0]
 80099d6:	b151      	cbz	r1, 80099ee <_dtoa_r+0x5e>
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	604a      	str	r2, [r1, #4]
 80099dc:	2301      	movs	r3, #1
 80099de:	4093      	lsls	r3, r2
 80099e0:	608b      	str	r3, [r1, #8]
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 ff08 	bl	800a7f8 <_Bfree>
 80099e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	1e3b      	subs	r3, r7, #0
 80099f0:	bfaa      	itet	ge
 80099f2:	2300      	movge	r3, #0
 80099f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099f8:	f8c8 3000 	strge.w	r3, [r8]
 80099fc:	4b9a      	ldr	r3, [pc, #616]	; (8009c68 <_dtoa_r+0x2d8>)
 80099fe:	bfbc      	itt	lt
 8009a00:	2201      	movlt	r2, #1
 8009a02:	f8c8 2000 	strlt.w	r2, [r8]
 8009a06:	ea33 030b 	bics.w	r3, r3, fp
 8009a0a:	d11b      	bne.n	8009a44 <_dtoa_r+0xb4>
 8009a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a18:	4333      	orrs	r3, r6
 8009a1a:	f000 8592 	beq.w	800a542 <_dtoa_r+0xbb2>
 8009a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a20:	b963      	cbnz	r3, 8009a3c <_dtoa_r+0xac>
 8009a22:	4b92      	ldr	r3, [pc, #584]	; (8009c6c <_dtoa_r+0x2dc>)
 8009a24:	e022      	b.n	8009a6c <_dtoa_r+0xdc>
 8009a26:	4b92      	ldr	r3, [pc, #584]	; (8009c70 <_dtoa_r+0x2e0>)
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	9801      	ldr	r0, [sp, #4]
 8009a32:	b013      	add	sp, #76	; 0x4c
 8009a34:	ecbd 8b04 	vpop	{d8-d9}
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	4b8b      	ldr	r3, [pc, #556]	; (8009c6c <_dtoa_r+0x2dc>)
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	3303      	adds	r3, #3
 8009a42:	e7f3      	b.n	8009a2c <_dtoa_r+0x9c>
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	4650      	mov	r0, sl
 8009a4a:	4659      	mov	r1, fp
 8009a4c:	f7f7 f844 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a50:	ec4b ab19 	vmov	d9, sl, fp
 8009a54:	4680      	mov	r8, r0
 8009a56:	b158      	cbz	r0, 8009a70 <_dtoa_r+0xe0>
 8009a58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 856b 	beq.w	800a53c <_dtoa_r+0xbac>
 8009a66:	4883      	ldr	r0, [pc, #524]	; (8009c74 <_dtoa_r+0x2e4>)
 8009a68:	6018      	str	r0, [r3, #0]
 8009a6a:	1e43      	subs	r3, r0, #1
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	e7df      	b.n	8009a30 <_dtoa_r+0xa0>
 8009a70:	ec4b ab10 	vmov	d0, sl, fp
 8009a74:	aa10      	add	r2, sp, #64	; 0x40
 8009a76:	a911      	add	r1, sp, #68	; 0x44
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f001 f9a5 	bl	800adc8 <__d2b>
 8009a7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a82:	ee08 0a10 	vmov	s16, r0
 8009a86:	2d00      	cmp	r5, #0
 8009a88:	f000 8084 	beq.w	8009b94 <_dtoa_r+0x204>
 8009a8c:	ee19 3a90 	vmov	r3, s19
 8009a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a98:	4656      	mov	r6, sl
 8009a9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aa2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009aa6:	4b74      	ldr	r3, [pc, #464]	; (8009c78 <_dtoa_r+0x2e8>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4639      	mov	r1, r7
 8009aae:	f7f6 fbf3 	bl	8000298 <__aeabi_dsub>
 8009ab2:	a365      	add	r3, pc, #404	; (adr r3, 8009c48 <_dtoa_r+0x2b8>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fda6 	bl	8000608 <__aeabi_dmul>
 8009abc:	a364      	add	r3, pc, #400	; (adr r3, 8009c50 <_dtoa_r+0x2c0>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fbeb 	bl	800029c <__adddf3>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	460f      	mov	r7, r1
 8009acc:	f7f6 fd32 	bl	8000534 <__aeabi_i2d>
 8009ad0:	a361      	add	r3, pc, #388	; (adr r3, 8009c58 <_dtoa_r+0x2c8>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fd97 	bl	8000608 <__aeabi_dmul>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7f6 fbdb 	bl	800029c <__adddf3>
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460f      	mov	r7, r1
 8009aea:	f7f7 f83d 	bl	8000b68 <__aeabi_d2iz>
 8009aee:	2200      	movs	r2, #0
 8009af0:	9000      	str	r0, [sp, #0]
 8009af2:	2300      	movs	r3, #0
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 fff8 	bl	8000aec <__aeabi_dcmplt>
 8009afc:	b150      	cbz	r0, 8009b14 <_dtoa_r+0x184>
 8009afe:	9800      	ldr	r0, [sp, #0]
 8009b00:	f7f6 fd18 	bl	8000534 <__aeabi_i2d>
 8009b04:	4632      	mov	r2, r6
 8009b06:	463b      	mov	r3, r7
 8009b08:	f7f6 ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b0c:	b910      	cbnz	r0, 8009b14 <_dtoa_r+0x184>
 8009b0e:	9b00      	ldr	r3, [sp, #0]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	2b16      	cmp	r3, #22
 8009b18:	d85a      	bhi.n	8009bd0 <_dtoa_r+0x240>
 8009b1a:	9a00      	ldr	r2, [sp, #0]
 8009b1c:	4b57      	ldr	r3, [pc, #348]	; (8009c7c <_dtoa_r+0x2ec>)
 8009b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	ec51 0b19 	vmov	r0, r1, d9
 8009b2a:	f7f6 ffdf 	bl	8000aec <__aeabi_dcmplt>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d050      	beq.n	8009bd4 <_dtoa_r+0x244>
 8009b32:	9b00      	ldr	r3, [sp, #0]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b3e:	1b5d      	subs	r5, r3, r5
 8009b40:	1e6b      	subs	r3, r5, #1
 8009b42:	9305      	str	r3, [sp, #20]
 8009b44:	bf45      	ittet	mi
 8009b46:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b4a:	9304      	strmi	r3, [sp, #16]
 8009b4c:	2300      	movpl	r3, #0
 8009b4e:	2300      	movmi	r3, #0
 8009b50:	bf4c      	ite	mi
 8009b52:	9305      	strmi	r3, [sp, #20]
 8009b54:	9304      	strpl	r3, [sp, #16]
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db3d      	blt.n	8009bd8 <_dtoa_r+0x248>
 8009b5c:	9b05      	ldr	r3, [sp, #20]
 8009b5e:	9a00      	ldr	r2, [sp, #0]
 8009b60:	920a      	str	r2, [sp, #40]	; 0x28
 8009b62:	4413      	add	r3, r2
 8009b64:	9305      	str	r3, [sp, #20]
 8009b66:	2300      	movs	r3, #0
 8009b68:	9307      	str	r3, [sp, #28]
 8009b6a:	9b06      	ldr	r3, [sp, #24]
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	f200 8089 	bhi.w	8009c84 <_dtoa_r+0x2f4>
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	bfc4      	itt	gt
 8009b76:	3b04      	subgt	r3, #4
 8009b78:	9306      	strgt	r3, [sp, #24]
 8009b7a:	9b06      	ldr	r3, [sp, #24]
 8009b7c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b80:	bfcc      	ite	gt
 8009b82:	2500      	movgt	r5, #0
 8009b84:	2501      	movle	r5, #1
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	f200 8087 	bhi.w	8009c9a <_dtoa_r+0x30a>
 8009b8c:	e8df f003 	tbb	[pc, r3]
 8009b90:	59383a2d 	.word	0x59383a2d
 8009b94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b98:	441d      	add	r5, r3
 8009b9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b9e:	2b20      	cmp	r3, #32
 8009ba0:	bfc1      	itttt	gt
 8009ba2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ba6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009baa:	fa0b f303 	lslgt.w	r3, fp, r3
 8009bae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bb2:	bfda      	itte	le
 8009bb4:	f1c3 0320 	rsble	r3, r3, #32
 8009bb8:	fa06 f003 	lslle.w	r0, r6, r3
 8009bbc:	4318      	orrgt	r0, r3
 8009bbe:	f7f6 fca9 	bl	8000514 <__aeabi_ui2d>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009bca:	3d01      	subs	r5, #1
 8009bcc:	930e      	str	r3, [sp, #56]	; 0x38
 8009bce:	e76a      	b.n	8009aa6 <_dtoa_r+0x116>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e7b2      	b.n	8009b3a <_dtoa_r+0x1aa>
 8009bd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bd6:	e7b1      	b.n	8009b3c <_dtoa_r+0x1ac>
 8009bd8:	9b04      	ldr	r3, [sp, #16]
 8009bda:	9a00      	ldr	r2, [sp, #0]
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	4253      	negs	r3, r2
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	2300      	movs	r3, #0
 8009be6:	930a      	str	r3, [sp, #40]	; 0x28
 8009be8:	e7bf      	b.n	8009b6a <_dtoa_r+0x1da>
 8009bea:	2300      	movs	r3, #0
 8009bec:	9308      	str	r3, [sp, #32]
 8009bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc55      	bgt.n	8009ca0 <_dtoa_r+0x310>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bfe:	e00c      	b.n	8009c1a <_dtoa_r+0x28a>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f3      	b.n	8009bec <_dtoa_r+0x25c>
 8009c04:	2300      	movs	r3, #0
 8009c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9b00      	ldr	r3, [sp, #0]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	9302      	str	r3, [sp, #8]
 8009c10:	3301      	adds	r3, #1
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	bfb8      	it	lt
 8009c18:	2301      	movlt	r3, #1
 8009c1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	6042      	str	r2, [r0, #4]
 8009c20:	2204      	movs	r2, #4
 8009c22:	f102 0614 	add.w	r6, r2, #20
 8009c26:	429e      	cmp	r6, r3
 8009c28:	6841      	ldr	r1, [r0, #4]
 8009c2a:	d93d      	bls.n	8009ca8 <_dtoa_r+0x318>
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 fda3 	bl	800a778 <_Balloc>
 8009c32:	9001      	str	r0, [sp, #4]
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d13b      	bne.n	8009cb0 <_dtoa_r+0x320>
 8009c38:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <_dtoa_r+0x2f0>)
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c40:	e6c0      	b.n	80099c4 <_dtoa_r+0x34>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e7df      	b.n	8009c06 <_dtoa_r+0x276>
 8009c46:	bf00      	nop
 8009c48:	636f4361 	.word	0x636f4361
 8009c4c:	3fd287a7 	.word	0x3fd287a7
 8009c50:	8b60c8b3 	.word	0x8b60c8b3
 8009c54:	3fc68a28 	.word	0x3fc68a28
 8009c58:	509f79fb 	.word	0x509f79fb
 8009c5c:	3fd34413 	.word	0x3fd34413
 8009c60:	0800c7ad 	.word	0x0800c7ad
 8009c64:	0800c7c4 	.word	0x0800c7c4
 8009c68:	7ff00000 	.word	0x7ff00000
 8009c6c:	0800c7a9 	.word	0x0800c7a9
 8009c70:	0800c7a0 	.word	0x0800c7a0
 8009c74:	0800c77d 	.word	0x0800c77d
 8009c78:	3ff80000 	.word	0x3ff80000
 8009c7c:	0800c918 	.word	0x0800c918
 8009c80:	0800c81f 	.word	0x0800c81f
 8009c84:	2501      	movs	r5, #1
 8009c86:	2300      	movs	r3, #0
 8009c88:	9306      	str	r3, [sp, #24]
 8009c8a:	9508      	str	r5, [sp, #32]
 8009c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c94:	2200      	movs	r2, #0
 8009c96:	2312      	movs	r3, #18
 8009c98:	e7b0      	b.n	8009bfc <_dtoa_r+0x26c>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	9308      	str	r3, [sp, #32]
 8009c9e:	e7f5      	b.n	8009c8c <_dtoa_r+0x2fc>
 8009ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ca6:	e7b8      	b.n	8009c1a <_dtoa_r+0x28a>
 8009ca8:	3101      	adds	r1, #1
 8009caa:	6041      	str	r1, [r0, #4]
 8009cac:	0052      	lsls	r2, r2, #1
 8009cae:	e7b8      	b.n	8009c22 <_dtoa_r+0x292>
 8009cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb2:	9a01      	ldr	r2, [sp, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	2b0e      	cmp	r3, #14
 8009cba:	f200 809d 	bhi.w	8009df8 <_dtoa_r+0x468>
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	f000 809a 	beq.w	8009df8 <_dtoa_r+0x468>
 8009cc4:	9b00      	ldr	r3, [sp, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dd32      	ble.n	8009d30 <_dtoa_r+0x3a0>
 8009cca:	4ab7      	ldr	r2, [pc, #732]	; (8009fa8 <_dtoa_r+0x618>)
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cd8:	9b00      	ldr	r3, [sp, #0]
 8009cda:	05d8      	lsls	r0, r3, #23
 8009cdc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009ce0:	d516      	bpl.n	8009d10 <_dtoa_r+0x380>
 8009ce2:	4bb2      	ldr	r3, [pc, #712]	; (8009fac <_dtoa_r+0x61c>)
 8009ce4:	ec51 0b19 	vmov	r0, r1, d9
 8009ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cec:	f7f6 fdb6 	bl	800085c <__aeabi_ddiv>
 8009cf0:	f007 070f 	and.w	r7, r7, #15
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	468b      	mov	fp, r1
 8009cf8:	2503      	movs	r5, #3
 8009cfa:	4eac      	ldr	r6, [pc, #688]	; (8009fac <_dtoa_r+0x61c>)
 8009cfc:	b957      	cbnz	r7, 8009d14 <_dtoa_r+0x384>
 8009cfe:	4642      	mov	r2, r8
 8009d00:	464b      	mov	r3, r9
 8009d02:	4650      	mov	r0, sl
 8009d04:	4659      	mov	r1, fp
 8009d06:	f7f6 fda9 	bl	800085c <__aeabi_ddiv>
 8009d0a:	4682      	mov	sl, r0
 8009d0c:	468b      	mov	fp, r1
 8009d0e:	e028      	b.n	8009d62 <_dtoa_r+0x3d2>
 8009d10:	2502      	movs	r5, #2
 8009d12:	e7f2      	b.n	8009cfa <_dtoa_r+0x36a>
 8009d14:	07f9      	lsls	r1, r7, #31
 8009d16:	d508      	bpl.n	8009d2a <_dtoa_r+0x39a>
 8009d18:	4640      	mov	r0, r8
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d20:	f7f6 fc72 	bl	8000608 <__aeabi_dmul>
 8009d24:	3501      	adds	r5, #1
 8009d26:	4680      	mov	r8, r0
 8009d28:	4689      	mov	r9, r1
 8009d2a:	107f      	asrs	r7, r7, #1
 8009d2c:	3608      	adds	r6, #8
 8009d2e:	e7e5      	b.n	8009cfc <_dtoa_r+0x36c>
 8009d30:	f000 809b 	beq.w	8009e6a <_dtoa_r+0x4da>
 8009d34:	9b00      	ldr	r3, [sp, #0]
 8009d36:	4f9d      	ldr	r7, [pc, #628]	; (8009fac <_dtoa_r+0x61c>)
 8009d38:	425e      	negs	r6, r3
 8009d3a:	4b9b      	ldr	r3, [pc, #620]	; (8009fa8 <_dtoa_r+0x618>)
 8009d3c:	f006 020f 	and.w	r2, r6, #15
 8009d40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	ec51 0b19 	vmov	r0, r1, d9
 8009d4c:	f7f6 fc5c 	bl	8000608 <__aeabi_dmul>
 8009d50:	1136      	asrs	r6, r6, #4
 8009d52:	4682      	mov	sl, r0
 8009d54:	468b      	mov	fp, r1
 8009d56:	2300      	movs	r3, #0
 8009d58:	2502      	movs	r5, #2
 8009d5a:	2e00      	cmp	r6, #0
 8009d5c:	d17a      	bne.n	8009e54 <_dtoa_r+0x4c4>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1d3      	bne.n	8009d0a <_dtoa_r+0x37a>
 8009d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8082 	beq.w	8009e6e <_dtoa_r+0x4de>
 8009d6a:	4b91      	ldr	r3, [pc, #580]	; (8009fb0 <_dtoa_r+0x620>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4650      	mov	r0, sl
 8009d70:	4659      	mov	r1, fp
 8009d72:	f7f6 febb 	bl	8000aec <__aeabi_dcmplt>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d079      	beq.n	8009e6e <_dtoa_r+0x4de>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d076      	beq.n	8009e6e <_dtoa_r+0x4de>
 8009d80:	9b02      	ldr	r3, [sp, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dd36      	ble.n	8009df4 <_dtoa_r+0x464>
 8009d86:	9b00      	ldr	r3, [sp, #0]
 8009d88:	4650      	mov	r0, sl
 8009d8a:	4659      	mov	r1, fp
 8009d8c:	1e5f      	subs	r7, r3, #1
 8009d8e:	2200      	movs	r2, #0
 8009d90:	4b88      	ldr	r3, [pc, #544]	; (8009fb4 <_dtoa_r+0x624>)
 8009d92:	f7f6 fc39 	bl	8000608 <__aeabi_dmul>
 8009d96:	9e02      	ldr	r6, [sp, #8]
 8009d98:	4682      	mov	sl, r0
 8009d9a:	468b      	mov	fp, r1
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f7f6 fbc8 	bl	8000534 <__aeabi_i2d>
 8009da4:	4652      	mov	r2, sl
 8009da6:	465b      	mov	r3, fp
 8009da8:	f7f6 fc2e 	bl	8000608 <__aeabi_dmul>
 8009dac:	4b82      	ldr	r3, [pc, #520]	; (8009fb8 <_dtoa_r+0x628>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	f7f6 fa74 	bl	800029c <__adddf3>
 8009db4:	46d0      	mov	r8, sl
 8009db6:	46d9      	mov	r9, fp
 8009db8:	4682      	mov	sl, r0
 8009dba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009dbe:	2e00      	cmp	r6, #0
 8009dc0:	d158      	bne.n	8009e74 <_dtoa_r+0x4e4>
 8009dc2:	4b7e      	ldr	r3, [pc, #504]	; (8009fbc <_dtoa_r+0x62c>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	4649      	mov	r1, r9
 8009dca:	f7f6 fa65 	bl	8000298 <__aeabi_dsub>
 8009dce:	4652      	mov	r2, sl
 8009dd0:	465b      	mov	r3, fp
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	4689      	mov	r9, r1
 8009dd6:	f7f6 fea7 	bl	8000b28 <__aeabi_dcmpgt>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f040 8295 	bne.w	800a30a <_dtoa_r+0x97a>
 8009de0:	4652      	mov	r2, sl
 8009de2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	f7f6 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f040 8289 	bne.w	800a306 <_dtoa_r+0x976>
 8009df4:	ec5b ab19 	vmov	sl, fp, d9
 8009df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f2c0 8148 	blt.w	800a090 <_dtoa_r+0x700>
 8009e00:	9a00      	ldr	r2, [sp, #0]
 8009e02:	2a0e      	cmp	r2, #14
 8009e04:	f300 8144 	bgt.w	800a090 <_dtoa_r+0x700>
 8009e08:	4b67      	ldr	r3, [pc, #412]	; (8009fa8 <_dtoa_r+0x618>)
 8009e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f280 80d5 	bge.w	8009fc4 <_dtoa_r+0x634>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f300 80d1 	bgt.w	8009fc4 <_dtoa_r+0x634>
 8009e22:	f040 826f 	bne.w	800a304 <_dtoa_r+0x974>
 8009e26:	4b65      	ldr	r3, [pc, #404]	; (8009fbc <_dtoa_r+0x62c>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	f7f6 fbeb 	bl	8000608 <__aeabi_dmul>
 8009e32:	4652      	mov	r2, sl
 8009e34:	465b      	mov	r3, fp
 8009e36:	f7f6 fe6d 	bl	8000b14 <__aeabi_dcmpge>
 8009e3a:	9e03      	ldr	r6, [sp, #12]
 8009e3c:	4637      	mov	r7, r6
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f040 8245 	bne.w	800a2ce <_dtoa_r+0x93e>
 8009e44:	9d01      	ldr	r5, [sp, #4]
 8009e46:	2331      	movs	r3, #49	; 0x31
 8009e48:	f805 3b01 	strb.w	r3, [r5], #1
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	e240      	b.n	800a2d6 <_dtoa_r+0x946>
 8009e54:	07f2      	lsls	r2, r6, #31
 8009e56:	d505      	bpl.n	8009e64 <_dtoa_r+0x4d4>
 8009e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e5c:	f7f6 fbd4 	bl	8000608 <__aeabi_dmul>
 8009e60:	3501      	adds	r5, #1
 8009e62:	2301      	movs	r3, #1
 8009e64:	1076      	asrs	r6, r6, #1
 8009e66:	3708      	adds	r7, #8
 8009e68:	e777      	b.n	8009d5a <_dtoa_r+0x3ca>
 8009e6a:	2502      	movs	r5, #2
 8009e6c:	e779      	b.n	8009d62 <_dtoa_r+0x3d2>
 8009e6e:	9f00      	ldr	r7, [sp, #0]
 8009e70:	9e03      	ldr	r6, [sp, #12]
 8009e72:	e794      	b.n	8009d9e <_dtoa_r+0x40e>
 8009e74:	9901      	ldr	r1, [sp, #4]
 8009e76:	4b4c      	ldr	r3, [pc, #304]	; (8009fa8 <_dtoa_r+0x618>)
 8009e78:	4431      	add	r1, r6
 8009e7a:	910d      	str	r1, [sp, #52]	; 0x34
 8009e7c:	9908      	ldr	r1, [sp, #32]
 8009e7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e86:	2900      	cmp	r1, #0
 8009e88:	d043      	beq.n	8009f12 <_dtoa_r+0x582>
 8009e8a:	494d      	ldr	r1, [pc, #308]	; (8009fc0 <_dtoa_r+0x630>)
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f7f6 fce5 	bl	800085c <__aeabi_ddiv>
 8009e92:	4652      	mov	r2, sl
 8009e94:	465b      	mov	r3, fp
 8009e96:	f7f6 f9ff 	bl	8000298 <__aeabi_dsub>
 8009e9a:	9d01      	ldr	r5, [sp, #4]
 8009e9c:	4682      	mov	sl, r0
 8009e9e:	468b      	mov	fp, r1
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7f6 fe60 	bl	8000b68 <__aeabi_d2iz>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	f7f6 fb43 	bl	8000534 <__aeabi_i2d>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	f7f6 f9ef 	bl	8000298 <__aeabi_dsub>
 8009eba:	3630      	adds	r6, #48	; 0x30
 8009ebc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	465b      	mov	r3, fp
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	f7f6 fe10 	bl	8000aec <__aeabi_dcmplt>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d163      	bne.n	8009f98 <_dtoa_r+0x608>
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	4936      	ldr	r1, [pc, #216]	; (8009fb0 <_dtoa_r+0x620>)
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f7f6 f9de 	bl	8000298 <__aeabi_dsub>
 8009edc:	4652      	mov	r2, sl
 8009ede:	465b      	mov	r3, fp
 8009ee0:	f7f6 fe04 	bl	8000aec <__aeabi_dcmplt>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	f040 80b5 	bne.w	800a054 <_dtoa_r+0x6c4>
 8009eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eec:	429d      	cmp	r5, r3
 8009eee:	d081      	beq.n	8009df4 <_dtoa_r+0x464>
 8009ef0:	4b30      	ldr	r3, [pc, #192]	; (8009fb4 <_dtoa_r+0x624>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4650      	mov	r0, sl
 8009ef6:	4659      	mov	r1, fp
 8009ef8:	f7f6 fb86 	bl	8000608 <__aeabi_dmul>
 8009efc:	4b2d      	ldr	r3, [pc, #180]	; (8009fb4 <_dtoa_r+0x624>)
 8009efe:	4682      	mov	sl, r0
 8009f00:	468b      	mov	fp, r1
 8009f02:	4640      	mov	r0, r8
 8009f04:	4649      	mov	r1, r9
 8009f06:	2200      	movs	r2, #0
 8009f08:	f7f6 fb7e 	bl	8000608 <__aeabi_dmul>
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	4689      	mov	r9, r1
 8009f10:	e7c6      	b.n	8009ea0 <_dtoa_r+0x510>
 8009f12:	4650      	mov	r0, sl
 8009f14:	4659      	mov	r1, fp
 8009f16:	f7f6 fb77 	bl	8000608 <__aeabi_dmul>
 8009f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1c:	9d01      	ldr	r5, [sp, #4]
 8009f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f20:	4682      	mov	sl, r0
 8009f22:	468b      	mov	fp, r1
 8009f24:	4649      	mov	r1, r9
 8009f26:	4640      	mov	r0, r8
 8009f28:	f7f6 fe1e 	bl	8000b68 <__aeabi_d2iz>
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	f7f6 fb01 	bl	8000534 <__aeabi_i2d>
 8009f32:	3630      	adds	r6, #48	; 0x30
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4640      	mov	r0, r8
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	f7f6 f9ac 	bl	8000298 <__aeabi_dsub>
 8009f40:	f805 6b01 	strb.w	r6, [r5], #1
 8009f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f46:	429d      	cmp	r5, r3
 8009f48:	4680      	mov	r8, r0
 8009f4a:	4689      	mov	r9, r1
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	d124      	bne.n	8009f9c <_dtoa_r+0x60c>
 8009f52:	4b1b      	ldr	r3, [pc, #108]	; (8009fc0 <_dtoa_r+0x630>)
 8009f54:	4650      	mov	r0, sl
 8009f56:	4659      	mov	r1, fp
 8009f58:	f7f6 f9a0 	bl	800029c <__adddf3>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4640      	mov	r0, r8
 8009f62:	4649      	mov	r1, r9
 8009f64:	f7f6 fde0 	bl	8000b28 <__aeabi_dcmpgt>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d173      	bne.n	800a054 <_dtoa_r+0x6c4>
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	465b      	mov	r3, fp
 8009f70:	4913      	ldr	r1, [pc, #76]	; (8009fc0 <_dtoa_r+0x630>)
 8009f72:	2000      	movs	r0, #0
 8009f74:	f7f6 f990 	bl	8000298 <__aeabi_dsub>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	4649      	mov	r1, r9
 8009f80:	f7f6 fdb4 	bl	8000aec <__aeabi_dcmplt>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	f43f af35 	beq.w	8009df4 <_dtoa_r+0x464>
 8009f8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f8c:	1e6b      	subs	r3, r5, #1
 8009f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f94:	2b30      	cmp	r3, #48	; 0x30
 8009f96:	d0f8      	beq.n	8009f8a <_dtoa_r+0x5fa>
 8009f98:	9700      	str	r7, [sp, #0]
 8009f9a:	e049      	b.n	800a030 <_dtoa_r+0x6a0>
 8009f9c:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <_dtoa_r+0x624>)
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	4689      	mov	r9, r1
 8009fa6:	e7bd      	b.n	8009f24 <_dtoa_r+0x594>
 8009fa8:	0800c918 	.word	0x0800c918
 8009fac:	0800c8f0 	.word	0x0800c8f0
 8009fb0:	3ff00000 	.word	0x3ff00000
 8009fb4:	40240000 	.word	0x40240000
 8009fb8:	401c0000 	.word	0x401c0000
 8009fbc:	40140000 	.word	0x40140000
 8009fc0:	3fe00000 	.word	0x3fe00000
 8009fc4:	9d01      	ldr	r5, [sp, #4]
 8009fc6:	4656      	mov	r6, sl
 8009fc8:	465f      	mov	r7, fp
 8009fca:	4642      	mov	r2, r8
 8009fcc:	464b      	mov	r3, r9
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 fc43 	bl	800085c <__aeabi_ddiv>
 8009fd6:	f7f6 fdc7 	bl	8000b68 <__aeabi_d2iz>
 8009fda:	4682      	mov	sl, r0
 8009fdc:	f7f6 faaa 	bl	8000534 <__aeabi_i2d>
 8009fe0:	4642      	mov	r2, r8
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	f7f6 fb10 	bl	8000608 <__aeabi_dmul>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ff4:	f7f6 f950 	bl	8000298 <__aeabi_dsub>
 8009ff8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ffc:	9e01      	ldr	r6, [sp, #4]
 8009ffe:	9f03      	ldr	r7, [sp, #12]
 800a000:	1bae      	subs	r6, r5, r6
 800a002:	42b7      	cmp	r7, r6
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	d135      	bne.n	800a076 <_dtoa_r+0x6e6>
 800a00a:	f7f6 f947 	bl	800029c <__adddf3>
 800a00e:	4642      	mov	r2, r8
 800a010:	464b      	mov	r3, r9
 800a012:	4606      	mov	r6, r0
 800a014:	460f      	mov	r7, r1
 800a016:	f7f6 fd87 	bl	8000b28 <__aeabi_dcmpgt>
 800a01a:	b9d0      	cbnz	r0, 800a052 <_dtoa_r+0x6c2>
 800a01c:	4642      	mov	r2, r8
 800a01e:	464b      	mov	r3, r9
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 800a028:	b110      	cbz	r0, 800a030 <_dtoa_r+0x6a0>
 800a02a:	f01a 0f01 	tst.w	sl, #1
 800a02e:	d110      	bne.n	800a052 <_dtoa_r+0x6c2>
 800a030:	4620      	mov	r0, r4
 800a032:	ee18 1a10 	vmov	r1, s16
 800a036:	f000 fbdf 	bl	800a7f8 <_Bfree>
 800a03a:	2300      	movs	r3, #0
 800a03c:	9800      	ldr	r0, [sp, #0]
 800a03e:	702b      	strb	r3, [r5, #0]
 800a040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a042:	3001      	adds	r0, #1
 800a044:	6018      	str	r0, [r3, #0]
 800a046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f43f acf1 	beq.w	8009a30 <_dtoa_r+0xa0>
 800a04e:	601d      	str	r5, [r3, #0]
 800a050:	e4ee      	b.n	8009a30 <_dtoa_r+0xa0>
 800a052:	9f00      	ldr	r7, [sp, #0]
 800a054:	462b      	mov	r3, r5
 800a056:	461d      	mov	r5, r3
 800a058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05c:	2a39      	cmp	r2, #57	; 0x39
 800a05e:	d106      	bne.n	800a06e <_dtoa_r+0x6de>
 800a060:	9a01      	ldr	r2, [sp, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d1f7      	bne.n	800a056 <_dtoa_r+0x6c6>
 800a066:	9901      	ldr	r1, [sp, #4]
 800a068:	2230      	movs	r2, #48	; 0x30
 800a06a:	3701      	adds	r7, #1
 800a06c:	700a      	strb	r2, [r1, #0]
 800a06e:	781a      	ldrb	r2, [r3, #0]
 800a070:	3201      	adds	r2, #1
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	e790      	b.n	8009f98 <_dtoa_r+0x608>
 800a076:	4ba6      	ldr	r3, [pc, #664]	; (800a310 <_dtoa_r+0x980>)
 800a078:	2200      	movs	r2, #0
 800a07a:	f7f6 fac5 	bl	8000608 <__aeabi_dmul>
 800a07e:	2200      	movs	r2, #0
 800a080:	2300      	movs	r3, #0
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	f7f6 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d09d      	beq.n	8009fca <_dtoa_r+0x63a>
 800a08e:	e7cf      	b.n	800a030 <_dtoa_r+0x6a0>
 800a090:	9a08      	ldr	r2, [sp, #32]
 800a092:	2a00      	cmp	r2, #0
 800a094:	f000 80d7 	beq.w	800a246 <_dtoa_r+0x8b6>
 800a098:	9a06      	ldr	r2, [sp, #24]
 800a09a:	2a01      	cmp	r2, #1
 800a09c:	f300 80ba 	bgt.w	800a214 <_dtoa_r+0x884>
 800a0a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	f000 80b2 	beq.w	800a20c <_dtoa_r+0x87c>
 800a0a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0ac:	9e07      	ldr	r6, [sp, #28]
 800a0ae:	9d04      	ldr	r5, [sp, #16]
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	441a      	add	r2, r3
 800a0b4:	9204      	str	r2, [sp, #16]
 800a0b6:	9a05      	ldr	r2, [sp, #20]
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	441a      	add	r2, r3
 800a0bc:	4620      	mov	r0, r4
 800a0be:	9205      	str	r2, [sp, #20]
 800a0c0:	f000 fc52 	bl	800a968 <__i2b>
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	dd0c      	ble.n	800a0e4 <_dtoa_r+0x754>
 800a0ca:	9b05      	ldr	r3, [sp, #20]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dd09      	ble.n	800a0e4 <_dtoa_r+0x754>
 800a0d0:	42ab      	cmp	r3, r5
 800a0d2:	9a04      	ldr	r2, [sp, #16]
 800a0d4:	bfa8      	it	ge
 800a0d6:	462b      	movge	r3, r5
 800a0d8:	1ad2      	subs	r2, r2, r3
 800a0da:	9204      	str	r2, [sp, #16]
 800a0dc:	9a05      	ldr	r2, [sp, #20]
 800a0de:	1aed      	subs	r5, r5, r3
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	b31b      	cbz	r3, 800a130 <_dtoa_r+0x7a0>
 800a0e8:	9b08      	ldr	r3, [sp, #32]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 80af 	beq.w	800a24e <_dtoa_r+0x8be>
 800a0f0:	2e00      	cmp	r6, #0
 800a0f2:	dd13      	ble.n	800a11c <_dtoa_r+0x78c>
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	4632      	mov	r2, r6
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fcf5 	bl	800aae8 <__pow5mult>
 800a0fe:	ee18 2a10 	vmov	r2, s16
 800a102:	4601      	mov	r1, r0
 800a104:	4607      	mov	r7, r0
 800a106:	4620      	mov	r0, r4
 800a108:	f000 fc44 	bl	800a994 <__multiply>
 800a10c:	ee18 1a10 	vmov	r1, s16
 800a110:	4680      	mov	r8, r0
 800a112:	4620      	mov	r0, r4
 800a114:	f000 fb70 	bl	800a7f8 <_Bfree>
 800a118:	ee08 8a10 	vmov	s16, r8
 800a11c:	9b07      	ldr	r3, [sp, #28]
 800a11e:	1b9a      	subs	r2, r3, r6
 800a120:	d006      	beq.n	800a130 <_dtoa_r+0x7a0>
 800a122:	ee18 1a10 	vmov	r1, s16
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fcde 	bl	800aae8 <__pow5mult>
 800a12c:	ee08 0a10 	vmov	s16, r0
 800a130:	2101      	movs	r1, #1
 800a132:	4620      	mov	r0, r4
 800a134:	f000 fc18 	bl	800a968 <__i2b>
 800a138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	4606      	mov	r6, r0
 800a13e:	f340 8088 	ble.w	800a252 <_dtoa_r+0x8c2>
 800a142:	461a      	mov	r2, r3
 800a144:	4601      	mov	r1, r0
 800a146:	4620      	mov	r0, r4
 800a148:	f000 fcce 	bl	800aae8 <__pow5mult>
 800a14c:	9b06      	ldr	r3, [sp, #24]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	4606      	mov	r6, r0
 800a152:	f340 8081 	ble.w	800a258 <_dtoa_r+0x8c8>
 800a156:	f04f 0800 	mov.w	r8, #0
 800a15a:	6933      	ldr	r3, [r6, #16]
 800a15c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a160:	6918      	ldr	r0, [r3, #16]
 800a162:	f000 fbb1 	bl	800a8c8 <__hi0bits>
 800a166:	f1c0 0020 	rsb	r0, r0, #32
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	4418      	add	r0, r3
 800a16e:	f010 001f 	ands.w	r0, r0, #31
 800a172:	f000 8092 	beq.w	800a29a <_dtoa_r+0x90a>
 800a176:	f1c0 0320 	rsb	r3, r0, #32
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	f340 808a 	ble.w	800a294 <_dtoa_r+0x904>
 800a180:	f1c0 001c 	rsb	r0, r0, #28
 800a184:	9b04      	ldr	r3, [sp, #16]
 800a186:	4403      	add	r3, r0
 800a188:	9304      	str	r3, [sp, #16]
 800a18a:	9b05      	ldr	r3, [sp, #20]
 800a18c:	4403      	add	r3, r0
 800a18e:	4405      	add	r5, r0
 800a190:	9305      	str	r3, [sp, #20]
 800a192:	9b04      	ldr	r3, [sp, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	dd07      	ble.n	800a1a8 <_dtoa_r+0x818>
 800a198:	ee18 1a10 	vmov	r1, s16
 800a19c:	461a      	mov	r2, r3
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fcfc 	bl	800ab9c <__lshift>
 800a1a4:	ee08 0a10 	vmov	s16, r0
 800a1a8:	9b05      	ldr	r3, [sp, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dd05      	ble.n	800a1ba <_dtoa_r+0x82a>
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fcf2 	bl	800ab9c <__lshift>
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d06e      	beq.n	800a29e <_dtoa_r+0x90e>
 800a1c0:	ee18 0a10 	vmov	r0, s16
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	f000 fd59 	bl	800ac7c <__mcmp>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	da67      	bge.n	800a29e <_dtoa_r+0x90e>
 800a1ce:	9b00      	ldr	r3, [sp, #0]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	ee18 1a10 	vmov	r1, s16
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	220a      	movs	r2, #10
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 fb2d 	bl	800a83c <__multadd>
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	ee08 0a10 	vmov	s16, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 81b1 	beq.w	800a550 <_dtoa_r+0xbc0>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	220a      	movs	r2, #10
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 fb21 	bl	800a83c <__multadd>
 800a1fa:	9b02      	ldr	r3, [sp, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	4607      	mov	r7, r0
 800a200:	f300 808e 	bgt.w	800a320 <_dtoa_r+0x990>
 800a204:	9b06      	ldr	r3, [sp, #24]
 800a206:	2b02      	cmp	r3, #2
 800a208:	dc51      	bgt.n	800a2ae <_dtoa_r+0x91e>
 800a20a:	e089      	b.n	800a320 <_dtoa_r+0x990>
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a212:	e74b      	b.n	800a0ac <_dtoa_r+0x71c>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	1e5e      	subs	r6, r3, #1
 800a218:	9b07      	ldr	r3, [sp, #28]
 800a21a:	42b3      	cmp	r3, r6
 800a21c:	bfbf      	itttt	lt
 800a21e:	9b07      	ldrlt	r3, [sp, #28]
 800a220:	9607      	strlt	r6, [sp, #28]
 800a222:	1af2      	sublt	r2, r6, r3
 800a224:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a226:	bfb6      	itet	lt
 800a228:	189b      	addlt	r3, r3, r2
 800a22a:	1b9e      	subge	r6, r3, r6
 800a22c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	bfb8      	it	lt
 800a232:	2600      	movlt	r6, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfb7      	itett	lt
 800a238:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a23c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a240:	1a9d      	sublt	r5, r3, r2
 800a242:	2300      	movlt	r3, #0
 800a244:	e734      	b.n	800a0b0 <_dtoa_r+0x720>
 800a246:	9e07      	ldr	r6, [sp, #28]
 800a248:	9d04      	ldr	r5, [sp, #16]
 800a24a:	9f08      	ldr	r7, [sp, #32]
 800a24c:	e73b      	b.n	800a0c6 <_dtoa_r+0x736>
 800a24e:	9a07      	ldr	r2, [sp, #28]
 800a250:	e767      	b.n	800a122 <_dtoa_r+0x792>
 800a252:	9b06      	ldr	r3, [sp, #24]
 800a254:	2b01      	cmp	r3, #1
 800a256:	dc18      	bgt.n	800a28a <_dtoa_r+0x8fa>
 800a258:	f1ba 0f00 	cmp.w	sl, #0
 800a25c:	d115      	bne.n	800a28a <_dtoa_r+0x8fa>
 800a25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a262:	b993      	cbnz	r3, 800a28a <_dtoa_r+0x8fa>
 800a264:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a268:	0d1b      	lsrs	r3, r3, #20
 800a26a:	051b      	lsls	r3, r3, #20
 800a26c:	b183      	cbz	r3, 800a290 <_dtoa_r+0x900>
 800a26e:	9b04      	ldr	r3, [sp, #16]
 800a270:	3301      	adds	r3, #1
 800a272:	9304      	str	r3, [sp, #16]
 800a274:	9b05      	ldr	r3, [sp, #20]
 800a276:	3301      	adds	r3, #1
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	f04f 0801 	mov.w	r8, #1
 800a27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a280:	2b00      	cmp	r3, #0
 800a282:	f47f af6a 	bne.w	800a15a <_dtoa_r+0x7ca>
 800a286:	2001      	movs	r0, #1
 800a288:	e76f      	b.n	800a16a <_dtoa_r+0x7da>
 800a28a:	f04f 0800 	mov.w	r8, #0
 800a28e:	e7f6      	b.n	800a27e <_dtoa_r+0x8ee>
 800a290:	4698      	mov	r8, r3
 800a292:	e7f4      	b.n	800a27e <_dtoa_r+0x8ee>
 800a294:	f43f af7d 	beq.w	800a192 <_dtoa_r+0x802>
 800a298:	4618      	mov	r0, r3
 800a29a:	301c      	adds	r0, #28
 800a29c:	e772      	b.n	800a184 <_dtoa_r+0x7f4>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dc37      	bgt.n	800a314 <_dtoa_r+0x984>
 800a2a4:	9b06      	ldr	r3, [sp, #24]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	dd34      	ble.n	800a314 <_dtoa_r+0x984>
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	9b02      	ldr	r3, [sp, #8]
 800a2b0:	b96b      	cbnz	r3, 800a2ce <_dtoa_r+0x93e>
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	2205      	movs	r2, #5
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 fac0 	bl	800a83c <__multadd>
 800a2bc:	4601      	mov	r1, r0
 800a2be:	4606      	mov	r6, r0
 800a2c0:	ee18 0a10 	vmov	r0, s16
 800a2c4:	f000 fcda 	bl	800ac7c <__mcmp>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	f73f adbb 	bgt.w	8009e44 <_dtoa_r+0x4b4>
 800a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d0:	9d01      	ldr	r5, [sp, #4]
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	f04f 0800 	mov.w	r8, #0
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f000 fa8b 	bl	800a7f8 <_Bfree>
 800a2e2:	2f00      	cmp	r7, #0
 800a2e4:	f43f aea4 	beq.w	800a030 <_dtoa_r+0x6a0>
 800a2e8:	f1b8 0f00 	cmp.w	r8, #0
 800a2ec:	d005      	beq.n	800a2fa <_dtoa_r+0x96a>
 800a2ee:	45b8      	cmp	r8, r7
 800a2f0:	d003      	beq.n	800a2fa <_dtoa_r+0x96a>
 800a2f2:	4641      	mov	r1, r8
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fa7f 	bl	800a7f8 <_Bfree>
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 fa7b 	bl	800a7f8 <_Bfree>
 800a302:	e695      	b.n	800a030 <_dtoa_r+0x6a0>
 800a304:	2600      	movs	r6, #0
 800a306:	4637      	mov	r7, r6
 800a308:	e7e1      	b.n	800a2ce <_dtoa_r+0x93e>
 800a30a:	9700      	str	r7, [sp, #0]
 800a30c:	4637      	mov	r7, r6
 800a30e:	e599      	b.n	8009e44 <_dtoa_r+0x4b4>
 800a310:	40240000 	.word	0x40240000
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 80ca 	beq.w	800a4b0 <_dtoa_r+0xb20>
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	2d00      	cmp	r5, #0
 800a322:	dd05      	ble.n	800a330 <_dtoa_r+0x9a0>
 800a324:	4639      	mov	r1, r7
 800a326:	462a      	mov	r2, r5
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fc37 	bl	800ab9c <__lshift>
 800a32e:	4607      	mov	r7, r0
 800a330:	f1b8 0f00 	cmp.w	r8, #0
 800a334:	d05b      	beq.n	800a3ee <_dtoa_r+0xa5e>
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fa1d 	bl	800a778 <_Balloc>
 800a33e:	4605      	mov	r5, r0
 800a340:	b928      	cbnz	r0, 800a34e <_dtoa_r+0x9be>
 800a342:	4b87      	ldr	r3, [pc, #540]	; (800a560 <_dtoa_r+0xbd0>)
 800a344:	4602      	mov	r2, r0
 800a346:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a34a:	f7ff bb3b 	b.w	80099c4 <_dtoa_r+0x34>
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	3202      	adds	r2, #2
 800a352:	0092      	lsls	r2, r2, #2
 800a354:	f107 010c 	add.w	r1, r7, #12
 800a358:	300c      	adds	r0, #12
 800a35a:	f7fe fdf3 	bl	8008f44 <memcpy>
 800a35e:	2201      	movs	r2, #1
 800a360:	4629      	mov	r1, r5
 800a362:	4620      	mov	r0, r4
 800a364:	f000 fc1a 	bl	800ab9c <__lshift>
 800a368:	9b01      	ldr	r3, [sp, #4]
 800a36a:	f103 0901 	add.w	r9, r3, #1
 800a36e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a372:	4413      	add	r3, r2
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	f00a 0301 	and.w	r3, sl, #1
 800a37a:	46b8      	mov	r8, r7
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	4607      	mov	r7, r0
 800a380:	4631      	mov	r1, r6
 800a382:	ee18 0a10 	vmov	r0, s16
 800a386:	f7ff fa75 	bl	8009874 <quorem>
 800a38a:	4641      	mov	r1, r8
 800a38c:	9002      	str	r0, [sp, #8]
 800a38e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a392:	ee18 0a10 	vmov	r0, s16
 800a396:	f000 fc71 	bl	800ac7c <__mcmp>
 800a39a:	463a      	mov	r2, r7
 800a39c:	9003      	str	r0, [sp, #12]
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fc87 	bl	800acb4 <__mdiff>
 800a3a6:	68c2      	ldr	r2, [r0, #12]
 800a3a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	bb02      	cbnz	r2, 800a3f2 <_dtoa_r+0xa62>
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	ee18 0a10 	vmov	r0, s16
 800a3b6:	f000 fc61 	bl	800ac7c <__mcmp>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4620      	mov	r0, r4
 800a3c0:	9207      	str	r2, [sp, #28]
 800a3c2:	f000 fa19 	bl	800a7f8 <_Bfree>
 800a3c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a3ca:	ea43 0102 	orr.w	r1, r3, r2
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	464d      	mov	r5, r9
 800a3d4:	d10f      	bne.n	800a3f6 <_dtoa_r+0xa66>
 800a3d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3da:	d02a      	beq.n	800a432 <_dtoa_r+0xaa2>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dd02      	ble.n	800a3e8 <_dtoa_r+0xa58>
 800a3e2:	9b02      	ldr	r3, [sp, #8]
 800a3e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3e8:	f88b a000 	strb.w	sl, [fp]
 800a3ec:	e775      	b.n	800a2da <_dtoa_r+0x94a>
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	e7ba      	b.n	800a368 <_dtoa_r+0x9d8>
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	e7e2      	b.n	800a3bc <_dtoa_r+0xa2c>
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db04      	blt.n	800a406 <_dtoa_r+0xa76>
 800a3fc:	9906      	ldr	r1, [sp, #24]
 800a3fe:	430b      	orrs	r3, r1
 800a400:	9904      	ldr	r1, [sp, #16]
 800a402:	430b      	orrs	r3, r1
 800a404:	d122      	bne.n	800a44c <_dtoa_r+0xabc>
 800a406:	2a00      	cmp	r2, #0
 800a408:	ddee      	ble.n	800a3e8 <_dtoa_r+0xa58>
 800a40a:	ee18 1a10 	vmov	r1, s16
 800a40e:	2201      	movs	r2, #1
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fbc3 	bl	800ab9c <__lshift>
 800a416:	4631      	mov	r1, r6
 800a418:	ee08 0a10 	vmov	s16, r0
 800a41c:	f000 fc2e 	bl	800ac7c <__mcmp>
 800a420:	2800      	cmp	r0, #0
 800a422:	dc03      	bgt.n	800a42c <_dtoa_r+0xa9c>
 800a424:	d1e0      	bne.n	800a3e8 <_dtoa_r+0xa58>
 800a426:	f01a 0f01 	tst.w	sl, #1
 800a42a:	d0dd      	beq.n	800a3e8 <_dtoa_r+0xa58>
 800a42c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a430:	d1d7      	bne.n	800a3e2 <_dtoa_r+0xa52>
 800a432:	2339      	movs	r3, #57	; 0x39
 800a434:	f88b 3000 	strb.w	r3, [fp]
 800a438:	462b      	mov	r3, r5
 800a43a:	461d      	mov	r5, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a442:	2a39      	cmp	r2, #57	; 0x39
 800a444:	d071      	beq.n	800a52a <_dtoa_r+0xb9a>
 800a446:	3201      	adds	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e746      	b.n	800a2da <_dtoa_r+0x94a>
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	dd07      	ble.n	800a460 <_dtoa_r+0xad0>
 800a450:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a454:	d0ed      	beq.n	800a432 <_dtoa_r+0xaa2>
 800a456:	f10a 0301 	add.w	r3, sl, #1
 800a45a:	f88b 3000 	strb.w	r3, [fp]
 800a45e:	e73c      	b.n	800a2da <_dtoa_r+0x94a>
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a466:	4599      	cmp	r9, r3
 800a468:	d047      	beq.n	800a4fa <_dtoa_r+0xb6a>
 800a46a:	ee18 1a10 	vmov	r1, s16
 800a46e:	2300      	movs	r3, #0
 800a470:	220a      	movs	r2, #10
 800a472:	4620      	mov	r0, r4
 800a474:	f000 f9e2 	bl	800a83c <__multadd>
 800a478:	45b8      	cmp	r8, r7
 800a47a:	ee08 0a10 	vmov	s16, r0
 800a47e:	f04f 0300 	mov.w	r3, #0
 800a482:	f04f 020a 	mov.w	r2, #10
 800a486:	4641      	mov	r1, r8
 800a488:	4620      	mov	r0, r4
 800a48a:	d106      	bne.n	800a49a <_dtoa_r+0xb0a>
 800a48c:	f000 f9d6 	bl	800a83c <__multadd>
 800a490:	4680      	mov	r8, r0
 800a492:	4607      	mov	r7, r0
 800a494:	f109 0901 	add.w	r9, r9, #1
 800a498:	e772      	b.n	800a380 <_dtoa_r+0x9f0>
 800a49a:	f000 f9cf 	bl	800a83c <__multadd>
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	220a      	movs	r2, #10
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 f9c8 	bl	800a83c <__multadd>
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	e7f1      	b.n	800a494 <_dtoa_r+0xb04>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	9302      	str	r3, [sp, #8]
 800a4b4:	9d01      	ldr	r5, [sp, #4]
 800a4b6:	ee18 0a10 	vmov	r0, s16
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	f7ff f9da 	bl	8009874 <quorem>
 800a4c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	f805 ab01 	strb.w	sl, [r5], #1
 800a4ca:	1aea      	subs	r2, r5, r3
 800a4cc:	9b02      	ldr	r3, [sp, #8]
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	dd09      	ble.n	800a4e6 <_dtoa_r+0xb56>
 800a4d2:	ee18 1a10 	vmov	r1, s16
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	220a      	movs	r2, #10
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f9ae 	bl	800a83c <__multadd>
 800a4e0:	ee08 0a10 	vmov	s16, r0
 800a4e4:	e7e7      	b.n	800a4b6 <_dtoa_r+0xb26>
 800a4e6:	9b02      	ldr	r3, [sp, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bfc8      	it	gt
 800a4ec:	461d      	movgt	r5, r3
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	bfd8      	it	le
 800a4f2:	2501      	movle	r5, #1
 800a4f4:	441d      	add	r5, r3
 800a4f6:	f04f 0800 	mov.w	r8, #0
 800a4fa:	ee18 1a10 	vmov	r1, s16
 800a4fe:	2201      	movs	r2, #1
 800a500:	4620      	mov	r0, r4
 800a502:	f000 fb4b 	bl	800ab9c <__lshift>
 800a506:	4631      	mov	r1, r6
 800a508:	ee08 0a10 	vmov	s16, r0
 800a50c:	f000 fbb6 	bl	800ac7c <__mcmp>
 800a510:	2800      	cmp	r0, #0
 800a512:	dc91      	bgt.n	800a438 <_dtoa_r+0xaa8>
 800a514:	d102      	bne.n	800a51c <_dtoa_r+0xb8c>
 800a516:	f01a 0f01 	tst.w	sl, #1
 800a51a:	d18d      	bne.n	800a438 <_dtoa_r+0xaa8>
 800a51c:	462b      	mov	r3, r5
 800a51e:	461d      	mov	r5, r3
 800a520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a524:	2a30      	cmp	r2, #48	; 0x30
 800a526:	d0fa      	beq.n	800a51e <_dtoa_r+0xb8e>
 800a528:	e6d7      	b.n	800a2da <_dtoa_r+0x94a>
 800a52a:	9a01      	ldr	r2, [sp, #4]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d184      	bne.n	800a43a <_dtoa_r+0xaaa>
 800a530:	9b00      	ldr	r3, [sp, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	2331      	movs	r3, #49	; 0x31
 800a538:	7013      	strb	r3, [r2, #0]
 800a53a:	e6ce      	b.n	800a2da <_dtoa_r+0x94a>
 800a53c:	4b09      	ldr	r3, [pc, #36]	; (800a564 <_dtoa_r+0xbd4>)
 800a53e:	f7ff ba95 	b.w	8009a6c <_dtoa_r+0xdc>
 800a542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a544:	2b00      	cmp	r3, #0
 800a546:	f47f aa6e 	bne.w	8009a26 <_dtoa_r+0x96>
 800a54a:	4b07      	ldr	r3, [pc, #28]	; (800a568 <_dtoa_r+0xbd8>)
 800a54c:	f7ff ba8e 	b.w	8009a6c <_dtoa_r+0xdc>
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dcae      	bgt.n	800a4b4 <_dtoa_r+0xb24>
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	f73f aea8 	bgt.w	800a2ae <_dtoa_r+0x91e>
 800a55e:	e7a9      	b.n	800a4b4 <_dtoa_r+0xb24>
 800a560:	0800c81f 	.word	0x0800c81f
 800a564:	0800c77c 	.word	0x0800c77c
 800a568:	0800c7a0 	.word	0x0800c7a0

0800a56c <std>:
 800a56c:	2300      	movs	r3, #0
 800a56e:	b510      	push	{r4, lr}
 800a570:	4604      	mov	r4, r0
 800a572:	e9c0 3300 	strd	r3, r3, [r0]
 800a576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a57a:	6083      	str	r3, [r0, #8]
 800a57c:	8181      	strh	r1, [r0, #12]
 800a57e:	6643      	str	r3, [r0, #100]	; 0x64
 800a580:	81c2      	strh	r2, [r0, #14]
 800a582:	6183      	str	r3, [r0, #24]
 800a584:	4619      	mov	r1, r3
 800a586:	2208      	movs	r2, #8
 800a588:	305c      	adds	r0, #92	; 0x5c
 800a58a:	f7fe fce9 	bl	8008f60 <memset>
 800a58e:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <std+0x38>)
 800a590:	6263      	str	r3, [r4, #36]	; 0x24
 800a592:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <std+0x3c>)
 800a594:	62a3      	str	r3, [r4, #40]	; 0x28
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <std+0x40>)
 800a598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a59a:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <std+0x44>)
 800a59c:	6224      	str	r4, [r4, #32]
 800a59e:	6323      	str	r3, [r4, #48]	; 0x30
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	bf00      	nop
 800a5a4:	0800b341 	.word	0x0800b341
 800a5a8:	0800b363 	.word	0x0800b363
 800a5ac:	0800b39b 	.word	0x0800b39b
 800a5b0:	0800b3bf 	.word	0x0800b3bf

0800a5b4 <_cleanup_r>:
 800a5b4:	4901      	ldr	r1, [pc, #4]	; (800a5bc <_cleanup_r+0x8>)
 800a5b6:	f000 b8af 	b.w	800a718 <_fwalk_reent>
 800a5ba:	bf00      	nop
 800a5bc:	0800b6d5 	.word	0x0800b6d5

0800a5c0 <__sfmoreglue>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	2268      	movs	r2, #104	; 0x68
 800a5c4:	1e4d      	subs	r5, r1, #1
 800a5c6:	4355      	muls	r5, r2
 800a5c8:	460e      	mov	r6, r1
 800a5ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5ce:	f000 fcd9 	bl	800af84 <_malloc_r>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	b140      	cbz	r0, 800a5e8 <__sfmoreglue+0x28>
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a5dc:	300c      	adds	r0, #12
 800a5de:	60a0      	str	r0, [r4, #8]
 800a5e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5e4:	f7fe fcbc 	bl	8008f60 <memset>
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}

0800a5ec <__sfp_lock_acquire>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	; (800a5f4 <__sfp_lock_acquire+0x8>)
 800a5ee:	f000 b8b8 	b.w	800a762 <__retarget_lock_acquire_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	200003d9 	.word	0x200003d9

0800a5f8 <__sfp_lock_release>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	; (800a600 <__sfp_lock_release+0x8>)
 800a5fa:	f000 b8b3 	b.w	800a764 <__retarget_lock_release_recursive>
 800a5fe:	bf00      	nop
 800a600:	200003d9 	.word	0x200003d9

0800a604 <__sinit_lock_acquire>:
 800a604:	4801      	ldr	r0, [pc, #4]	; (800a60c <__sinit_lock_acquire+0x8>)
 800a606:	f000 b8ac 	b.w	800a762 <__retarget_lock_acquire_recursive>
 800a60a:	bf00      	nop
 800a60c:	200003da 	.word	0x200003da

0800a610 <__sinit_lock_release>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__sinit_lock_release+0x8>)
 800a612:	f000 b8a7 	b.w	800a764 <__retarget_lock_release_recursive>
 800a616:	bf00      	nop
 800a618:	200003da 	.word	0x200003da

0800a61c <__sinit>:
 800a61c:	b510      	push	{r4, lr}
 800a61e:	4604      	mov	r4, r0
 800a620:	f7ff fff0 	bl	800a604 <__sinit_lock_acquire>
 800a624:	69a3      	ldr	r3, [r4, #24]
 800a626:	b11b      	cbz	r3, 800a630 <__sinit+0x14>
 800a628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a62c:	f7ff bff0 	b.w	800a610 <__sinit_lock_release>
 800a630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a634:	6523      	str	r3, [r4, #80]	; 0x50
 800a636:	4b13      	ldr	r3, [pc, #76]	; (800a684 <__sinit+0x68>)
 800a638:	4a13      	ldr	r2, [pc, #76]	; (800a688 <__sinit+0x6c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a63e:	42a3      	cmp	r3, r4
 800a640:	bf04      	itt	eq
 800a642:	2301      	moveq	r3, #1
 800a644:	61a3      	streq	r3, [r4, #24]
 800a646:	4620      	mov	r0, r4
 800a648:	f000 f820 	bl	800a68c <__sfp>
 800a64c:	6060      	str	r0, [r4, #4]
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 f81c 	bl	800a68c <__sfp>
 800a654:	60a0      	str	r0, [r4, #8]
 800a656:	4620      	mov	r0, r4
 800a658:	f000 f818 	bl	800a68c <__sfp>
 800a65c:	2200      	movs	r2, #0
 800a65e:	60e0      	str	r0, [r4, #12]
 800a660:	2104      	movs	r1, #4
 800a662:	6860      	ldr	r0, [r4, #4]
 800a664:	f7ff ff82 	bl	800a56c <std>
 800a668:	68a0      	ldr	r0, [r4, #8]
 800a66a:	2201      	movs	r2, #1
 800a66c:	2109      	movs	r1, #9
 800a66e:	f7ff ff7d 	bl	800a56c <std>
 800a672:	68e0      	ldr	r0, [r4, #12]
 800a674:	2202      	movs	r2, #2
 800a676:	2112      	movs	r1, #18
 800a678:	f7ff ff78 	bl	800a56c <std>
 800a67c:	2301      	movs	r3, #1
 800a67e:	61a3      	str	r3, [r4, #24]
 800a680:	e7d2      	b.n	800a628 <__sinit+0xc>
 800a682:	bf00      	nop
 800a684:	0800c768 	.word	0x0800c768
 800a688:	0800a5b5 	.word	0x0800a5b5

0800a68c <__sfp>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	4607      	mov	r7, r0
 800a690:	f7ff ffac 	bl	800a5ec <__sfp_lock_acquire>
 800a694:	4b1e      	ldr	r3, [pc, #120]	; (800a710 <__sfp+0x84>)
 800a696:	681e      	ldr	r6, [r3, #0]
 800a698:	69b3      	ldr	r3, [r6, #24]
 800a69a:	b913      	cbnz	r3, 800a6a2 <__sfp+0x16>
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff ffbd 	bl	800a61c <__sinit>
 800a6a2:	3648      	adds	r6, #72	; 0x48
 800a6a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	d503      	bpl.n	800a6b4 <__sfp+0x28>
 800a6ac:	6833      	ldr	r3, [r6, #0]
 800a6ae:	b30b      	cbz	r3, 800a6f4 <__sfp+0x68>
 800a6b0:	6836      	ldr	r6, [r6, #0]
 800a6b2:	e7f7      	b.n	800a6a4 <__sfp+0x18>
 800a6b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6b8:	b9d5      	cbnz	r5, 800a6f0 <__sfp+0x64>
 800a6ba:	4b16      	ldr	r3, [pc, #88]	; (800a714 <__sfp+0x88>)
 800a6bc:	60e3      	str	r3, [r4, #12]
 800a6be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6c2:	6665      	str	r5, [r4, #100]	; 0x64
 800a6c4:	f000 f84c 	bl	800a760 <__retarget_lock_init_recursive>
 800a6c8:	f7ff ff96 	bl	800a5f8 <__sfp_lock_release>
 800a6cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6d4:	6025      	str	r5, [r4, #0]
 800a6d6:	61a5      	str	r5, [r4, #24]
 800a6d8:	2208      	movs	r2, #8
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6e0:	f7fe fc3e 	bl	8008f60 <memset>
 800a6e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f0:	3468      	adds	r4, #104	; 0x68
 800a6f2:	e7d9      	b.n	800a6a8 <__sfp+0x1c>
 800a6f4:	2104      	movs	r1, #4
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f7ff ff62 	bl	800a5c0 <__sfmoreglue>
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	6030      	str	r0, [r6, #0]
 800a700:	2800      	cmp	r0, #0
 800a702:	d1d5      	bne.n	800a6b0 <__sfp+0x24>
 800a704:	f7ff ff78 	bl	800a5f8 <__sfp_lock_release>
 800a708:	230c      	movs	r3, #12
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	e7ee      	b.n	800a6ec <__sfp+0x60>
 800a70e:	bf00      	nop
 800a710:	0800c768 	.word	0x0800c768
 800a714:	ffff0001 	.word	0xffff0001

0800a718 <_fwalk_reent>:
 800a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a71c:	4606      	mov	r6, r0
 800a71e:	4688      	mov	r8, r1
 800a720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a724:	2700      	movs	r7, #0
 800a726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a72a:	f1b9 0901 	subs.w	r9, r9, #1
 800a72e:	d505      	bpl.n	800a73c <_fwalk_reent+0x24>
 800a730:	6824      	ldr	r4, [r4, #0]
 800a732:	2c00      	cmp	r4, #0
 800a734:	d1f7      	bne.n	800a726 <_fwalk_reent+0xe>
 800a736:	4638      	mov	r0, r7
 800a738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a73c:	89ab      	ldrh	r3, [r5, #12]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d907      	bls.n	800a752 <_fwalk_reent+0x3a>
 800a742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a746:	3301      	adds	r3, #1
 800a748:	d003      	beq.n	800a752 <_fwalk_reent+0x3a>
 800a74a:	4629      	mov	r1, r5
 800a74c:	4630      	mov	r0, r6
 800a74e:	47c0      	blx	r8
 800a750:	4307      	orrs	r7, r0
 800a752:	3568      	adds	r5, #104	; 0x68
 800a754:	e7e9      	b.n	800a72a <_fwalk_reent+0x12>
	...

0800a758 <_localeconv_r>:
 800a758:	4800      	ldr	r0, [pc, #0]	; (800a75c <_localeconv_r+0x4>)
 800a75a:	4770      	bx	lr
 800a75c:	2000019c 	.word	0x2000019c

0800a760 <__retarget_lock_init_recursive>:
 800a760:	4770      	bx	lr

0800a762 <__retarget_lock_acquire_recursive>:
 800a762:	4770      	bx	lr

0800a764 <__retarget_lock_release_recursive>:
 800a764:	4770      	bx	lr
	...

0800a768 <malloc>:
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <malloc+0xc>)
 800a76a:	4601      	mov	r1, r0
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	f000 bc09 	b.w	800af84 <_malloc_r>
 800a772:	bf00      	nop
 800a774:	20000048 	.word	0x20000048

0800a778 <_Balloc>:
 800a778:	b570      	push	{r4, r5, r6, lr}
 800a77a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a77c:	4604      	mov	r4, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	b976      	cbnz	r6, 800a7a0 <_Balloc+0x28>
 800a782:	2010      	movs	r0, #16
 800a784:	f7ff fff0 	bl	800a768 <malloc>
 800a788:	4602      	mov	r2, r0
 800a78a:	6260      	str	r0, [r4, #36]	; 0x24
 800a78c:	b920      	cbnz	r0, 800a798 <_Balloc+0x20>
 800a78e:	4b18      	ldr	r3, [pc, #96]	; (800a7f0 <_Balloc+0x78>)
 800a790:	4818      	ldr	r0, [pc, #96]	; (800a7f4 <_Balloc+0x7c>)
 800a792:	2166      	movs	r1, #102	; 0x66
 800a794:	f000 feea 	bl	800b56c <__assert_func>
 800a798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a79c:	6006      	str	r6, [r0, #0]
 800a79e:	60c6      	str	r6, [r0, #12]
 800a7a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7a2:	68f3      	ldr	r3, [r6, #12]
 800a7a4:	b183      	cbz	r3, 800a7c8 <_Balloc+0x50>
 800a7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7ae:	b9b8      	cbnz	r0, 800a7e0 <_Balloc+0x68>
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a7b6:	1d72      	adds	r2, r6, #5
 800a7b8:	0092      	lsls	r2, r2, #2
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fb60 	bl	800ae80 <_calloc_r>
 800a7c0:	b160      	cbz	r0, 800a7dc <_Balloc+0x64>
 800a7c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7c6:	e00e      	b.n	800a7e6 <_Balloc+0x6e>
 800a7c8:	2221      	movs	r2, #33	; 0x21
 800a7ca:	2104      	movs	r1, #4
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fb57 	bl	800ae80 <_calloc_r>
 800a7d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d4:	60f0      	str	r0, [r6, #12]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e4      	bne.n	800a7a6 <_Balloc+0x2e>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	6802      	ldr	r2, [r0, #0]
 800a7e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7ec:	e7f7      	b.n	800a7de <_Balloc+0x66>
 800a7ee:	bf00      	nop
 800a7f0:	0800c7ad 	.word	0x0800c7ad
 800a7f4:	0800c890 	.word	0x0800c890

0800a7f8 <_Bfree>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	b976      	cbnz	r6, 800a820 <_Bfree+0x28>
 800a802:	2010      	movs	r0, #16
 800a804:	f7ff ffb0 	bl	800a768 <malloc>
 800a808:	4602      	mov	r2, r0
 800a80a:	6268      	str	r0, [r5, #36]	; 0x24
 800a80c:	b920      	cbnz	r0, 800a818 <_Bfree+0x20>
 800a80e:	4b09      	ldr	r3, [pc, #36]	; (800a834 <_Bfree+0x3c>)
 800a810:	4809      	ldr	r0, [pc, #36]	; (800a838 <_Bfree+0x40>)
 800a812:	218a      	movs	r1, #138	; 0x8a
 800a814:	f000 feaa 	bl	800b56c <__assert_func>
 800a818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a81c:	6006      	str	r6, [r0, #0]
 800a81e:	60c6      	str	r6, [r0, #12]
 800a820:	b13c      	cbz	r4, 800a832 <_Bfree+0x3a>
 800a822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a824:	6862      	ldr	r2, [r4, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a82c:	6021      	str	r1, [r4, #0]
 800a82e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a832:	bd70      	pop	{r4, r5, r6, pc}
 800a834:	0800c7ad 	.word	0x0800c7ad
 800a838:	0800c890 	.word	0x0800c890

0800a83c <__multadd>:
 800a83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a840:	690d      	ldr	r5, [r1, #16]
 800a842:	4607      	mov	r7, r0
 800a844:	460c      	mov	r4, r1
 800a846:	461e      	mov	r6, r3
 800a848:	f101 0c14 	add.w	ip, r1, #20
 800a84c:	2000      	movs	r0, #0
 800a84e:	f8dc 3000 	ldr.w	r3, [ip]
 800a852:	b299      	uxth	r1, r3
 800a854:	fb02 6101 	mla	r1, r2, r1, r6
 800a858:	0c1e      	lsrs	r6, r3, #16
 800a85a:	0c0b      	lsrs	r3, r1, #16
 800a85c:	fb02 3306 	mla	r3, r2, r6, r3
 800a860:	b289      	uxth	r1, r1
 800a862:	3001      	adds	r0, #1
 800a864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a868:	4285      	cmp	r5, r0
 800a86a:	f84c 1b04 	str.w	r1, [ip], #4
 800a86e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a872:	dcec      	bgt.n	800a84e <__multadd+0x12>
 800a874:	b30e      	cbz	r6, 800a8ba <__multadd+0x7e>
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	42ab      	cmp	r3, r5
 800a87a:	dc19      	bgt.n	800a8b0 <__multadd+0x74>
 800a87c:	6861      	ldr	r1, [r4, #4]
 800a87e:	4638      	mov	r0, r7
 800a880:	3101      	adds	r1, #1
 800a882:	f7ff ff79 	bl	800a778 <_Balloc>
 800a886:	4680      	mov	r8, r0
 800a888:	b928      	cbnz	r0, 800a896 <__multadd+0x5a>
 800a88a:	4602      	mov	r2, r0
 800a88c:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <__multadd+0x84>)
 800a88e:	480d      	ldr	r0, [pc, #52]	; (800a8c4 <__multadd+0x88>)
 800a890:	21b5      	movs	r1, #181	; 0xb5
 800a892:	f000 fe6b 	bl	800b56c <__assert_func>
 800a896:	6922      	ldr	r2, [r4, #16]
 800a898:	3202      	adds	r2, #2
 800a89a:	f104 010c 	add.w	r1, r4, #12
 800a89e:	0092      	lsls	r2, r2, #2
 800a8a0:	300c      	adds	r0, #12
 800a8a2:	f7fe fb4f 	bl	8008f44 <memcpy>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff ffa5 	bl	800a7f8 <_Bfree>
 800a8ae:	4644      	mov	r4, r8
 800a8b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	615e      	str	r6, [r3, #20]
 800a8b8:	6125      	str	r5, [r4, #16]
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	0800c81f 	.word	0x0800c81f
 800a8c4:	0800c890 	.word	0x0800c890

0800a8c8 <__hi0bits>:
 800a8c8:	0c03      	lsrs	r3, r0, #16
 800a8ca:	041b      	lsls	r3, r3, #16
 800a8cc:	b9d3      	cbnz	r3, 800a904 <__hi0bits+0x3c>
 800a8ce:	0400      	lsls	r0, r0, #16
 800a8d0:	2310      	movs	r3, #16
 800a8d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8d6:	bf04      	itt	eq
 800a8d8:	0200      	lsleq	r0, r0, #8
 800a8da:	3308      	addeq	r3, #8
 800a8dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8e0:	bf04      	itt	eq
 800a8e2:	0100      	lsleq	r0, r0, #4
 800a8e4:	3304      	addeq	r3, #4
 800a8e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8ea:	bf04      	itt	eq
 800a8ec:	0080      	lsleq	r0, r0, #2
 800a8ee:	3302      	addeq	r3, #2
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	db05      	blt.n	800a900 <__hi0bits+0x38>
 800a8f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8f8:	f103 0301 	add.w	r3, r3, #1
 800a8fc:	bf08      	it	eq
 800a8fe:	2320      	moveq	r3, #32
 800a900:	4618      	mov	r0, r3
 800a902:	4770      	bx	lr
 800a904:	2300      	movs	r3, #0
 800a906:	e7e4      	b.n	800a8d2 <__hi0bits+0xa>

0800a908 <__lo0bits>:
 800a908:	6803      	ldr	r3, [r0, #0]
 800a90a:	f013 0207 	ands.w	r2, r3, #7
 800a90e:	4601      	mov	r1, r0
 800a910:	d00b      	beq.n	800a92a <__lo0bits+0x22>
 800a912:	07da      	lsls	r2, r3, #31
 800a914:	d423      	bmi.n	800a95e <__lo0bits+0x56>
 800a916:	0798      	lsls	r0, r3, #30
 800a918:	bf49      	itett	mi
 800a91a:	085b      	lsrmi	r3, r3, #1
 800a91c:	089b      	lsrpl	r3, r3, #2
 800a91e:	2001      	movmi	r0, #1
 800a920:	600b      	strmi	r3, [r1, #0]
 800a922:	bf5c      	itt	pl
 800a924:	600b      	strpl	r3, [r1, #0]
 800a926:	2002      	movpl	r0, #2
 800a928:	4770      	bx	lr
 800a92a:	b298      	uxth	r0, r3
 800a92c:	b9a8      	cbnz	r0, 800a95a <__lo0bits+0x52>
 800a92e:	0c1b      	lsrs	r3, r3, #16
 800a930:	2010      	movs	r0, #16
 800a932:	b2da      	uxtb	r2, r3
 800a934:	b90a      	cbnz	r2, 800a93a <__lo0bits+0x32>
 800a936:	3008      	adds	r0, #8
 800a938:	0a1b      	lsrs	r3, r3, #8
 800a93a:	071a      	lsls	r2, r3, #28
 800a93c:	bf04      	itt	eq
 800a93e:	091b      	lsreq	r3, r3, #4
 800a940:	3004      	addeq	r0, #4
 800a942:	079a      	lsls	r2, r3, #30
 800a944:	bf04      	itt	eq
 800a946:	089b      	lsreq	r3, r3, #2
 800a948:	3002      	addeq	r0, #2
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d403      	bmi.n	800a956 <__lo0bits+0x4e>
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	f100 0001 	add.w	r0, r0, #1
 800a954:	d005      	beq.n	800a962 <__lo0bits+0x5a>
 800a956:	600b      	str	r3, [r1, #0]
 800a958:	4770      	bx	lr
 800a95a:	4610      	mov	r0, r2
 800a95c:	e7e9      	b.n	800a932 <__lo0bits+0x2a>
 800a95e:	2000      	movs	r0, #0
 800a960:	4770      	bx	lr
 800a962:	2020      	movs	r0, #32
 800a964:	4770      	bx	lr
	...

0800a968 <__i2b>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	2101      	movs	r1, #1
 800a96e:	f7ff ff03 	bl	800a778 <_Balloc>
 800a972:	4602      	mov	r2, r0
 800a974:	b928      	cbnz	r0, 800a982 <__i2b+0x1a>
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <__i2b+0x24>)
 800a978:	4805      	ldr	r0, [pc, #20]	; (800a990 <__i2b+0x28>)
 800a97a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a97e:	f000 fdf5 	bl	800b56c <__assert_func>
 800a982:	2301      	movs	r3, #1
 800a984:	6144      	str	r4, [r0, #20]
 800a986:	6103      	str	r3, [r0, #16]
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	bf00      	nop
 800a98c:	0800c81f 	.word	0x0800c81f
 800a990:	0800c890 	.word	0x0800c890

0800a994 <__multiply>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4691      	mov	r9, r2
 800a99a:	690a      	ldr	r2, [r1, #16]
 800a99c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	bfb8      	it	lt
 800a9a4:	460b      	movlt	r3, r1
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	bfbc      	itt	lt
 800a9aa:	464c      	movlt	r4, r9
 800a9ac:	4699      	movlt	r9, r3
 800a9ae:	6927      	ldr	r7, [r4, #16]
 800a9b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9b4:	68a3      	ldr	r3, [r4, #8]
 800a9b6:	6861      	ldr	r1, [r4, #4]
 800a9b8:	eb07 060a 	add.w	r6, r7, sl
 800a9bc:	42b3      	cmp	r3, r6
 800a9be:	b085      	sub	sp, #20
 800a9c0:	bfb8      	it	lt
 800a9c2:	3101      	addlt	r1, #1
 800a9c4:	f7ff fed8 	bl	800a778 <_Balloc>
 800a9c8:	b930      	cbnz	r0, 800a9d8 <__multiply+0x44>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	4b44      	ldr	r3, [pc, #272]	; (800aae0 <__multiply+0x14c>)
 800a9ce:	4845      	ldr	r0, [pc, #276]	; (800aae4 <__multiply+0x150>)
 800a9d0:	f240 115d 	movw	r1, #349	; 0x15d
 800a9d4:	f000 fdca 	bl	800b56c <__assert_func>
 800a9d8:	f100 0514 	add.w	r5, r0, #20
 800a9dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4543      	cmp	r3, r8
 800a9e6:	d321      	bcc.n	800aa2c <__multiply+0x98>
 800a9e8:	f104 0314 	add.w	r3, r4, #20
 800a9ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9f0:	f109 0314 	add.w	r3, r9, #20
 800a9f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9f8:	9202      	str	r2, [sp, #8]
 800a9fa:	1b3a      	subs	r2, r7, r4
 800a9fc:	3a15      	subs	r2, #21
 800a9fe:	f022 0203 	bic.w	r2, r2, #3
 800aa02:	3204      	adds	r2, #4
 800aa04:	f104 0115 	add.w	r1, r4, #21
 800aa08:	428f      	cmp	r7, r1
 800aa0a:	bf38      	it	cc
 800aa0c:	2204      	movcc	r2, #4
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	9a02      	ldr	r2, [sp, #8]
 800aa12:	9303      	str	r3, [sp, #12]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d80c      	bhi.n	800aa32 <__multiply+0x9e>
 800aa18:	2e00      	cmp	r6, #0
 800aa1a:	dd03      	ble.n	800aa24 <__multiply+0x90>
 800aa1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d05a      	beq.n	800aada <__multiply+0x146>
 800aa24:	6106      	str	r6, [r0, #16]
 800aa26:	b005      	add	sp, #20
 800aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	f843 2b04 	str.w	r2, [r3], #4
 800aa30:	e7d8      	b.n	800a9e4 <__multiply+0x50>
 800aa32:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa36:	f1ba 0f00 	cmp.w	sl, #0
 800aa3a:	d024      	beq.n	800aa86 <__multiply+0xf2>
 800aa3c:	f104 0e14 	add.w	lr, r4, #20
 800aa40:	46a9      	mov	r9, r5
 800aa42:	f04f 0c00 	mov.w	ip, #0
 800aa46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa4a:	f8d9 1000 	ldr.w	r1, [r9]
 800aa4e:	fa1f fb82 	uxth.w	fp, r2
 800aa52:	b289      	uxth	r1, r1
 800aa54:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa5c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa60:	4461      	add	r1, ip
 800aa62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa66:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa6e:	b289      	uxth	r1, r1
 800aa70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa74:	4577      	cmp	r7, lr
 800aa76:	f849 1b04 	str.w	r1, [r9], #4
 800aa7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa7e:	d8e2      	bhi.n	800aa46 <__multiply+0xb2>
 800aa80:	9a01      	ldr	r2, [sp, #4]
 800aa82:	f845 c002 	str.w	ip, [r5, r2]
 800aa86:	9a03      	ldr	r2, [sp, #12]
 800aa88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	f1b9 0f00 	cmp.w	r9, #0
 800aa92:	d020      	beq.n	800aad6 <__multiply+0x142>
 800aa94:	6829      	ldr	r1, [r5, #0]
 800aa96:	f104 0c14 	add.w	ip, r4, #20
 800aa9a:	46ae      	mov	lr, r5
 800aa9c:	f04f 0a00 	mov.w	sl, #0
 800aaa0:	f8bc b000 	ldrh.w	fp, [ip]
 800aaa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aaa8:	fb09 220b 	mla	r2, r9, fp, r2
 800aaac:	4492      	add	sl, r2
 800aaae:	b289      	uxth	r1, r1
 800aab0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aab4:	f84e 1b04 	str.w	r1, [lr], #4
 800aab8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aabc:	f8be 1000 	ldrh.w	r1, [lr]
 800aac0:	0c12      	lsrs	r2, r2, #16
 800aac2:	fb09 1102 	mla	r1, r9, r2, r1
 800aac6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aaca:	4567      	cmp	r7, ip
 800aacc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aad0:	d8e6      	bhi.n	800aaa0 <__multiply+0x10c>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	50a9      	str	r1, [r5, r2]
 800aad6:	3504      	adds	r5, #4
 800aad8:	e79a      	b.n	800aa10 <__multiply+0x7c>
 800aada:	3e01      	subs	r6, #1
 800aadc:	e79c      	b.n	800aa18 <__multiply+0x84>
 800aade:	bf00      	nop
 800aae0:	0800c81f 	.word	0x0800c81f
 800aae4:	0800c890 	.word	0x0800c890

0800aae8 <__pow5mult>:
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	4615      	mov	r5, r2
 800aaee:	f012 0203 	ands.w	r2, r2, #3
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460f      	mov	r7, r1
 800aaf6:	d007      	beq.n	800ab08 <__pow5mult+0x20>
 800aaf8:	4c25      	ldr	r4, [pc, #148]	; (800ab90 <__pow5mult+0xa8>)
 800aafa:	3a01      	subs	r2, #1
 800aafc:	2300      	movs	r3, #0
 800aafe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab02:	f7ff fe9b 	bl	800a83c <__multadd>
 800ab06:	4607      	mov	r7, r0
 800ab08:	10ad      	asrs	r5, r5, #2
 800ab0a:	d03d      	beq.n	800ab88 <__pow5mult+0xa0>
 800ab0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab0e:	b97c      	cbnz	r4, 800ab30 <__pow5mult+0x48>
 800ab10:	2010      	movs	r0, #16
 800ab12:	f7ff fe29 	bl	800a768 <malloc>
 800ab16:	4602      	mov	r2, r0
 800ab18:	6270      	str	r0, [r6, #36]	; 0x24
 800ab1a:	b928      	cbnz	r0, 800ab28 <__pow5mult+0x40>
 800ab1c:	4b1d      	ldr	r3, [pc, #116]	; (800ab94 <__pow5mult+0xac>)
 800ab1e:	481e      	ldr	r0, [pc, #120]	; (800ab98 <__pow5mult+0xb0>)
 800ab20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab24:	f000 fd22 	bl	800b56c <__assert_func>
 800ab28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab2c:	6004      	str	r4, [r0, #0]
 800ab2e:	60c4      	str	r4, [r0, #12]
 800ab30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab38:	b94c      	cbnz	r4, 800ab4e <__pow5mult+0x66>
 800ab3a:	f240 2171 	movw	r1, #625	; 0x271
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7ff ff12 	bl	800a968 <__i2b>
 800ab44:	2300      	movs	r3, #0
 800ab46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	6003      	str	r3, [r0, #0]
 800ab4e:	f04f 0900 	mov.w	r9, #0
 800ab52:	07eb      	lsls	r3, r5, #31
 800ab54:	d50a      	bpl.n	800ab6c <__pow5mult+0x84>
 800ab56:	4639      	mov	r1, r7
 800ab58:	4622      	mov	r2, r4
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ff1a 	bl	800a994 <__multiply>
 800ab60:	4639      	mov	r1, r7
 800ab62:	4680      	mov	r8, r0
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7ff fe47 	bl	800a7f8 <_Bfree>
 800ab6a:	4647      	mov	r7, r8
 800ab6c:	106d      	asrs	r5, r5, #1
 800ab6e:	d00b      	beq.n	800ab88 <__pow5mult+0xa0>
 800ab70:	6820      	ldr	r0, [r4, #0]
 800ab72:	b938      	cbnz	r0, 800ab84 <__pow5mult+0x9c>
 800ab74:	4622      	mov	r2, r4
 800ab76:	4621      	mov	r1, r4
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f7ff ff0b 	bl	800a994 <__multiply>
 800ab7e:	6020      	str	r0, [r4, #0]
 800ab80:	f8c0 9000 	str.w	r9, [r0]
 800ab84:	4604      	mov	r4, r0
 800ab86:	e7e4      	b.n	800ab52 <__pow5mult+0x6a>
 800ab88:	4638      	mov	r0, r7
 800ab8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8e:	bf00      	nop
 800ab90:	0800c9e0 	.word	0x0800c9e0
 800ab94:	0800c7ad 	.word	0x0800c7ad
 800ab98:	0800c890 	.word	0x0800c890

0800ab9c <__lshift>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	460c      	mov	r4, r1
 800aba2:	6849      	ldr	r1, [r1, #4]
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	4607      	mov	r7, r0
 800abae:	4691      	mov	r9, r2
 800abb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abb4:	f108 0601 	add.w	r6, r8, #1
 800abb8:	42b3      	cmp	r3, r6
 800abba:	db0b      	blt.n	800abd4 <__lshift+0x38>
 800abbc:	4638      	mov	r0, r7
 800abbe:	f7ff fddb 	bl	800a778 <_Balloc>
 800abc2:	4605      	mov	r5, r0
 800abc4:	b948      	cbnz	r0, 800abda <__lshift+0x3e>
 800abc6:	4602      	mov	r2, r0
 800abc8:	4b2a      	ldr	r3, [pc, #168]	; (800ac74 <__lshift+0xd8>)
 800abca:	482b      	ldr	r0, [pc, #172]	; (800ac78 <__lshift+0xdc>)
 800abcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abd0:	f000 fccc 	bl	800b56c <__assert_func>
 800abd4:	3101      	adds	r1, #1
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	e7ee      	b.n	800abb8 <__lshift+0x1c>
 800abda:	2300      	movs	r3, #0
 800abdc:	f100 0114 	add.w	r1, r0, #20
 800abe0:	f100 0210 	add.w	r2, r0, #16
 800abe4:	4618      	mov	r0, r3
 800abe6:	4553      	cmp	r3, sl
 800abe8:	db37      	blt.n	800ac5a <__lshift+0xbe>
 800abea:	6920      	ldr	r0, [r4, #16]
 800abec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abf0:	f104 0314 	add.w	r3, r4, #20
 800abf4:	f019 091f 	ands.w	r9, r9, #31
 800abf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac00:	d02f      	beq.n	800ac62 <__lshift+0xc6>
 800ac02:	f1c9 0e20 	rsb	lr, r9, #32
 800ac06:	468a      	mov	sl, r1
 800ac08:	f04f 0c00 	mov.w	ip, #0
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	fa02 f209 	lsl.w	r2, r2, r9
 800ac12:	ea42 020c 	orr.w	r2, r2, ip
 800ac16:	f84a 2b04 	str.w	r2, [sl], #4
 800ac1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1e:	4298      	cmp	r0, r3
 800ac20:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac24:	d8f2      	bhi.n	800ac0c <__lshift+0x70>
 800ac26:	1b03      	subs	r3, r0, r4
 800ac28:	3b15      	subs	r3, #21
 800ac2a:	f023 0303 	bic.w	r3, r3, #3
 800ac2e:	3304      	adds	r3, #4
 800ac30:	f104 0215 	add.w	r2, r4, #21
 800ac34:	4290      	cmp	r0, r2
 800ac36:	bf38      	it	cc
 800ac38:	2304      	movcc	r3, #4
 800ac3a:	f841 c003 	str.w	ip, [r1, r3]
 800ac3e:	f1bc 0f00 	cmp.w	ip, #0
 800ac42:	d001      	beq.n	800ac48 <__lshift+0xac>
 800ac44:	f108 0602 	add.w	r6, r8, #2
 800ac48:	3e01      	subs	r6, #1
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	612e      	str	r6, [r5, #16]
 800ac4e:	4621      	mov	r1, r4
 800ac50:	f7ff fdd2 	bl	800a7f8 <_Bfree>
 800ac54:	4628      	mov	r0, r5
 800ac56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac5e:	3301      	adds	r3, #1
 800ac60:	e7c1      	b.n	800abe6 <__lshift+0x4a>
 800ac62:	3904      	subs	r1, #4
 800ac64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac6c:	4298      	cmp	r0, r3
 800ac6e:	d8f9      	bhi.n	800ac64 <__lshift+0xc8>
 800ac70:	e7ea      	b.n	800ac48 <__lshift+0xac>
 800ac72:	bf00      	nop
 800ac74:	0800c81f 	.word	0x0800c81f
 800ac78:	0800c890 	.word	0x0800c890

0800ac7c <__mcmp>:
 800ac7c:	b530      	push	{r4, r5, lr}
 800ac7e:	6902      	ldr	r2, [r0, #16]
 800ac80:	690c      	ldr	r4, [r1, #16]
 800ac82:	1b12      	subs	r2, r2, r4
 800ac84:	d10e      	bne.n	800aca4 <__mcmp+0x28>
 800ac86:	f100 0314 	add.w	r3, r0, #20
 800ac8a:	3114      	adds	r1, #20
 800ac8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac9c:	42a5      	cmp	r5, r4
 800ac9e:	d003      	beq.n	800aca8 <__mcmp+0x2c>
 800aca0:	d305      	bcc.n	800acae <__mcmp+0x32>
 800aca2:	2201      	movs	r2, #1
 800aca4:	4610      	mov	r0, r2
 800aca6:	bd30      	pop	{r4, r5, pc}
 800aca8:	4283      	cmp	r3, r0
 800acaa:	d3f3      	bcc.n	800ac94 <__mcmp+0x18>
 800acac:	e7fa      	b.n	800aca4 <__mcmp+0x28>
 800acae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acb2:	e7f7      	b.n	800aca4 <__mcmp+0x28>

0800acb4 <__mdiff>:
 800acb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	460c      	mov	r4, r1
 800acba:	4606      	mov	r6, r0
 800acbc:	4611      	mov	r1, r2
 800acbe:	4620      	mov	r0, r4
 800acc0:	4690      	mov	r8, r2
 800acc2:	f7ff ffdb 	bl	800ac7c <__mcmp>
 800acc6:	1e05      	subs	r5, r0, #0
 800acc8:	d110      	bne.n	800acec <__mdiff+0x38>
 800acca:	4629      	mov	r1, r5
 800accc:	4630      	mov	r0, r6
 800acce:	f7ff fd53 	bl	800a778 <_Balloc>
 800acd2:	b930      	cbnz	r0, 800ace2 <__mdiff+0x2e>
 800acd4:	4b3a      	ldr	r3, [pc, #232]	; (800adc0 <__mdiff+0x10c>)
 800acd6:	4602      	mov	r2, r0
 800acd8:	f240 2132 	movw	r1, #562	; 0x232
 800acdc:	4839      	ldr	r0, [pc, #228]	; (800adc4 <__mdiff+0x110>)
 800acde:	f000 fc45 	bl	800b56c <__assert_func>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ace8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	bfa4      	itt	ge
 800acee:	4643      	movge	r3, r8
 800acf0:	46a0      	movge	r8, r4
 800acf2:	4630      	mov	r0, r6
 800acf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acf8:	bfa6      	itte	ge
 800acfa:	461c      	movge	r4, r3
 800acfc:	2500      	movge	r5, #0
 800acfe:	2501      	movlt	r5, #1
 800ad00:	f7ff fd3a 	bl	800a778 <_Balloc>
 800ad04:	b920      	cbnz	r0, 800ad10 <__mdiff+0x5c>
 800ad06:	4b2e      	ldr	r3, [pc, #184]	; (800adc0 <__mdiff+0x10c>)
 800ad08:	4602      	mov	r2, r0
 800ad0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad0e:	e7e5      	b.n	800acdc <__mdiff+0x28>
 800ad10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad14:	6926      	ldr	r6, [r4, #16]
 800ad16:	60c5      	str	r5, [r0, #12]
 800ad18:	f104 0914 	add.w	r9, r4, #20
 800ad1c:	f108 0514 	add.w	r5, r8, #20
 800ad20:	f100 0e14 	add.w	lr, r0, #20
 800ad24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad2c:	f108 0210 	add.w	r2, r8, #16
 800ad30:	46f2      	mov	sl, lr
 800ad32:	2100      	movs	r1, #0
 800ad34:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad3c:	fa1f f883 	uxth.w	r8, r3
 800ad40:	fa11 f18b 	uxtah	r1, r1, fp
 800ad44:	0c1b      	lsrs	r3, r3, #16
 800ad46:	eba1 0808 	sub.w	r8, r1, r8
 800ad4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad52:	fa1f f888 	uxth.w	r8, r8
 800ad56:	1419      	asrs	r1, r3, #16
 800ad58:	454e      	cmp	r6, r9
 800ad5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad5e:	f84a 3b04 	str.w	r3, [sl], #4
 800ad62:	d8e7      	bhi.n	800ad34 <__mdiff+0x80>
 800ad64:	1b33      	subs	r3, r6, r4
 800ad66:	3b15      	subs	r3, #21
 800ad68:	f023 0303 	bic.w	r3, r3, #3
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	3415      	adds	r4, #21
 800ad70:	42a6      	cmp	r6, r4
 800ad72:	bf38      	it	cc
 800ad74:	2304      	movcc	r3, #4
 800ad76:	441d      	add	r5, r3
 800ad78:	4473      	add	r3, lr
 800ad7a:	469e      	mov	lr, r3
 800ad7c:	462e      	mov	r6, r5
 800ad7e:	4566      	cmp	r6, ip
 800ad80:	d30e      	bcc.n	800ada0 <__mdiff+0xec>
 800ad82:	f10c 0203 	add.w	r2, ip, #3
 800ad86:	1b52      	subs	r2, r2, r5
 800ad88:	f022 0203 	bic.w	r2, r2, #3
 800ad8c:	3d03      	subs	r5, #3
 800ad8e:	45ac      	cmp	ip, r5
 800ad90:	bf38      	it	cc
 800ad92:	2200      	movcc	r2, #0
 800ad94:	441a      	add	r2, r3
 800ad96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad9a:	b17b      	cbz	r3, 800adbc <__mdiff+0x108>
 800ad9c:	6107      	str	r7, [r0, #16]
 800ad9e:	e7a3      	b.n	800ace8 <__mdiff+0x34>
 800ada0:	f856 8b04 	ldr.w	r8, [r6], #4
 800ada4:	fa11 f288 	uxtah	r2, r1, r8
 800ada8:	1414      	asrs	r4, r2, #16
 800adaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800adae:	b292      	uxth	r2, r2
 800adb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adb4:	f84e 2b04 	str.w	r2, [lr], #4
 800adb8:	1421      	asrs	r1, r4, #16
 800adba:	e7e0      	b.n	800ad7e <__mdiff+0xca>
 800adbc:	3f01      	subs	r7, #1
 800adbe:	e7ea      	b.n	800ad96 <__mdiff+0xe2>
 800adc0:	0800c81f 	.word	0x0800c81f
 800adc4:	0800c890 	.word	0x0800c890

0800adc8 <__d2b>:
 800adc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adcc:	4689      	mov	r9, r1
 800adce:	2101      	movs	r1, #1
 800add0:	ec57 6b10 	vmov	r6, r7, d0
 800add4:	4690      	mov	r8, r2
 800add6:	f7ff fccf 	bl	800a778 <_Balloc>
 800adda:	4604      	mov	r4, r0
 800addc:	b930      	cbnz	r0, 800adec <__d2b+0x24>
 800adde:	4602      	mov	r2, r0
 800ade0:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <__d2b+0xb0>)
 800ade2:	4826      	ldr	r0, [pc, #152]	; (800ae7c <__d2b+0xb4>)
 800ade4:	f240 310a 	movw	r1, #778	; 0x30a
 800ade8:	f000 fbc0 	bl	800b56c <__assert_func>
 800adec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800adf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adf4:	bb35      	cbnz	r5, 800ae44 <__d2b+0x7c>
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	d028      	beq.n	800ae4e <__d2b+0x86>
 800adfc:	4668      	mov	r0, sp
 800adfe:	9600      	str	r6, [sp, #0]
 800ae00:	f7ff fd82 	bl	800a908 <__lo0bits>
 800ae04:	9900      	ldr	r1, [sp, #0]
 800ae06:	b300      	cbz	r0, 800ae4a <__d2b+0x82>
 800ae08:	9a01      	ldr	r2, [sp, #4]
 800ae0a:	f1c0 0320 	rsb	r3, r0, #32
 800ae0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae12:	430b      	orrs	r3, r1
 800ae14:	40c2      	lsrs	r2, r0
 800ae16:	6163      	str	r3, [r4, #20]
 800ae18:	9201      	str	r2, [sp, #4]
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	61a3      	str	r3, [r4, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bf14      	ite	ne
 800ae22:	2202      	movne	r2, #2
 800ae24:	2201      	moveq	r2, #1
 800ae26:	6122      	str	r2, [r4, #16]
 800ae28:	b1d5      	cbz	r5, 800ae60 <__d2b+0x98>
 800ae2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae2e:	4405      	add	r5, r0
 800ae30:	f8c9 5000 	str.w	r5, [r9]
 800ae34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae38:	f8c8 0000 	str.w	r0, [r8]
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	b003      	add	sp, #12
 800ae40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae48:	e7d5      	b.n	800adf6 <__d2b+0x2e>
 800ae4a:	6161      	str	r1, [r4, #20]
 800ae4c:	e7e5      	b.n	800ae1a <__d2b+0x52>
 800ae4e:	a801      	add	r0, sp, #4
 800ae50:	f7ff fd5a 	bl	800a908 <__lo0bits>
 800ae54:	9b01      	ldr	r3, [sp, #4]
 800ae56:	6163      	str	r3, [r4, #20]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	6122      	str	r2, [r4, #16]
 800ae5c:	3020      	adds	r0, #32
 800ae5e:	e7e3      	b.n	800ae28 <__d2b+0x60>
 800ae60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae68:	f8c9 0000 	str.w	r0, [r9]
 800ae6c:	6918      	ldr	r0, [r3, #16]
 800ae6e:	f7ff fd2b 	bl	800a8c8 <__hi0bits>
 800ae72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae76:	e7df      	b.n	800ae38 <__d2b+0x70>
 800ae78:	0800c81f 	.word	0x0800c81f
 800ae7c:	0800c890 	.word	0x0800c890

0800ae80 <_calloc_r>:
 800ae80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae82:	fba1 2402 	umull	r2, r4, r1, r2
 800ae86:	b94c      	cbnz	r4, 800ae9c <_calloc_r+0x1c>
 800ae88:	4611      	mov	r1, r2
 800ae8a:	9201      	str	r2, [sp, #4]
 800ae8c:	f000 f87a 	bl	800af84 <_malloc_r>
 800ae90:	9a01      	ldr	r2, [sp, #4]
 800ae92:	4605      	mov	r5, r0
 800ae94:	b930      	cbnz	r0, 800aea4 <_calloc_r+0x24>
 800ae96:	4628      	mov	r0, r5
 800ae98:	b003      	add	sp, #12
 800ae9a:	bd30      	pop	{r4, r5, pc}
 800ae9c:	220c      	movs	r2, #12
 800ae9e:	6002      	str	r2, [r0, #0]
 800aea0:	2500      	movs	r5, #0
 800aea2:	e7f8      	b.n	800ae96 <_calloc_r+0x16>
 800aea4:	4621      	mov	r1, r4
 800aea6:	f7fe f85b 	bl	8008f60 <memset>
 800aeaa:	e7f4      	b.n	800ae96 <_calloc_r+0x16>

0800aeac <_free_r>:
 800aeac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d044      	beq.n	800af3c <_free_r+0x90>
 800aeb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb6:	9001      	str	r0, [sp, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f1a1 0404 	sub.w	r4, r1, #4
 800aebe:	bfb8      	it	lt
 800aec0:	18e4      	addlt	r4, r4, r3
 800aec2:	f000 fcdf 	bl	800b884 <__malloc_lock>
 800aec6:	4a1e      	ldr	r2, [pc, #120]	; (800af40 <_free_r+0x94>)
 800aec8:	9801      	ldr	r0, [sp, #4]
 800aeca:	6813      	ldr	r3, [r2, #0]
 800aecc:	b933      	cbnz	r3, 800aedc <_free_r+0x30>
 800aece:	6063      	str	r3, [r4, #4]
 800aed0:	6014      	str	r4, [r2, #0]
 800aed2:	b003      	add	sp, #12
 800aed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aed8:	f000 bcda 	b.w	800b890 <__malloc_unlock>
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d908      	bls.n	800aef2 <_free_r+0x46>
 800aee0:	6825      	ldr	r5, [r4, #0]
 800aee2:	1961      	adds	r1, r4, r5
 800aee4:	428b      	cmp	r3, r1
 800aee6:	bf01      	itttt	eq
 800aee8:	6819      	ldreq	r1, [r3, #0]
 800aeea:	685b      	ldreq	r3, [r3, #4]
 800aeec:	1949      	addeq	r1, r1, r5
 800aeee:	6021      	streq	r1, [r4, #0]
 800aef0:	e7ed      	b.n	800aece <_free_r+0x22>
 800aef2:	461a      	mov	r2, r3
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	b10b      	cbz	r3, 800aefc <_free_r+0x50>
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	d9fa      	bls.n	800aef2 <_free_r+0x46>
 800aefc:	6811      	ldr	r1, [r2, #0]
 800aefe:	1855      	adds	r5, r2, r1
 800af00:	42a5      	cmp	r5, r4
 800af02:	d10b      	bne.n	800af1c <_free_r+0x70>
 800af04:	6824      	ldr	r4, [r4, #0]
 800af06:	4421      	add	r1, r4
 800af08:	1854      	adds	r4, r2, r1
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	6011      	str	r1, [r2, #0]
 800af0e:	d1e0      	bne.n	800aed2 <_free_r+0x26>
 800af10:	681c      	ldr	r4, [r3, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	6053      	str	r3, [r2, #4]
 800af16:	4421      	add	r1, r4
 800af18:	6011      	str	r1, [r2, #0]
 800af1a:	e7da      	b.n	800aed2 <_free_r+0x26>
 800af1c:	d902      	bls.n	800af24 <_free_r+0x78>
 800af1e:	230c      	movs	r3, #12
 800af20:	6003      	str	r3, [r0, #0]
 800af22:	e7d6      	b.n	800aed2 <_free_r+0x26>
 800af24:	6825      	ldr	r5, [r4, #0]
 800af26:	1961      	adds	r1, r4, r5
 800af28:	428b      	cmp	r3, r1
 800af2a:	bf04      	itt	eq
 800af2c:	6819      	ldreq	r1, [r3, #0]
 800af2e:	685b      	ldreq	r3, [r3, #4]
 800af30:	6063      	str	r3, [r4, #4]
 800af32:	bf04      	itt	eq
 800af34:	1949      	addeq	r1, r1, r5
 800af36:	6021      	streq	r1, [r4, #0]
 800af38:	6054      	str	r4, [r2, #4]
 800af3a:	e7ca      	b.n	800aed2 <_free_r+0x26>
 800af3c:	b003      	add	sp, #12
 800af3e:	bd30      	pop	{r4, r5, pc}
 800af40:	200003dc 	.word	0x200003dc

0800af44 <sbrk_aligned>:
 800af44:	b570      	push	{r4, r5, r6, lr}
 800af46:	4e0e      	ldr	r6, [pc, #56]	; (800af80 <sbrk_aligned+0x3c>)
 800af48:	460c      	mov	r4, r1
 800af4a:	6831      	ldr	r1, [r6, #0]
 800af4c:	4605      	mov	r5, r0
 800af4e:	b911      	cbnz	r1, 800af56 <sbrk_aligned+0x12>
 800af50:	f000 f9e6 	bl	800b320 <_sbrk_r>
 800af54:	6030      	str	r0, [r6, #0]
 800af56:	4621      	mov	r1, r4
 800af58:	4628      	mov	r0, r5
 800af5a:	f000 f9e1 	bl	800b320 <_sbrk_r>
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	d00a      	beq.n	800af78 <sbrk_aligned+0x34>
 800af62:	1cc4      	adds	r4, r0, #3
 800af64:	f024 0403 	bic.w	r4, r4, #3
 800af68:	42a0      	cmp	r0, r4
 800af6a:	d007      	beq.n	800af7c <sbrk_aligned+0x38>
 800af6c:	1a21      	subs	r1, r4, r0
 800af6e:	4628      	mov	r0, r5
 800af70:	f000 f9d6 	bl	800b320 <_sbrk_r>
 800af74:	3001      	adds	r0, #1
 800af76:	d101      	bne.n	800af7c <sbrk_aligned+0x38>
 800af78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800af7c:	4620      	mov	r0, r4
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	200003e0 	.word	0x200003e0

0800af84 <_malloc_r>:
 800af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	1ccd      	adds	r5, r1, #3
 800af8a:	f025 0503 	bic.w	r5, r5, #3
 800af8e:	3508      	adds	r5, #8
 800af90:	2d0c      	cmp	r5, #12
 800af92:	bf38      	it	cc
 800af94:	250c      	movcc	r5, #12
 800af96:	2d00      	cmp	r5, #0
 800af98:	4607      	mov	r7, r0
 800af9a:	db01      	blt.n	800afa0 <_malloc_r+0x1c>
 800af9c:	42a9      	cmp	r1, r5
 800af9e:	d905      	bls.n	800afac <_malloc_r+0x28>
 800afa0:	230c      	movs	r3, #12
 800afa2:	603b      	str	r3, [r7, #0]
 800afa4:	2600      	movs	r6, #0
 800afa6:	4630      	mov	r0, r6
 800afa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afac:	4e2e      	ldr	r6, [pc, #184]	; (800b068 <_malloc_r+0xe4>)
 800afae:	f000 fc69 	bl	800b884 <__malloc_lock>
 800afb2:	6833      	ldr	r3, [r6, #0]
 800afb4:	461c      	mov	r4, r3
 800afb6:	bb34      	cbnz	r4, 800b006 <_malloc_r+0x82>
 800afb8:	4629      	mov	r1, r5
 800afba:	4638      	mov	r0, r7
 800afbc:	f7ff ffc2 	bl	800af44 <sbrk_aligned>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	4604      	mov	r4, r0
 800afc4:	d14d      	bne.n	800b062 <_malloc_r+0xde>
 800afc6:	6834      	ldr	r4, [r6, #0]
 800afc8:	4626      	mov	r6, r4
 800afca:	2e00      	cmp	r6, #0
 800afcc:	d140      	bne.n	800b050 <_malloc_r+0xcc>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	4631      	mov	r1, r6
 800afd2:	4638      	mov	r0, r7
 800afd4:	eb04 0803 	add.w	r8, r4, r3
 800afd8:	f000 f9a2 	bl	800b320 <_sbrk_r>
 800afdc:	4580      	cmp	r8, r0
 800afde:	d13a      	bne.n	800b056 <_malloc_r+0xd2>
 800afe0:	6821      	ldr	r1, [r4, #0]
 800afe2:	3503      	adds	r5, #3
 800afe4:	1a6d      	subs	r5, r5, r1
 800afe6:	f025 0503 	bic.w	r5, r5, #3
 800afea:	3508      	adds	r5, #8
 800afec:	2d0c      	cmp	r5, #12
 800afee:	bf38      	it	cc
 800aff0:	250c      	movcc	r5, #12
 800aff2:	4629      	mov	r1, r5
 800aff4:	4638      	mov	r0, r7
 800aff6:	f7ff ffa5 	bl	800af44 <sbrk_aligned>
 800affa:	3001      	adds	r0, #1
 800affc:	d02b      	beq.n	800b056 <_malloc_r+0xd2>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	442b      	add	r3, r5
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	e00e      	b.n	800b024 <_malloc_r+0xa0>
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	1b52      	subs	r2, r2, r5
 800b00a:	d41e      	bmi.n	800b04a <_malloc_r+0xc6>
 800b00c:	2a0b      	cmp	r2, #11
 800b00e:	d916      	bls.n	800b03e <_malloc_r+0xba>
 800b010:	1961      	adds	r1, r4, r5
 800b012:	42a3      	cmp	r3, r4
 800b014:	6025      	str	r5, [r4, #0]
 800b016:	bf18      	it	ne
 800b018:	6059      	strne	r1, [r3, #4]
 800b01a:	6863      	ldr	r3, [r4, #4]
 800b01c:	bf08      	it	eq
 800b01e:	6031      	streq	r1, [r6, #0]
 800b020:	5162      	str	r2, [r4, r5]
 800b022:	604b      	str	r3, [r1, #4]
 800b024:	4638      	mov	r0, r7
 800b026:	f104 060b 	add.w	r6, r4, #11
 800b02a:	f000 fc31 	bl	800b890 <__malloc_unlock>
 800b02e:	f026 0607 	bic.w	r6, r6, #7
 800b032:	1d23      	adds	r3, r4, #4
 800b034:	1af2      	subs	r2, r6, r3
 800b036:	d0b6      	beq.n	800afa6 <_malloc_r+0x22>
 800b038:	1b9b      	subs	r3, r3, r6
 800b03a:	50a3      	str	r3, [r4, r2]
 800b03c:	e7b3      	b.n	800afa6 <_malloc_r+0x22>
 800b03e:	6862      	ldr	r2, [r4, #4]
 800b040:	42a3      	cmp	r3, r4
 800b042:	bf0c      	ite	eq
 800b044:	6032      	streq	r2, [r6, #0]
 800b046:	605a      	strne	r2, [r3, #4]
 800b048:	e7ec      	b.n	800b024 <_malloc_r+0xa0>
 800b04a:	4623      	mov	r3, r4
 800b04c:	6864      	ldr	r4, [r4, #4]
 800b04e:	e7b2      	b.n	800afb6 <_malloc_r+0x32>
 800b050:	4634      	mov	r4, r6
 800b052:	6876      	ldr	r6, [r6, #4]
 800b054:	e7b9      	b.n	800afca <_malloc_r+0x46>
 800b056:	230c      	movs	r3, #12
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	4638      	mov	r0, r7
 800b05c:	f000 fc18 	bl	800b890 <__malloc_unlock>
 800b060:	e7a1      	b.n	800afa6 <_malloc_r+0x22>
 800b062:	6025      	str	r5, [r4, #0]
 800b064:	e7de      	b.n	800b024 <_malloc_r+0xa0>
 800b066:	bf00      	nop
 800b068:	200003dc 	.word	0x200003dc

0800b06c <__sfputc_r>:
 800b06c:	6893      	ldr	r3, [r2, #8]
 800b06e:	3b01      	subs	r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	b410      	push	{r4}
 800b074:	6093      	str	r3, [r2, #8]
 800b076:	da08      	bge.n	800b08a <__sfputc_r+0x1e>
 800b078:	6994      	ldr	r4, [r2, #24]
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	db01      	blt.n	800b082 <__sfputc_r+0x16>
 800b07e:	290a      	cmp	r1, #10
 800b080:	d103      	bne.n	800b08a <__sfputc_r+0x1e>
 800b082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b086:	f000 b99f 	b.w	800b3c8 <__swbuf_r>
 800b08a:	6813      	ldr	r3, [r2, #0]
 800b08c:	1c58      	adds	r0, r3, #1
 800b08e:	6010      	str	r0, [r2, #0]
 800b090:	7019      	strb	r1, [r3, #0]
 800b092:	4608      	mov	r0, r1
 800b094:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <__sfputs_r>:
 800b09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	18d5      	adds	r5, r2, r3
 800b0a4:	42ac      	cmp	r4, r5
 800b0a6:	d101      	bne.n	800b0ac <__sfputs_r+0x12>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e007      	b.n	800b0bc <__sfputs_r+0x22>
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	463a      	mov	r2, r7
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7ff ffda 	bl	800b06c <__sfputc_r>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d1f3      	bne.n	800b0a4 <__sfputs_r+0xa>
 800b0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c0 <_vfiprintf_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	b09d      	sub	sp, #116	; 0x74
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	4698      	mov	r8, r3
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	b118      	cbz	r0, 800b0d8 <_vfiprintf_r+0x18>
 800b0d0:	6983      	ldr	r3, [r0, #24]
 800b0d2:	b90b      	cbnz	r3, 800b0d8 <_vfiprintf_r+0x18>
 800b0d4:	f7ff faa2 	bl	800a61c <__sinit>
 800b0d8:	4b89      	ldr	r3, [pc, #548]	; (800b300 <_vfiprintf_r+0x240>)
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	d11b      	bne.n	800b116 <_vfiprintf_r+0x56>
 800b0de:	6875      	ldr	r5, [r6, #4]
 800b0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	d405      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ee:	f7ff fb38 	bl	800a762 <__retarget_lock_acquire_recursive>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	071b      	lsls	r3, r3, #28
 800b0f6:	d501      	bpl.n	800b0fc <_vfiprintf_r+0x3c>
 800b0f8:	692b      	ldr	r3, [r5, #16]
 800b0fa:	b9eb      	cbnz	r3, 800b138 <_vfiprintf_r+0x78>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f000 f9c6 	bl	800b490 <__swsetup_r>
 800b104:	b1c0      	cbz	r0, 800b138 <_vfiprintf_r+0x78>
 800b106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b108:	07dc      	lsls	r4, r3, #31
 800b10a:	d50e      	bpl.n	800b12a <_vfiprintf_r+0x6a>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	4b7b      	ldr	r3, [pc, #492]	; (800b304 <_vfiprintf_r+0x244>)
 800b118:	429d      	cmp	r5, r3
 800b11a:	d101      	bne.n	800b120 <_vfiprintf_r+0x60>
 800b11c:	68b5      	ldr	r5, [r6, #8]
 800b11e:	e7df      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b120:	4b79      	ldr	r3, [pc, #484]	; (800b308 <_vfiprintf_r+0x248>)
 800b122:	429d      	cmp	r5, r3
 800b124:	bf08      	it	eq
 800b126:	68f5      	ldreq	r5, [r6, #12]
 800b128:	e7da      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4ed      	bmi.n	800b10c <_vfiprintf_r+0x4c>
 800b130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b132:	f7ff fb17 	bl	800a764 <__retarget_lock_release_recursive>
 800b136:	e7e9      	b.n	800b10c <_vfiprintf_r+0x4c>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b142:	f8cd 800c 	str.w	r8, [sp, #12]
 800b146:	2330      	movs	r3, #48	; 0x30
 800b148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b30c <_vfiprintf_r+0x24c>
 800b14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0xa2>
 800b15e:	2a25      	cmp	r2, #37	; 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x96>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xc0>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ff93 	bl	800b09a <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80aa 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	; 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80a2 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4858      	ldr	r0, [pc, #352]	; (800b30c <_vfiprintf_r+0x24c>)
 800b1ac:	f7f5 f820 	bl	80001f0 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x12c>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	; 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x13c>
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	; 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94e      	bls.n	800b284 <_vfiprintf_r+0x1c4>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x156>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x156>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xe2>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d10c      	bne.n	800b236 <_vfiprintf_r+0x176>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	; 0x2a
 800b220:	d135      	bne.n	800b28e <_vfiprintf_r+0x1ce>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	9203      	str	r2, [sp, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	bfb8      	it	lt
 800b22e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b232:	3402      	adds	r4, #2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b31c <_vfiprintf_r+0x25c>
 800b23a:	7821      	ldrb	r1, [r4, #0]
 800b23c:	2203      	movs	r2, #3
 800b23e:	4650      	mov	r0, sl
 800b240:	f7f4 ffd6 	bl	80001f0 <memchr>
 800b244:	b140      	cbz	r0, 800b258 <_vfiprintf_r+0x198>
 800b246:	2340      	movs	r3, #64	; 0x40
 800b248:	eba0 000a 	sub.w	r0, r0, sl
 800b24c:	fa03 f000 	lsl.w	r0, r3, r0
 800b250:	9b04      	ldr	r3, [sp, #16]
 800b252:	4303      	orrs	r3, r0
 800b254:	3401      	adds	r4, #1
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25c:	482c      	ldr	r0, [pc, #176]	; (800b310 <_vfiprintf_r+0x250>)
 800b25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b262:	2206      	movs	r2, #6
 800b264:	f7f4 ffc4 	bl	80001f0 <memchr>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d03f      	beq.n	800b2ec <_vfiprintf_r+0x22c>
 800b26c:	4b29      	ldr	r3, [pc, #164]	; (800b314 <_vfiprintf_r+0x254>)
 800b26e:	bb1b      	cbnz	r3, 800b2b8 <_vfiprintf_r+0x1f8>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	3307      	adds	r3, #7
 800b274:	f023 0307 	bic.w	r3, r3, #7
 800b278:	3308      	adds	r3, #8
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27e:	443b      	add	r3, r7
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
 800b282:	e767      	b.n	800b154 <_vfiprintf_r+0x94>
 800b284:	fb0c 3202 	mla	r2, ip, r2, r3
 800b288:	460c      	mov	r4, r1
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7a5      	b.n	800b1da <_vfiprintf_r+0x11a>
 800b28e:	2300      	movs	r3, #0
 800b290:	3401      	adds	r4, #1
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	4619      	mov	r1, r3
 800b296:	f04f 0c0a 	mov.w	ip, #10
 800b29a:	4620      	mov	r0, r4
 800b29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a0:	3a30      	subs	r2, #48	; 0x30
 800b2a2:	2a09      	cmp	r2, #9
 800b2a4:	d903      	bls.n	800b2ae <_vfiprintf_r+0x1ee>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c5      	beq.n	800b236 <_vfiprintf_r+0x176>
 800b2aa:	9105      	str	r1, [sp, #20]
 800b2ac:	e7c3      	b.n	800b236 <_vfiprintf_r+0x176>
 800b2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e7f0      	b.n	800b29a <_vfiprintf_r+0x1da>
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4b16      	ldr	r3, [pc, #88]	; (800b318 <_vfiprintf_r+0x258>)
 800b2c0:	a904      	add	r1, sp, #16
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7fd fef4 	bl	80090b0 <_printf_float>
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	1c78      	adds	r0, r7, #1
 800b2cc:	d1d6      	bne.n	800b27c <_vfiprintf_r+0x1bc>
 800b2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d0:	07d9      	lsls	r1, r3, #31
 800b2d2:	d405      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	059a      	lsls	r2, r3, #22
 800b2d8:	d402      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2dc:	f7ff fa42 	bl	800a764 <__retarget_lock_release_recursive>
 800b2e0:	89ab      	ldrh	r3, [r5, #12]
 800b2e2:	065b      	lsls	r3, r3, #25
 800b2e4:	f53f af12 	bmi.w	800b10c <_vfiprintf_r+0x4c>
 800b2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ea:	e711      	b.n	800b110 <_vfiprintf_r+0x50>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4b09      	ldr	r3, [pc, #36]	; (800b318 <_vfiprintf_r+0x258>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7fe f97e 	bl	80095f8 <_printf_i>
 800b2fc:	e7e4      	b.n	800b2c8 <_vfiprintf_r+0x208>
 800b2fe:	bf00      	nop
 800b300:	0800c850 	.word	0x0800c850
 800b304:	0800c870 	.word	0x0800c870
 800b308:	0800c830 	.word	0x0800c830
 800b30c:	0800c9ec 	.word	0x0800c9ec
 800b310:	0800c9f6 	.word	0x0800c9f6
 800b314:	080090b1 	.word	0x080090b1
 800b318:	0800b09b 	.word	0x0800b09b
 800b31c:	0800c9f2 	.word	0x0800c9f2

0800b320 <_sbrk_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d06      	ldr	r5, [pc, #24]	; (800b33c <_sbrk_r+0x1c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f9 ffb6 	bl	800529c <_sbrk>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_sbrk_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_sbrk_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	200003e4 	.word	0x200003e4

0800b340 <__sread>:
 800b340:	b510      	push	{r4, lr}
 800b342:	460c      	mov	r4, r1
 800b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b348:	f000 faa8 	bl	800b89c <_read_r>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	bfab      	itete	ge
 800b350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b352:	89a3      	ldrhlt	r3, [r4, #12]
 800b354:	181b      	addge	r3, r3, r0
 800b356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b35a:	bfac      	ite	ge
 800b35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b35e:	81a3      	strhlt	r3, [r4, #12]
 800b360:	bd10      	pop	{r4, pc}

0800b362 <__swrite>:
 800b362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b366:	461f      	mov	r7, r3
 800b368:	898b      	ldrh	r3, [r1, #12]
 800b36a:	05db      	lsls	r3, r3, #23
 800b36c:	4605      	mov	r5, r0
 800b36e:	460c      	mov	r4, r1
 800b370:	4616      	mov	r6, r2
 800b372:	d505      	bpl.n	800b380 <__swrite+0x1e>
 800b374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b378:	2302      	movs	r3, #2
 800b37a:	2200      	movs	r2, #0
 800b37c:	f000 f9f8 	bl	800b770 <_lseek_r>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	4632      	mov	r2, r6
 800b38e:	463b      	mov	r3, r7
 800b390:	4628      	mov	r0, r5
 800b392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b396:	f000 b869 	b.w	800b46c <_write_r>

0800b39a <__sseek>:
 800b39a:	b510      	push	{r4, lr}
 800b39c:	460c      	mov	r4, r1
 800b39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a2:	f000 f9e5 	bl	800b770 <_lseek_r>
 800b3a6:	1c43      	adds	r3, r0, #1
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	bf15      	itete	ne
 800b3ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3b6:	81a3      	strheq	r3, [r4, #12]
 800b3b8:	bf18      	it	ne
 800b3ba:	81a3      	strhne	r3, [r4, #12]
 800b3bc:	bd10      	pop	{r4, pc}

0800b3be <__sclose>:
 800b3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c2:	f000 b8f1 	b.w	800b5a8 <_close_r>
	...

0800b3c8 <__swbuf_r>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	460e      	mov	r6, r1
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b118      	cbz	r0, 800b3da <__swbuf_r+0x12>
 800b3d2:	6983      	ldr	r3, [r0, #24]
 800b3d4:	b90b      	cbnz	r3, 800b3da <__swbuf_r+0x12>
 800b3d6:	f7ff f921 	bl	800a61c <__sinit>
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <__swbuf_r+0x98>)
 800b3dc:	429c      	cmp	r4, r3
 800b3de:	d12b      	bne.n	800b438 <__swbuf_r+0x70>
 800b3e0:	686c      	ldr	r4, [r5, #4]
 800b3e2:	69a3      	ldr	r3, [r4, #24]
 800b3e4:	60a3      	str	r3, [r4, #8]
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	071a      	lsls	r2, r3, #28
 800b3ea:	d52f      	bpl.n	800b44c <__swbuf_r+0x84>
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	b36b      	cbz	r3, 800b44c <__swbuf_r+0x84>
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	1ac0      	subs	r0, r0, r3
 800b3f6:	6963      	ldr	r3, [r4, #20]
 800b3f8:	b2f6      	uxtb	r6, r6
 800b3fa:	4283      	cmp	r3, r0
 800b3fc:	4637      	mov	r7, r6
 800b3fe:	dc04      	bgt.n	800b40a <__swbuf_r+0x42>
 800b400:	4621      	mov	r1, r4
 800b402:	4628      	mov	r0, r5
 800b404:	f000 f966 	bl	800b6d4 <_fflush_r>
 800b408:	bb30      	cbnz	r0, 800b458 <__swbuf_r+0x90>
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	6022      	str	r2, [r4, #0]
 800b416:	701e      	strb	r6, [r3, #0]
 800b418:	6963      	ldr	r3, [r4, #20]
 800b41a:	3001      	adds	r0, #1
 800b41c:	4283      	cmp	r3, r0
 800b41e:	d004      	beq.n	800b42a <__swbuf_r+0x62>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	07db      	lsls	r3, r3, #31
 800b424:	d506      	bpl.n	800b434 <__swbuf_r+0x6c>
 800b426:	2e0a      	cmp	r6, #10
 800b428:	d104      	bne.n	800b434 <__swbuf_r+0x6c>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f951 	bl	800b6d4 <_fflush_r>
 800b432:	b988      	cbnz	r0, 800b458 <__swbuf_r+0x90>
 800b434:	4638      	mov	r0, r7
 800b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b438:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <__swbuf_r+0x9c>)
 800b43a:	429c      	cmp	r4, r3
 800b43c:	d101      	bne.n	800b442 <__swbuf_r+0x7a>
 800b43e:	68ac      	ldr	r4, [r5, #8]
 800b440:	e7cf      	b.n	800b3e2 <__swbuf_r+0x1a>
 800b442:	4b09      	ldr	r3, [pc, #36]	; (800b468 <__swbuf_r+0xa0>)
 800b444:	429c      	cmp	r4, r3
 800b446:	bf08      	it	eq
 800b448:	68ec      	ldreq	r4, [r5, #12]
 800b44a:	e7ca      	b.n	800b3e2 <__swbuf_r+0x1a>
 800b44c:	4621      	mov	r1, r4
 800b44e:	4628      	mov	r0, r5
 800b450:	f000 f81e 	bl	800b490 <__swsetup_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	d0cb      	beq.n	800b3f0 <__swbuf_r+0x28>
 800b458:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b45c:	e7ea      	b.n	800b434 <__swbuf_r+0x6c>
 800b45e:	bf00      	nop
 800b460:	0800c850 	.word	0x0800c850
 800b464:	0800c870 	.word	0x0800c870
 800b468:	0800c830 	.word	0x0800c830

0800b46c <_write_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d07      	ldr	r5, [pc, #28]	; (800b48c <_write_r+0x20>)
 800b470:	4604      	mov	r4, r0
 800b472:	4608      	mov	r0, r1
 800b474:	4611      	mov	r1, r2
 800b476:	2200      	movs	r2, #0
 800b478:	602a      	str	r2, [r5, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	f7f9 fdf8 	bl	8005070 <_write>
 800b480:	1c43      	adds	r3, r0, #1
 800b482:	d102      	bne.n	800b48a <_write_r+0x1e>
 800b484:	682b      	ldr	r3, [r5, #0]
 800b486:	b103      	cbz	r3, 800b48a <_write_r+0x1e>
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	200003e4 	.word	0x200003e4

0800b490 <__swsetup_r>:
 800b490:	4b32      	ldr	r3, [pc, #200]	; (800b55c <__swsetup_r+0xcc>)
 800b492:	b570      	push	{r4, r5, r6, lr}
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	4606      	mov	r6, r0
 800b498:	460c      	mov	r4, r1
 800b49a:	b125      	cbz	r5, 800b4a6 <__swsetup_r+0x16>
 800b49c:	69ab      	ldr	r3, [r5, #24]
 800b49e:	b913      	cbnz	r3, 800b4a6 <__swsetup_r+0x16>
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7ff f8bb 	bl	800a61c <__sinit>
 800b4a6:	4b2e      	ldr	r3, [pc, #184]	; (800b560 <__swsetup_r+0xd0>)
 800b4a8:	429c      	cmp	r4, r3
 800b4aa:	d10f      	bne.n	800b4cc <__swsetup_r+0x3c>
 800b4ac:	686c      	ldr	r4, [r5, #4]
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4b4:	0719      	lsls	r1, r3, #28
 800b4b6:	d42c      	bmi.n	800b512 <__swsetup_r+0x82>
 800b4b8:	06dd      	lsls	r5, r3, #27
 800b4ba:	d411      	bmi.n	800b4e0 <__swsetup_r+0x50>
 800b4bc:	2309      	movs	r3, #9
 800b4be:	6033      	str	r3, [r6, #0]
 800b4c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4c4:	81a3      	strh	r3, [r4, #12]
 800b4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ca:	e03e      	b.n	800b54a <__swsetup_r+0xba>
 800b4cc:	4b25      	ldr	r3, [pc, #148]	; (800b564 <__swsetup_r+0xd4>)
 800b4ce:	429c      	cmp	r4, r3
 800b4d0:	d101      	bne.n	800b4d6 <__swsetup_r+0x46>
 800b4d2:	68ac      	ldr	r4, [r5, #8]
 800b4d4:	e7eb      	b.n	800b4ae <__swsetup_r+0x1e>
 800b4d6:	4b24      	ldr	r3, [pc, #144]	; (800b568 <__swsetup_r+0xd8>)
 800b4d8:	429c      	cmp	r4, r3
 800b4da:	bf08      	it	eq
 800b4dc:	68ec      	ldreq	r4, [r5, #12]
 800b4de:	e7e6      	b.n	800b4ae <__swsetup_r+0x1e>
 800b4e0:	0758      	lsls	r0, r3, #29
 800b4e2:	d512      	bpl.n	800b50a <__swsetup_r+0x7a>
 800b4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4e6:	b141      	cbz	r1, 800b4fa <__swsetup_r+0x6a>
 800b4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4ec:	4299      	cmp	r1, r3
 800b4ee:	d002      	beq.n	800b4f6 <__swsetup_r+0x66>
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7ff fcdb 	bl	800aeac <_free_r>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b500:	81a3      	strh	r3, [r4, #12]
 800b502:	2300      	movs	r3, #0
 800b504:	6063      	str	r3, [r4, #4]
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f043 0308 	orr.w	r3, r3, #8
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	6923      	ldr	r3, [r4, #16]
 800b514:	b94b      	cbnz	r3, 800b52a <__swsetup_r+0x9a>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b520:	d003      	beq.n	800b52a <__swsetup_r+0x9a>
 800b522:	4621      	mov	r1, r4
 800b524:	4630      	mov	r0, r6
 800b526:	f000 f95b 	bl	800b7e0 <__smakebuf_r>
 800b52a:	89a0      	ldrh	r0, [r4, #12]
 800b52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b530:	f010 0301 	ands.w	r3, r0, #1
 800b534:	d00a      	beq.n	800b54c <__swsetup_r+0xbc>
 800b536:	2300      	movs	r3, #0
 800b538:	60a3      	str	r3, [r4, #8]
 800b53a:	6963      	ldr	r3, [r4, #20]
 800b53c:	425b      	negs	r3, r3
 800b53e:	61a3      	str	r3, [r4, #24]
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	b943      	cbnz	r3, 800b556 <__swsetup_r+0xc6>
 800b544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b548:	d1ba      	bne.n	800b4c0 <__swsetup_r+0x30>
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	0781      	lsls	r1, r0, #30
 800b54e:	bf58      	it	pl
 800b550:	6963      	ldrpl	r3, [r4, #20]
 800b552:	60a3      	str	r3, [r4, #8]
 800b554:	e7f4      	b.n	800b540 <__swsetup_r+0xb0>
 800b556:	2000      	movs	r0, #0
 800b558:	e7f7      	b.n	800b54a <__swsetup_r+0xba>
 800b55a:	bf00      	nop
 800b55c:	20000048 	.word	0x20000048
 800b560:	0800c850 	.word	0x0800c850
 800b564:	0800c870 	.word	0x0800c870
 800b568:	0800c830 	.word	0x0800c830

0800b56c <__assert_func>:
 800b56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56e:	4614      	mov	r4, r2
 800b570:	461a      	mov	r2, r3
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <__assert_func+0x2c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4605      	mov	r5, r0
 800b578:	68d8      	ldr	r0, [r3, #12]
 800b57a:	b14c      	cbz	r4, 800b590 <__assert_func+0x24>
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <__assert_func+0x30>)
 800b57e:	9100      	str	r1, [sp, #0]
 800b580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b584:	4906      	ldr	r1, [pc, #24]	; (800b5a0 <__assert_func+0x34>)
 800b586:	462b      	mov	r3, r5
 800b588:	f000 f8e0 	bl	800b74c <fiprintf>
 800b58c:	f000 f9a5 	bl	800b8da <abort>
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <__assert_func+0x38>)
 800b592:	461c      	mov	r4, r3
 800b594:	e7f3      	b.n	800b57e <__assert_func+0x12>
 800b596:	bf00      	nop
 800b598:	20000048 	.word	0x20000048
 800b59c:	0800c9fd 	.word	0x0800c9fd
 800b5a0:	0800ca0a 	.word	0x0800ca0a
 800b5a4:	0800ca38 	.word	0x0800ca38

0800b5a8 <_close_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_close_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f9 fe3d 	bl	8005232 <_close>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_close_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_close_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	200003e4 	.word	0x200003e4

0800b5c8 <__sflush_r>:
 800b5c8:	898a      	ldrh	r2, [r1, #12]
 800b5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	0710      	lsls	r0, r2, #28
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	d458      	bmi.n	800b688 <__sflush_r+0xc0>
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc05      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dc02      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	d0f9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5f4:	682f      	ldr	r7, [r5, #0]
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	d032      	beq.n	800b660 <__sflush_r+0x98>
 800b5fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	075a      	lsls	r2, r3, #29
 800b600:	d505      	bpl.n	800b60e <__sflush_r+0x46>
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	1ac0      	subs	r0, r0, r3
 800b606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b608:	b10b      	cbz	r3, 800b60e <__sflush_r+0x46>
 800b60a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b60c:	1ac0      	subs	r0, r0, r3
 800b60e:	2300      	movs	r3, #0
 800b610:	4602      	mov	r2, r0
 800b612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b614:	6a21      	ldr	r1, [r4, #32]
 800b616:	4628      	mov	r0, r5
 800b618:	47b0      	blx	r6
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	d106      	bne.n	800b62e <__sflush_r+0x66>
 800b620:	6829      	ldr	r1, [r5, #0]
 800b622:	291d      	cmp	r1, #29
 800b624:	d82c      	bhi.n	800b680 <__sflush_r+0xb8>
 800b626:	4a2a      	ldr	r2, [pc, #168]	; (800b6d0 <__sflush_r+0x108>)
 800b628:	40ca      	lsrs	r2, r1
 800b62a:	07d6      	lsls	r6, r2, #31
 800b62c:	d528      	bpl.n	800b680 <__sflush_r+0xb8>
 800b62e:	2200      	movs	r2, #0
 800b630:	6062      	str	r2, [r4, #4]
 800b632:	04d9      	lsls	r1, r3, #19
 800b634:	6922      	ldr	r2, [r4, #16]
 800b636:	6022      	str	r2, [r4, #0]
 800b638:	d504      	bpl.n	800b644 <__sflush_r+0x7c>
 800b63a:	1c42      	adds	r2, r0, #1
 800b63c:	d101      	bne.n	800b642 <__sflush_r+0x7a>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	b903      	cbnz	r3, 800b644 <__sflush_r+0x7c>
 800b642:	6560      	str	r0, [r4, #84]	; 0x54
 800b644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b646:	602f      	str	r7, [r5, #0]
 800b648:	2900      	cmp	r1, #0
 800b64a:	d0ca      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b650:	4299      	cmp	r1, r3
 800b652:	d002      	beq.n	800b65a <__sflush_r+0x92>
 800b654:	4628      	mov	r0, r5
 800b656:	f7ff fc29 	bl	800aeac <_free_r>
 800b65a:	2000      	movs	r0, #0
 800b65c:	6360      	str	r0, [r4, #52]	; 0x34
 800b65e:	e7c1      	b.n	800b5e4 <__sflush_r+0x1c>
 800b660:	6a21      	ldr	r1, [r4, #32]
 800b662:	2301      	movs	r3, #1
 800b664:	4628      	mov	r0, r5
 800b666:	47b0      	blx	r6
 800b668:	1c41      	adds	r1, r0, #1
 800b66a:	d1c7      	bne.n	800b5fc <__sflush_r+0x34>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0c4      	beq.n	800b5fc <__sflush_r+0x34>
 800b672:	2b1d      	cmp	r3, #29
 800b674:	d001      	beq.n	800b67a <__sflush_r+0xb2>
 800b676:	2b16      	cmp	r3, #22
 800b678:	d101      	bne.n	800b67e <__sflush_r+0xb6>
 800b67a:	602f      	str	r7, [r5, #0]
 800b67c:	e7b1      	b.n	800b5e2 <__sflush_r+0x1a>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	e7ad      	b.n	800b5e4 <__sflush_r+0x1c>
 800b688:	690f      	ldr	r7, [r1, #16]
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d0a9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b68e:	0793      	lsls	r3, r2, #30
 800b690:	680e      	ldr	r6, [r1, #0]
 800b692:	bf08      	it	eq
 800b694:	694b      	ldreq	r3, [r1, #20]
 800b696:	600f      	str	r7, [r1, #0]
 800b698:	bf18      	it	ne
 800b69a:	2300      	movne	r3, #0
 800b69c:	eba6 0807 	sub.w	r8, r6, r7
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	f1b8 0f00 	cmp.w	r8, #0
 800b6a6:	dd9c      	ble.n	800b5e2 <__sflush_r+0x1a>
 800b6a8:	6a21      	ldr	r1, [r4, #32]
 800b6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6ac:	4643      	mov	r3, r8
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b0      	blx	r6
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	dc06      	bgt.n	800b6c6 <__sflush_r+0xfe>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c4:	e78e      	b.n	800b5e4 <__sflush_r+0x1c>
 800b6c6:	4407      	add	r7, r0
 800b6c8:	eba8 0800 	sub.w	r8, r8, r0
 800b6cc:	e7e9      	b.n	800b6a2 <__sflush_r+0xda>
 800b6ce:	bf00      	nop
 800b6d0:	20400001 	.word	0x20400001

0800b6d4 <_fflush_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	690b      	ldr	r3, [r1, #16]
 800b6d8:	4605      	mov	r5, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	b913      	cbnz	r3, 800b6e4 <_fflush_r+0x10>
 800b6de:	2500      	movs	r5, #0
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	b118      	cbz	r0, 800b6ee <_fflush_r+0x1a>
 800b6e6:	6983      	ldr	r3, [r0, #24]
 800b6e8:	b90b      	cbnz	r3, 800b6ee <_fflush_r+0x1a>
 800b6ea:	f7fe ff97 	bl	800a61c <__sinit>
 800b6ee:	4b14      	ldr	r3, [pc, #80]	; (800b740 <_fflush_r+0x6c>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d11b      	bne.n	800b72c <_fflush_r+0x58>
 800b6f4:	686c      	ldr	r4, [r5, #4]
 800b6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ef      	beq.n	800b6de <_fflush_r+0xa>
 800b6fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b700:	07d0      	lsls	r0, r2, #31
 800b702:	d404      	bmi.n	800b70e <_fflush_r+0x3a>
 800b704:	0599      	lsls	r1, r3, #22
 800b706:	d402      	bmi.n	800b70e <_fflush_r+0x3a>
 800b708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70a:	f7ff f82a 	bl	800a762 <__retarget_lock_acquire_recursive>
 800b70e:	4628      	mov	r0, r5
 800b710:	4621      	mov	r1, r4
 800b712:	f7ff ff59 	bl	800b5c8 <__sflush_r>
 800b716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b718:	07da      	lsls	r2, r3, #31
 800b71a:	4605      	mov	r5, r0
 800b71c:	d4e0      	bmi.n	800b6e0 <_fflush_r+0xc>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	059b      	lsls	r3, r3, #22
 800b722:	d4dd      	bmi.n	800b6e0 <_fflush_r+0xc>
 800b724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b726:	f7ff f81d 	bl	800a764 <__retarget_lock_release_recursive>
 800b72a:	e7d9      	b.n	800b6e0 <_fflush_r+0xc>
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <_fflush_r+0x70>)
 800b72e:	429c      	cmp	r4, r3
 800b730:	d101      	bne.n	800b736 <_fflush_r+0x62>
 800b732:	68ac      	ldr	r4, [r5, #8]
 800b734:	e7df      	b.n	800b6f6 <_fflush_r+0x22>
 800b736:	4b04      	ldr	r3, [pc, #16]	; (800b748 <_fflush_r+0x74>)
 800b738:	429c      	cmp	r4, r3
 800b73a:	bf08      	it	eq
 800b73c:	68ec      	ldreq	r4, [r5, #12]
 800b73e:	e7da      	b.n	800b6f6 <_fflush_r+0x22>
 800b740:	0800c850 	.word	0x0800c850
 800b744:	0800c870 	.word	0x0800c870
 800b748:	0800c830 	.word	0x0800c830

0800b74c <fiprintf>:
 800b74c:	b40e      	push	{r1, r2, r3}
 800b74e:	b503      	push	{r0, r1, lr}
 800b750:	4601      	mov	r1, r0
 800b752:	ab03      	add	r3, sp, #12
 800b754:	4805      	ldr	r0, [pc, #20]	; (800b76c <fiprintf+0x20>)
 800b756:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75a:	6800      	ldr	r0, [r0, #0]
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	f7ff fcaf 	bl	800b0c0 <_vfiprintf_r>
 800b762:	b002      	add	sp, #8
 800b764:	f85d eb04 	ldr.w	lr, [sp], #4
 800b768:	b003      	add	sp, #12
 800b76a:	4770      	bx	lr
 800b76c:	20000048 	.word	0x20000048

0800b770 <_lseek_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d07      	ldr	r5, [pc, #28]	; (800b790 <_lseek_r+0x20>)
 800b774:	4604      	mov	r4, r0
 800b776:	4608      	mov	r0, r1
 800b778:	4611      	mov	r1, r2
 800b77a:	2200      	movs	r2, #0
 800b77c:	602a      	str	r2, [r5, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	f7f9 fd7e 	bl	8005280 <_lseek>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_lseek_r+0x1e>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_lseek_r+0x1e>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	200003e4 	.word	0x200003e4

0800b794 <__swhatbuf_r>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	460e      	mov	r6, r1
 800b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	b096      	sub	sp, #88	; 0x58
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	461d      	mov	r5, r3
 800b7a4:	da08      	bge.n	800b7b8 <__swhatbuf_r+0x24>
 800b7a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	602a      	str	r2, [r5, #0]
 800b7ae:	061a      	lsls	r2, r3, #24
 800b7b0:	d410      	bmi.n	800b7d4 <__swhatbuf_r+0x40>
 800b7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b6:	e00e      	b.n	800b7d6 <__swhatbuf_r+0x42>
 800b7b8:	466a      	mov	r2, sp
 800b7ba:	f000 f895 	bl	800b8e8 <_fstat_r>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	dbf1      	blt.n	800b7a6 <__swhatbuf_r+0x12>
 800b7c2:	9a01      	ldr	r2, [sp, #4]
 800b7c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7cc:	425a      	negs	r2, r3
 800b7ce:	415a      	adcs	r2, r3
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	e7ee      	b.n	800b7b2 <__swhatbuf_r+0x1e>
 800b7d4:	2340      	movs	r3, #64	; 0x40
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	b016      	add	sp, #88	; 0x58
 800b7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7e0 <__smakebuf_r>:
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7e4:	079d      	lsls	r5, r3, #30
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	d507      	bpl.n	800b7fc <__smakebuf_r+0x1c>
 800b7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	6163      	str	r3, [r4, #20]
 800b7f8:	b002      	add	sp, #8
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	ab01      	add	r3, sp, #4
 800b7fe:	466a      	mov	r2, sp
 800b800:	f7ff ffc8 	bl	800b794 <__swhatbuf_r>
 800b804:	9900      	ldr	r1, [sp, #0]
 800b806:	4605      	mov	r5, r0
 800b808:	4630      	mov	r0, r6
 800b80a:	f7ff fbbb 	bl	800af84 <_malloc_r>
 800b80e:	b948      	cbnz	r0, 800b824 <__smakebuf_r+0x44>
 800b810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b814:	059a      	lsls	r2, r3, #22
 800b816:	d4ef      	bmi.n	800b7f8 <__smakebuf_r+0x18>
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	f043 0302 	orr.w	r3, r3, #2
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	e7e3      	b.n	800b7ec <__smakebuf_r+0xc>
 800b824:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <__smakebuf_r+0x7c>)
 800b826:	62b3      	str	r3, [r6, #40]	; 0x28
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	6020      	str	r0, [r4, #0]
 800b82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	9b00      	ldr	r3, [sp, #0]
 800b834:	6163      	str	r3, [r4, #20]
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	6120      	str	r0, [r4, #16]
 800b83a:	b15b      	cbz	r3, 800b854 <__smakebuf_r+0x74>
 800b83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 f863 	bl	800b90c <_isatty_r>
 800b846:	b128      	cbz	r0, 800b854 <__smakebuf_r+0x74>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f023 0303 	bic.w	r3, r3, #3
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	89a0      	ldrh	r0, [r4, #12]
 800b856:	4305      	orrs	r5, r0
 800b858:	81a5      	strh	r5, [r4, #12]
 800b85a:	e7cd      	b.n	800b7f8 <__smakebuf_r+0x18>
 800b85c:	0800a5b5 	.word	0x0800a5b5

0800b860 <__ascii_mbtowc>:
 800b860:	b082      	sub	sp, #8
 800b862:	b901      	cbnz	r1, 800b866 <__ascii_mbtowc+0x6>
 800b864:	a901      	add	r1, sp, #4
 800b866:	b142      	cbz	r2, 800b87a <__ascii_mbtowc+0x1a>
 800b868:	b14b      	cbz	r3, 800b87e <__ascii_mbtowc+0x1e>
 800b86a:	7813      	ldrb	r3, [r2, #0]
 800b86c:	600b      	str	r3, [r1, #0]
 800b86e:	7812      	ldrb	r2, [r2, #0]
 800b870:	1e10      	subs	r0, r2, #0
 800b872:	bf18      	it	ne
 800b874:	2001      	movne	r0, #1
 800b876:	b002      	add	sp, #8
 800b878:	4770      	bx	lr
 800b87a:	4610      	mov	r0, r2
 800b87c:	e7fb      	b.n	800b876 <__ascii_mbtowc+0x16>
 800b87e:	f06f 0001 	mvn.w	r0, #1
 800b882:	e7f8      	b.n	800b876 <__ascii_mbtowc+0x16>

0800b884 <__malloc_lock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_lock+0x8>)
 800b886:	f7fe bf6c 	b.w	800a762 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	200003d8 	.word	0x200003d8

0800b890 <__malloc_unlock>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__malloc_unlock+0x8>)
 800b892:	f7fe bf67 	b.w	800a764 <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	200003d8 	.word	0x200003d8

0800b89c <_read_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d07      	ldr	r5, [pc, #28]	; (800b8bc <_read_r+0x20>)
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	4608      	mov	r0, r1
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f7f9 fca4 	bl	80051f8 <_read>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_read_r+0x1e>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_read_r+0x1e>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	200003e4 	.word	0x200003e4

0800b8c0 <__ascii_wctomb>:
 800b8c0:	b149      	cbz	r1, 800b8d6 <__ascii_wctomb+0x16>
 800b8c2:	2aff      	cmp	r2, #255	; 0xff
 800b8c4:	bf85      	ittet	hi
 800b8c6:	238a      	movhi	r3, #138	; 0x8a
 800b8c8:	6003      	strhi	r3, [r0, #0]
 800b8ca:	700a      	strbls	r2, [r1, #0]
 800b8cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b8d0:	bf98      	it	ls
 800b8d2:	2001      	movls	r0, #1
 800b8d4:	4770      	bx	lr
 800b8d6:	4608      	mov	r0, r1
 800b8d8:	4770      	bx	lr

0800b8da <abort>:
 800b8da:	b508      	push	{r3, lr}
 800b8dc:	2006      	movs	r0, #6
 800b8de:	f000 f84d 	bl	800b97c <raise>
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	f7f9 fc7e 	bl	80051e4 <_exit>

0800b8e8 <_fstat_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d07      	ldr	r5, [pc, #28]	; (800b908 <_fstat_r+0x20>)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	f7f9 fca8 	bl	800524a <_fstat>
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	d102      	bne.n	800b904 <_fstat_r+0x1c>
 800b8fe:	682b      	ldr	r3, [r5, #0]
 800b900:	b103      	cbz	r3, 800b904 <_fstat_r+0x1c>
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	bd38      	pop	{r3, r4, r5, pc}
 800b906:	bf00      	nop
 800b908:	200003e4 	.word	0x200003e4

0800b90c <_isatty_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d06      	ldr	r5, [pc, #24]	; (800b928 <_isatty_r+0x1c>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	602b      	str	r3, [r5, #0]
 800b918:	f7f9 fca7 	bl	800526a <_isatty>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_isatty_r+0x1a>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_isatty_r+0x1a>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	200003e4 	.word	0x200003e4

0800b92c <_raise_r>:
 800b92c:	291f      	cmp	r1, #31
 800b92e:	b538      	push	{r3, r4, r5, lr}
 800b930:	4604      	mov	r4, r0
 800b932:	460d      	mov	r5, r1
 800b934:	d904      	bls.n	800b940 <_raise_r+0x14>
 800b936:	2316      	movs	r3, #22
 800b938:	6003      	str	r3, [r0, #0]
 800b93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b942:	b112      	cbz	r2, 800b94a <_raise_r+0x1e>
 800b944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b948:	b94b      	cbnz	r3, 800b95e <_raise_r+0x32>
 800b94a:	4620      	mov	r0, r4
 800b94c:	f000 f830 	bl	800b9b0 <_getpid_r>
 800b950:	462a      	mov	r2, r5
 800b952:	4601      	mov	r1, r0
 800b954:	4620      	mov	r0, r4
 800b956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b95a:	f000 b817 	b.w	800b98c <_kill_r>
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d00a      	beq.n	800b978 <_raise_r+0x4c>
 800b962:	1c59      	adds	r1, r3, #1
 800b964:	d103      	bne.n	800b96e <_raise_r+0x42>
 800b966:	2316      	movs	r3, #22
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	2001      	movs	r0, #1
 800b96c:	e7e7      	b.n	800b93e <_raise_r+0x12>
 800b96e:	2400      	movs	r4, #0
 800b970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b974:	4628      	mov	r0, r5
 800b976:	4798      	blx	r3
 800b978:	2000      	movs	r0, #0
 800b97a:	e7e0      	b.n	800b93e <_raise_r+0x12>

0800b97c <raise>:
 800b97c:	4b02      	ldr	r3, [pc, #8]	; (800b988 <raise+0xc>)
 800b97e:	4601      	mov	r1, r0
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f7ff bfd3 	b.w	800b92c <_raise_r>
 800b986:	bf00      	nop
 800b988:	20000048 	.word	0x20000048

0800b98c <_kill_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	; (800b9ac <_kill_r+0x20>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	f7f9 fc13 	bl	80051c4 <_kill>
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	d102      	bne.n	800b9a8 <_kill_r+0x1c>
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	b103      	cbz	r3, 800b9a8 <_kill_r+0x1c>
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	bd38      	pop	{r3, r4, r5, pc}
 800b9aa:	bf00      	nop
 800b9ac:	200003e4 	.word	0x200003e4

0800b9b0 <_getpid_r>:
 800b9b0:	f7f9 bc00 	b.w	80051b4 <_getpid>

0800b9b4 <_init>:
 800b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b6:	bf00      	nop
 800b9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ba:	bc08      	pop	{r3}
 800b9bc:	469e      	mov	lr, r3
 800b9be:	4770      	bx	lr

0800b9c0 <_fini>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	bf00      	nop
 800b9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c6:	bc08      	pop	{r3}
 800b9c8:	469e      	mov	lr, r3
 800b9ca:	4770      	bx	lr
